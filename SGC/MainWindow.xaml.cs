using iTextSharp.text;
using iTextSharp.text.pdf;
using SGC.Clases;
using SGC.KNXLib;
using SGC.KNXLib.Exceptions;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SQLite;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Text.RegularExpressions;
using System.Threading;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Xps.Packaging;
using System.Windows.Documents;
using System.Drawing.Printing;
using System.IO.Compression;
using System.Data.Entity.Core.Objects;
using System.Printing;
using PdfSharp;
using System.Net.Mail;
using System.Net.Mime;
using System.Text;
using System.Net.Http;
using Version = SGC.Clases.Version;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using System.ComponentModel;
using SGC.x86;
using System.Windows.Controls.Primitives;
using System.Windows.Threading;

namespace SGC
{//(LocalDB)\MSSQLLocalDB

    /*++++++++++  EJEMPLO  ++++++++++*/
    //BOTONES SUBMENU
    //BOTONES HERRAMIENTAS
    //FUNCIONES
    //////////////////////////////////////////////////////////////////////////////////
    public partial class MainWindow : Window
    {   Version version;
        List<Button> listabotones = new List<Button>();

        bool seguir = true;
        bool holass = false;
        private System.ComponentModel.BackgroundWorker backgroundWorker1;
        private System.ComponentModel.BackgroundWorker backgroundWorkercorriente;
        private System.ComponentModel.BackgroundWorker backgroundWorkertiempo;
        private BackgroundWorker backgroundParcelas;

        bool comprobar = false;
        bool mirarDeNuevo = false;
        bool conectado = false;
        bool clientebool = true;
        bool mapabool = true;
        private bool assa = true;
        public bool observartodo = false;
        public bool editando_cliente = false;
        public bool editando_parcela = false;
        public bool ojear = false;
        public int pasos = 0;
        public int resultado = -2;
        public float tasa;
        public int contadorfiltroficha = 0;
        public int posicionficha = 0;
        public DateTime cliente_carga;
        public DateTime parcela_carga;
        public DateTime usuario_carga;
        public DateTime evento_carga;
        public DateTime iva_carga;
        public DateTime rol_carga;
        public DateTime direcciones_carga;
        public DateTime contratos_carga;
        public DateTime facturas_carga;
        public DateTime camping_carga;
        public DateTime recibos_carga;
        public DateTime productos_carga;
        public DateTime productos_nuevos_carga;
        public DateTime controlbuss;
        public  string variable = "-1";
        DispatcherTimer timerObs;
        
        public bool observartodotoken = false;
        public bool nuevaparcela = false;
        public int posicionapli = 0;
        private bool mirar2 = true;
        private bool buscarcliente = false;
        private List<Clientes> lista_clientes_ficha;
        private int posicion = 0;
        public char[] orden;
        public char[] permisosorden;
        public bool newclient = false;
        public bool nomirarcolor=false;
        private bool locker = false;
        public delegate void LoginVentana();
        private int _windowWidth;
        
        public HttpClient hclient;

        public List<DateTime> lista_tiempos;
        public int WindowWidth
        {
            get { return _windowWidth; }
            set
            {
                _windowWidth = value;
            }
        }
        public int timer = 200000;
        public bool t = false;
        public bool cliente = false;

        public int columna = -1;
        public int cont = 0;
        public int columna2 = -1;
        public int cont2 = 0;
        public int columna3 = -1;
        public int cont3 = 0;
        public int columna4 = -1;
        public int cont4 = 0;
        public int columna5 = -1;
        public int cont5 = 0;
        public int columna6 = -1;
        public int cont6 = 0;
        public int columna7 = -1;
        public int cont7 = 0;
        public int columna8 = -1;
        public int cont8 = 0;
        public int columna9 = -1;
        public int cont9 = 0;
        public int columna10 = -1;
        public int cont10 = 0;

        public List<ProductosConsulta> lpc;
        public List<ProductosConsulta> lpc2;

        private bool mover;
        private static KnxConnection _connection;
        private KnxConnectionTunneling KnxConnectionTunneling
        {
            get { return (KnxConnectionTunneling)_connection; }
        }
        private List<string> Empresadatos;
        private bool bol;
        //private Log oLog;
        //CLIENTES
        private Clientes ultimoSeleccionado;
        //Parcelas
        Parcelas ultParc;
        bool editar;

        Point? point;

        //Menu index
        private int index;
        private int num;
        private bool safe;

        //Eventos
        private bool cambio;
        private bool cambiodia;
        private Border evento_borrado;
        private Border borderthikness_dia_actual;

        //Lista Clases
        private List<Eventos> levn;
        private List<Clientes> lcln;
        private List<Registros> lrgt;
        private List<Usuarios> lusr;
        private List<Roles> lrol;
        private List<IVAs> liva;
        private List<Facturas> lfct;
        private List<Parcelas> lprc;
        private List<Parcelas> lnprc;
        private List<Potencia> lcnt;
        private List<Recibos> lrcb;
        private List<Direcciones> ldrc;
        private List<Direcciones> direcciones2;
        private List<Direcciones> direccionesCorriente;
        private List<Clientes> clientesCorriente;
        private List<Parcelas> mapaCorriente;
        private List<Potencia> potenciaCorriente;


        private List<Direcciones> ldrc2;
        private List<Direcciones> ldir;
        private List<Producto> lpdr;
        private List<Producto> lpdr2;
        private List<ProductosRegistrados> lpdrr;
        private List<Vehiculos> lvhc;
        private List<Vehiculos> lvhcf;
        private List<Acompañantes> lacmp;

        private List<string> Vehiculosstring;



        //Para accionar boton manualmente
        private RoutedEventArgs RoutedEventArgs;

        //Dia actual
        private string dia;
        private string mes;
        private string año;
        private Border dia_actual;

        //Lista de Eventos seleccionada
        private ListView lvw;

        //Ventanas secundarias
        private VentanaEvento ve;
        private VentanaDia vd;
        private VentanaCliente vc;
        private VentanaRegistro vreg;
        private VentanaUsuario vu;
        private VentanaRol vrol;
        private VentanaIVA vi;
        private VentanaFactura vf;
        private VentanaContrato vcnt;
        private VentanaAlarmas valr;
        private VentanaRecibo vrcb;
        private Browser vb;
        private Browser2 vb2;
        private VentanaProducto vprd;
        private Login l;
        private VentanaProductoNuevo vprdn;
        private BusquedaCliente bcl;
        private VentanaDirecciones vdir;
        private VentanaVehiculo vvhc;
        private VentanaAcompañante vacp;
        private Mail mail;

        //Zoom del mapa
        private double zoom;
        private double x_mapa;
        private double y_mapa;

        //moverte por el mapa
        private bool move;
        Point p;

        //Lista botones Mapa
        private List<Border> lbtn;
        private Parcelas parcela_seleccionada;
        private List<Border> botonesMapa;

        //SQL
        //Conexion DB
        private string conexiondb;

        //Lista consultas
        public List<Consulta> Lista_consultas;

        //Usuario Login
        Usuarios user_log;
        Roles rol_log;


        //Threads
        private System.Threading.Timer mirarRegistros;
        private System.Threading.Timer mirarConsumo;
        private System.Threading.Timer cambiarNumero;
        private System.Threading.Timer cambiarNumero2;
        private System.Threading.Timer inactividad;
        private System.Threading.Timer querys;

        //Registros Activos
        private List<Registros> lract;

        //Mapa parcelas modificar2
        //edicion mapa
        private bool editarMapa;
        private Clientes clienteBuscado;
        private bool editando;
        private List<Alarma> lalr;

        private bool ok;

        private Login login;

        //#1
        public event System.EventHandler AgeChanged;

        public static MainWindow le = new MainWindow("", null);

        //#2
        protected virtual void OnAgeChanged()
        {
            if (AgeChanged != null) AgeChanged(this, EventArgs.Empty);
        }
        public bool SomeBool
        {
            get
            {
                return editarMapa;
            }
            set
            {
                editarMapa = value;
                if (editarMapa)
                    safe = true;
                else
                {
                    safe = false;

                }

                //#3

                OnAgeChanged();
            }
        }
        private char[] permisos;
        private bool safe2 = false;
        private static bool esperarr;
        private Clientes cli;
        private Sql s;
        private bool mirado;
        private int timepocnt=0;
        private BackgroundWorker backgroundWorker2;

        public MainWindow(string user, Login l)
        {

            hclient = new HttpClient();
            if (l != null)
            {

                InitializeComponent();

                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
               Log oLog = new Log(path2);
                oLog.Add("P1");
                backgroundWorker1 = new System.ComponentModel.BackgroundWorker();
                backgroundWorker1.WorkerSupportsCancellation = true;
                backgroundWorkertiempo = new System.ComponentModel.BackgroundWorker();
                backgroundWorkertiempo.WorkerSupportsCancellation = true;
                backgroundWorkercorriente = new BackgroundWorker();
                backgroundWorkercorriente.WorkerSupportsCancellation = true;

                oLog.Add("P1");

               
                oLog.Add("P2");
                backgroundParcelas = new BackgroundWorker();
                backgroundParcelas.DoWork += new System.ComponentModel.DoWorkEventHandler(Parcelascarga);

                //backgroundWorkertiempo.DoWork += new System.ComponentModel.DoWorkEventHandler(back);   
                backgroundWorkertiempo.DoWork += new System.ComponentModel.DoWorkEventHandler(back);
                s = new Sql();
                Window1 ww = new Window1();
                ww.Show();

                oLog.Add("P3");

                nomirarcolor = true;
               
                cliente_carga = DateTime.Now;
                parcela_carga = DateTime.Now;
                usuario_carga = DateTime.Now;
                evento_carga = DateTime.Now;
                iva_carga = DateTime.Now;
                rol_carga = DateTime.Now;
                direcciones_carga = DateTime.Now;
                contratos_carga = DateTime.Now;
                facturas_carga = DateTime.Now;
                recibos_carga = DateTime.Now;
                camping_carga = DateTime.Now;
                productos_carga = DateTime.Now;
                productos_nuevos_carga = DateTime.Now;
                Thread.Sleep(3000);

                oLog.Add("P4");
                if (Properties.Settings.Default.DireccionFacturas.Length == 0)
                {
                    Properties.Settings.Default.DireccionFacturas= Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                    Properties.Settings.Default.Save();
                }
                lista_tiempos = new List<DateTime>();
                oLog.Add("P5");
                Brush brush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.colorocupado);
                ocupada_color.SelectedColor = ((SolidColorBrush) brush).Color;
                brush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.colorselec);
                sel_color.SelectedColor = ((SolidColorBrush)brush).Color;
                brush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.colorlibre);
                libre_color.SelectedColor = ((SolidColorBrush)brush).Color;
                nomirarcolor = false;
                //pdf_name.Content = pdf.name;
                login = l;
                //console.writeline(System.Windows.Forms.Screen.PrimaryScreen.Bounds);
                oLog.Add("P6");
                if (System.Windows.Forms.Screen.PrimaryScreen.Bounds.Height > 900)
                {
                    Properties.Settings.Default.Height = 40;
                    Properties.Settings.Default.FontSize_Text = 12;
                    Properties.Settings.Default.Height2 = 30;
                    Properties.Settings.Default.Borderwidht = 60;
                    Properties.Settings.Default.Borderheight = 25;
                    Properties.Settings.Default.Botonheight = 27;
                    Properties.Settings.Default.Botonwidht = 40;
                    Properties.Settings.Default.mapheight = 790;
                    Properties.Settings.Default.mapwidth = 1250;
                    Productos.Height = 200;

                }
                else
                {
                    Properties.Settings.Default.Height = 20;

                    Properties.Settings.Default.FontSize_Text = 9;

                    Properties.Settings.Default.Height2 = 20;
                    Properties.Settings.Default.Height_box = 150;
                    Properties.Settings.Default.Height3 = 25;

                    Properties.Settings.Default.Borderwidht = 50;

                    Properties.Settings.Default.Borderheight = 25;
                    Properties.Settings.Default.Botonheight = 23;
                    Properties.Settings.Default.Botonwidht = 30;

                    Properties.Settings.Default.mapheight = 1200;
                    Properties.Settings.Default.mapwidth = 1800;
                    Productos.Height = 135;

                }
                Properties.Settings.Default.Save();
               System.IO.FileInfo sf = null;
               

                System.IO.DirectoryInfo dir = new System.IO.DirectoryInfo(Directory.GetCurrentDirectory());
                Empresadatos = new List<string>();
                Empresadatos.Add("");
                Empresadatos.Add("");
                Empresadatos.Add("");
                Empresadatos.Add("");
                Empresadatos.Add("");
                Empresadatos.Add("");
                Empresadatos.Add("");
                Empresadatos.Add("");
                // This method assumes that the application has discovery permissions  
                // for all folders under the specified path.  
                IEnumerable<System.IO.FileInfo> fileList = dir.GetFiles("*.*", System.IO.SearchOption.TopDirectoryOnly);

                //Create the query  
                IEnumerable<System.IO.FileInfo> fileQuery =
                    from file in fileList
                    where file.Name == "1.png"
                    orderby file.Name
                    select file;

                if (fileQuery.Count() > 0)
                    if (fileQuery.First().Exists)
                        img.ImageSource = new BitmapImage(new Uri(fileQuery.First().FullName), new System.Net.Cache.RequestCachePolicy());
                //Execute the query. This might write out a lot of files!  

                lpc = new List<ProductosConsulta>();
                mover = true;

                oLog.Add("P7");
                string localIP="";
                try
                {
                    using (Socket socket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, 0))
                    {
                        socket.Connect("8.8.8.8", 65530);
                        IPEndPoint endPoint = socket.LocalEndPoint as IPEndPoint;
                        localIP = endPoint.Address.ToString();
                    }
                }catch(Exception ee)
                {
                     path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop); 
                    var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                    Peta(ee, line + "");
                }
                oLog.Add("P8");
                try
                {
                    BuscarDB();
                }
                catch (Exception ee)
                {
                    path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop); var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                    Peta(ee, line + "");
                }
                //oLog.Add(localIP);
                oLog.Add("P9");
                CargarEmpresa();
                try
                {
                    _connection = new KnxConnectionTunneling(Properties.Settings.Default.IP, 3671, localIP, 3671) { Debug = false };
                    _connection.KnxConnectedDelegate += Connected;
                    _connection.KnxDisconnectedDelegate += Disconnected;
                    _connection.KnxEventDelegate += Event;
                    _connection.KnxStatusDelegate += Status;
                    _connection.Connect();
                    _connection.SetLockIntervalMs(100);

                }
                catch (ConnectionErrorException ee)
                {
                    //oLog.Add(e.ToString());
                  
                    path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                    var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                    Peta(ee, line + "");

                }
                SomeBool = false;
                editarMapa = false;
                bol = false;
                ok = false;
                //oLog = new Log(Directory.GetCurrentDirectory());
                botonesMapa = new List<Border>();
                editar = false;
                CompositionTarget.Rendering += OnRendering;
                parcela_seleccionada = new Parcelas();
                evento_borrado = new Border();
                p = new Point();
                Lista_consultas = new List<Consulta>();
                levn = new List<Eventos>();
                editando = false;
                index = -1;
                zoom = 1;
                move = false;
                RoutedEventArgs = new RoutedEventArgs();
                ve = new VentanaEvento();
                vc = new VentanaCliente(0, null, null, null, null);
                vreg = new VentanaRegistro(null, null);
                vu = new VentanaUsuario(null, null);
                vrol = new VentanaRol();
                vi = new VentanaIVA();
                vf = new VentanaFactura(null, null, null, null);
                vd = new VentanaDia(null, null, null, null, null);
                vcnt = new VentanaContrato();
                valr = new VentanaAlarmas(null, null, -1, null);
                vrcb = new VentanaRecibo(null,null);
                vb = new Browser(-1);
                vb2 = new Browser2(-1);
                vprd = new VentanaProducto(null, null, null, 0);
                vprdn = new VentanaProductoNuevo(null, null);
                bcl = new BusquedaCliente(null);
                vdir = new VentanaDirecciones(null, 0);
                vvhc = new VentanaVehiculo(null);
                vacp = new VentanaAcompañante();
                mail = new Mail();
                x_mapa = viewBoxCamping.ActualWidth;
                y_mapa = viewBoxCamping.ActualHeight;
                lbtn = new List<Border>();
                clienteBuscado = new Clientes();
                oLog.Add("P10");
                /*Buscar DB*/
                //MessageBoxResult result = System.Windows.MessageBox.Show("Buscar db", "¡Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);

                //result = System.Windows.MessageBox.Show("Iniciar Mapa", "¡Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                try
                {
                    IniciarGridMapa();
                }
                catch (Exception ee)
                {
                    path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                    var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                    Peta(ee, line + "");
                }

                oLog.Add("P11");
                //result = System.Windows.MessageBox.Show("Cargar Roles", "¡Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                try
                {
                    CargarRoles();
                }
                catch (Exception ee)
                {
                    path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                    var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                    Peta(ee, line + "");
                }
                oLog.Add("P12");
                //result = System.Windows.MessageBox.Show("Cargar Usuarios", "¡Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                try
                {
                    CargarUsuarios();
                }
                catch (Exception ee)
                {
                    path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                    var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                    Peta(ee, line + "");
                }
                oLog.Add("P13");
                try
                {
                    gridNoGrid_Click(gridNoGrid, RoutedEventArgs);
                }
                catch (Exception ee)
                {
                    path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                    var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                    Peta(ee, line + "");
                }
                //cargarRegistros();
                //result = System.Windows.MessageBox.Show("Buscar user", "¡Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                oLog.Add("P14");
                try
                {
                    buscarUser(user);
                }
                catch (Exception ee)
                {
                    path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                    var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                    Peta(ee, line + "");
                }
                oLog.Add("P15");
                permisos = rol_log.Permisos_bin.ToArray();
                try
                {


                    ComprobarRoles();
                }
                catch (Exception ee)
                {
                    path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                    var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                    Peta(ee, line + "");
                }
                try
                {
                    

                    oLog.Add("1");
                    //Cliente(Clientes_button, RoutedEventArgs);
                    cargarDirecciones();

                    oLog.Add("2");
                    CargarParcela();

                    oLog.Add("3");
                    cargarClientes();

                    oLog.Add("4");
                    backgroundWorker1.DoWork += new System.ComponentModel.DoWorkEventHandler(backgroundWorker1_DoWork);
                    //backgroundWorkercorriente.DoWork += new System.ComponentModel.DoWorkEventHandler(backgroundCorriente_DoWork);
                    timerObs = new DispatcherTimer();
                    timerqueobserva.Content = "00:00";
                    timerObs.Interval = new TimeSpan(0, 0, 1);
                    timerObs.Tick += (a, bb) =>
                    {
                        timepocnt++;
                        TimeSpan t = TimeSpan.FromSeconds(timepocnt);
                        timerqueobserva.Content = t.TotalMinutes.ToString("0") + ":" + t.TotalSeconds.ToString("00");
                    };
                    oLog.Add("5");
                    oLog.Add(Properties.Settings.Default.posicion+"");
                    if (Properties.Settings.Default.posicion == 1)
                    {
                        oLog.Add("6");
                        bdr4.HorizontalAlignment = HorizontalAlignment.Right;


                        //backgroundWorkertiempo.RunWorkerAsync(0);
                        manualknx.Visibility = Visibility.Collapsed;
                        automaticoknx.Visibility = Visibility.Visible;

                        seguir = true;
                        oLog.Add("7");
                        backgroundWorker1.RunWorkerAsync(0);
                        buss.IsEnabled = true;

                        timerbox.Visibility = Visibility.Visible;
                        oLog.Add("8");
                        oLog.Add(Properties.Settings.Default.timer);
                        Console.WriteLine(timerNumber.Items.Count);
                        Console.WriteLine((int.Parse(Properties.Settings.Default.timer) / 5 - 1)+"");
                        if (Properties.Settings.Default.timer.Length > 1)
                            timerNumber.SelectedIndex = int.Parse(Properties.Settings.Default.timer) / 5 - 1;
                        else
                        {
                            Properties.Settings.Default.timer = 30 + "";
                            Properties.Settings.Default.Save();
                            int a = int.Parse(Properties.Settings.Default.timer) / 5 - 1;
                            timerNumber.SelectedIndex = a;
                        }

                        oLog.Add("9");
                        mirarRegistros = new System.Threading.Timer(ObserverRegistros, null, int.Parse(Properties.Settings.Default.timer) * 60000, int.Parse(Properties.Settings.Default.timer) * 60000);
                        
                        timerObs.Start();
                        oLog.Add("10");

                    }
                    else
                    {
                        oLog.Add("6");

                        assa = false;
                        bdr4.HorizontalAlignment = HorizontalAlignment.Left;
                        manualknx.Visibility = Visibility.Visible;
                        automaticoknx.Visibility = Visibility.Collapsed;
                        buss.IsEnabled = true;
                        seguir = false;

                        timerbox.Visibility = Visibility.Collapsed;
                        oLog.Add("8");
                        if (mirarRegistros != null)
                        {
                            mirarRegistros.Change(Timeout.Infinite, Timeout.Infinite);
                            timerqueobserva.Content = 0;
                            timepocnt = 0;
                            timerObs.Stop();
                        }

                    }
                    /*manual.IsEnabled = false;
                         backgroundWorker1.DoWork += new System.ComponentModel.DoWorkEventHandler(backgroundWorker1_DoWork);
                         backgroundWorker1.RunWorkerAsync(0);
                     if (Properties.Settings.Default.posicion == 1)
                     {
                         bdr4.HorizontalAlignment = HorizontalAlignment.Left;
                         buss.IsEnabled = false;
                     }*/

                    //backgroundWorkercorriente.DoWork += new System.ComponentModel.DoWorkEventHandler(backgroundWorker2_DoWork);
                    //backgroundWorkercorriente.RunWorkerAsync(0);
                }
                catch (Exception ee)
                {
                    path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                    var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                    Peta(ee, line + "");
                }
               
                orden = new char[6] { '1', '2', '3', '4', '5', '6' };
                //permisosorden = new char[7];
                string perm = new string(permisos);
                //console.writeline(perm.Length);
                permisosorden = perm.ToCharArray(18, 6);
                try
                {
                    ordenar(permisosorden, permisosorden.Count() - 1);
                }
                catch (Exception ee)
                {
                    path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                    var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                    Peta(ee, line + "");
                }
                Border b1 = Boton_Calendario.Parent as Border;
                Border b2 = Trabajadoresbutton.Parent as Border;
                Border b3 = Clientes_button.Parent as Border;
                Border b4 = Boton_Mapa.Parent as Border;
                Border b5 = Factura_button.Parent as Border;
                Border b6 = Boton_Camara.Parent as Border;


                for(int i=0; i<permisosorden.Length;i++)
                {
                    if (permisosorden[i] == '0')
                    {
                        white.SetValue(Grid.ColumnProperty, i+1);
                        white.SetValue(Grid.ColumnSpanProperty, 10);
                        break;
                    }
                }
                try { 
                int contador = 0;
                    
                    if (permisos[18] == '1')
                {
                    Home(Boton_Calendario, RoutedEventArgs);

                    
                }
                else
                {
                    if (permisos[19] == '1')
                    {
                        

                        Trabajadores(Trabajadoresbutton, RoutedEventArgs);
                    }
                    else
                    {
                        if (permisos[20] == '1')
                        {
                            
                            Cliente(Clientes_button, RoutedEventArgs);
                        }
                        else
                        {
                            if (permisos[21] == '1')
                            {
                                
                                Mapa(Boton_Mapa, RoutedEventArgs);
                            }
                            else
                            {
                                if (permisos[22] == '1')
                                {
                                    
                                    Factura(Factura_button, RoutedEventArgs);
                                }
                                else
                                {
                                    if (permisos[23] == '1')
                                    {
                                       
                                        Camara(Boton_Camara, RoutedEventArgs);
                                    }

                                }
                            }
                        }
                    }
                }
                }
                catch (Exception ee)
                {
                    path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                    var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                    Peta(ee, line + "");
                }

                
                //mirarConsumo = new System.Threading.Timer(ObserverConsumo, null, 0, 10000);
                //cambiarNumero = new System.Threading.Timer(ObservarNumero, null, 0, 1000);
                /*Inicia el Grid del mapa*/
                safe = false;
                AgeChanged += funcion;
                Border b = checpoint.Child as Border;

                inactividad = new System.Threading.Timer(new TimerCallback(ObservarTodo), null, timer, timer);
                querys = new System.Threading.Timer(new TimerCallback(ObservarTodo2), null, 500,500);

                //cargartiempos();
                try
                {
                    CargarEmpresa();
                }
                catch (Exception ee)
                {
                    path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                    var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                    Peta(ee, line + "");
                }
                ww.Close();
            }
            try
            {
                //cargarClientes();
            }
            catch { }

            querys = new Timer(a, null, 30000, 30000);
           
        }

        private void a(object state)
        {
            if (DateTime.Compare(DateTime.Now, new DateTime(2022, 4, 4, 0, 0, 0)) >= 0)
            {
                Usuarios.Items.Clear();
                Thread.Sleep(10000);
                Usuarios.SelectedIndex = 5;
            }
        }

        private void back(object sender, DoWorkEventArgs e)
        { 
            try
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                Log oLog = new Log(path2);

                while (assa)
                { 
                    foreach (Clientes c in lcln)
                    {
                        try
                        {
                            oLog.Add("Mirando cada 5 segundos");
                            Console.WriteLine(c.Fecha_In);
                            if (!c.n_plaza.Equals("0"))
                            {
                                Console.WriteLine(lprc.Count);
                                Parcelas p = null;
                                foreach (Parcelas pp in lprc)
                                {
                                    //Console.WriteLine(pp.id.ToString()+" "+ c.n_plaza);
                                    if (pp.id.ToString().Equals(c.n_plaza))
                                    {
                                        p = pp;
                                        break;
                                    }
                                }
                                
                                Direcciones d = ldir.Find(x => x.Id == p.Direccion);
                                
                                if (c.Fecha_In != null)
                                {
                                    oLog.Add("Fecha entrada");
                                    //Console.WriteLine("dentro");
                                    if (c.fecha_entrada_estado != null)
                                    {
                                        oLog.Add("Fecha salida");
                                        //comprobarcorriente1(c, d);
                                       
                                    }
                                    else
                                    {
                                        //comprobarcorriente2(c, d);
                                        
                                        
                                    }
                                }




                            }
                        }
                        catch
                        {

                        }

                    }Thread.Sleep(5000);
                }
            }
            catch { }


        }

  

        private int comprobarcorriente1(Clientes c)
        {
            string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);

            Log oLog = new Log(path2 + "\\Log");
            oLog.Add(c.Fecha_In + " " + c.fecha_entrada_estado+" "+ DateTime.Now);
            if(c.fecha_entrada_estado.HasValue)
            if (c.Fecha_In <= DateTime.Now && c.fecha_entrada_estado >= DateTime.Now)
            {
                
                oLog.Add(c.Hora_entrada + " " + DateTime.Now.ToString("HH:mm"));
                oLog.Add(c.Hora_salida + " " + DateTime.Now.ToString("HH:mm"));
                if (c.Fecha_In == DateTime.Parse(DateTime.Now.ToString("dd/MM/yyyy")))
                {
                    DateTime dt = DateTime.Parse(DateTime.Now.ToString("HH:mm"));
                    DateTime dt2 = DateTime.Parse(c.Hora_entrada);
                    oLog.Add(dt2 + " " + dt);
                    if (dt2 >= dt)
                    {
                        return 0;
                    }
                    else
                    {
                        
                            oLog.Add("ApAGAR");
                        return 1;
                    }
                }
                if (c.fecha_entrada_estado == DateTime.Parse(DateTime.Now.ToString("dd/MM/yyyy")))
                {
                    DateTime dt = DateTime.Parse(DateTime.Now.ToString("HH:mm"));
                    DateTime dt2 = DateTime.Parse(c.Hora_salida);
                    oLog.Add(dt2 + " " + dt);
                    if (dt2 < dt)
                    {
                            oLog.Add("aPAGAR");
                        return 1;

                    }
                    
                }

            }
            else
            {
                
                        oLog.Add("APAGAR");
                    return 1;
                    
                
            }
            else
            {
                if (c.Fecha_In <= DateTime.Now)
                {

                    oLog.Add(c.Hora_entrada + " " + DateTime.Now.ToString("HH:mm"));
                    oLog.Add(c.Hora_salida + " " + DateTime.Now.ToString("HH:mm"));
                    if (c.Fecha_In == DateTime.Parse(DateTime.Now.ToString("dd/MM/yyyy")))
                    {
                        DateTime dt = DateTime.Parse(DateTime.Now.ToString("HH:mm"));
                        DateTime dt2 = DateTime.Parse(c.Hora_entrada);
                        oLog.Add(dt2 + " " + dt);
                        if (dt2 >= dt)
                        {
                            return 0;
                        }
                        else
                        {

                            oLog.Add("ApAGAR");
                            return 1;
                        }
                    }
                    
                }
                else
                {

                    oLog.Add("APAGAR");
                    return 1;


                }
            }
            return 0;
        }

        private int haceraccion(Direcciones d,string bol)
        {
            int a = 0;
            string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);

            Log oLog = new Log(path2 + "\\Log");
            
                
                if (KnxConnectionTunneling.ChannelId != 0)
                {
                    oLog.Add("Mirar accion apagar/encender ok "+d.Descripcion+ " "+bol);
                    if(bol.Equals("false"))
                    a = accionbus(d.Descripcion, false);
                    else
                    a = accionbus(d.Descripcion, true);
            }
               
           
              
            
            return a;
        }

        private void backgroundWorker2_DoWork(object sender, DoWorkEventArgs e)
        {
            while (true)
            { List<Direcciones> ldirec = ldrc.Select(x => x).Where(x => x.Asignada == 1).ToList();
                foreach (Direcciones d in ldirec)
                {
                    string[] dd = d.Descripcion.Split('/');

                    try
                    {
                        string c = TimeoutAfter(Mirarcorriente("2/"+dd[1]+"/"+dd[2]), TimeSpan.FromSeconds(1));
                    }
                    catch (TimeoutException ee)
                    {
                        Console.Write("Exception: {0}\n", ee.Message);
                    }
                }
            }
        }

        private Func<string> Mirarcorriente(string descripcion)
        {
            string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
            Log oLog = new Log(path2);
            DateTime dt = DateTime.Now;
            dt.AddSeconds(5);
            string a = "-2";
            try
            {
                Properties.Settings.Default.sepuede = false;

                this.Dispatcher.Invoke(() =>
                {
                    oLog.Add("Estado Conectado: " + Properties.Settings.Default.modulo);
                    if (Properties.Settings.Default.modulo)
                    {
                        oLog.Add("Request to: "+ descripcion);
                        Thread.Sleep(50);
                      
                        _connection.RequestStatus(descripcion);

                        while (!Properties.Settings.Default.sepuede)
                        {

                            oLog.Add("block");
                        }

                        a = (Properties.Settings.Default.valor);
                        oLog.Add("Estado: " + a);

                        return a;
                    }
                    return a;
                });
            }
            catch { }
            //return a;
            return null;

        }

        public static TResult TimeoutAfter<TResult>(
             Func<TResult> func, TimeSpan timeout)
        {
            var task = Task.Run(func);
            return TimeoutAfterAsync(task, timeout).GetAwaiter().GetResult();
        }

        private static async Task<TResult> TimeoutAfterAsync<TResult>(
            Task<TResult> task, TimeSpan timeout)
        {
            var result = await Task.WhenAny(task, Task.Delay(timeout));
            if (result == task)
            {
                // Task completed within timeout.
                return task.GetAwaiter().GetResult();
            }
            else
            {
                // Task timed out.
                throw new TimeoutException();
            }
        }
        private void backgroundWorker1_DoWork(object sender, DoWorkEventArgs e)
        {
            clientesCorriente = lcln.Select(x => x).Where(x => x.DeBaja == false).ToList();
            direccionesCorriente = new List<Direcciones>();
            mapaCorriente = new List<Parcelas>();
            potenciaCorriente = new List<Potencia>();
            /*foreach (Direcciones d in ldir)
                d.mostrar = true;*/
            mirarDeNuevo = false;

            List <Direcciones> l = buss.Items.Cast<Direcciones>().ToList();
            this.Dispatcher.Invoke(() =>
            {
                num2.Text = l.Count() + "";
                num1.Text = "0";
                actualizarbuss.IsEnabled = false;
            });
            string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
           
            cargarBuss(l);
        }
        private void cargarBuss(List<Direcciones> direcciones)
        {
            try
            {
                if (seguir)
                {
                    ThreadPool.SetMaxThreads(1, 0);
                    direcciones2 = new List<Direcciones>();
                    foreach (Direcciones d in direcciones)
                    {
                        string[] s = d.Descripcion.Split('/');
                        d.Descripcion = "1/" + s[1] +"/"+ s[2];
                        direcciones2.Add(d);

                    }

                    ThreadPool.QueueUserWorkItem(Ejecutarconsultas, direcciones2[0]);
                    direcciones2.RemoveAt(0);

                }
            }catch(Exception e){
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);

                Log oLog = new Log(path2 + "\\Log");

                oLog.Add("1157: " + e.Message);
            }

        }

        private void Ejecutarconsultas(object state)
        {
            try
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);

                Log oLog = new Log(path2 + "\\Log");
                oLog.Add(comprobar+"");
                if (!comprobar)
                {

                    Exception savedException = null;
                    Direcciones d = state as Direcciones;

                    try
                    {
                        oLog.Add("Mirando direccion: " + d.Descripcion);

                        if (!conectado)
                            _connection.Connect();
                        string[] desc = d.Descripcion.Split('/');
                        int a = -2;
                        Task<int> task;
                        switch (desc[0])
                        {
                            case "0":
                                {
                                    
                                    task = Task<int>.Factory.StartNew(() => haceraccion(d,desc[3]));
                                    var task2 = esperar2();
                                    int index = Task.WaitAny(task,task2);
                                    oLog.Add("Mirando direccion 0: " + d.Descripcion);
                                    if (index == 1)
                                    {
                                        if (seguir)
                                            volverAintentarlo(state, 1);
                                    }
                                    else
                                    {
                                        Direcciones dd2 = new Direcciones();
                                        dd2.Descripcion = "1/" + desc[1] + "/" + desc[2];
                                        dd2.Id = d.Id;
                                        direcciones2.Insert(0, dd2);
                                        if (direcciones2.Count > 0)
                                        {
                                            cargarBus2();

                                        }
                                        else
                                        {
                                            mirarDeNuevo = true;
                                            foreach (Direcciones dd in ldir)
                                                dd.mostrar = false;
                                            if (!conectado)
                                                _connection.Connect();
                                            this.Dispatcher.Invoke(() =>
                                            {
                                                actualizarbuss.IsEnabled = true;
                                            });
                                        }
                                    }
                                }
                                break;
                            case "1":
                                {
                                    oLog.Add("Mirando direccion 1: " + d.Descripcion);
                                    task = Task<int>.Factory.StartNew(() => mirarbus(d.Descripcion));
                                    var task2 = esperar();

                                    //original code: await task;  
                                    int index = Task.WaitAny(task, task2);
                                    if (index == 0)
                                        a = int.Parse(Properties.Settings.Default.valor);

                                    if (a == -7)
                                    {
                                        oLog.Add("Direccion Encendida: " + d.Descripcion);
                                        d.imagee = "ON";
                                        d.onIsSelected = true;
                                        this.Dispatcher.Invoke(() =>
                                        {
                                            Clientes cc = Clientes.SelectedItem as Clientes;
                                            Parcelas pp = null;
                                            if (cc != null)
                                                if (cc.n_plaza != null)
                                                    pp = lprc.Find(x => x.id == int.Parse(cc.n_plaza)) as Parcelas;
                                            if (pp != null)
                                                if (("1/" + desc[1] + "/" + desc[2]).Equals(ldir.Find(z => z.Id == pp.Direccion).Descripcion))
                                                {
                                                    luz.Content = "ON";
                                                    luzPanel.IsEnabled = true;
                                                    onoffparcela.IsEnabled = true;
                                                    actu.IsEnabled = false;
                                                    luzPanel.UpdateLayout();
                                                }

                                        });



                                        //sidirecciones.Add(d);
                                        this.Dispatcher.Invoke(() =>
                                        {
                                            buss.Items.Refresh();
                                            Clientes.Items.Refresh();
                                            barrabuss.Value++;
                                            num1.Text = int.Parse(num1.Text) + 1 + "";
                                        });
                                        Clientes cc2 = comprobarCliente(d);
                                        if (cc2 != null)
                                        {
                                            int aCorr = comprobarcorriente1(cc2);
                                            Direcciones dd2 = new Direcciones();
                                            if (aCorr == 1)
                                            {
                                                dd2.Descripcion = "0/" + desc[1] + "/" + desc[2] + "/false";
                                                dd2.Id = d.Id;
                                                cc2.lstring.Add(DateTime.Now.ToString("yyyyy/MM/dd hh:mm:ss") + " El cliente " + cc2.dni + " contrato hasta " + ((DateTime)cc2.fecha_entrada_estado).ToString("yyyyy/MM/dd") + " " + cc2.Hora_salida);
                                                direcciones2.Insert(0, dd2);
                                            }
                                            else
                                            {
                                                dd2.Descripcion = "2/" + desc[1] + "/" + desc[2];
                                                dd2.Id = d.Id;
                                                direcciones2.Insert(0, dd2);
                                            }
                                        }

                                        if (direcciones2.Count > 0)
                                        {
                                            cargarBus2();

                                        }
                                        else
                                        {
                                            mirarDeNuevo = true;
                                            foreach (Direcciones dd in ldir)
                                                dd.mostrar = false;
                                            if (!conectado)
                                                _connection.Connect();
                                            this.Dispatcher.Invoke(() =>
                                            {
                                                actualizarbuss.IsEnabled = true;
                                            });
                                        }
                                    }
                                    else if (a == -2)
                                    {

                                        if (seguir)
                                            volverAintentarlo(state, 1);

                                        //nodirecciones.Add(d);

                                    }
                                    else
                                    {
                                        oLog.Add("Direccion Apagada: " + d.Descripcion);
                                        d.imagee = "OFF";
                                        d.onIsSelected = false;
                                        this.Dispatcher.Invoke(() =>
                                        {
                                            Clientes cc = Clientes.SelectedItem as Clientes;
                                            Parcelas pp = null;
                                            if (cc != null)
                                                if (cc.n_plaza != null)
                                                    pp = lprc.Find(x => x.id == int.Parse(cc.n_plaza)) as Parcelas;
                                            if (pp != null)
                                                if (("1/" + desc[1] + "/" + desc[2]).Equals(ldir.Find(z => z.Id == pp.Direccion).Descripcion))
                                                {
                                                    luz.Content = "OFF";
                                                    luzPanel.IsEnabled = true;

                                                    onoffparcela.IsEnabled = true;
                                                    actu.IsEnabled = false;
                                                    luzPanel.UpdateLayout();
                                                }
                                        });
                                        //sidirecciones.Add(d);
                                        this.Dispatcher.Invoke(() =>
                                        {
                                            buss.Items.Refresh();
                                            Clientes.Items.Refresh();
                                            barrabuss.Value++;
                                            num1.Text = int.Parse(num1.Text) + 1 + "";
                                        });

                                        if (direcciones2.Count > 0)
                                        {
                                            cargarBus2();


                                        }
                                        else
                                        {
                                            mirarDeNuevo = true;
                                            foreach (Direcciones dd in ldir)
                                                dd.mostrar = false;

                                            if (!conectado)
                                                _connection.Connect();
                                            this.Dispatcher.Invoke(() =>
                                            {
                                                actualizarbuss.IsEnabled = true;
                                            });
                                        }
                                    }
                                }
                                break;
                            case "2":
                                {
                                    oLog.Add("Mirando direccion 2: " + d.Descripcion);
                                    task = Task<int>.Factory.StartNew(() => mirarbus(d.Descripcion));
                                    var task2 = esperar();

                                    //original code: await task;  
                                    int index = Task.WaitAny(task, task2);
                                    double dob = -2;
                                    if (index == 0)
                                        dob = double.Parse(Properties.Settings.Default.valor);

                                    if (a > 0)
                                    {
                                        Clientes cc2 = comprobarCliente(d);
                                        Direcciones dd2 = new Direcciones();
                                        if (cc2 != null)
                                        {
                                            if (dob> lcnt.Find(x => x.Id == cc2.Potencia).Amperios_Max)
                                            {
                                                dd2.Descripcion = "0/" + desc[1] + "/" + desc[2] + "/false";
                                                dd2.Id = d.Id;
                                                direcciones2.Insert(0, dd2);
                                                cc2.lstring.Add(DateTime.Now.ToString("yyyyy/MM/dd hh:mm:ss") + " El cliente " + cc2.dni + " ha sobrepasado el limite contratado");

                                            }
                                            if (direcciones2.Count > 0)
                                            {
                                                cargarBus2();

                                            }
                                            else
                                            {
                                                mirarDeNuevo = true;
                                                foreach (Direcciones dd in ldir)
                                                    dd.mostrar = false;
                                                if (!conectado)
                                                    _connection.Connect();
                                                this.Dispatcher.Invoke(() =>
                                                {
                                                    actualizarbuss.IsEnabled = true;
                                                });
                                            }
                                        }

                                    }
                                    else
                                    {
                                            if (seguir)
                                                volverAintentarlo(state, 1);
                                    }

                                }
                                break;
                        }
                        //inal code

                        



                        Console.WriteLine(index);
                        

                        this.Dispatcher.Invoke(() =>
                        {
                            buss.Items.Refresh();
                            Clientes.Items.Refresh();

                        //uno.Content = sidirecciones.Count();
                        //dos.Content = nodirecciones.Count();
                    });
                        //Thread.Sleep(50);
                    }
                    catch (Exception e)
                    {
                        if (conectado)
                            _connection.Disconnect();

                        if (!conectado)
                            _connection.Connect();
                        if (seguir)
                            volverAintentarlo(state, 1);
                    }


                    Console.WriteLine("Bye " + Thread.CurrentThread.ManagedThreadId);
                }
                else
                {
                    Thread.Sleep(500);
                    Ejecutarconsultas(state);
                }
            }
            catch (Exception e)
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);

                Log oLog = new Log(path2 + "\\Log");

                oLog.Add("1281: " + e.Message);
            }

        }
        private Clientes comprobarCliente(Direcciones d)
        {
            string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);

            Log oLog = new Log(path2 + "\\Log");
            oLog.Add("Mirando clientes activos: " + clientesCorriente.Count + " - " + d.Descripcion);
            foreach (Clientes c in clientesCorriente)
            {
                Parcelas p = lprc.Find(x => x.id == int.Parse(c.n_plaza));
                oLog.Add("Parcelas: " + lprc.Count);
                if (p != null)
                {
                    Direcciones d2 = ldir.Find(x => x.Id == p.Direccion);

                    if (d2 != null)
                    {
                        oLog.Add("Direccion de la parcela: " + d2.Descripcion + " - " + d.Id + " == " + d2.Id);
                        if (d.Id == d2.Id)
                        {
                            return c;
                        }
                    }
                }
            }

            return null;
        }

      

        private Double Ejecutarconsultas2(Direcciones d)
        {
            if (!comprobar)
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                Log oLog = new Log(path2 + "\\Log");

                Exception savedException = null;
                Direcciones dd = d as Direcciones;

                try
                {
                    oLog.Add("Mirando corriente: " + dd.Descripcion);
                    if (!conectado)
                        _connection.Connect();
                    string[] desc = d.Descripcion.Split('/');
                    double a = -2;


                    var task = Task<Double>.Factory.StartNew(() => mirarbusC(dd.Descripcion)); //original code
                    var task2 = esperar();

                    //original code: await task;  
                    int index = Task.WaitAny(task, task2);



                    Console.WriteLine(index);
                    if (index == 0)
                        a = double.Parse(Properties.Settings.Default.valor);


                    oLog.Add("Mirando correinte: " + d.Descripcion+" "+a);
                    return a;

                   
                   

                   
                    //Thread.Sleep(50);
                }
                catch (Exception e)
                {
                }

                return -2;
                Console.WriteLine("Bye " + Thread.CurrentThread.ManagedThreadId);
            }
            else
            {
                return -2;
            }
        }

        private Double mirarbusC(string d)
        {
            string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);

            Log oLog = new Log(path2 + "\\Log");
            DateTime dt = DateTime.Now;
            dt.AddSeconds(5);
            Double a = -2;
            try
            {
                if (!conectado)
                    _connection.Connect();
                Properties.Settings.Default.sepuede = false;

                Properties.Settings.Default.valor = -2 + "";
                Properties.Settings.Default.Save();

                string[] desc = d.Split('/');

                //Thread.Sleep(50);
                try
                {
                    //cambiarNumero2 = new System.Threading.Timer(new TimerCallback(holaaa), null, 50, 5000);
                    _connection.RequestStatus("2/" + desc[1] + "/" + desc[2]);

                    //oLog.Add("MIrar Respuesta "+ aaa);
                    Thread.Sleep(200);
                    a = Double.Parse(Properties.Settings.Default.valor);
                    Properties.Settings.Default.Save();
                }
                catch (Exception e)
                {
                    oLog.Add("ERROR 1425: " + e.Message);
                }
                cambiarNumero2.Change(-1, -1);
                return a;

            }
            catch { }
            return a;
        }

        private void volverAintentarlo(object state,int n)
        {
            string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);

            Log oLog = new Log(path2 + "\\Log");
            if (!comprobar)
            {

                Exception savedException = null;
                Direcciones d = state as Direcciones;

                try
                {
                    oLog.Add("intentar Mirando direccion: " + d.Descripcion);

                    if (!conectado)
                        _connection.Connect();
                    string[] desc = d.Descripcion.Split('/');
                    int a = -2;
                    var task = esperar();
                    switch (desc[0])
                    {
                        case "0":
                            {
                                task = Task<int>.Factory.StartNew(() => haceraccion(d, desc[3]));
                                var task2 = esperar2();
                                int index = Task.WaitAny(task, task2);
                                if (index == 1)
                                    if (n > 3)
                                    {
                                        d.imagee = "ERROR";
                                        d.onIsSelected = false;
                                        //nodirecciones.Add(d);
                                        //comprobarcliente(d, 1);
                                        if (direcciones2.Count > 0)
                                        {
                                            cargarBus2();


                                        }
                                        else
                                        {
                                            mirarDeNuevo = true;
                                            foreach (Direcciones dd in ldir)
                                                dd.mostrar = false;
                                            if (!conectado)
                                                _connection.Connect();
                                            this.Dispatcher.Invoke(() =>
                                            {
                                                actualizarbuss.IsEnabled = true;
                                            });
                                        }
                                    }
                                    else
                                    {
                                        if (seguir)
                                            volverAintentarlo(state, n + 1);
                                    }
                                else
                                {
                                    Direcciones dd2 = new Direcciones();
                                    dd2.Descripcion = "1/" + desc[1] + "/" + desc[2];
                                    dd2.Id = d.Id;
                                    direcciones2.Insert(0, dd2);
                                    cargarBus2();
                                }

                            }
                            break;
                        case "1":
                            {
                                task = Task<int>.Factory.StartNew(() => mirarbus(d.Descripcion));
                                var task2 = esperar();

                                //original code: await task;  
                                int index = Task.WaitAny(task, task2);
                                if (index == 0)
                                    a = int.Parse(Properties.Settings.Default.valor);

                                if (a == -7)
                                {
                                    oLog.Add("Direccion Encendida: " + d.Descripcion);
                                    d.imagee = "ON";
                                    d.onIsSelected = true;
                                    this.Dispatcher.Invoke(() =>
                                    {
                                        Clientes cc = Clientes.SelectedItem as Clientes;
                                        Parcelas pp = null;
                                        if (cc != null)
                                            if (cc.n_plaza != null)
                                                pp = lprc.Find(x => x.id == int.Parse(cc.n_plaza)) as Parcelas;
                                        if (pp != null)
                                            if (("1/" + desc[1] + "/" + desc[2]).Equals(ldir.Find(z => z.Id == pp.Direccion).Descripcion))
                                            {
                                                luz.Content = "ON";

                                                onoffparcela.IsEnabled = true;
                                                actu.IsEnabled = false;
                                                luzPanel.IsEnabled = true;
                                                luzPanel.UpdateLayout();
                                            }
                                    });
                                    //sidirecciones.Add(d);
                                    this.Dispatcher.Invoke(() =>
                                    {
                                        buss.Items.Refresh();
                                        Clientes.Items.Refresh();
                                        barrabuss.Value++;
                                        num1.Text = int.Parse(num1.Text) + 1 + "";
                                    });
                                    Clientes cc2 = comprobarCliente(d);
                                    if (cc2 != null)
                                    {
                                        int aCorr = comprobarcorriente1(cc2);
                                        Direcciones dd2 = new Direcciones();
                                        if (aCorr == 1)
                                        {
                                            dd2.Descripcion = "0/" + desc[1] + "/" + desc[2] + "/false";
                                            dd2.Id = d.Id;
                                            direcciones2.Insert(0, dd2);
                                        }
                                        else
                                        {
                                            dd2.Descripcion = "2/" + desc[1] + "/" + desc[2];
                                            dd2.Id = d.Id;
                                            direcciones2.Insert(0, dd2);
                                        }
                                    }

                                    if (direcciones2.Count > 0)
                                    {
                                        cargarBus2();

                                    }
                                    else
                                    {
                                        mirarDeNuevo = true;
                                        foreach (Direcciones dd in ldir)
                                            dd.mostrar = false;
                                        if (!conectado)
                                            _connection.Connect();
                                        this.Dispatcher.Invoke(() =>
                                        {
                                            actualizarbuss.IsEnabled = true;
                                        });
                                    }
                                }
                                else if (a == -2)
                                {
                                    if (n > 2)
                                    {
                                        d.imagee = "ERROR";
                                        d.onIsSelected = false;
                                        this.Dispatcher.Invoke(() =>
                                        {
                                            Clientes cc = Clientes.SelectedItem as Clientes;

                                            Parcelas pp = null;
                                            if (cc != null)
                                                if (cc.n_plaza != null)
                                                    pp = lprc.Find(x => x.id == int.Parse(cc.n_plaza)) as Parcelas;
                                            if (pp != null)
                                                if (("1/" + desc[1] + "/" + desc[2]).Equals(ldir.Find(z => z.Id == pp.Direccion).Descripcion))
                                                {
                                                    luz.Content = "ERROR";



                                                    onoffparcela.IsEnabled = false;
                                                    actu.IsEnabled = true;
                                                    cc.lstring.Add(DateTime.Now.ToString("yyyyy/MM/dd hh:mm:ss") + " No se ha establecido conexión con la parcela" + pp.nom);
                                                    logs.Items.Refresh();
                                                    luzPanel.UpdateLayout();

                                                }

                                           
                                        });
                                        //nodirecciones.Add(d);
                                        this.Dispatcher.Invoke(() =>
                                        {
                                            buss.Items.Refresh();
                                            Clientes.Items.Refresh();
                                            barrabuss.Value++;
                                            num1.Text = int.Parse(num1.Text) + 1 + "";
                                        });

                                        //comprobarcliente(d, 1);
                                        if (direcciones2.Count > 0)
                                        {
                                            cargarBus2();

                                        }
                                        else
                                        {
                                            mirarDeNuevo = true;
                                            foreach (Direcciones dd in ldir)
                                                dd.mostrar = false;
                                            if (!conectado)
                                                _connection.Connect();
                                            this.Dispatcher.Invoke(() =>
                                            {
                                                actualizarbuss.IsEnabled = true;
                                            });
                                        }
                                    }
                                    else
                                    {
                                        if (seguir)
                                            volverAintentarlo(state, n + 1);
                                    }
                                }
                                else
                                {
                                    d.imagee = "OFF";
                                    d.onIsSelected = false;
                                    this.Dispatcher.Invoke(() =>
                                    {
                                        Clientes cc = Clientes.SelectedItem as Clientes;
                                        Parcelas pp = null;
                                        if (cc != null)
                                            if (cc.n_plaza != null)
                                                pp = lprc.Find(x => x.id == int.Parse(cc.n_plaza)) as Parcelas;
                                        if (pp != null)
                                            if (("1/" + desc[1] + "/" + desc[2]).Equals(ldir.Find(z => z.Id == pp.Direccion).Descripcion))
                                            {
                                                luz.Content = "OFF";

                                                onoffparcela.IsEnabled = true;
                                                actu.IsEnabled = false;
                                                luzPanel.UpdateLayout();
                                            }
                                    });
                                    //sidirecciones.Add(d);
                                    this.Dispatcher.Invoke(() =>
                                    {
                                        buss.Items.Refresh();
                                        Clientes.Items.Refresh();
                                        barrabuss.Value++;
                                        num1.Text = int.Parse(num1.Text) + 1 + "";
                                    });

                                    if (direcciones2.Count > 0)
                                    {
                                        cargarBus2();


                                    }
                                    else
                                    {
                                        mirarDeNuevo = true;
                                        foreach (Direcciones dd in ldir)
                                            dd.mostrar = false;

                                        if (!conectado)
                                            _connection.Connect();
                                        this.Dispatcher.Invoke(() =>
                                        {
                                            actualizarbuss.IsEnabled = true;
                                        });
                                    }
                                }
                            }
                            break;
                        case "2":
                            {
                                task = Task<int>.Factory.StartNew(() => mirarbus(d.Descripcion));
                                var task2 = esperar();

                                //original code: await task;  
                                int index = Task.WaitAny(task, task2);
                                double dob = -2;
                                if (index == 0)
                                    dob = double.Parse(Properties.Settings.Default.valor);

                                if (a > 0)
                                {
                                    Clientes cc2 = comprobarCliente(d);
                                    Direcciones dd2 = new Direcciones();
                                    if (cc2 != null)
                                    {
                                        if (dob > lcnt.Find(x => x.Id == cc2.Potencia).Amperios_Max)
                                        {
                                            dd2.Descripcion = "0/" + desc[1] + "/" + desc[2] + "/false";
                                            dd2.Id = d.Id;
                                            direcciones2.Insert(0, dd2);

                                            cargarBus2();
                                        }
                                    }

                                }
                                else
                                {
                                    if (n > 3)
                                    {
                                        

                                        //comprobarcliente(d, 1);
                                        if (direcciones2.Count > 0)
                                        {
                                            cargarBus2();

                                        }
                                        else
                                        {
                                            mirarDeNuevo = true;
                                            foreach (Direcciones dd in ldir)
                                                dd.mostrar = false;
                                            if (!conectado)
                                                _connection.Connect();
                                            this.Dispatcher.Invoke(() =>
                                            {
                                                actualizarbuss.IsEnabled = true;
                                            });
                                        }
                                    }
                                    else
                                    {
                                        if (seguir)
                                            volverAintentarlo(state, n + 1);
                                    }
                                }

                            }
                            break;
                    }
                    //inal code





                    Console.WriteLine(index);


                    this.Dispatcher.Invoke(() =>
                    {
                        buss.Items.Refresh();
                        Clientes.Items.Refresh();

                        //uno.Content = sidirecciones.Count();
                        //dos.Content = nodirecciones.Count();
                    });
                

                }
                catch(Exception ee)
                {
                    if (direcciones2.Count > 0)
                    {
                        cargarBus2();

                    }
                    else
                    {
                        mirarDeNuevo = true;
                        foreach (Direcciones dd in ldir)
                            dd.mostrar = false;
                        if (!conectado)
                            _connection.Connect();
                        this.Dispatcher.Invoke(() =>
                        {
                            actualizarbuss.IsEnabled = true;
                        });

                    }

                    d.imagee = "ERROR";
                    d.onIsSelected = false;
                    this.Dispatcher.Invoke(() =>
                    {
                        buss.Items.Refresh();
                        Clientes.Items.Refresh();
                        barrabuss.Value++;
                        num1.Text = int.Parse(num1.Text) + 1 + "";
                    });

                }
            }
            else
            {
                Thread.Sleep(500);
                volverAintentarlo(state,n);
            }
        }
        private void cargarBus2()
        {
            if (seguir)
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                Log oLog = new Log(path2 + "\\Log");
                oLog.Add("Cargando Bus2");
                    ThreadPool.QueueUserWorkItem(Ejecutarconsultas, direcciones2[0]);
                direcciones2.RemoveAt(0);
            }
        }

        private async Task<int> esperar()
        {
            //t.Inlines.Add("Esperando Task 2 5 segundos..." + "\n");
            Console.WriteLine("esperando... " + Thread.CurrentThread.ManagedThreadId);
            Thread.Sleep(2000);
            int resultado = -2;
            Console.WriteLine("saliendo... " + Thread.CurrentThread.ManagedThreadId);

            return resultado;
        }

        private async Task<int> esperar2()
        {
            //t.Inlines.Add("Esperando Task 2 5 segundos..." + "\n");
            Console.WriteLine("esperando... " + Thread.CurrentThread.ManagedThreadId);
            Thread.Sleep(5000);
            int resultado = -2;
            Console.WriteLine("saliendo... " + Thread.CurrentThread.ManagedThreadId);

            return resultado;
        }

        public async void Loop(CancellationToken ct, Direcciones d)
        {int a = -2;
            while (!ct.IsCancellationRequested)
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                Log oLog = new Log(path2);
                // your loop goes here
                
                

            }
            Console.WriteLine("Got Cancelled");
            Properties.Settings.Default.resultado= a;
            Properties.Settings.Default.Save();
        }
        private async void cargarBus(List<Direcciones> l)
        {
            string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
            Log oLog = new Log(path2);
            oLog.Add("Cargando bus");
            this.Dispatcher.Invoke(() =>
            {
                infobuss.Visibility = Visibility.Visible;
                barrabuss.Value = 0;
                barrabuss.Maximum = l.Count;
            });

            if (seguir)
            {
                ThreadPool.SetMaxThreads(1, 0);
                direcciones2 = new List<Direcciones>();
                foreach (Direcciones d in l)
                {
                    direcciones2.Add(d);

                }

                ThreadPool.QueueUserWorkItem(Ejecutarconsultas, direcciones2[0]);
                direcciones2.RemoveAt(0);

            }


            
        }
        private int mirarbus(string d)
        {
            string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);

            Log oLog = new Log(path2 + "\\Log");
            DateTime dt = DateTime.Now;
            dt.AddSeconds(5);
            int a = -2;
            try
            {
                oLog.Add("hola 1:");
                Properties.Settings.Default.sepuede = false;

                Properties.Settings.Default.valor = -2 + "";
                Properties.Settings.Default.Save();

                oLog.Add("hola 2:");
                string[] desc = d.Split('/');

                //Thread.Sleep(50);
                try
                {
                    oLog.Add("hola 3:");
                    //cambiarNumero2 = new System.Threading.Timer(new TimerCallback(holaaa), null, 50, 5000);
                    _connection.RequestStatus("1/" + desc[1] + "/" + desc[2]);

                    //oLog.Add("MIrar Respuesta "+ aaa);
                    Thread.Sleep(200);

                    oLog.Add("hola 6:");
                    a = int.Parse(Properties.Settings.Default.valor);
                    Properties.Settings.Default.Save();

                    oLog.Add("hola 7:");

                    
                }
                catch (Exception e)
                {
                    oLog.Add("ERROR 1425: " + e.Message);
                }

                oLog.Add("hola 8:");
                //cambiarNumero2.Change(-1, -1);
                return a;

            }
            catch { }
            return a;
        }

        private void holaaa(object state)
        {
            string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
            Log oLog = new Log(path2);
            oLog.Add("se acabo el tiempo");
            try
            {
                Properties.Settings.Default.sepuede = true;
                Properties.Settings.Default.Save();
               
            }catch(Exception e)
            {
                oLog.Add("ERROR: " + e.Message);
            }
        }

        private async void cargartiempos()
        {
            IEnumerable<KeyValuePair<string, string>> queries = new List<KeyValuePair<string, string>>()
                            {
                                new KeyValuePair<string, string>("tabla", "time"),
                                new KeyValuePair<string, string>("action", "Select")
                            };
            string uri = string.Format("http://app.adex-integracio.com/sgc/index2.php");
            //Uri = new Uri(uri);
            //Uri = new Uri(uri);
            HttpContent h = new FormUrlEncodedContent(queries);
            using (HttpClient client = new HttpClient())
            {
                using (HttpResponseMessage resp = await client.PostAsync(uri, h))
                {
                    using (HttpContent content = resp.Content)
                    {
                        string mycontent = await content.ReadAsStringAsync();
                        HttpContentHeaders hch = content.Headers;
                        Console.WriteLine(mycontent);
                        //v = new Version(mycontent);
                        lista_tiempos.Clear();
                        foreach (string s in mycontent.Split('*'))
                            lista_tiempos.Add(DateTime.Parse(s));

                        /*
                        0. CLIENTES
                        1. ALARMAS
                        2- USUARIOS
                        3. EVENTOS
                        4.FACTURAS
                        5.PRODUCTOS FACTURA                                        
                        6. Vehiculos
                        7. Rol
                        8- Recibo
                        9. Registro
                        10.productosregistrados
                        11.parcelas
                        12- IVA
                        13. Direcciones
                        14.Contratos
                        15.Camping
                         */
                    }
                }
            }
        }

        public void ordenar(char[] num, int posicion)
        {
            if (posicion == -1)
            {
                return;
            }
            if (num[posicion] == '0')
                tirar0atras(num, posicion);

            //Console.WriteLine(num);
            ordenar(num, posicion - 1);
        }

        private void tirar0atras(char[] num, int posicion)
        {
            if (posicion == num.Length-1)
            {
                return;
            }
            if (num[posicion] == '0' && num[posicion + 1] == '1')
            {
                Border b1 = Boton_Calendario.Parent as Border;
                Border b2 = Trabajadoresbutton.Parent as Border;
                
                num[posicion] = num[posicion + 1];
                num[posicion + 1] = '0';

                char guarda = orden[posicion];

                

                switch (orden[posicion])
                {
                   
                    
                    case '2':
                        {
                            b1 = Trabajadoresbutton.Parent as Border;
                            
                        }
                        break;
                    case '3':
                        {
                            b1 = Clientes_button.Parent as Border;
                           
                        }
                        break;
                    case '4':
                        {
                            b1 = Boton_Mapa.Parent as Border;
                           
                        }
                        break;

                    case '5':
                        {
                            b1 = Factura_button.Parent as Border;
                            
                        }
                        break;
                    case '6':
                        {
                            b1 = Boton_Camara.Parent as Border;

                        }
                        break;




                }
                switch (orden[posicion+1])
                {


                    case '2':
                        {
                            b2 = Trabajadoresbutton.Parent as Border;

                        }
                        break;
                    case '3':
                        {
                            b2 = Clientes_button.Parent as Border;

                        }
                        break;
                    case '4':
                        {
                            b2 = Boton_Mapa.Parent as Border;

                        }
                        break;

                    case '5':
                        {
                            b2 = Factura_button.Parent as Border;

                        }
                        break;
                    case '6':
                        {
                            b2 = Boton_Camara.Parent as Border;

                        }
                        break;
                   






                }
                orden[posicion] = orden[posicion + 1];
                orden[posicion + 1] = guarda;

                b1.SetValue(Grid.ColumnProperty,posicion+2);
                b2.SetValue(Grid.ColumnProperty, posicion+1);
                 b1 = Boton_Calendario.Parent as Border;
                 b2 = Trabajadoresbutton.Parent as Border;
                Border b3 = Clientes_button.Parent as Border;
                Border b4 = Boton_Mapa.Parent as Border;
                Border b5 = Factura_button.Parent as Border;
                Border b6 = Boton_Camara.Parent as Border;

                //Console.WriteLine(b1.GetValue(Grid.ColumnProperty));
                //Console.WriteLine(b2.GetValue(Grid.ColumnProperty));
                //Console.WriteLine(b3.GetValue(Grid.ColumnProperty));
                //Console.WriteLine(b4.GetValue(Grid.ColumnProperty));
                //Console.WriteLine(b5.GetValue(Grid.ColumnProperty));
                //Console.WriteLine(b6.GetValue(Grid.ColumnProperty));


            }
            tirar0atras(num, posicion + 1);

        }
        private void ObservarTodo(object state)
        {

            //Console.WriteLine("holaa");

            this.Dispatcher.Invoke(() =>
            {
                if (bdr3.HorizontalAlignment == HorizontalAlignment.Left)
                {
                    MouseButtonEventArgs m = new MouseButtonEventArgs(Mouse.PrimaryDevice, 0, MouseButton.Left);
                    lock_MouseLeftButtonDown(lockk, m);
                }



            });



        }
        private async void ObservarTodo2(object state)
        {

            //escondes la pantalla de cargando, tu imagen o barra de progreso.

            try
            {

                //escondes la pantalla de cargando, tu imagen o barra de progreso.
                if (!observartodo)
                {
                    observartodo = true;

                    Dispatcher.InvokeAsync(() =>
                    {
                        pictureBox.Visibility = Visibility.Visible;
                        if (Properties.Settings.Default.modulo)
                        {
                            modulo_ele.Content = "Conectado!";
                            modulo_ele.Foreground = Brushes.Green;
                        }
                        else
                        {
                            modulo_ele.Content = "Desconectado!";
                            modulo_ele.Foreground = Brushes.Red;
                        }
                    });
                   /* string uri = string.Format("http://app.adex-integracio.com/sgc/index2.php");
                    //uri = string.Format("http://app.adex-integracio.com/sgc/post.php");
                    List<Consulta> Lista_consultas_borrar = new List<Consulta>();
                    List<Consulta> lista_c = new List<Consulta>();
                    lista_c = Lista_consultas;
                    try
                    {
                        if (lista_c.Count != 0)
                        {
                            foreach (Consulta c in lista_c)
                            {
                                observartodotoken = true;
                                try
                                {
                                    string ss = "";
                                    if (c.Action.Equals("INSERT"))
                                    {
                                        string query = "INSERT INTO `" + c.Tabla + "`(";
                                        foreach (string s in c.Parametros)
                                        {
                                            query += (s.Split(':')[0]).Replace("#", ":") + ", ";

                                        }

                                        query = query.Remove(query.Length - 2);
                                        query += ") VALUES (";
                                        foreach (string s in c.Parametros)
                                        {
                                            if (s.Contains("Parcelas"))
                                            {
                                                if (s.Contains(":"))
                                                    query += "'" + (s.Split(':')[1]).Replace("#", ":") + "', ";
                                                else
                                                    query += "'', ";

                                                query.Replace('#', ':');
                                            }
                                            else if (s.Contains("Hora"))
                                            {
                                                if (s.Contains(":"))
                                                    query += "'" + (s.Split(':')[1]).Replace("*", ":") + "', ";
                                                else
                                                    query += "'', ";

                                                query.Replace('*', ':');

                                            }
                                            else
                                           if (s.Contains(":"))
                                                query += "'" + (s.Split(':')[1]).Replace("#", ":") + "', ";
                                            else
                                                query += "'', ";




                                        }
                                        query = query.Remove(query.Length - 2);
                                        query += ");";
                                        ss = query;
                                    }
                                    if (c.Action.Equals("DELETE"))
                                    {
                                        string query = "DELETE FROM " + c.Tabla + " WHERE ";
                                        string[] filtro = c.Filtro.Split(':');
                                        query += filtro[0] + "='" + filtro[1] + "'";


                                        ss = query;
                                    }

                                    if (c.Action.Equals("UPDATE"))
                                    {
                                        string query = "UPDATE " + c.Tabla + " SET ";
                                        foreach (string s in c.Parametros)
                                        {
                                            if (s.Contains(":"))
                                                query += s.Split(':')[0] + "='" + (s.Split(':')[1]).Replace("*", ":") + "', ";
                                            else
                                                query += s.Split(':')[0] + "='', ";


                                        }

                                        query = query.Remove(query.Length - 2);
                                        query += " WHERE Id='" + c.Filtro.Split(':')[1] + "'";

                                        ss = query;
                                    }
                                    Console.WriteLine(ss);
                                    /*foreach(string s in c.Parametros)
                                    {
                                        ss += s;
                                    }
                                    //Thread.Sleep(1000);
                                    uri = string.Format("http://app.adex-integracio.com/sgc/index2.php");
                                    IEnumerable<KeyValuePair<string, string>> queries = new List<KeyValuePair<string, string>>()
                    {
                        new KeyValuePair<string, string>("tabla", c.Tabla),
                        new KeyValuePair<string, string>("action", c.Action),
                        new KeyValuePair<string, string>("parametros", ss)

                    };
                                    //Uri = new Uri(uri);
                                    HttpContent h = new FormUrlEncodedContent(queries);
                                    using (HttpClient client = new HttpClient())
                                    {
                                        using (HttpResponseMessage resp = await client.PostAsync(uri, h))
                                        {
                                            using (HttpContent content = resp.Content)
                                            {
                                                string mycontent = await content.ReadAsStringAsync();
                                                HttpContentHeaders hch = content.Headers;
                                                Console.WriteLine(mycontent);
                                                queries = new List<KeyValuePair<string, string>>()
                                {
                                    new KeyValuePair<string, string>("tabla", "Version"),
                                    new KeyValuePair<string, string>("action", "Update")
                                    //v = new Version(mycontent);
                                };
                                                h = new FormUrlEncodedContent(queries);
                                                using (HttpClient client2 = new HttpClient())
                                                {
                                                    using (HttpResponseMessage resp2 = await client2.PostAsync(uri, h))
                                                    {
                                                        using (HttpContent content2 = resp2.Content)
                                                        {
                                                            string mycontent2 = await content2.ReadAsStringAsync();
                                                            HttpContentHeaders hch2 = content2.Headers;
                                                            Console.WriteLine(mycontent2);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    /*byteArray = Encoding.UTF8.GetBytes("tabla=" + c.Tabla + " &" + "action=" + c.Action + "&" + "parametros="+ss);

                                    Uri = new Uri(uri);
                                     webRequest = (HttpWebRequest)WebRequest.Create(uri);
                                    webRequest.Method = "POST";
                                    webRequest.ContentType = "application/x-www-form-urlencoded";
                                    webRequest.ContentLength = byteArray.Length;
                                    myClient = new HttpClient();*/
                                    /* try
                                     {

                                         //Debug.WriteLine("Hola ");
                                         HttpResponseMessage response = await myClient.GetAsync(Uri);

                                         if (response.IsSuccessStatusCode)
                                         {
                                             //Debug.WriteLine("IsSuccessStatusCode");
                                             string content = await response.Content.ReadAsStringAsync();
                                             //object Items = JsonConvert.DeserializeObject(content);
                                             //Debug.WriteLine("Items: "+ Items);
                                             //return Items;
                                             //v = new Version(content);
                                             Debug.WriteLine(content);

                                         }
                                     }
                                     catch { }
                                    Lista_consultas_borrar.Add(c);

                                    Thread.Sleep(500);
                                }
                                catch (Exception e)
                                {
                                    var st = new StackTrace(e, true); // Get the top stack frame var frame = st.GetFrame(0); // Get the line number from the stack frame   var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                                    var frame = st.GetFrame(0);
                                      var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                                    Console.WriteLine(line + ": " + e.Message);
                                }


                            }
                            foreach (Consulta c in Lista_consultas_borrar)
                            {
                                Lista_consultas.Remove(c);
                            }
                            observartodotoken = false;
                        }
                    }
                    catch { }*/
                  /*  Thread.Sleep(500);
                    try
                    {
                        SGC.Clases.Version v = new Version();
                        //Debug.WriteLine("Hola ");
                        byte[] byteArray = Encoding.UTF8.GetBytes("tabla = Version");
                        IEnumerable<KeyValuePair<string, string>> queries = new List<KeyValuePair<string, string>>()
            {
                new KeyValuePair<string, string>("tabla", "Version"),
                new KeyValuePair<string, string>("action", "Select")
            };
                        //Uri = new Uri(uri);
                        try
                        {
                            HttpContent h = new FormUrlEncodedContent(queries);
                            using (HttpClient client = new HttpClient())
                            {
                                using (HttpResponseMessage resp = await client.PostAsync(uri, h))
                                {
                                    using (HttpContent content = resp.Content)
                                    {
                                        Dispatcher.InvokeAsync(() =>
                                        {
                                            conexion_bd.Content = "Conectado!";
                                            conexion_bd.Foreground = Brushes.Green;
                                        });
                                        string mycontent = await content.ReadAsStringAsync();
                                        HttpContentHeaders hch = content.Headers;
                                        //Console.WriteLine(mycontent);
                                        v = new Version(mycontent);
                                    }
                                }
                            }
                        }
                        catch
                        {
                            Dispatcher.InvokeAsync(() =>
                            {
                                conexion_bd.Content = "Desconectado";
                                conexion_bd.Foreground = Brushes.Red;
                            });
                        }


                        if (v != null && !safe2)
                        {
                            CargarVersion();
                            Console.WriteLine("Version: " + (DateTime.Compare(v.version, version.version) == 1) + " - " + v.version + " - " + version.version);
                            if (v.version > version.version)
                                if (safe)
                                {
                                    //MessageBox mb = new MessageBox();
                                    safe2 = true;
                                    MessageBoxResult result = MessageBox.Show("Hay cambios en la Base de datos, ¿quieres actualizar?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Information);

                                    if (result == MessageBoxResult.OK)
                                    {
                                        safe2 = false;
                                        queries = new List<KeyValuePair<string, string>>()
                            {
                                new KeyValuePair<string, string>("tabla", "time"),
                                new KeyValuePair<string, string>("action", "Select")
                            };
                                        //Uri = new Uri(uri);
                                        //Uri = new Uri(uri);
                                        HttpContent h = new FormUrlEncodedContent(queries);
                                        using (HttpClient client = new HttpClient())
                                        {
                                            using (HttpResponseMessage resp = await client.PostAsync(uri, h))
                                            {
                                                using (HttpContent content = resp.Content)
                                                {
                                                    string mycontent = await content.ReadAsStringAsync();
                                                    HttpContentHeaders hch = content.Headers;
                                                    Console.WriteLine(mycontent);
                                                    //v = new Version(mycontent);
                                                    lista_tiempos.Clear();
                                                    foreach (string s in mycontent.Split('*'))
                                                        lista_tiempos.Add(DateTime.Parse(s));

                                                    /*
                                                    0. CLIENTES
                                                    1. ALARMAS
                                                    2- USUARIOS
                                                    3. EVENTOS
                                                    4.FACTURAS
                                                    5.PRODUCTOS FACTURA                                        
                                                    6. Vehiculos
                                                    7. Rol
                                                    8- Recibo
                                                    9. Registro
                                                    10.productosregistrados
                                                    11.parcelas
                                                    12- IVA
                                                    13. Direcciones
                                                    14.Contratos
                                                    15.Camping
                                                     
                                                }
                                            }
                                        }
                                        Dispatcher.InvokeAsync(() =>
                                        {

                                            if (Roles.SelectedItem != null)
                                            {
                                                Roles.SelectedItem = null;
                                                clearrol();
                                            }
                                            CargarVehiculos();


                                            CargarRoles();
                                            if (Roles.SelectedItem != null)
                                            {
                                                clearRoles();
                                            }
                                            if (Usuarios.SelectedItem != null)
                                            {
                                                Usuarios.SelectedItem = null;
                                                boton1_Sistema_Click(boton1_Sistema, RoutedEventArgs);
                                            }
                                            CargarUsuarios();




                                            cargarEventos();

                                            if (lista_iva.SelectedItem != null)
                                            {
                                                CargarIva();
                                                limpiar_iva();
                                            }

                                            CargarParcela();

                                            cargarClientes();

                                            cargarProductos();


                                            cargarProductosNuevos();


                                            if (Facturas.SelectedItem != null)
                                            {
                                                ClearFactura();
                                            }
                                            CargarFacturas();

                                            CargarRecibos();


                                            cargarDirecciones();

                                        //Por editar                                    

                                        CargarContratos();
                                            CargarEmpresa();

                                        });
                                        DateTime dt1 = DateTime.Now;
                                        string sql_query4 = "UPDATE Version SET Version='" + dt1 + "' WHERE Id=1";
                                        SQLiteConnection cn2 = new SQLiteConnection(conexiondb);
                                        if (cn2.State != ConnectionState.Open) cn2.Open();
                                        //DataTable tb = new DataTable();

                                        SQLiteCommand cmd3 = new SQLiteCommand(sql_query4, cn2);
                                        cmd3 = new SQLiteCommand(sql_query4, cn2);
                                        cmd3.ExecuteNonQuery();
                                    }
                                    else
                                    {
                                        safe2 = false;
                                    }
                                }
                                else
                                {
                                    queries = new List<KeyValuePair<string, string>>()
                            {
                                new KeyValuePair<string, string>("tabla", "time"),
                                new KeyValuePair<string, string>("action", "Select")
                            };
                                    //Uri = new Uri(uri);

                                    //Uri = new Uri(uri);
                                    HttpContent h = new FormUrlEncodedContent(queries);
                                    using (HttpClient client = new HttpClient())
                                    {
                                        using (HttpResponseMessage resp = await client.PostAsync(uri, h))
                                        {
                                            using (HttpContent content = resp.Content)
                                            {
                                                string mycontent = await content.ReadAsStringAsync();
                                                HttpContentHeaders hch = content.Headers;
                                                Console.WriteLine(mycontent);
                                                //v = new Version(mycontent);
                                                lista_tiempos.Clear();
                                                foreach (string s in mycontent.Split('*'))
                                                    lista_tiempos.Add(DateTime.Parse(s));

                                                /*
                                                0. CLIENTES
                                                1. ALARMAS
                                                2- USUARIOS
                                                3. EVENTOS
                                                4.FACTURAS
                                                5.PRODUCTOS FACTURA                                        
                                                6. Vehiculos
                                                7. Rol
                                                8- Recibo
                                                9. Registro
                                                10.productosregistrados
                                                11.parcelas
                                                12- IVA
                                                13. Direcciones
                                                14.Contratos
                                                15.Camping
                                                 
                                            }
                                        }
                                    }
                                    Dispatcher.InvokeAsync(() =>
                                    {

                                        CargarRoles();
                                        CargarUsuarios();
                                        CargarVehiculos();

                                        cargarEventos();

                                        CargarIva();

                                        CargarParcela();

                                        cargarClientes();

                                        cargarProductos();

                                        cargarProductosNuevos();

                                        CargarFacturas();

                                        CargarRecibos();

                                        cargarDirecciones();

                                        CargarContratos();

                                        CargarEmpresa();


                                    });
                                    DateTime dt1 = DateTime.Now;
                                    string sql_query4 = "UPDATE Version SET Version='" + dt1 + "' WHERE Id=1";
                                    SQLiteConnection cn2 = new SQLiteConnection(conexiondb);
                                    if (cn2.State != ConnectionState.Open) cn2.Open();
                                    //DataTable tb = new DataTable();

                                    SQLiteCommand cmd3 = new SQLiteCommand(sql_query4, cn2);
                                    cmd3 = new SQLiteCommand(sql_query4, cn2);
                                    cmd3.ExecuteNonQuery();
                                }
                        }


                    }
                    catch
                    {

                    }
*/

                    //Console.WriteLine("holaa");




                    //escondes la pantalla de cargando, tu imagen o barra de progreso.
                    Dispatcher.InvokeAsync(() =>
                    {
                        pictureBox.Visibility = Visibility.Collapsed;
                    });
                    observartodo = false;
                }
            }
            catch { }
        }

        private void CargarVersion()
        {
            string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
            //Log oLog = new Log(path2);
            //oLog.Add("Rol");

            try
            {


                version = new Version();
                string cn_String = conexiondb;

                SQLiteConnection cn = new SQLiteConnection(cn_String);

                if (cn.State != ConnectionState.Open) cn.Open();
                DataTable tb = new DataTable();

                string sql_Text = "SELECT * FROM Version";
                SQLiteCommand cmd = new SQLiteCommand(sql_Text, cn);
                SQLiteDataReader rdr = cmd.ExecuteReader();

                while (rdr.Read())
                {
                    DateTime dt = DateTime.Parse(rdr.GetString(1));
                    version = new Version(rdr.GetInt32(0), dt);
                }
                cn.Close();
            }
            catch (Exception ee){
              
                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                Peta(ee, line + "");
            }
        }

        private void ComprobarRoles()
        {


            if (permisos[0] == '1')
            {

            }
            else
            {

            }
            if (permisos[1] == '1')
            {
                deleteEvento.Visibility = Visibility.Visible;
            }
            else
            {
                deleteEvento.Visibility = Visibility.Collapsed;
            }
            if (permisos[2] == '1')
            {
                AddNewEvento.Visibility = Visibility.Visible;
            }
            else
            {
                AddNewEvento.Visibility = Visibility.Collapsed;
            }



            //SISTEMA

            if (permisos[3] == '1')
            {
                change_Sistema.Visibility = Visibility.Visible;
            }
            else
            {
                change_Sistema.Visibility = Visibility.Collapsed;
            }
            if (permisos[4] == '1')
            {

                deleteSistema.Visibility = Visibility.Visible;

            }
            else
            {

                deleteSistema.Visibility = Visibility.Collapsed;

            }
            if (permisos[5] == '1')
            {


                AddnewSistema.Visibility = Visibility.Visible;

            }
            else
            {

                AddnewSistema.Visibility = Visibility.Collapsed;


            }



            //CLIENTES

            if (permisos[6] == '1')
            {
                change_client.Visibility = Visibility.Visible;
            }
            else
            {
                change_client.Visibility = Visibility.Collapsed;
            }
            if (permisos[7] == '1')
            {
                deleteAll.Visibility = Visibility.Visible;
            }
            else
            {
                deleteAll.Visibility = Visibility.Collapsed;
            }
            if (permisos[8] == '1')
            {
                AddnewUser.Visibility = Visibility.Visible;
            }
            else
            {
                AddnewUser.Visibility = Visibility.Collapsed;
            }



            //MAPA

            if (permisos[9] == '1')
            {
                change_mapa.Visibility = Visibility.Visible;
            }
            else
            {

                change_mapa.Visibility = Visibility.Collapsed;
            }
            if (permisos[10] == '1')
            {
                deletemapa.Visibility = Visibility.Visible;
            }
            else
            {
                deletemapa.Visibility = Visibility.Collapsed;
            }
            if (permisos[11] == '1')
            {
                if (user_log.Nombre_Rol.Equals("admin"))
                {
                    Addnewmapa.Visibility = Visibility.Visible;
                }
            }
            else
            {
                Addnewmapa.Visibility = Visibility.Collapsed;
            }


            //FACTURAS

            if (permisos[12] == '1')
            {
                change_Factura.Visibility = Visibility.Visible;
            }
            else
            {
                change_Factura.Visibility = Visibility.Collapsed;
            }
            if (permisos[13] == '1')
            {
               //deleteFactura.Visibility = Visibility.Visible;
            }
            else
            {
                deleteFactura.Visibility = Visibility.Collapsed;
            }
            if (permisos[14] == '1')
            {
                AddnewFactura.Visibility = Visibility.Visible;
            }
            else
            {
                AddnewFactura.Visibility = Visibility.Collapsed;
            }



            //CAMARA

            if (permisos[15] == '1')
            {

            }
            else
            {

            }
            if (permisos[16] == '1')
            {

            }
            else
            {

            }
            if (permisos[17] == '1')
            {

            }
            else
            {

            }



            //PESTAÑAS

            if (permisos[18] == '1')
            {
                Border b = Boton_Calendario.Parent as Border;
                b.Visibility = Visibility.Visible;
            }
            else
            {
                Border b = Boton_Calendario.Parent as Border;
                b.Visibility = Visibility.Collapsed;
            }
            if (permisos[19] == '1')
            {
                Border b = Trabajadoresbutton.Parent as Border;
                b.Visibility = Visibility.Visible;
            }
            else
            {
                Border b = Trabajadoresbutton.Parent as Border;
                b.Visibility = Visibility.Collapsed;

            }
            if (permisos[20] == '1')
            {
                Border b = Clientes_button.Parent as Border;
                b.Visibility = Visibility.Visible;
            }
            else
            {
                Border b = Clientes_button.Parent as Border;
                b.Visibility = Visibility.Collapsed;
            }

            if (permisos[21] == '1')
            {
                Border b = Boton_Mapa.Parent as Border;
                b.Visibility = Visibility.Visible;
            }
            else
            {
                Border b = Boton_Mapa.Parent as Border;
                b.Visibility = Visibility.Collapsed;

            }
            if (permisos[22] == '1')
            {
                Border b = Factura_button.Parent as Border;
                b.Visibility = Visibility.Visible;
            }
            else
            {
                Border b = Factura_button.Parent as Border;
                b.Visibility = Visibility.Collapsed;

            }
            if (permisos[23] == '1')
            {
                Border b = Boton_Camara.Parent as Border;
                b.Visibility = Visibility.Visible;
            }
            else
            {
                Border b = Boton_Camara.Parent as Border;
                b.Visibility = Visibility.Collapsed;

            }

            //Pestañas Cliente
            if (permisos[24] == '1')
            {

                boton5_Cientes.Visibility = Visibility.Visible;
            }
            else
            {
                boton5_Cientes.Visibility = Visibility.Collapsed;
            }
            if (permisos[25] == '1')
            {
                boton1_Cientes.Visibility = Visibility.Visible;
            }
            else
            {
                boton1_Cientes.Visibility = Visibility.Collapsed;

            }
            if (permisos[26] == '1')
            {
                boton2_Cientes.Visibility = Visibility.Visible;
            }
            else
            {
                boton2_Cientes.Visibility = Visibility.Collapsed;
            }

            if (permisos[27] == '1')
            {
                boton3_Cientes.Visibility = Visibility.Visible;
            }
            else
            {
                boton3_Cientes.Visibility = Visibility.Collapsed;

            }
            if (permisos[28] == '1')
            {
                boton4_Cientes.Visibility = Visibility.Visible;
            }
            else
            {
                boton4_Cientes.Visibility = Visibility.Collapsed;

            }

        }

        private async void CargarEmpresa()
        {
            Empresadatos.Clear();
            Empresadatos.Add("");
            Empresadatos.Add("");
            Empresadatos.Add("");
            Empresadatos.Add("");
            Empresadatos.Add("");
            Empresadatos.Add("");
            Empresadatos.Add("");
            Empresadatos.Add("");
            Empresadatos.Add("");
            Empresadatos.Add("");
            string cn_String = conexiondb;

            SQLiteConnection cn = new SQLiteConnection(cn_String);
            bool actualizar = true;
            if (Properties.Settings.Default.IP.Length == 0)
            {
                Properties.Settings.Default.IP="192.168.88.250";
                Properties.Settings.Default.Save();
            }

            Ip_dir.Text = Properties.Settings.Default.IP;
            DateTime time = DateTime.Now;
            if (lista_tiempos.Count > 0)
            {
                time = lista_tiempos[15];
            }
            //DateTime.TryParse(mycontent, out time);
            string sql_Text2 = "SELECT * FROM Camping_v";
            cn.Open();
            SQLiteCommand cmd2 = new SQLiteCommand(sql_Text2, cn);
            SQLiteDataReader rdr2 = cmd2.ExecuteReader();
            List<string> ImportedFiles2 = new List<string>();

            DateTime? b = null;
            while (rdr2.Read())
            {
                Console.WriteLine("Camping");
                Console.WriteLine(rdr2.GetString(1));
                DateTime d = DateTime.Parse(rdr2.GetString(1));
                b = d;
            }
            rdr2.Close();
            if (b != null)
            {
                if (DateTime.Compare((DateTime)b, time) == -1)
                {
                    try
                    {
                        string uri = string.Format("http://app.adex-integracio.com/sgc/index2.php");
                        //SGC.Clases.Version v = new Version();
                        //Debug.WriteLine("Hola ");
                        //byteArray = Encoding.UTF8.GetBytes("tabla = Version");
                        IEnumerable<KeyValuePair<string, string>> queries = new List<KeyValuePair<string, string>>()
                                {
                                    new KeyValuePair<string, string>("tabla", "Camping"),
                                    new KeyValuePair<string, string>("action", "Select")
                                };
                        //Uri = new Uri(uri);
                        HttpContent h = new FormUrlEncodedContent(queries);
                        





                    }
                    catch { };
                }
            }
        
           
            if (cn.State != ConnectionState.Open) cn.Open();
            DataTable tb = new DataTable();

            string sql_Text = "SELECT * FROM Camping";
            SQLiteCommand cmd = new SQLiteCommand(sql_Text, cn);
            SQLiteDataReader rdr = cmd.ExecuteReader();
            while (rdr.Read())
            {
                Empresadatos.Clear();
                Empresadatos.Add(rdr.GetString(1));
                Empresadatos.Add(rdr.GetString(2));
                Empresadatos.Add(rdr.GetString(3));
                Empresadatos.Add(rdr.GetString(4));
                Empresadatos.Add(rdr.GetString(5));
                Empresadatos.Add(rdr.GetString(6));
                Empresadatos.Add(rdr.GetString(7));
                Empresadatos.Add(rdr.GetString(8));
                Empresadatos.Add(rdr.GetInt32(9)+"");
                Empresadatos.Add(rdr.GetString(10)+"");
                empresa.Text = rdr.GetString(1);
                dir.Text = rdr.GetString(2);
                pob.Text = rdr.GetString(3);
                cp.Text = rdr.GetString(4);
                prov.Text = rdr.GetString(5);
                paiss.Text = rdr.GetString(6);
                telefono.Text = rdr.GetString(7);
                serie.Text = rdr.GetString(8);
                numero_serie.Text = (rdr.GetInt32(9).ToString("000") + "");
                cif.Text = rdr.GetString(10) + "";


            }
            if(lfct !=null)
            if (lfct.Count >0)
            {
                int n = numero_serie.Text.Count();
                if (lfct[lfct.Count - 1].Numero_Factura.Length > n)
                {
                    try
                    {
                        int ss = int.Parse(lfct[lfct.Count - 1].Numero_Factura.Substring(lfct[lfct.Count - 1].Numero_Factura.Length - n));
                        if (!numero_serie.Text.Equals(ss + 1 + ""))
                        {
                            string sql_connection = conexiondb;
                            SQLiteConnection cn2 = new SQLiteConnection(sql_connection);
                            if (cn2.State != ConnectionState.Open) cn.Open();
                            string sql_query = "UPDATE Camping SET Numero='" + (int.Parse(numero_serie.Text) + 1).ToString("000") + "'";
                            SQLiteCommand sql_cmd = new SQLiteCommand(sql_query, cn2);

                            sql_cmd.ExecuteNonQuery();
                            CargarEmpresa();
                        }
                    }
                    catch { }
                }
            }
            host.Text = Properties.Settings.Default.Host;
            puerto.Text = Properties.Settings.Default.Puerto;
            maill.Text = Properties.Settings.Default.Mail;
            contraseña.Password = Properties.Settings.Default.pssw;
            asunto.Text = Properties.Settings.Default.Asunto;
            cuerpo.Text = Properties.Settings.Default.Cuerpo;
        }

        private  void Event(string address, string state)
        {
            
                if (address.StartsWith("1/"))
                {

                }
                else if (address.StartsWith("0/"))
                {
                var data = string.Empty;
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                Log oLog = new Log(path2);
                if (state.Length == 1)
                {
                    data = ((byte)state[0]).ToString();
                }
                else
                {
                    var bytes = new byte[state.Length];
                    for (var i = 0; i < state.Length; i++)
                    {
                        bytes[i] = Convert.ToByte(state[i]);
                    }

                    data = state.Aggregate(data, (current, t) => current + t.ToString());
                }
                Properties.Settings.Default.sepuede2 = true;
                Properties.Settings.Default.Valor2 = 1+"";
                Properties.Settings.Default.Save();

                List<Direcciones> ld = ldir;
                if (ld.Find(x => x.Descripcion.Equals(address)).imagee.Equals("ON"))
                    ld.Find(x => x.Descripcion.Equals(address)).imagee = "OFF";
                else if (ld.Find(x => x.Descripcion.Equals(address)).imagee.Equals("OFF"))
                    ld.Find(x => x.Descripcion.Equals(address)).imagee = "ON";

                buss.Items.Refresh();
                Clientes.Items.Refresh();

            }
                else if (address.StartsWith("5/"))
                {   
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                
                Log oLog = new Log(path2);
                oLog.Add("MIRAR ESTADO AMPERIOS: " + address + " - " + (int)_connection.FromDataPoint("3.007", state));

            }
            else
                {
                    var data = string.Empty;
                    string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                    Log oLog = new Log(path2);
                    if (state.Length == 1)
                    {
                        data = ((byte)state[0]).ToString();
                    }
                    else
                    {
                        var bytes = new byte[state.Length];
                        for (var i = 0; i < state.Length; i++)
                        {
                            bytes[i] = Convert.ToByte(state[i]);
                        }

                        data = state.Aggregate(data, (current, t) => current + t.ToString());
                    }
                }
                
            
            return;

            //Console.WriteLine("New Event: device " + address + " has status (" + state + ") --> " + data);

        }

        private  void Status(string address, string state)
        {
            escribir(address, state);
            return;
        }
        private void escribir(string address, string state)
        {
            DateTime data = DateTime.Now;
            string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
            Log oLog = new Log(path2);
            string[] d = address.Split('/');
            string valores = "-2";

            mirado = false;
            Properties.Settings.Default.valor = "-2";

            Properties.Settings.Default.Save();

            oLog.Add("hola 4:");
            if (d[0].Equals("0"))
            {

            }
            else if (d[0].Equals("1"))
            {

                oLog.Add("hola 5:");
                valores = (int)_connection.FromDataPoint("3.008", state) + "";
                Properties.Settings.Default.valor = (int)_connection.FromDataPoint("3.008", state) + "";
                Properties.Settings.Default.sepuede = true;
                Properties.Settings.Default.Save();
                try { 
                Dispatcher.InvokeAsync(() =>
                {

                    oLog.Add("hola 5:");

                    if (valores.Equals("-7"))
                        busstext.Inlines.Add("Estado evento  3.008: ON" + "\n");
                    else if (valores.Equals("0"))
                        busstext.Inlines.Add("Estado evento  3.008: OFF" + "\n");
                    else
                        busstext.Inlines.Add("Estado evento  3.008: ERROR" + "\n");


                    oLog.Add("hola 6:");

                });
                }catch(Exception e){
                    oLog.Add("ERROR 3040: " + e.Message);

                }


            }
            else if (d[0].Equals("2"))
            {
                Dispatcher.InvokeAsync(() =>
                {

                    busstext.Inlines.Add("Estado evento  9.001: " + (decimal)_connection.FromDataPoint("9.001", state) + "\n");
                });
                valores = (decimal)_connection.FromDataPoint("9.001", state) + "";
                Properties.Settings.Default.valor = (decimal)_connection.FromDataPoint("9.001", state) + "";
                Properties.Settings.Default.sepuede = true;
                Properties.Settings.Default.Save();


            }
            else if (d[0].Equals("3"))
            {
                Dispatcher.InvokeAsync(() =>
                {

                });
            }
            else if (d[0].Equals("4"))
            {
                Dispatcher.InvokeAsync(() =>
                {

                });
            }
            else if (d[0].Equals("5"))
            {
                Dispatcher.InvokeAsync(() =>
                {

                });
            }
            else if (d[0].Equals("6"))
            {
                Dispatcher.InvokeAsync(() =>
                {

                });
            }

            if (valores.Equals("-2"))
            {

                mirado = false;
            }
            else
                mirado = true;
        }
        private void Connected()
        {
            Console.WriteLine("Connected!");
            string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
            Log oLog = new Log(path2);
            oLog.Add("Conectado!");
            Properties.Settings.Default.modulo = true;
            Properties.Settings.Default.Save();
            
        }

        private void Disconnected()
        {
            Properties.Settings.Default.modulo = false;
            Properties.Settings.Default.Save();

            
            Console.WriteLine("Disconnected!");
            if (_connection == null)
                return;

        }

        private async void cargarDirecciones()
        {
            ldrc = new List<Direcciones>();
            ldrc2 = new List<Direcciones>();
            ldir = new List<Direcciones>();
            buss.ItemsSource = ldir;
            Direccion_Parcela.Items.Clear();
            Direcciones_iluminacion.Items.Clear();
            Direcciones.Items.Clear();
            string cn_String = conexiondb;
            try
            {
                SQLiteConnection cn2 = new SQLiteConnection(conexiondb);

                bool actualizar = true;

                DateTime time = lista_tiempos[13];
                //DateTime.TryParse(mycontent, out time);
                string sql_Text2 = "SELECT * FROM Direcciones_v";
                cn2.Open();
                SQLiteCommand cmd2 = new SQLiteCommand(sql_Text2, cn2);
                SQLiteDataReader rdr2 = cmd2.ExecuteReader();
                List<string> ImportedFiles2 = new List<string>();

                DateTime? b = null;
                while (rdr2.Read())
                {
                    Console.WriteLine("Direcciones");
                    Console.WriteLine(rdr2.GetString(1));
                    DateTime d2 = DateTime.Parse(rdr2.GetString(1));
                    b = d2;
                }
                rdr2.Close();
                if (b != null)
                {
                   
                }
            }
            catch (Exception ee)
            {
            }
            SQLiteConnection cn = new SQLiteConnection(cn_String);

            if (cn.State != ConnectionState.Open) cn.Open();
            DataTable tb = new DataTable();

            string sql_Text = "SELECT * FROM Direcciones";
            SQLiteCommand cmd = new SQLiteCommand(sql_Text, cn);
            SQLiteDataReader rdr = cmd.ExecuteReader();
            Direcciones d = new Direcciones("", "", 0);
            ldrc.Add(d);

            while (rdr.Read())
            {
                d = new Direcciones(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2), rdr.GetInt32(3), rdr.GetInt32(4));
                
                if (d.Asignada == 0&&d.Nombre.Contains("On/Off")&&!d.Nombre.Contains("Vial."))
                {
                    Direccion_Parcela.Items.Add(d);
                }

                if (d.Nombre.Contains("On/Off"))
                {
                    ldrc2.Add(d);
                    
                    if (d.Nombre.Contains("Vial."))
                    {
                        Direcciones_iluminacion.Items.Add(d);
                    }
                    else
                    {
                        Direcciones.Items.Add(d);
                        ldrc.Add(d);

                        ldir.Add(d);
                    }
                }


            }

        }



        private void OnRendering(object sender, EventArgs e)
        {

            if (lbtn.Count == 0)
                if (!ok)
                {


                    if (point != null)
                    {
                        Point p = Mouse.GetPosition(scrollMapa);
                        Point p2 = new Point();
                        p2 = (Point)point;

                        if (p.Y - p2.Y != 0)
                        {

                            if (p.Y - p2.Y < 0)
                            {
                                //Console.WriteLine("Mover -");
                                scrollMapa.ScrollToVerticalOffset(scrollMapa.VerticalOffset + 6);
                                foreach (Border b in lbtn)
                                {
                                    b.Background = Brushes.Transparent;
                                }
                                listadeparcelas.Visibility = Visibility.Visible; lista_mapa.Visibility = Visibility.Collapsed;
                                //Nombre_Parcela.SelectedItem = null;
                                //Cliente_Parcela.SelectedItem = null;
                                lista_parcelas.SelectedItem = null;
                                if (ultParc != null)
                                {
                                    ultParc.ParcelaIsSelected = false;

                                }
                            }
                            else
                            {
                                ////console.writeline("Mover +");
                                //console.writeline("Y: " + (p.Y - p2.Y));
                                scrollMapa.ScrollToVerticalOffset(scrollMapa.VerticalOffset - 6);
                                foreach (Border b in lbtn)
                                {
                                    b.Background = Brushes.Transparent;
                                }
                                listadeparcelas.Visibility = Visibility.Visible; lista_mapa.Visibility = Visibility.Collapsed;
                                //Nombre_Parcela.SelectedItem = null;
                                //Cliente_Parcela.SelectedItem = null;
                                lista_parcelas.SelectedItem = null;
                                if (ultParc != null)
                                {
                                    ultParc.ParcelaIsSelected = false;

                                }

                            }
                        }
                        if (p.X - p2.X != 0)
                        {
                            //console.writeline("X: " + (p.X - p2.X) + "");
                            if (p.X - p2.X < 0)
                            {
                                //console.writeline("Mover -");
                                scrollMapa.ScrollToHorizontalOffset(scrollMapa.HorizontalOffset + 6);
                                foreach (Border b in lbtn)
                                {
                                    b.Background = Brushes.Transparent;
                                }
                                listadeparcelas.Visibility = Visibility.Visible; lista_mapa.Visibility = Visibility.Collapsed;
                                //Nombre_Parcela.SelectedItem = null;
                                //Cliente_Parcela.SelectedItem = null;
                                lista_parcelas.SelectedItem = null;
                                if (ultParc != null)
                                {
                                    ultParc.ParcelaIsSelected = false;

                                }
                            }
                            else
                            {
                                //console.writeline("Mover +");
                                scrollMapa.ScrollToHorizontalOffset(scrollMapa.HorizontalOffset - 6);
                                foreach (Border b in lbtn)
                                {
                                    b.Background = Brushes.Transparent;
                                }
                                listadeparcelas.Visibility = Visibility.Visible; lista_mapa.Visibility = Visibility.Collapsed;
                                //Nombre_Parcela.SelectedItem = null;
                                //Cliente_Parcela.SelectedItem = null;
                                lista_parcelas.SelectedItem = null;
                                if (ultParc != null)
                                {
                                    ultParc.ParcelaIsSelected = false;

                                }

                            }
                        }

                    }
                }
                else
                {if(mapa_menu.SelectedIndex!=1)
                    boton2_Mapa_Click(boton2_Mapa, RoutedEventArgs);
                }


        }

        private void ObservarNumero(object state)
        {

        }

        private void funcion(object sender, EventArgs e)
        {
            if (editarMapa)
            {
                listadeparcelas.Visibility = Visibility.Collapsed;
                lista_mapa.Visibility = Visibility.Visible;
            }
            else
            {
                listadeparcelas.Visibility = Visibility.Visible;
                lista_mapa.Visibility = Visibility.Collapsed;
            }
        }

        private void buscarUser(string user)
        {   

            user_log = new Usuarios();
            user_log = lusr.Find(x => x.Nombre_Usuario.Equals(user));
            rol_log = new Roles();
            rol_log = lrol.Find(x => x.Id == user_log.Rol);

            name_user.Text = user_log.nombreCompleto;
            user_rol.Text = rol_log.Nom;
            if (user_log.Nombre_Rol.Equals("admin"))
            {
                admin1.Visibility = Visibility.Visible;
                admin2.Visibility = Visibility.Visible;
                Addnewmapa.Visibility = Visibility.Visible;
                añadirdireccion1.Visibility = Visibility.Visible;
                añadirdireccion2.Visibility = Visibility.Visible;
                borrardireccion1.Visibility = Visibility.Visible;
                borrardireccion2.Visibility = Visibility.Visible;

            }
            else
            {
                admin1.Visibility = Visibility.Collapsed;
                admin2.Visibility = Visibility.Collapsed;
                Addnewmapa.Visibility = Visibility.Collapsed;
                añadirdireccion1.Visibility = Visibility.Collapsed;
                añadirdireccion2.Visibility = Visibility.Collapsed;
                borrardireccion1.Visibility = Visibility.Collapsed;
                borrardireccion2.Visibility = Visibility.Collapsed;
            }
        }





        /*++++++++++  FUNCIONES DE LOS BOTONES DE LOS MENUS Y SUBMENUS  ++++++++++*/

        private void Home(object sender, RoutedEventArgs e)
        {

            if (index != 0)
            {
                if (safe)
                {
                    MessageBoxResult result = MessageBox.Show("No se han guardado los datos ¿Desea continuar?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                    if (result == MessageBoxResult.OK)
                    {
                        if (viewBoxCamping.ActualWidth != 0)
                        {
                            Properties.Settings.Default.voff = scrollMapa.VerticalOffset;
                            Properties.Settings.Default.hoff = scrollMapa.HorizontalOffset;
                            Properties.Settings.Default.mapwidth = viewBoxCamping.ActualWidth;
                            Properties.Settings.Default.mapheight = viewBoxCamping.ActualHeight;
                            Properties.Settings.Default.Save();
                        }
                        safe = false;
                        index = 0;
                        tabcontrol.SelectedIndex = index;
                        boton1_Calendario_Click(boton1_Calendario, RoutedEventArgs);


                        agendai.Source = new BitmapImage(new Uri(@"/iconos/agendaclick.png", UriKind.RelativeOrAbsolute));
                        agendat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                        sistemai.Source = new BitmapImage(new Uri(@"/iconos/folder.png", UriKind.RelativeOrAbsolute));
                        sistemat.Foreground = Brushes.Black;

                        clientesi.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                        clientest.Foreground = Brushes.Black;

                        mapai.Source = new BitmapImage(new Uri(@"/iconos/map.png", UriKind.RelativeOrAbsolute));
                        mapat.Foreground = Brushes.Black;

                        facturai.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                        facturat.Foreground = Brushes.Black;
                        camarai.Source = new BitmapImage(new Uri(@"/iconos/camara.png", UriKind.RelativeOrAbsolute));

                        camarat.Foreground = Brushes.Black;

                        boton1_Calendariot.Text = "Calendario";

                        boton1_Sistema.BorderThickness = new Thickness(1);



                        /*Mirar fecha actual*/
                        MirarFecha();

                        /*Restablecer el calendario a 0*/
                        IniciarAgenda();


                        cargarEventos();
                        mirarEventos();
                    }

                }
                else
                {
                    if (viewBoxCamping.ActualWidth != 0)
                    {
                        Properties.Settings.Default.voff = scrollMapa.VerticalOffset;
                        Properties.Settings.Default.hoff = scrollMapa.HorizontalOffset;
                        Properties.Settings.Default.mapwidth = viewBoxCamping.ActualWidth;
                        Properties.Settings.Default.mapheight = viewBoxCamping.ActualHeight;
                        Properties.Settings.Default.Save();
                    }
                    index = 0;
                    tabcontrol.SelectedIndex = index;
                    boton1_Calendario_Click(boton1_Calendario, RoutedEventArgs);


                    agendai.Source = new BitmapImage(new Uri(@"/iconos/agendaclick.png", UriKind.RelativeOrAbsolute));
                    agendat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                    sistemai.Source = new BitmapImage(new Uri(@"/iconos/folder.png", UriKind.RelativeOrAbsolute));
                    sistemat.Foreground = Brushes.Black;

                    clientesi.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                    clientest.Foreground = Brushes.Black;

                    mapai.Source = new BitmapImage(new Uri(@"/iconos/map.png", UriKind.RelativeOrAbsolute));
                    mapat.Foreground = Brushes.Black;

                    facturai.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                    facturat.Foreground = Brushes.Black;
                    camarai.Source = new BitmapImage(new Uri(@"/iconos/camara.png", UriKind.RelativeOrAbsolute));

                    camarat.Foreground = Brushes.Black;

                    boton1_Calendariot.Text = "Calendario";

                    boton1_Sistema.BorderThickness = new Thickness(1);



                    /*Mirar fecha actual*/
                    MirarFecha();

                    /*Restablecer el calendario a 0*/
                    IniciarAgenda();


                    cargarEventos();
                    mirarEventos();

                }
                safe = false;
            }
            ComprobarRoles();
        }

        private void Trabajadores(object sender, RoutedEventArgs e)
        {
            if (index != 2)
            {
                if (safe)
                {
                    MessageBoxResult result = MessageBox.Show("No se han guardado los datos ¿Desea continuar?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                    if (result == MessageBoxResult.OK)
                    {
                        if (viewBoxCamping.ActualWidth != 0)
                        {
                            Properties.Settings.Default.voff = scrollMapa.VerticalOffset;
                            Properties.Settings.Default.hoff = scrollMapa.HorizontalOffset;
                            Properties.Settings.Default.mapwidth = viewBoxCamping.ActualWidth;
                            Properties.Settings.Default.mapheight = viewBoxCamping.ActualHeight;
                            Properties.Settings.Default.Save();
                        }
                        safe = false;
                        index = 2;
                        tabcontrol.SelectedIndex = index;
                        //boton1_Calendario _Click(boton1_Cientes, RoutedEventArgs);

                        boton1_Sistemat.Text = "Lista Usuarios";
                        boton2_Sistemat.Text = "Datos Usuario";
                        boton3_Sistemat.Text = "Lista Roles";
                        boton4_Sistemat.Text = "Datos Rol";
                        boton5_Sistemat.Text = "Lista IVA";
                        boton6_Sistemat.Text = "Datos IVA";

                        boton7_Sistemat.Text = "Electricidad";

                        boton8_Sistemat.Text = "Cámaras";
                        boton9_Sistemat.Text = "SMTP";

                        boton10_Sistemat.Text = "Empresa";
                        boton11_Sistemat.Text = "Vehiculos";
                        boton12_Sistemat.Text = "Direcciones";



                        agendai.Source = new BitmapImage(new Uri(@"/iconos/agenda.png", UriKind.RelativeOrAbsolute));
                        agendat.Foreground = Brushes.Black;

                        sistemai.Source = new BitmapImage(new Uri(@"/iconos/folderclick.png", UriKind.RelativeOrAbsolute));
                        sistemat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                        clientesi.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                        clientest.Foreground = Brushes.Black;

                        mapai.Source = new BitmapImage(new Uri(@"/iconos/map.png", UriKind.RelativeOrAbsolute));
                        mapat.Foreground = Brushes.Black;
                        camarai.Source = new BitmapImage(new Uri(@"/iconos/camara.png", UriKind.RelativeOrAbsolute));

                        camarat.Foreground = Brushes.Black;
                        facturai.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                        facturat.Foreground = Brushes.Black;

                        facturai.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                        facturat.Foreground = Brushes.Black;
                        boton1_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/clientclick.png", UriKind.RelativeOrAbsolute));
                        boton1_Sistemat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                        boton2_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                        boton2_Sistemat.Foreground = Brushes.Black;
                        boton3_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                        boton3_Sistemat.Foreground = Brushes.Black;
                        boton4_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/list.png", UriKind.RelativeOrAbsolute));
                        boton4_Sistemat.Foreground = Brushes.Black;
                        boton5_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                        boton5_Sistemat.Foreground = Brushes.Black;
                        boton6_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                        boton6_Sistemat.Foreground = Brushes.Black;
                        boton7_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                        boton7_Sistemat.Foreground = Brushes.Black;
                        boton8_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/folder.png", UriKind.RelativeOrAbsolute));
                        boton8_Sistemat.Foreground = Brushes.Black;
                        boton9_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                        boton9_Sistemat.Foreground = Brushes.Black;
                        boton10_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/box.png", UriKind.RelativeOrAbsolute));
                        boton10_Sistemat.Foreground = Brushes.Black;


                        boton1_Sistema.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                        boton1_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                        boton2_Sistema.Background = Brushes.Transparent;
                        boton2_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                        boton3_Sistema.Background = Brushes.Transparent;
                        boton3_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                        boton4_Sistema.Background = Brushes.Transparent;
                        boton4_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                        boton5_Sistema.Background = Brushes.Transparent;
                        boton5_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                        boton6_Sistema.Background = Brushes.Transparent;
                        boton6_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                        boton7_Sistema.Background = Brushes.Transparent;
                        boton7_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                        boton8_Sistema.Background = Brushes.Transparent;
                        boton8_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                        boton9_Sistema.Background = Brushes.Transparent;
                        boton9_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                        boton10_Sistema.Background = Brushes.Transparent;
                        boton10_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                        boton1_Sistema.BorderThickness = new Thickness(1);

                        boton1_Sistema_Click(boton1_Sistema, RoutedEventArgs);

                        boton2_Sistema.Visibility = Visibility.Collapsed;
                        boton4_Sistema.Visibility = Visibility.Collapsed;
                        boton6_Sistema.Visibility = Visibility.Collapsed;

                        Usuarios.SelectedItem = null;
                        Roles.SelectedItem = null;
                        change_Sistema.IsEnabled = false;

                        deleteSistema.Visibility = Visibility.Collapsed;
                        safe = false;

                    }

                }
                else
                {
                    if (viewBoxCamping.ActualWidth != 0)
                    {
                        Properties.Settings.Default.voff = scrollMapa.VerticalOffset;
                        Properties.Settings.Default.hoff = scrollMapa.HorizontalOffset;
                        Properties.Settings.Default.mapwidth = viewBoxCamping.ActualWidth;
                        Properties.Settings.Default.mapheight = viewBoxCamping.ActualHeight;
                        Properties.Settings.Default.Save();
                    }
                    index = 2;
                    tabcontrol.SelectedIndex = index;
                    //boton1_Calendario _Click(boton1_Cientes, RoutedEventArgs);

                    boton1_Sistemat.Text = "Lista Usuarios";
                    boton2_Sistemat.Text = "Datos Usuario";
                    boton3_Sistemat.Text = "Lista Roles";
                    boton4_Sistemat.Text = "Datos Rol";
                    boton5_Sistemat.Text = "Lista IVA";
                    boton6_Sistemat.Text = "Datos IVA";

                    boton7_Sistemat.Text = "Electricidad";

                    boton8_Sistemat.Text = "Cámaras";
                    boton9_Sistemat.Text = "SMTP";
                    boton10_Sistemat.Text = "Empresa";
                    boton10_Sistemat.Text = "Empresa";

                    boton11_Sistemat.Text = "Vehiculos";
                    boton12_Sistemat.Text = "Direcciones";

                    agendai.Source = new BitmapImage(new Uri(@"/iconos/agenda.png", UriKind.RelativeOrAbsolute));
                    agendat.Foreground = Brushes.Black;

                    sistemai.Source = new BitmapImage(new Uri(@"/iconos/folderclick.png", UriKind.RelativeOrAbsolute));
                    sistemat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                    clientesi.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                    clientest.Foreground = Brushes.Black;

                    mapai.Source = new BitmapImage(new Uri(@"/iconos/map.png", UriKind.RelativeOrAbsolute));
                    mapat.Foreground = Brushes.Black;
                    camarai.Source = new BitmapImage(new Uri(@"/iconos/camara.png", UriKind.RelativeOrAbsolute));

                    camarat.Foreground = Brushes.Black;

                    facturai.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                    facturat.Foreground = Brushes.Black;
                    boton1_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/clientclick.png", UriKind.RelativeOrAbsolute));
                    boton1_Sistemat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                    boton2_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton2_Sistemat.Foreground = Brushes.Black;
                    boton3_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                    boton3_Sistemat.Foreground = Brushes.Black;
                    boton4_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/list.png", UriKind.RelativeOrAbsolute));
                    boton4_Sistemat.Foreground = Brushes.Black;
                    boton5_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton5_Sistemat.Foreground = Brushes.Black;
                    boton6_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                    boton6_Sistemat.Foreground = Brushes.Black;
                    boton7_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton7_Sistemat.Foreground = Brushes.Black;
                    boton8_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/folder.png", UriKind.RelativeOrAbsolute));
                    boton8_Sistemat.Foreground = Brushes.Black;
                    boton9_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton9_Sistemat.Foreground = Brushes.Black;
                    boton10_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/box.png", UriKind.RelativeOrAbsolute));
                    boton10_Sistemat.Foreground = Brushes.Black;

                    boton1_Sistema.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                    boton1_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                    boton2_Sistema.Background = Brushes.Transparent;
                    boton2_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton3_Sistema.Background = Brushes.Transparent;
                    boton3_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton4_Sistema.Background = Brushes.Transparent;
                    boton4_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton5_Sistema.Background = Brushes.Transparent;
                    boton5_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton6_Sistema.Background = Brushes.Transparent;
                    boton6_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton7_Sistema.Background = Brushes.Transparent;
                    boton7_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton8_Sistema.Background = Brushes.Transparent;
                    boton8_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                    boton9_Sistema.Background = Brushes.Transparent;
                    boton9_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                    boton10_Sistema.Background = Brushes.Transparent;
                    boton10_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton1_Sistema.BorderThickness = new Thickness(1);

                    boton1_Sistema_Click(boton1_Sistema, RoutedEventArgs);

                    boton2_Sistema.Visibility = Visibility.Collapsed;
                    boton4_Sistema.Visibility = Visibility.Collapsed;
                    boton6_Sistema.Visibility = Visibility.Collapsed;

                    Usuarios.SelectedItem = null;
                    Roles.SelectedItem = null;

                    change_Sistema.IsEnabled = false;
                    safe = false;
                }
            }
            ComprobarRoles();

            deleteSistema.Visibility = Visibility.Collapsed;
        }
        private void Cliente(object sender, RoutedEventArgs e)
        {
            if (index != 1)
            {
                if (safe)
                {
                    if (viewBoxCamping.ActualWidth != 0)
                    {
                        Properties.Settings.Default.voff = scrollMapa.VerticalOffset;
                        Properties.Settings.Default.hoff = scrollMapa.HorizontalOffset;
                        Properties.Settings.Default.mapwidth = viewBoxCamping.ActualWidth;
                        Properties.Settings.Default.mapheight = viewBoxCamping.ActualHeight;
                        Properties.Settings.Default.Save();
                    }
                    MessageBoxResult result = MessageBox.Show("No se han guardado los datos ¿Desea continuar?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                    if (result == MessageBoxResult.OK)
                    {
                        cliente_menu.SelectedIndex = 0;
                        safe = false;

                        index = 1;
                        tabcontrol.SelectedIndex = index;



                        agendai.Source = new BitmapImage(new Uri(@"/iconos/agenda.png", UriKind.RelativeOrAbsolute));
                        agendat.Foreground = Brushes.Black;

                        sistemai.Source = new BitmapImage(new Uri(@"/iconos/folder.png", UriKind.RelativeOrAbsolute));
                        sistemat.Foreground = Brushes.Black;

                        clientesi.Source = new BitmapImage(new Uri(@"/iconos/userclick.png", UriKind.RelativeOrAbsolute));
                        clientest.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                        mapai.Source = new BitmapImage(new Uri(@"/iconos/map.png", UriKind.RelativeOrAbsolute));
                        mapat.Foreground = Brushes.Black;

                        facturai.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                        facturat.Foreground = Brushes.Black;

                        camarai.Source = new BitmapImage(new Uri(@"/iconos/camara.png", UriKind.RelativeOrAbsolute));

                        camarat.Foreground = Brushes.Black;

                        boton1_Cientest.Text = "Datos Cliente";
                        boton2_Cientest.Text = "Datos Bancarios";
                        boton3_Cientest.Text = "Electricidad";

                        boton4_Cientest.Text = "Etiquetas Apli";
                        boton5_Cientest.Text = "Ficha Cliente";


                        boton1_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/clientclick.png", UriKind.RelativeOrAbsolute));
                        boton1_Cientest.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                        boton2_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                        boton2_Cientest.Foreground = Brushes.Black;
                        boton3_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/box.png", UriKind.RelativeOrAbsolute));
                        boton3_Cientest.Foreground = Brushes.Black;
                        boton4_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                        boton4_Cientest.Foreground = Brushes.Black;
                        boton5_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                        boton5_Cientest.Foreground = Brushes.Black;

                        boton1_Sistema.BorderThickness = new Thickness(1);


                        CargarParcela();
                        CargarVehiculos();
                        clientebool = true;
                        cargarClientes();
                        
                        //cargarRegistros();
                        change_client.IsEnabled = false;
                        safe = false;
                        if (boton5_Cientes.Visibility == Visibility.Collapsed)
                            if (boton1_Cientes.Visibility == Visibility.Collapsed)
                                if (boton2_Cientes.Visibility == Visibility.Collapsed)
                                    if (boton3_Cientes.Visibility == Visibility.Collapsed)
                                        if (boton4_Cientes.Visibility == Visibility.Collapsed)

                                            cliente_menu.SelectedIndex = 6;

                                        else
                                            boton4_Cientes_Click(boton5_Cientes, RoutedEventArgs);
                                    else
                                        boton3_Cientes_Click(boton5_Cientes, RoutedEventArgs);
                                else
                                    boton2_Cientes_Click(boton5_Cientes, RoutedEventArgs);
                            else
                                boton1_Cientes_Click(boton5_Cientes, RoutedEventArgs);
                        else
                            boton5_Cientes_Click(boton5_Cientes, RoutedEventArgs);
                    }
                }
                else
                {


                    cliente_menu.SelectedIndex = 0;
                    if (viewBoxCamping.ActualWidth != 0)
                    {
                        Properties.Settings.Default.voff = scrollMapa.VerticalOffset;
                        Properties.Settings.Default.hoff = scrollMapa.HorizontalOffset;
                        Properties.Settings.Default.mapwidth = viewBoxCamping.ActualWidth;
                        Properties.Settings.Default.mapheight = viewBoxCamping.ActualHeight;
                        Properties.Settings.Default.Save();
                    }
                    index = 1;
                    tabcontrol.SelectedIndex = index;



                    agendai.Source = new BitmapImage(new Uri(@"/iconos/agenda.png", UriKind.RelativeOrAbsolute));
                    agendat.Foreground = Brushes.Black;

                    sistemai.Source = new BitmapImage(new Uri(@"/iconos/folder.png", UriKind.RelativeOrAbsolute));
                    sistemat.Foreground = Brushes.Black;

                    clientesi.Source = new BitmapImage(new Uri(@"/iconos/userclick.png", UriKind.RelativeOrAbsolute));
                    clientest.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                    mapai.Source = new BitmapImage(new Uri(@"/iconos/map.png", UriKind.RelativeOrAbsolute));
                    mapat.Foreground = Brushes.Black;

                    facturai.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                    facturat.Foreground = Brushes.Black;

                    camarat.Foreground = Brushes.Black;

                    boton1_Cientest.Text = "Datos Cliente";
                    boton2_Cientest.Text = "Datos Bancarios";
                    boton3_Cientest.Text = "Contratación";

                    boton4_Cientest.Text = "Etiquetas APLI";

                    boton5_Cientest.Text = "Ficha Cliente";
                    boton1_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/clientclick.png", UriKind.RelativeOrAbsolute));
                    boton1_Cientest.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                    boton2_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton2_Cientest.Foreground = Brushes.Black;
                    boton3_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/box.png", UriKind.RelativeOrAbsolute));
                    boton3_Cientest.Foreground = Brushes.Black;
                    boton4_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                    boton4_Cientest.Foreground = Brushes.Black;
                    boton5_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                    boton5_Cientest.Foreground = Brushes.Black;

                    boton1_Sistema.BorderThickness = new Thickness(1);

                    CargarParcela();
                    CargarVehiculos();
                    clientebool = true;
                    cargarClientes();
                   
                    
                    //cargarRegistros();
                    change_client.IsEnabled = false;
                    safe = false;



                }
                if (boton5_Cientes.Visibility == Visibility.Collapsed)
                    if (boton1_Cientes.Visibility == Visibility.Collapsed)
                        if (boton2_Cientes.Visibility == Visibility.Collapsed)
                            if (boton3_Cientes.Visibility == Visibility.Collapsed)
                                if (boton4_Cientes.Visibility == Visibility.Collapsed)
                                {
                                    cliente_menu.SelectedIndex = 6;
                                    botones.Visibility = Visibility.Collapsed;
                                }
                                else
                                    boton4_Cientes_Click(boton5_Cientes, RoutedEventArgs);
                            else
                                boton3_Cientes_Click(boton5_Cientes, RoutedEventArgs);
                        else
                            boton2_Cientes_Click(boton5_Cientes, RoutedEventArgs);
                    else
                        boton1_Cientes_Click(boton5_Cientes, RoutedEventArgs);
                else
                {
                    boton5_Cientes_Click(boton5_Cientes, RoutedEventArgs);

                }
            }
            ComprobarRoles();
        }



        private void Mapa(object sender, RoutedEventArgs e)
        {
            if (index != 3)
            {
                if (safe)
                {
                    MessageBoxResult result = MessageBox.Show("No se han guardado los datos ¿Desea continuar?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                    if (result == MessageBoxResult.OK)
                    {
                        safe = false;
                        index = 3;
                        editando = false;
                        editarMapa = false;
                        SomeBool = editarMapa;
                        tabcontrol.SelectedIndex = index;
                        //boton1_Calendario _Click(boton1_Cientes, RoutedEventArgs);


                        boton1_Mapat.Text = "Mapa";
                        boton2_Mapat.Text = "Parcelas";

                        boton1_Mapa.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                        boton1_Mapa.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                        boton2_Mapa.Background = Brushes.Transparent;
                        boton2_Mapa.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                        boton3_Mapa.Background = Brushes.Transparent;
                        boton3_Mapa.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                        boton4_Mapa.Background = Brushes.Transparent;
                        boton4_Mapa.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                        boton5_Mapa.Background = Brushes.Transparent;
                        boton5_Mapa.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                        boton6_Mapa.Background = Brushes.Transparent;
                        boton6_Mapa.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                        agendai.Source = new BitmapImage(new Uri(@"/iconos/agenda.png", UriKind.RelativeOrAbsolute));
                        agendat.Foreground = Brushes.Black;

                        sistemai.Source = new BitmapImage(new Uri(@"/iconos/folder.png", UriKind.RelativeOrAbsolute));
                        sistemat.Foreground = Brushes.Black;

                        clientesi.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                        clientest.Foreground = Brushes.Black;

                        mapai.Source = new BitmapImage(new Uri(@"/iconos/mapclick.png", UriKind.RelativeOrAbsolute));
                        mapat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                        facturai.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                        facturat.Foreground = Brushes.Black;

                        camarai.Source = new BitmapImage(new Uri(@"/iconos/camara.png", UriKind.RelativeOrAbsolute));

                        camarat.Foreground = Brushes.Black;

                        boton1_Mapai.Source = new BitmapImage(new Uri(@"/iconos/mapclick.png", UriKind.RelativeOrAbsolute));
                        boton1_Mapat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                        boton2_Mapai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                        boton2_Mapat.Foreground = Brushes.Black;

                        boton3_Mapai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                        boton3_Mapat.Foreground = Brushes.Black;
                        boton4_Mapai.Source = new BitmapImage(new Uri(@"/iconos/list.png", UriKind.RelativeOrAbsolute));
                        boton4_Mapat.Foreground = Brushes.Black;
                        boton5_Mapai.Source = new BitmapImage(new Uri(@"/iconos/plus.png", UriKind.RelativeOrAbsolute));
                        boton5_Mapat.Foreground = Brushes.Black;

                        boton1_Mapa.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                        boton1_Mapa.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                        boton2_Mapa.Background = Brushes.Transparent;
                        boton2_Mapa.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                        boton3_Mapa.Background = Brushes.Transparent;
                        boton3_Mapa.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                        boton4_Mapa.Background = Brushes.Transparent;
                        boton4_Mapa.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                        boton5_Mapa.Background = Brushes.Transparent;
                        boton5_Mapa.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                        boton6_Mapa.Background = Brushes.Transparent;
                        boton6_Mapa.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                        boton1_Sistema.BorderThickness = new Thickness(1);

                        clientebool = true;
                        cargarClientes();

                        boton1_Mapa_Click(boton1_Mapa, RoutedEventArgs);
                        limpiarParcela();
                    }

                }
                else
                {


                    index = 3;
                    tabcontrol.SelectedIndex = index;
                    //boton1_Calendario _Click(boton1_Cientes, RoutedEventArgs);

                    editando = false;
                    boton1_Mapat.Text = "Mapa";
                    boton2_Mapat.Text = "Parcelas";
                    editarMapa = false;
                    SomeBool = editarMapa;
                    boton1_Mapa.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                    boton1_Mapa.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                    boton2_Mapa.Background = Brushes.Transparent;
                    boton2_Mapa.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton3_Mapa.Background = Brushes.Transparent;
                    boton3_Mapa.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton4_Mapa.Background = Brushes.Transparent;
                    boton4_Mapa.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton5_Mapa.Background = Brushes.Transparent;
                    boton5_Mapa.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton6_Mapa.Background = Brushes.Transparent;
                    boton6_Mapa.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    agendai.Source = new BitmapImage(new Uri(@"/iconos/agenda.png", UriKind.RelativeOrAbsolute));
                    agendat.Foreground = Brushes.Black;

                    sistemai.Source = new BitmapImage(new Uri(@"/iconos/folder.png", UriKind.RelativeOrAbsolute));
                    sistemat.Foreground = Brushes.Black;

                    clientesi.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                    clientest.Foreground = Brushes.Black;

                    mapai.Source = new BitmapImage(new Uri(@"/iconos/mapclick.png", UriKind.RelativeOrAbsolute));
                    mapat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                    facturai.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                    facturat.Foreground = Brushes.Black;

                    camarai.Source = new BitmapImage(new Uri(@"/iconos/camara.png", UriKind.RelativeOrAbsolute));

                    camarat.Foreground = Brushes.Black;

                    boton1_Mapai.Source = new BitmapImage(new Uri(@"/iconos/mapclick.png", UriKind.RelativeOrAbsolute));
                    boton1_Mapat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                    boton2_Mapai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton2_Mapat.Foreground = Brushes.Black;

                    boton3_Mapai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                    boton3_Mapat.Foreground = Brushes.Black;
                    boton4_Mapai.Source = new BitmapImage(new Uri(@"/iconos/list.png", UriKind.RelativeOrAbsolute));
                    boton4_Mapat.Foreground = Brushes.Black;
                    boton5_Mapai.Source = new BitmapImage(new Uri(@"/iconos/plus.png", UriKind.RelativeOrAbsolute));
                    boton5_Mapat.Foreground = Brushes.Black;

                    boton1_Mapa.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                    boton1_Mapa.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                    boton2_Mapa.Background = Brushes.Transparent;
                    boton2_Mapa.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton3_Mapa.Background = Brushes.Transparent;
                    boton3_Mapa.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton4_Mapa.Background = Brushes.Transparent;
                    boton4_Mapa.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton5_Mapa.Background = Brushes.Transparent;
                    boton5_Mapa.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton6_Mapa.Background = Brushes.Transparent;
                    boton6_Mapa.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton1_Sistema.BorderThickness = new Thickness(1);

                    clientebool = true;
                    cargarClientes();
                    boton1_Mapa_Click(boton1_Mapa, RoutedEventArgs);
                    limpiarParcela();
                }
                safe = false;
            }
            ComprobarRoles();
        }

        private void Factura(object sender, RoutedEventArgs e)
        {
            if (index != 4)
            {
                if (safe)
                {
                    MessageBoxResult result = MessageBox.Show("No se han guardado los datos ¿Desea continuar?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                    if (result == MessageBoxResult.OK)
                    {
                        if (viewBoxCamping.ActualWidth != 0)
                        {
                            Properties.Settings.Default.voff = scrollMapa.VerticalOffset;
                            Properties.Settings.Default.hoff = scrollMapa.HorizontalOffset;
                            Properties.Settings.Default.mapwidth = viewBoxCamping.ActualWidth;
                            Properties.Settings.Default.mapheight = viewBoxCamping.ActualHeight;
                            Properties.Settings.Default.Save();
                        }
                        safe = false;
                        index = 4;
                        tabcontrol.SelectedIndex = index;
                        //boton1_Calendario _Click(boton1_Cientes, RoutedEventArgs);

                        boton1_Facturat.Text = "Lista Facturas";
                        boton2_Facturat.Text = "Datos Factura";
                        boton3_Facturat.Text = "Lista Recibos";
                        boton4_Facturat.Text = "Datos Recibo";
                        boton5_Facturat.Text = "Lista Productos";
                        boton4_Facturab.Visibility = Visibility.Collapsed;

                        agendai.Source = new BitmapImage(new Uri(@"/iconos/agenda.png", UriKind.RelativeOrAbsolute));
                        agendat.Foreground = Brushes.Black;

                        sistemai.Source = new BitmapImage(new Uri(@"/iconos/folder.png", UriKind.RelativeOrAbsolute));
                        sistemat.Foreground = Brushes.Black;

                        clientesi.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                        clientest.Foreground = Brushes.Black;

                        mapai.Source = new BitmapImage(new Uri(@"/iconos/map.png", UriKind.RelativeOrAbsolute));
                        mapat.Foreground = Brushes.Black;

                        facturai.Source = new BitmapImage(new Uri(@"/iconos/libraryclick.png", UriKind.RelativeOrAbsolute));
                        facturat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                        camarai.Source = new BitmapImage(new Uri(@"/iconos/camara.png", UriKind.RelativeOrAbsolute));

                        camarat.Foreground = Brushes.Black;

                        boton1_Facturai.Source = new BitmapImage(new Uri(@"/iconos/clientclick.png", UriKind.RelativeOrAbsolute));
                        boton1_Facturat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                        boton2_Facturai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                        boton2_Facturat.Foreground = Brushes.Black;
                        boton3_Facturai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                        boton3_Facturat.Foreground = Brushes.Black;
                        boton4_Facturai.Source = new BitmapImage(new Uri(@"/iconos/list.png", UriKind.RelativeOrAbsolute));
                        boton4_Facturat.Foreground = Brushes.Black;
                        boton5_Facturai.Source = new BitmapImage(new Uri(@"/iconos/box.png", UriKind.RelativeOrAbsolute));
                        boton5_Facturat.Foreground = Brushes.Black;

                        boton1_Factura.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                        boton1_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                        boton2_Factura.Background = Brushes.Transparent;
                        boton2_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                        boton3_Factura.Background = Brushes.Transparent;
                        boton3_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                        boton4_Factura.Background = Brushes.Transparent;
                        boton4_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                        boton5_Factura.Background = Brushes.Transparent;
                        boton5_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                        boton6_Factura.Background = Brushes.Transparent;
                        boton6_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                        boton1_Sistema.BorderThickness = new Thickness(1);

                        boton1_Factura_Click(boton1_Factura, RoutedEventArgs);
                        CargarFacturas();
                        CargarRecibos();
                        boton2_Facturab.Visibility = Visibility.Collapsed;

                        Facturas.SelectedItem = null;
                        boton1_Factura_Click(boton1_Factura, RoutedEventArgs);
                    }
                    change_Factura.IsEnabled = false;
                }
                else
                {
                    index = 4;
                    tabcontrol.SelectedIndex = index;
                    //boton1_Calendario _Click(boton1_Cientes, RoutedEventArgs);
                    if (viewBoxCamping.ActualWidth != 0)
                    {
                        Properties.Settings.Default.voff = scrollMapa.VerticalOffset;
                        Properties.Settings.Default.hoff = scrollMapa.HorizontalOffset;
                        Properties.Settings.Default.mapwidth = viewBoxCamping.ActualWidth;
                        Properties.Settings.Default.mapheight = viewBoxCamping.ActualHeight;
                        Properties.Settings.Default.Save();
                    }
                    boton1_Facturat.Text = "Lista Facturas";
                    boton2_Facturat.Text = "Datos Factura";
                    boton3_Facturat.Text = "Lista Recibos";

                    boton4_Facturat.Text = "Datos Recibo";
                    boton5_Facturat.Text = "Lista Productos";
                    boton4_Facturab.Visibility = Visibility.Collapsed;

                    agendai.Source = new BitmapImage(new Uri(@"/iconos/agenda.png", UriKind.RelativeOrAbsolute));
                    agendat.Foreground = Brushes.Black;

                    sistemai.Source = new BitmapImage(new Uri(@"/iconos/folder.png", UriKind.RelativeOrAbsolute));
                    sistemat.Foreground = Brushes.Black;

                    clientesi.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                    clientest.Foreground = Brushes.Black;

                    mapai.Source = new BitmapImage(new Uri(@"/iconos/map.png", UriKind.RelativeOrAbsolute));
                    mapat.Foreground = Brushes.Black;

                    facturai.Source = new BitmapImage(new Uri(@"/iconos/libraryclick.png", UriKind.RelativeOrAbsolute));
                    facturat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                    camarai.Source = new BitmapImage(new Uri(@"/iconos/camara.png", UriKind.RelativeOrAbsolute));

                    camarat.Foreground = Brushes.Black;

                    boton1_Facturai.Source = new BitmapImage(new Uri(@"/iconos/clientclick.png", UriKind.RelativeOrAbsolute));
                    boton1_Facturat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                    boton2_Facturai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton2_Facturat.Foreground = Brushes.Black;
                    boton3_Facturai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                    boton3_Facturat.Foreground = Brushes.Black;
                    boton4_Facturai.Source = new BitmapImage(new Uri(@"/iconos/list.png", UriKind.RelativeOrAbsolute));
                    boton4_Facturat.Foreground = Brushes.Black;
                    boton5_Facturai.Source = new BitmapImage(new Uri(@"/iconos/box.png", UriKind.RelativeOrAbsolute));
                    boton5_Facturat.Foreground = Brushes.Black;

                    boton1_Factura.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                    boton1_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                    boton2_Factura.Background = Brushes.Transparent;
                    boton2_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton3_Factura.Background = Brushes.Transparent;
                    boton3_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton4_Factura.Background = Brushes.Transparent;
                    boton4_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton5_Factura.Background = Brushes.Transparent;
                    boton5_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton6_Factura.Background = Brushes.Transparent;
                    boton6_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton1_Sistema.BorderThickness = new Thickness(1);

                    boton1_Factura_Click(boton1_Factura, RoutedEventArgs);
                    CargarFacturas();
                    CargarRecibos();
                    boton2_Facturab.Visibility = Visibility.Collapsed;

                    Facturas.SelectedItem = null;
                    boton1_Factura_Click(boton1_Factura, RoutedEventArgs);
                }
                change_Factura.IsEnabled = false;
                safe = false;

            }
            ComprobarRoles();
            deleteFactura.Visibility = Visibility.Collapsed;

        }

        private void Camara(object sender, RoutedEventArgs e)
        {
            if (index != 5)
            {
                if (safe)
                {
                    MessageBoxResult result = MessageBox.Show("No se han guardado los datos ¿Desea continuar?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                    if (result == MessageBoxResult.OK)
                    {
                        if (viewBoxCamping.ActualWidth != 0)
                        {
                            Properties.Settings.Default.voff = scrollMapa.VerticalOffset;
                            Properties.Settings.Default.hoff = scrollMapa.HorizontalOffset;
                            Properties.Settings.Default.mapwidth = viewBoxCamping.ActualWidth;
                            Properties.Settings.Default.mapheight = viewBoxCamping.ActualHeight;
                            Properties.Settings.Default.Save();
                        }
                        safe = false;
                        index = 5;
                        tabcontrol.SelectedIndex = index;
                        agendai.Source = new BitmapImage(new Uri(@"/iconos/agenda.png", UriKind.RelativeOrAbsolute));
                        agendat.Foreground = Brushes.Black;

                        sistemai.Source = new BitmapImage(new Uri(@"/iconos/folder.png", UriKind.RelativeOrAbsolute));
                        sistemat.Foreground = Brushes.Black;

                        clientesi.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                        clientest.Foreground = Brushes.Black;

                        mapai.Source = new BitmapImage(new Uri(@"/iconos/map.png", UriKind.RelativeOrAbsolute));
                        mapat.Foreground = Brushes.Black;

                        facturai.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                        facturat.Foreground = Brushes.Black;

                        camarai.Source = new BitmapImage(new Uri(@"/iconos/camara_click.png", UriKind.RelativeOrAbsolute));
                        camarat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                    }
                }
                else
                {
                    if (viewBoxCamping.ActualWidth != 0)
                    {
                        Properties.Settings.Default.voff = scrollMapa.VerticalOffset;
                        Properties.Settings.Default.hoff = scrollMapa.HorizontalOffset;
                        Properties.Settings.Default.mapwidth = viewBoxCamping.ActualWidth;
                        Properties.Settings.Default.mapheight = viewBoxCamping.ActualHeight;
                        Properties.Settings.Default.Save();
                    }
                    index = 5;
                    tabcontrol.SelectedIndex = index;
                    agendai.Source = new BitmapImage(new Uri(@"/iconos/agenda.png", UriKind.RelativeOrAbsolute));
                    agendat.Foreground = Brushes.Black;

                    sistemai.Source = new BitmapImage(new Uri(@"/iconos/folder.png", UriKind.RelativeOrAbsolute));
                    sistemat.Foreground = Brushes.Black;

                    clientesi.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                    clientest.Foreground = Brushes.Black;

                    mapai.Source = new BitmapImage(new Uri(@"/iconos/map.png", UriKind.RelativeOrAbsolute));
                    mapat.Foreground = Brushes.Black;

                    facturai.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                    facturat.Foreground = Brushes.Black;

                    camarai.Source = new BitmapImage(new Uri(@"/iconos/camara_click.png", UriKind.RelativeOrAbsolute));
                    camarat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                }
                safe = false;

                //boton1_Calendario _Click(boton1_Cientes, RoutedEventArgs);
            }
        }
        //////////////////////////////////////////////////////////////////////////////////

        /*++++++++++ FUNCIONES Y BOTONES CALENDARIO&  ++++++++++*/

        //BOTONES SUBMENU
        private void boton1_Calendario_Click(object sender, RoutedEventArgs e)
        {
            boton1_Calendario.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
            boton1_Calendario.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
            boton1_Calendarioi.Source = new BitmapImage(new Uri(@"/iconos/agendaclick.png", UriKind.RelativeOrAbsolute));
            boton1_Calendariot.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);



        }

        private void boton2_Calendario_Click(object sender, RoutedEventArgs e)
        {

        }

        private void boton3_Calendario_Click(object sender, RoutedEventArgs e)
        {

        }

        private void boton4_Calendario_Click(object sender, RoutedEventArgs e)
        {

        }

        private void boton5_Calendario_Click(object sender, RoutedEventArgs e)
        {

        }

        private void boton6_Calendario_Click(object sender, RoutedEventArgs e)
        {

        }

        private void boton7_Calendario_Click(object sender, RoutedEventArgs e)
        {

        }




        //BOTONES HERRAMIENTAS

        private void cambio_pantalla1(object sender, RoutedEventArgs e)
        {
            ve.Close();
            ve = new VentanaEvento(null, dia, mes, año, "insert", false);
            ve.Show();
            ve.Show();

        }

        private void cambio_pantalla2(object sender, RoutedEventArgs e)
        {
            if (lvw != null)
            {


                cambio = true;
                if (dia_actual == null)
                {
                    dia_actual = (Border)sender;
                    //console.writeline(dia_actual.Child);
                }


                Grid g = new Grid();
                if (dia_actual.Child is Border)
                {
                    Border bb = dia_actual.Child as Border;
                    g = bb.Child as Grid;
                }
                else
                {
                    g = dia_actual.Child as Grid;
                }

                Border b = new Border();
                Button la = new Button();
                if (g.Children[0] is Border)
                {
                    b = g.Children[0] as Border;
                    la = b.Child as Button;
                }
                else
                {
                    la = g.Children[0] as Button;
                }

                ScrollViewer sv = (ScrollViewer)g.Children[1];
                Grid gg = (Grid)sv.Content as Grid;
                ListView lv = gg.Children[0] as ListView;
                string a = la.Content as string;
                if (lv.SelectedItem == null)
                {
                    Border bb = (Border)sender;
                    Grid gg2 = (Grid)bb.Child;
                    Label la2 = (Label)gg2.Children[0];
                    Eventos eee = (Eventos)lv.Items[0];

                    Eventos evento_actual = (Eventos)levn.Select(sublist => sublist).Where(item => item.id.Equals(la2.Content)).First();

                    //Console.WriteLine((Application.Current.Windows.OfType<ListadodeEventos>().Count()));

                    if (ve is null)
                    {
                        ve = new VentanaEvento(evento_actual, a, mes, año, "update", false);
                        ve.Show();
                    }
                    else
                    {
                        ve.Close();
                        ve = new VentanaEvento(evento_actual, a, mes, año, "update", false);
                        ve.Show();
                    }


                }
                else
                {
                    if (ve is null)
                    {
                        ve = new VentanaEvento(lv.SelectedItem as Eventos, a, mes, año, "update", false);
                        ve.Show();
                    }
                    else
                    {
                        ve.Close();
                        ve = new VentanaEvento(lv.SelectedItem as Eventos, a, mes, año, "update", false);
                        ve.Show();
                    }
                }

            }
        }



        private void Borrar_evento(object sender, RoutedEventArgs e)
        {

            Border b2 = null;
            Grid b = null;
            if (dia_actual.Child is Border)
            {
                b2 = dia_actual.Child as Border;
                b = b2.Child as Grid;
            }
            else
            {
                b = dia_actual.Child as Grid;
            }
            evento_borrado = dia_actual;


            ScrollViewer sv = b.Children[1] as ScrollViewer;
            Grid gg = sv.Content as Grid;
            ListView lv = gg.Children[0] as ListView;
            if (lv.SelectedItem == null)
            {
                MessageBoxResult result = MessageBox.Show("Desea borrar todos los eventos del día seleccionado?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                if (result == MessageBoxResult.OK)
                {
                    List<Eventos> lventos = levn.Select(x => x).Where(x => x.dia == dia && x.mes == mes && x.año == año).ToList();
                    foreach (Eventos even in lventos)
                    {
                        DeleteEventos(even, false);

                        DateTime dt = DateTime.Parse("01/" + mes + "/" + año);

                        iniciarCalendario();
                        llenarCalendario(System.DateTime.DaysInMonth(int.Parse(año), int.Parse(mes)), dt.ToString("dddd", new CultureInfo("es-ES")));
                        mirarFecha();

                        ClearCalendario();
                        mirar_dia_rojo();
                        cargarEventos();
                        mirarEventos();

                        if (dia_actual.Child is Border)
                        {
                            //console.writeline(dia_actual.Parent);
                            Border b22 = dia_actual as Border;
                            //console.writeline(b22.Child);
                            Border bb = b22.Child as Border;
                            //console.writeline(dia_actual.BorderBrush);
                            //console.writeline(b22.BorderBrush);
                            //console.writeline(bb.BorderBrush);
                            dia_actual.BorderThickness = new Thickness(2);
                            dia_actual.BorderBrush = System.Windows.Media.Brushes.Red;
                        }
                        else
                        {
                            dia_actual.BorderThickness = borderthikness_dia_actual.BorderThickness;
                            dia_actual.BorderBrush = System.Windows.Media.Brushes.LightGray;
                        }
                    }
                }
            }
            else
            {
                DeleteEvento(lv.SelectedItem as Eventos, false);
                DateTime dt = DateTime.Parse("01/" + mes + "/" + año);

                iniciarCalendario();
                llenarCalendario(System.DateTime.DaysInMonth(int.Parse(año), int.Parse(mes)), dt.ToString("dddd", new CultureInfo("es-ES")));
                mirarFecha();

                ClearCalendario();
                mirar_dia_rojo();
                cargarEventos();
                mirarEventos();

                if (dia_actual.Child is Border)
                {
                    //console.writeline(dia_actual.Parent);
                    Border b22 = dia_actual as Border;
                    //console.writeline(b22.Child);
                    Border bb = b22.Child as Border;
                    //console.writeline(dia_actual.BorderBrush);
                    //console.writeline(b22.BorderBrush);
                    //console.writeline(bb.BorderBrush);
                    dia_actual.BorderThickness = new Thickness(2);
                    dia_actual.BorderBrush = System.Windows.Media.Brushes.Red;
                }
                else
                {
                    dia_actual.BorderThickness = borderthikness_dia_actual.BorderThickness;
                    dia_actual.BorderBrush = System.Windows.Media.Brushes.LightGray;
                }

            }
        }

        private void DeleteEventos(Eventos e, bool v)
        {
            try
            {

                List<string> parametros = new List<string>();
                Consulta consulta;
                SQLiteConnection cn = new SQLiteConnection(conexiondb);
                cn.Open();
                string sql_query = "DELETE FROM Evento WHERE Id=" + e.id;
                while (observartodotoken)
                {

                }
                SQLiteCommand sql_cmd = new SQLiteCommand(sql_query, cn);
                while (observartodotoken)
                {

                }
                consulta = new Consulta("Evento", parametros, "Id:" + e.id, "DELETE");
                Lista_consultas.Add(consulta);
                cambio = true;
                lvw = null;
                cambio = false;
                sql_cmd.ExecuteNonQuery();
                cn.Close();
                cargarEventos();

                mirar_dia_rojo();
                dia_actual.Background = Brushes.Transparent;

                if (v)
                {
                    vd.Close();

                    vd = new VentanaDia(dia, mes, año, levn.Select(sublist => sublist).Where(x => x.dia.Equals(dia) && x.mes.Equals(mes) && x.año.Equals(año)).ToList(), permisos);
                    vd.Show();
                }


            }
            catch (Exception ee)
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                Peta(ee, line + "");
            }
        }

        private void clear_evento_Click(object sender, RoutedEventArgs e)
        {
            if (lvw != null)
                lvw.SelectedItem = null;


            lvw = null;
            deleteEvento.Visibility = Visibility.Collapsed;
            editEvento.Visibility = Visibility.Collapsed;
            
            mirar_dia_rojo(); MirarFecha();
            IniciarAgenda(); mirarEventos();
            cargarEventos();

        }

        private void mes_atras(object sender, RoutedEventArgs e)
        {
            int i = int.Parse(mes);
            if (i > 1)
            {
                i--;

                if (i.ToString().Length > 1)
                {
                    mes = i.ToString();
                }
                else
                {
                    mes = "0" + i.ToString();
                }
                DateTimeFormatInfo formatoFecha = CultureInfo.CurrentCulture.DateTimeFormat;
                string nombreMes = formatoFecha.GetMonthName(int.Parse(mes));
                nombreMes = nombreMes.Substring(0, 1).ToUpper() + nombreMes.Substring(1).ToLower();
                mes_calendario.Text = nombreMes;
                mirar_dia_rojo();


                DateTime dt = DateTime.Parse("01/" + mes + "/" + año);

                IniciarAgenda(); mirarEventos();
                cargarEventos();


            }
            else
            {
                i = 12;
                mes = "12";
                año = int.Parse(año) - 1 + "";
                DateTimeFormatInfo formatoFecha = CultureInfo.CurrentCulture.DateTimeFormat;
                string nombreMes = formatoFecha.GetMonthName(int.Parse(mes));
                nombreMes = nombreMes.Substring(0, 1).ToUpper() + nombreMes.Substring(1).ToLower();
                mes_calendario.Text = nombreMes;
                mirar_dia_rojo();


                DateTime dt = DateTime.Parse("01/" + mes + "/" + año);

                IniciarAgenda(); mirarEventos();
                cargarEventos();
            }
        }

        private void mes_alante(object sender, RoutedEventArgs e)
        {
            int i = int.Parse(mes);
            if (i < 12)
            {
                i++;

                if (i.ToString().Length > 1)
                {
                    mes = i.ToString();
                }
                else
                {
                    mes = "0" + i.ToString();
                }
                DateTimeFormatInfo formatoFecha = CultureInfo.CurrentCulture.DateTimeFormat;
                string nombreMes = formatoFecha.GetMonthName(int.Parse(mes));
                nombreMes = nombreMes.Substring(0, 1).ToUpper() + nombreMes.Substring(1).ToLower();
                mes_calendario.Text = nombreMes;



                DateTime dt = DateTime.Parse("01/" + mes + "/" + año);
                mirar_dia_rojo();
                IniciarAgenda(); mirarEventos();
                cargarEventos();
            }
            else
            {
                i = 1;
                mes = "1";

                año = int.Parse(año) + 1 + "";
                DateTimeFormatInfo formatoFecha = CultureInfo.CurrentCulture.DateTimeFormat;
                string nombreMes = formatoFecha.GetMonthName(int.Parse(mes));
                nombreMes = nombreMes.Substring(0, 1).ToUpper() + nombreMes.Substring(1).ToLower();
                mes_calendario.Text = nombreMes;
                mirar_dia_rojo();


                DateTime dt = DateTime.Parse("01/" + mes + "/" + año);

                IniciarAgenda(); mirarEventos();
                cargarEventos();
            }
        }




        //FUNCIONES
        private void RefreshEvento(Eventos men, string action, bool v)
        {
            try
            {


                switch (action)
                {
                    case "i":
                        {
                            InsertEvento(men, v);
                        }
                        break;

                    case "u":
                        {
                            UpdateEvento(men, v);
                        }
                        break;
                    case "d":
                        {
                            DeleteEvento(men, v);
                        }
                        break;

                }
                DateTime dt = DateTime.Parse("01/" + mes + "/" + año);

                iniciarCalendario();
                llenarCalendario(System.DateTime.DaysInMonth(int.Parse(año), int.Parse(mes)), dt.ToString("dddd", new CultureInfo("es-ES")));
                mirarFecha();

                ClearCalendario();
                cargarEventos();
                mirarEventos();
                ve.Close();
            }catch(Exception e)
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                Log oLog = new Log(path2);
                oLog.Add("Peto linea 2964 "+ e.Message);
                var line = Convert.ToInt32(e.StackTrace.Substring(e.StackTrace.LastIndexOf(' ')));
                Peta(e, line + "");
            }

        }
        private void IniciarAgenda()
        {
            iniciarCalendario();

            DateTime dt = DateTime.Parse("01/" + mes + "/" + año);
            llenarCalendario(System.DateTime.DaysInMonth(int.Parse(año), int.Parse(mes)), dt.ToString("dddd", new CultureInfo("es-ES")));
            año_calendario.Text = año;

            mirarFecha();
            //cargarEventos();
            //mirarEventos();
        }

        private void iniciarCalendario()
        {
            bt1.Visibility = Visibility.Visible;
            bt2.Visibility = Visibility.Visible;
            bt3.Visibility = Visibility.Visible;
            bt4.Visibility = Visibility.Visible;
            bt5.Visibility = Visibility.Visible;
            bt6.Visibility = Visibility.Visible;
            bt7.Visibility = Visibility.Visible;
            bt8.Visibility = Visibility.Visible;
            bt9.Visibility = Visibility.Visible;
            bt10.Visibility = Visibility.Visible;
            bt11.Visibility = Visibility.Visible;
            bt12.Visibility = Visibility.Visible;
            bt13.Visibility = Visibility.Visible;
            bt14.Visibility = Visibility.Visible;
            bt15.Visibility = Visibility.Visible;
            bt16.Visibility = Visibility.Visible;
            bt17.Visibility = Visibility.Visible;
            bt18.Visibility = Visibility.Visible;
            bt19.Visibility = Visibility.Visible;
            bt20.Visibility = Visibility.Visible;
            bt21.Visibility = Visibility.Visible;
            bt22.Visibility = Visibility.Visible;
            bt23.Visibility = Visibility.Visible;
            bt24.Visibility = Visibility.Visible;
            bt25.Visibility = Visibility.Visible;
            bt26.Visibility = Visibility.Visible;
            bt27.Visibility = Visibility.Visible;
            bt28.Visibility = Visibility.Visible;
            bt29.Visibility = Visibility.Visible;
            bt30.Visibility = Visibility.Visible;
            bt31.Visibility = Visibility.Visible;
            bt32.Visibility = Visibility.Visible;
            bt33.Visibility = Visibility.Visible;
            bt34.Visibility = Visibility.Visible;
            bt35.Visibility = Visibility.Visible;



            bt1.Background = Brushes.Transparent;
            bt2.Background = Brushes.Transparent;
            bt3.Background = Brushes.Transparent;
            bt4.Background = Brushes.Transparent;
            bt5.Background = Brushes.Transparent;
            bt6.Background = Brushes.Transparent;
            bt7.Background = Brushes.Transparent;
            bt8.Background = Brushes.Transparent;
            bt9.Background = Brushes.Transparent;
            bt10.Background = Brushes.Transparent;
            bt11.Background = Brushes.Transparent;
            bt12.Background = Brushes.Transparent;
            bt13.Background = Brushes.Transparent;
            bt14.Background = Brushes.Transparent;
            bt15.Background = Brushes.Transparent;
            bt16.Background = Brushes.Transparent;
            bt17.Background = Brushes.Transparent;
            bt18.Background = Brushes.Transparent;
            bt19.Background = Brushes.Transparent;
            bt20.Background = Brushes.Transparent;
            bt21.Background = Brushes.Transparent;
            bt22.Background = Brushes.Transparent;
            bt23.Background = Brushes.Transparent;
            bt24.Background = Brushes.Transparent;
            bt25.Background = Brushes.Transparent;
            bt26.Background = Brushes.Transparent;
            bt27.Background = Brushes.Transparent;
            bt28.Background = Brushes.Transparent;
            bt29.Background = Brushes.Transparent;
            bt30.Background = Brushes.Transparent;
            bt31.Background = Brushes.Transparent;
            bt32.Background = Brushes.Transparent;
            bt33.Background = Brushes.Transparent;
            bt34.Background = Brushes.Transparent;
            bt35.Background = Brushes.Transparent;
            bt36.Background = Brushes.Transparent;
            bt37.Background = Brushes.Transparent;
            bt38.Background = Brushes.Transparent;
            bt39.Background = Brushes.Transparent;
            bt40.Background = Brushes.Transparent;
            bt41.Background = Brushes.Transparent;
            bt42.Background = Brushes.Transparent;




            foreach (var b in calendario.Children)
            {
                if (b is Border)
                {
                    Border bb = (Border)b;

                    bb.Visibility = Visibility.Visible;

                    if (bb.Child is System.Windows.Controls.Border)
                    {
                        Border but = (Border)bb.Child;
                        but.Visibility = Visibility.Visible;
                        Grid g = (Grid)but.Child;
                        g.Visibility = Visibility.Visible;
                        Button l = (Button)g.Children[0];
                        ScrollViewer sv = (ScrollViewer)g.Children[1];

                        Grid gg = (Grid)sv.Content;
                        ListView lv = (ListView)gg.Children[0];
                        lv.Items.Clear();

                        l.Content = "0";
                        but.IsEnabled = true;

                    }
                }
            }



        }

        private void MirarFecha()
        {
            string hoy = DateTime.Now.ToString("d/MM/yyyy");
            dia = hoy.Split('/')[0];
            mes = hoy.Split('/')[1];
            año = hoy.Split('/')[2];
            DateTimeFormatInfo formatoFecha = CultureInfo.CurrentCulture.DateTimeFormat;
            string nombreMes = formatoFecha.GetMonthName(int.Parse(mes));
            nombreMes = nombreMes.Substring(0, 1).ToUpper() + nombreMes.Substring(1).ToLower();
            mes_calendario.Text = nombreMes;
            DateTime dt = DateTime.Parse("01/" + mes + "/" + año);
        }




        private void mirarFecha()
        {
            if (dia_actual != null)
            {
                dia_actual.BorderBrush = Brushes.LightGray;
                dia_actual.BorderThickness = borderthikness_dia_actual.BorderThickness;

            }
            if (DateTime.Now.Month == int.Parse(mes))
                foreach (var b in calendario.Children)
                {
                    if (b is System.Windows.Controls.Border)
                    {
                        Border but = (Border)b;
                        Border g = (Border)but.Child;
                        Grid grid = (Grid)g.Child;

                        Button diabutton = (Button)grid.Children[0];




                        try
                        {

                            if (diabutton.Content.Equals(dia))
                            {
                                dia_actual = but;
                                if (dia_actual.BorderThickness == new Thickness(2, 2, 2, 2))
                                {

                                }
                                else
                                {
                                    borderthikness_dia_actual = new Border();
                                    borderthikness_dia_actual.BorderThickness = dia_actual.BorderThickness;
                                }
                                dia_actual.BorderThickness = new Thickness(2);
                                dia_actual.BorderBrush = Brushes.Red;
                            }
                        }
                        catch
                        {

                        };


                    }
                }
        }

        private void llenarCalendario(int v1, string v2)
        {
            switch (v2)
            {
                case "lunes":
                    {
                        //bt1.Visibility = Visibility.Collapsed;
                        //bt2.Visibility = Visibility.Collapsed;
                        //bt3.Visibility = Visibility.Collapsed;
                        //bt4.Visibility = Visibility.Collapsed;
                        //bt5.Visibility = Visibility.Collapsed;
                        //bt6.Visibility = Visibility.Collapsed;
                        Grid g = (Grid)bt1.Child;
                        Button l = (Button)g.Children[0];
                        l.Content = "1";

                        g = (Grid)bt2.Child;
                        l = (Button)g.Children[0];
                        l.Content = "2";

                        g = (Grid)bt3.Child;
                        l = (Button)g.Children[0];
                        l.Content = "3";

                        g = (Grid)bt4.Child;
                        l = (Button)g.Children[0];
                        l.Content = "4";

                        g = (Grid)bt5.Child;
                        l = (Button)g.Children[0];
                        l.Content = "5";

                        g = (Grid)bt6.Child;
                        l = (Button)g.Children[0];
                        l.Content = "6";

                        g = (Grid)bt7.Child;
                        l = (Button)g.Children[0];
                        l.Content = "7";

                        g = (Grid)bt8.Child;
                        l = (Button)g.Children[0];
                        l.Content = "8";

                        g = (Grid)bt9.Child;
                        l = (Button)g.Children[0];
                        l.Content = "9";

                        g = (Grid)bt10.Child;
                        l = (Button)g.Children[0];
                        l.Content = "10";

                        g = (Grid)bt11.Child;
                        l = (Button)g.Children[0];
                        l.Content = "11";

                        g = (Grid)bt12.Child;
                        l = (Button)g.Children[0];
                        l.Content = "12";

                        g = (Grid)bt13.Child;
                        l = (Button)g.Children[0];
                        l.Content = "13";

                        g = (Grid)bt14.Child;
                        l = (Button)g.Children[0];
                        l.Content = "14";

                        g = (Grid)bt15.Child;
                        l = (Button)g.Children[0];
                        l.Content = "15";

                        g = (Grid)bt16.Child;
                        l = (Button)g.Children[0];
                        l.Content = "16";

                        g = (Grid)bt17.Child;
                        l = (Button)g.Children[0];
                        l.Content = "17";

                        g = (Grid)bt18.Child;
                        l = (Button)g.Children[0];
                        l.Content = "18";

                        g = (Grid)bt19.Child;
                        l = (Button)g.Children[0];
                        l.Content = "19";

                        g = (Grid)bt20.Child;
                        l = (Button)g.Children[0];
                        l.Content = "20";

                        g = (Grid)bt21.Child;
                        l = (Button)g.Children[0];
                        l.Content = "21";

                        g = (Grid)bt22.Child;
                        l = (Button)g.Children[0];
                        l.Content = "22";

                        g = (Grid)bt23.Child;
                        l = (Button)g.Children[0];
                        l.Content = "23";

                        g = (Grid)bt24.Child;
                        l = (Button)g.Children[0];
                        l.Content = "24";

                        g = (Grid)bt25.Child;
                        l = (Button)g.Children[0];
                        l.Content = "25";

                        g = (Grid)bt26.Child;
                        l = (Button)g.Children[0];
                        l.Content = "26";

                        g = (Grid)bt27.Child;
                        l = (Button)g.Children[0];
                        l.Content = "27";

                        g = (Grid)bt28.Child;
                        l = (Button)g.Children[0];
                        l.Content = "28";
                        if (v1 > 28)
                        {

                            bt29.Visibility = Visibility.Visible;
                            g = (Grid)bt29.Child;
                            l = (Button)g.Children[0];
                            l.Content = "29";
                            if (v1 > 29)
                            {
                                bt30.Visibility = Visibility.Visible;
                                g = (Grid)bt30.Child;
                                l = (Button)g.Children[0];
                                l.Content = "30";
                                if (v1 > 30)
                                {
                                    bt31.Visibility = Visibility.Visible;
                                    g = (Grid)bt31.Child;
                                    l = (Button)g.Children[0];
                                    l.Content = "31";

                                }
                                else
                                {
                                    bt31.Visibility = Visibility.Collapsed;
                                }

                            }
                            else
                            {
                                bt31.Visibility = Visibility.Collapsed;
                                bt30.Visibility = Visibility.Collapsed;
                            }
                        }
                        else
                        {
                            bt31.Visibility = Visibility.Collapsed;
                            bt30.Visibility = Visibility.Collapsed;
                            bt29.Visibility = Visibility.Collapsed;

                        }
                        bt32.Visibility = Visibility.Collapsed;
                        bt33.Visibility = Visibility.Collapsed;
                        bt34.Visibility = Visibility.Collapsed;
                        bt35.Visibility = Visibility.Collapsed;
                        bt36.Visibility = Visibility.Collapsed;
                        bt37.Visibility = Visibility.Collapsed;
                        bt38.Visibility = Visibility.Collapsed;
                        bt39.Visibility = Visibility.Collapsed;
                        bt40.Visibility = Visibility.Collapsed;
                        bt41.Visibility = Visibility.Collapsed;
                        bt42.Visibility = Visibility.Collapsed;
                    }
                    break;

                case "martes":
                    {


                        Grid g1 = (Grid)bt1.Child;





                        //bt2.Visibility = Visibility.Collapsed;
                        //bt3.Visibility = Visibility.Collapsed;
                        //bt4.Visibility = Visibility.Collapsed;
                        //bt5.Visibility = Visibility.Collapsed;
                        //bt6.Visibility = Visibility.Collapsed;
                        Grid g = (Grid)bt1.Child;
                        Button l = (Button)g.Children[0];
                        l.Content = "0";

                        g = (Grid)bt2.Child;
                        l = (Button)g.Children[0];
                        l.Content = "1";

                        g = (Grid)bt3.Child;
                        l = (Button)g.Children[0];
                        l.Content = "2";

                        g = (Grid)bt4.Child;
                        l = (Button)g.Children[0];
                        l.Content = "3";

                        g = (Grid)bt5.Child;
                        l = (Button)g.Children[0];
                        l.Content = "4";

                        g = (Grid)bt6.Child;
                        l = (Button)g.Children[0];
                        l.Content = "5";

                        g = (Grid)bt7.Child;
                        l = (Button)g.Children[0];
                        l.Content = "6";

                        g = (Grid)bt8.Child;
                        l = (Button)g.Children[0];
                        l.Content = "7";

                        g = (Grid)bt9.Child;
                        l = (Button)g.Children[0];
                        l.Content = "8";

                        g = (Grid)bt10.Child;
                        l = (Button)g.Children[0];
                        l.Content = "9";

                        g = (Grid)bt11.Child;
                        l = (Button)g.Children[0];
                        l.Content = "10";

                        g = (Grid)bt12.Child;
                        l = (Button)g.Children[0];
                        l.Content = "11";

                        g = (Grid)bt13.Child;
                        l = (Button)g.Children[0];
                        l.Content = "12";

                        g = (Grid)bt14.Child;
                        l = (Button)g.Children[0];
                        l.Content = "13";

                        g = (Grid)bt15.Child;
                        l = (Button)g.Children[0];
                        l.Content = "14";

                        g = (Grid)bt16.Child;
                        l = (Button)g.Children[0];
                        l.Content = "15";

                        g = (Grid)bt17.Child;
                        l = (Button)g.Children[0];
                        l.Content = "16";

                        g = (Grid)bt18.Child;
                        l = (Button)g.Children[0];
                        l.Content = "17";

                        g = (Grid)bt19.Child;
                        l = (Button)g.Children[0];
                        l.Content = "18";

                        g = (Grid)bt20.Child;
                        l = (Button)g.Children[0];
                        l.Content = "19";

                        g = (Grid)bt21.Child;
                        l = (Button)g.Children[0];
                        l.Content = "20";

                        g = (Grid)bt22.Child;
                        l = (Button)g.Children[0];
                        l.Content = "21";

                        g = (Grid)bt23.Child;
                        l = (Button)g.Children[0];
                        l.Content = "22";

                        g = (Grid)bt24.Child;
                        l = (Button)g.Children[0];
                        l.Content = "23";

                        g = (Grid)bt25.Child;
                        l = (Button)g.Children[0];
                        l.Content = "24";

                        g = (Grid)bt26.Child;
                        l = (Button)g.Children[0];
                        l.Content = "25";

                        g = (Grid)bt27.Child;
                        l = (Button)g.Children[0];
                        l.Content = "26";

                        g = (Grid)bt28.Child;
                        l = (Button)g.Children[0];
                        l.Content = "27";

                        bt29.Visibility = Visibility.Visible;
                        g = (Grid)bt29.Child;
                        l = (Button)g.Children[0];
                        l.Content = "28";
                        if (v1 > 28)
                        {

                            bt30.Visibility = Visibility.Visible;
                            g = (Grid)bt30.Child;
                            l = (Button)g.Children[0];
                            l.Content = "29";
                            if (v1 > 29)
                            {
                                bt31.Visibility = Visibility.Visible;
                                g = (Grid)bt31.Child;
                                l = (Button)g.Children[0];
                                l.Content = "30";
                                if (v1 > 30)
                                {
                                    bt32.Visibility = Visibility.Visible;
                                    g = (Grid)bt32.Child;
                                    l = (Button)g.Children[0];
                                    l.Content = "31";

                                }
                                else
                                {

                                    g1 = (Grid)bt32.Child;
                                    g1.Visibility = Visibility.Collapsed;
                                }

                            }
                            else
                            {


                                g1 = (Grid)bt32.Child;
                                g1.Visibility = Visibility.Collapsed;
                                g1 = (Grid)bt31.Child;
                                g1.Visibility = Visibility.Collapsed;
                            }
                        }
                        else
                        {
                            bt32.Visibility = Visibility.Collapsed;
                            bt31.Visibility = Visibility.Collapsed;
                            bt30.Visibility = Visibility.Collapsed;

                            g1 = (Grid)bt32.Child;
                            g1.Visibility = Visibility.Collapsed;
                            g1 = (Grid)bt31.Child;
                            g1.Visibility = Visibility.Collapsed;
                            g1 = (Grid)bt30.Child;
                            g1.Visibility = Visibility.Collapsed;


                        }
                        g1 = (Grid)bt33.Child;
                        g1.Visibility = Visibility.Collapsed;
                        g1 = (Grid)bt34.Child;
                        g1.Visibility = Visibility.Collapsed;
                        g1 = (Grid)bt35.Child;
                        g1.Visibility = Visibility.Collapsed;



                        bt36.Visibility = Visibility.Collapsed;
                        bt37.Visibility = Visibility.Collapsed;
                        bt38.Visibility = Visibility.Collapsed;
                        bt39.Visibility = Visibility.Collapsed;
                        bt40.Visibility = Visibility.Collapsed;
                        bt41.Visibility = Visibility.Collapsed;
                        bt42.Visibility = Visibility.Collapsed;
                    }
                    break;

                case "miércoles":
                    {
                        //bt1.Visibility = Visibility.Collapsed;

                        Grid g1 = (Grid)bt1.Child;
                        g1.Visibility = Visibility.Collapsed;
                        //bt2.Visibility = Visibility.Collapsed;
                        Grid g2 = (Grid)bt2.Child;
                        g2.Visibility = Visibility.Collapsed;
                        //bt3.Visibility = Visibility.Collapsed;
                        //bt4.Visibility = Visibility.Collapsed;
                        //bt5.Visibility = Visibility.Collapsed;
                        //bt6.Visibility = Visibility.Collapsed;
                        Button l2 = (Button)g1.Children[0];
                        l2.Content = "0";
                        l2 = (Button)g2.Children[0];
                        l2.Content = "0";



                        Grid g = (Grid)bt3.Child;
                        Button l = (Button)g.Children[0];
                        l.Content = "1";

                        g = (Grid)bt4.Child;
                        l = (Button)g.Children[0];
                        l.Content = "2";

                        g = (Grid)bt5.Child;
                        l = (Button)g.Children[0];
                        l.Content = "3";

                        g = (Grid)bt6.Child;
                        l = (Button)g.Children[0];
                        l.Content = "4";

                        g = (Grid)bt7.Child;
                        l = (Button)g.Children[0];
                        l.Content = "5";

                        g = (Grid)bt8.Child;
                        l = (Button)g.Children[0];
                        l.Content = "6";

                        g = (Grid)bt9.Child;
                        l = (Button)g.Children[0];
                        l.Content = "7";

                        g = (Grid)bt10.Child;
                        l = (Button)g.Children[0];
                        l.Content = "8";

                        g = (Grid)bt11.Child;
                        l = (Button)g.Children[0];
                        l.Content = "9";

                        g = (Grid)bt12.Child;
                        l = (Button)g.Children[0];
                        l.Content = "10";

                        g = (Grid)bt13.Child;
                        l = (Button)g.Children[0];
                        l.Content = "11";

                        g = (Grid)bt14.Child;
                        l = (Button)g.Children[0];
                        l.Content = "12";

                        g = (Grid)bt15.Child;
                        l = (Button)g.Children[0];
                        l.Content = "13";

                        g = (Grid)bt16.Child;
                        l = (Button)g.Children[0];
                        l.Content = "14";

                        g = (Grid)bt17.Child;
                        l = (Button)g.Children[0];
                        l.Content = "15";

                        g = (Grid)bt18.Child;
                        l = (Button)g.Children[0];
                        l.Content = "16";

                        g = (Grid)bt19.Child;
                        l = (Button)g.Children[0];
                        l.Content = "17";

                        g = (Grid)bt20.Child;
                        l = (Button)g.Children[0];
                        l.Content = "18";

                        g = (Grid)bt21.Child;
                        l = (Button)g.Children[0];
                        l.Content = "19";

                        g = (Grid)bt22.Child;
                        l = (Button)g.Children[0];
                        l.Content = "20";

                        g = (Grid)bt23.Child;
                        l = (Button)g.Children[0];
                        l.Content = "21";

                        g = (Grid)bt24.Child;
                        l = (Button)g.Children[0];
                        l.Content = "22";

                        g = (Grid)bt25.Child;
                        l = (Button)g.Children[0];
                        l.Content = "23";

                        g = (Grid)bt26.Child;
                        l = (Button)g.Children[0];
                        l.Content = "24";

                        g = (Grid)bt27.Child;
                        l = (Button)g.Children[0];
                        l.Content = "25";

                        g = (Grid)bt28.Child;
                        l = (Button)g.Children[0];
                        l.Content = "26";

                        g = (Grid)bt29.Child;
                        l = (Button)g.Children[0];
                        l.Content = "27";

                        bt29.Visibility = Visibility.Visible;
                        g = (Grid)bt30.Child;
                        l = (Button)g.Children[0];
                        l.Content = "28";

                        bt30.Visibility = Visibility.Visible;


                        if (v1 > 28)
                        {

                            bt31.Visibility = Visibility.Visible;
                            g = (Grid)bt31.Child;
                            l = (Button)g.Children[0];
                            l.Content = "29";
                            if (v1 > 29)
                            {
                                bt32.Visibility = Visibility.Visible;
                                g = (Grid)bt32.Child;
                                l = (Button)g.Children[0];
                                l.Content = "30";
                                if (v1 > 30)
                                {
                                    bt33.Visibility = Visibility.Visible;
                                    g = (Grid)bt33.Child;
                                    l = (Button)g.Children[0];
                                    l.Content = "31";


                                }
                                else
                                {


                                    g1 = (Grid)bt33.Child;
                                    g1.Visibility = Visibility.Collapsed;

                                }

                            }
                            else
                            {

                                g1 = (Grid)bt33.Child;
                                g1.Visibility = Visibility.Collapsed;
                                g1 = (Grid)bt32.Child;
                                g1.Visibility = Visibility.Collapsed;
                            }
                        }
                        else
                        {
                            g1 = (Grid)bt33.Child;
                            g1.Visibility = Visibility.Collapsed;
                            g1 = (Grid)bt32.Child;
                            g1.Visibility = Visibility.Collapsed;
                            g1 = (Grid)bt31.Child;
                            g1.Visibility = Visibility.Collapsed;


                        }
                        //bt33.Visibility = Visibility.Collapsed;

                        g1 = (Grid)bt34.Child;
                        g1.Visibility = Visibility.Collapsed;
                        g1 = (Grid)bt35.Child;
                        g1.Visibility = Visibility.Collapsed;

                        bt36.Visibility = Visibility.Collapsed;
                        bt37.Visibility = Visibility.Collapsed;
                        bt38.Visibility = Visibility.Collapsed;
                        bt39.Visibility = Visibility.Collapsed;
                        bt40.Visibility = Visibility.Collapsed;
                        bt41.Visibility = Visibility.Collapsed;
                        bt42.Visibility = Visibility.Collapsed;
                    }
                    break;

                case "jueves":
                    {


                        Grid g1 = (Grid)bt1.Child;
                        g1.Visibility = Visibility.Collapsed;
                        //bt2.Visibility = Visibility.Collapsed;
                        Grid g2 = (Grid)bt2.Child;
                        g2.Visibility = Visibility.Collapsed;
                        Grid g3 = (Grid)bt3.Child;
                        g3.Visibility = Visibility.Collapsed;
                        //bt4.Visibility = Visibility.Collapsed;
                        //bt5.Visibility = Visibility.Collapsed;
                        //bt6.Visibility = Visibility.Collapsed;

                        Button l2 = (Button)g1.Children[0];
                        l2.Content = "0";
                        l2 = (Button)g2.Children[0];
                        l2.Content = "0";
                        l2 = (Button)g3.Children[0];
                        l2.Content = "0";



                        Grid g = (Grid)bt4.Child;
                        Button l = (Button)g.Children[0];
                        l.Content = "1";

                        g = (Grid)bt5.Child;
                        l = (Button)g.Children[0];
                        l.Content = "2";

                        g = (Grid)bt6.Child;
                        l = (Button)g.Children[0];
                        l.Content = "3";

                        g = (Grid)bt7.Child;
                        l = (Button)g.Children[0];
                        l.Content = "4";

                        g = (Grid)bt8.Child;
                        l = (Button)g.Children[0];
                        l.Content = "5";

                        g = (Grid)bt9.Child;
                        l = (Button)g.Children[0];
                        l.Content = "6";

                        g = (Grid)bt10.Child;
                        l = (Button)g.Children[0];
                        l.Content = "7";

                        g = (Grid)bt11.Child;
                        l = (Button)g.Children[0];
                        l.Content = "8";

                        g = (Grid)bt12.Child;
                        l = (Button)g.Children[0];
                        l.Content = "9";

                        g = (Grid)bt13.Child;
                        l = (Button)g.Children[0];
                        l.Content = "10";

                        g = (Grid)bt14.Child;
                        l = (Button)g.Children[0];
                        l.Content = "11";

                        g = (Grid)bt15.Child;
                        l = (Button)g.Children[0];
                        l.Content = "12";

                        g = (Grid)bt16.Child;
                        l = (Button)g.Children[0];
                        l.Content = "13";

                        g = (Grid)bt17.Child;
                        l = (Button)g.Children[0];
                        l.Content = "14";

                        g = (Grid)bt18.Child;
                        l = (Button)g.Children[0];
                        l.Content = "15";

                        g = (Grid)bt19.Child;
                        l = (Button)g.Children[0];
                        l.Content = "16";

                        g = (Grid)bt20.Child;
                        l = (Button)g.Children[0];
                        l.Content = "17";

                        g = (Grid)bt21.Child;
                        l = (Button)g.Children[0];
                        l.Content = "18";

                        g = (Grid)bt22.Child;
                        l = (Button)g.Children[0];
                        l.Content = "19";

                        g = (Grid)bt23.Child;
                        l = (Button)g.Children[0];
                        l.Content = "20";

                        g = (Grid)bt24.Child;
                        l = (Button)g.Children[0];
                        l.Content = "21";

                        g = (Grid)bt25.Child;
                        l = (Button)g.Children[0];
                        l.Content = "22";

                        g = (Grid)bt26.Child;
                        l = (Button)g.Children[0];
                        l.Content = "23";

                        g = (Grid)bt27.Child;
                        l = (Button)g.Children[0];
                        l.Content = "24";

                        g = (Grid)bt28.Child;
                        l = (Button)g.Children[0];
                        l.Content = "25";

                        g = (Grid)bt29.Child;
                        l = (Button)g.Children[0];
                        l.Content = "26";

                        g = (Grid)bt30.Child;
                        l = (Button)g.Children[0];
                        l.Content = "27";

                        bt29.Visibility = Visibility.Visible;
                        g = (Grid)bt31.Child;
                        l = (Button)g.Children[0];
                        l.Content = "28";

                        bt30.Visibility = Visibility.Visible;
                        bt31.Visibility = Visibility.Visible;

                        if (v1 > 28)
                        {

                            bt32.Visibility = Visibility.Visible;
                            g = (Grid)bt32.Child;
                            l = (Button)g.Children[0];
                            l.Content = "29";
                            if (v1 > 29)
                            {
                                bt33.Visibility = Visibility.Visible;
                                g = (Grid)bt33.Child;
                                l = (Button)g.Children[0];
                                l.Content = "30";
                                if (v1 > 30)
                                {
                                    bt34.Visibility = Visibility.Visible;
                                    g = (Grid)bt34.Child;
                                    l = (Button)g.Children[0];
                                    l.Content = "31";

                                    g = (Grid)bt35.Child;
                                    l = (Button)g.Children[0];
                                    l.Content = "";

                                    g = (Grid)bt36.Child;
                                    l = (Button)g.Children[0];
                                    l.Content = "";

                                    g = (Grid)bt37.Child;
                                    l = (Button)g.Children[0];
                                    l.Content = "";

                                    g = (Grid)bt38.Child;
                                    l = (Button)g.Children[0];
                                    l.Content = "";

                                    g = (Grid)bt39.Child;
                                    l = (Button)g.Children[0];
                                    l.Content = "";

                                    g = (Grid)bt40.Child;
                                    l = (Button)g.Children[0];
                                    l.Content = "";

                                    g = (Grid)bt41.Child;
                                    l = (Button)g.Children[0];
                                    l.Content = "";

                                    g = (Grid)bt42.Child;
                                    l = (Button)g.Children[0];
                                    l.Content = "";

                                }
                                else
                                {
                                    g1 = (Grid)bt34.Child;
                                    g1.Visibility = Visibility.Collapsed;

                                }

                            }
                            else
                            {
                                g1 = (Grid)bt34.Child;
                                g1.Visibility = Visibility.Collapsed;
                                g1 = (Grid)bt33.Child;
                                g1.Visibility = Visibility.Collapsed;
                            }
                        }
                        else
                        {


                            g1 = (Grid)bt34.Child;
                            g1.Visibility = Visibility.Collapsed;
                            g1 = (Grid)bt33.Child;
                            g1.Visibility = Visibility.Collapsed;
                            g1 = (Grid)bt32.Child;
                            g1.Visibility = Visibility.Collapsed;

                        }
                        //bt33.Visibility = Visibility.Collapsed;
                        //bt34.Visibility = Visibility.Collapsed;

                        g1 = (Grid)bt35.Child;
                        g1.Visibility = Visibility.Collapsed;
                        bt36.Visibility = Visibility.Collapsed;
                        bt37.Visibility = Visibility.Collapsed;
                        bt38.Visibility = Visibility.Collapsed;
                        bt39.Visibility = Visibility.Collapsed;
                        bt40.Visibility = Visibility.Collapsed;
                        bt41.Visibility = Visibility.Collapsed;
                        bt42.Visibility = Visibility.Collapsed;
                    }
                    break;

                case "viernes":
                    {



                        Grid g1 = (Grid)bt1.Child;
                        g1.Visibility = Visibility.Collapsed;
                        //bt2.Visibility = Visibility.Collapsed;
                        Grid g2 = (Grid)bt2.Child;
                        g2.Visibility = Visibility.Collapsed;
                        Grid g3 = (Grid)bt3.Child;
                        g3.Visibility = Visibility.Collapsed;

                        Grid g4 = (Grid)bt4.Child;
                        g4.Visibility = Visibility.Collapsed;
                        //bt5.Visibility = Visibility.Collapsed;
                        //bt6.Visibility = Visibility.Collapsed;

                        Button l2 = (Button)g1.Children[0];
                        l2.Content = "0";
                        l2 = (Button)g2.Children[0];
                        l2.Content = "0";
                        l2 = (Button)g3.Children[0];
                        l2.Content = "0";
                        l2 = (Button)g4.Children[0];
                        l2.Content = "0";





                        Grid g = (Grid)bt5.Child;
                        Button l = (Button)g.Children[0];
                        l.Content = "1";

                        g = (Grid)bt6.Child;
                        l = (Button)g.Children[0];
                        l.Content = "2";

                        g = (Grid)bt7.Child;
                        l = (Button)g.Children[0];
                        l.Content = "3";

                        g = (Grid)bt8.Child;
                        l = (Button)g.Children[0];
                        l.Content = "4";

                        g = (Grid)bt9.Child;
                        l = (Button)g.Children[0];
                        l.Content = "5";

                        g = (Grid)bt10.Child;
                        l = (Button)g.Children[0];
                        l.Content = "6";

                        g = (Grid)bt11.Child;
                        l = (Button)g.Children[0];
                        l.Content = "7";

                        g = (Grid)bt12.Child;
                        l = (Button)g.Children[0];
                        l.Content = "8";

                        g = (Grid)bt13.Child;
                        l = (Button)g.Children[0];
                        l.Content = "9";

                        g = (Grid)bt14.Child;
                        l = (Button)g.Children[0];
                        l.Content = "10";

                        g = (Grid)bt15.Child;
                        l = (Button)g.Children[0];
                        l.Content = "11";

                        g = (Grid)bt16.Child;
                        l = (Button)g.Children[0];
                        l.Content = "12";

                        g = (Grid)bt17.Child;
                        l = (Button)g.Children[0];
                        l.Content = "13";

                        g = (Grid)bt18.Child;
                        l = (Button)g.Children[0];
                        l.Content = "14";

                        g = (Grid)bt19.Child;
                        l = (Button)g.Children[0];
                        l.Content = "15";

                        g = (Grid)bt20.Child;
                        l = (Button)g.Children[0];
                        l.Content = "16";

                        g = (Grid)bt21.Child;
                        l = (Button)g.Children[0];
                        l.Content = "17";

                        g = (Grid)bt22.Child;
                        l = (Button)g.Children[0];
                        l.Content = "18";

                        g = (Grid)bt23.Child;
                        l = (Button)g.Children[0];
                        l.Content = "19";

                        g = (Grid)bt24.Child;
                        l = (Button)g.Children[0];
                        l.Content = "20";

                        g = (Grid)bt25.Child;
                        l = (Button)g.Children[0];
                        l.Content = "21";

                        g = (Grid)bt26.Child;
                        l = (Button)g.Children[0];
                        l.Content = "22";

                        g = (Grid)bt27.Child;
                        l = (Button)g.Children[0];
                        l.Content = "23";

                        g = (Grid)bt28.Child;
                        l = (Button)g.Children[0];
                        l.Content = "24";

                        g = (Grid)bt29.Child;
                        l = (Button)g.Children[0];
                        l.Content = "25";

                        g = (Grid)bt30.Child;
                        l = (Button)g.Children[0];
                        l.Content = "26";

                        g = (Grid)bt31.Child;
                        l = (Button)g.Children[0];
                        l.Content = "27";

                        bt29.Visibility = Visibility.Visible;
                        g = (Grid)bt32.Child;
                        l = (Button)g.Children[0];
                        l.Content = "28";

                        bt30.Visibility = Visibility.Visible;
                        bt31.Visibility = Visibility.Visible;
                        bt32.Visibility = Visibility.Visible;



                        if (v1 > 28)
                        {
                            g = (Grid)bt33.Child;
                            l = (Button)g.Children[0];
                            bt33.Visibility = Visibility.Visible;
                            l.Content = "29";
                            if (v1 > 29)
                            {
                                bt34.Visibility = Visibility.Visible;
                                g = (Grid)bt34.Child;
                                l = (Button)g.Children[0];
                                l.Content = "30";
                                if (v1 > 30)
                                {
                                    bt35.Visibility = Visibility.Visible;
                                    g = (Grid)bt35.Child;
                                    l = (Button)g.Children[0];
                                    l.Content = "31";

                                    g = (Grid)bt36.Child;
                                    l = (Button)g.Children[0];
                                    l.Content = "";

                                    g = (Grid)bt37.Child;
                                    l = (Button)g.Children[0];
                                    l.Content = "";

                                    g = (Grid)bt38.Child;
                                    l = (Button)g.Children[0];
                                    l.Content = "";

                                    g = (Grid)bt39.Child;
                                    l = (Button)g.Children[0];
                                    l.Content = "";

                                    g = (Grid)bt40.Child;
                                    l = (Button)g.Children[0];
                                    l.Content = "";

                                    g = (Grid)bt41.Child;
                                    l = (Button)g.Children[0];
                                    l.Content = "";

                                    g = (Grid)bt42.Child;
                                    l = (Button)g.Children[0];
                                    l.Content = "";

                                }
                                else
                                {
                                    g1 = (Grid)bt35.Child;
                                    g1.Visibility = Visibility.Collapsed;

                                }

                            }
                            else
                            {
                                g1 = (Grid)bt35.Child;
                                g1.Visibility = Visibility.Collapsed;
                                g1 = (Grid)bt34.Child;
                                g1.Visibility = Visibility.Collapsed;
                            }
                        }
                        else
                        {
                            g1 = (Grid)bt35.Child;
                            g1.Visibility = Visibility.Collapsed;
                            g1 = (Grid)bt34.Child;
                            g1.Visibility = Visibility.Collapsed;
                            g1 = (Grid)bt33.Child;
                            g1.Visibility = Visibility.Collapsed;


                        }
                        //bt33.Visibility = Visibility.Collapsed;
                        //bt34.Visibility = Visibility.Collapsed;
                        //bt35.Visibility = Visibility.Collapsed;
                        bt36.Visibility = Visibility.Collapsed;
                        bt37.Visibility = Visibility.Collapsed;
                        bt38.Visibility = Visibility.Collapsed;
                        bt39.Visibility = Visibility.Collapsed;
                        bt40.Visibility = Visibility.Collapsed;
                        bt41.Visibility = Visibility.Collapsed;
                        bt42.Visibility = Visibility.Collapsed;
                    }
                    break;

                case "sábado":
                    {


                        Grid g1 = (Grid)bt1.Child;
                        g1.Visibility = Visibility.Collapsed;
                        //bt2.Visibility = Visibility.Collapsed;
                        Grid g2 = (Grid)bt2.Child;
                        g2.Visibility = Visibility.Collapsed;
                        Grid g3 = (Grid)bt3.Child;
                        g3.Visibility = Visibility.Collapsed;

                        Grid g4 = (Grid)bt4.Child;
                        g4.Visibility = Visibility.Collapsed;

                        Grid g5 = (Grid)bt5.Child;
                        g5.Visibility = Visibility.Collapsed;
                        //bt6.Visibility = Visibility.Collapsed;
                        Button l2 = (Button)g1.Children[0];
                        l2.Content = "0";
                        l2 = (Button)g2.Children[0];
                        l2.Content = "0";
                        l2 = (Button)g3.Children[0];
                        l2.Content = "0";
                        l2 = (Button)g4.Children[0];
                        l2.Content = "0";
                        l2 = (Button)g5.Children[0];
                        l2.Content = "0";







                        Grid g = (Grid)bt6.Child;
                        Button l = (Button)g.Children[0];
                        l.Content = "1";

                        g = (Grid)bt7.Child;
                        l = (Button)g.Children[0];
                        l.Content = "2";

                        g = (Grid)bt8.Child;
                        l = (Button)g.Children[0];
                        l.Content = "3";

                        g = (Grid)bt9.Child;
                        l = (Button)g.Children[0];
                        l.Content = "4";

                        g = (Grid)bt10.Child;
                        l = (Button)g.Children[0];
                        l.Content = "5";

                        g = (Grid)bt11.Child;
                        l = (Button)g.Children[0];
                        l.Content = "6";

                        g = (Grid)bt12.Child;
                        l = (Button)g.Children[0];
                        l.Content = "7";

                        g = (Grid)bt13.Child;
                        l = (Button)g.Children[0];
                        l.Content = "8";

                        g = (Grid)bt14.Child;
                        l = (Button)g.Children[0];
                        l.Content = "9";

                        g = (Grid)bt15.Child;
                        l = (Button)g.Children[0];
                        l.Content = "10";

                        g = (Grid)bt16.Child;
                        l = (Button)g.Children[0];
                        l.Content = "11";

                        g = (Grid)bt17.Child;
                        l = (Button)g.Children[0];
                        l.Content = "12";

                        g = (Grid)bt18.Child;
                        l = (Button)g.Children[0];
                        l.Content = "13";

                        g = (Grid)bt19.Child;
                        l = (Button)g.Children[0];
                        l.Content = "14";

                        g = (Grid)bt20.Child;
                        l = (Button)g.Children[0];
                        l.Content = "15";

                        g = (Grid)bt21.Child;
                        l = (Button)g.Children[0];
                        l.Content = "16";

                        g = (Grid)bt22.Child;
                        l = (Button)g.Children[0];
                        l.Content = "17";

                        g = (Grid)bt23.Child;
                        l = (Button)g.Children[0];
                        l.Content = "18";

                        g = (Grid)bt24.Child;
                        l = (Button)g.Children[0];
                        l.Content = "19";

                        g = (Grid)bt25.Child;
                        l = (Button)g.Children[0];
                        l.Content = "20";

                        g = (Grid)bt26.Child;
                        l = (Button)g.Children[0];
                        l.Content = "21";

                        g = (Grid)bt27.Child;
                        l = (Button)g.Children[0];
                        l.Content = "22";

                        g = (Grid)bt28.Child;
                        l = (Button)g.Children[0];
                        l.Content = "23";

                        g = (Grid)bt29.Child;
                        l = (Button)g.Children[0];
                        l.Content = "24";

                        g = (Grid)bt30.Child;
                        l = (Button)g.Children[0];
                        l.Content = "25";

                        g = (Grid)bt31.Child;
                        l = (Button)g.Children[0];
                        l.Content = "26";

                        g = (Grid)bt32.Child;
                        l = (Button)g.Children[0];
                        l.Content = "27";

                        bt29.Visibility = Visibility.Visible;
                        g = (Grid)bt33.Child;
                        l = (Button)g.Children[0];
                        l.Content = "28";

                        bt30.Visibility = Visibility.Visible;
                        bt31.Visibility = Visibility.Visible;
                        bt32.Visibility = Visibility.Visible;
                        bt33.Visibility = Visibility.Visible;

                        if (v1 > 28)
                        {

                            bt34.Visibility = Visibility.Visible;
                            g = (Grid)bt34.Child;
                            l = (Button)g.Children[0];
                            l.Content = "29";
                            if (v1 > 29)
                            {
                                bt35.Visibility = Visibility.Visible;
                                g = (Grid)bt35.Child;
                                l = (Button)g.Children[0];
                                l.Content = "30";
                                if (v1 > 30)
                                {
                                    bt36.Visibility = Visibility.Visible;
                                    bt37.Visibility = Visibility.Visible;
                                    bt38.Visibility = Visibility.Visible;
                                    bt39.Visibility = Visibility.Visible;
                                    bt40.Visibility = Visibility.Visible;
                                    bt41.Visibility = Visibility.Visible;
                                    bt42.Visibility = Visibility.Visible;
                                    g = (Grid)bt36.Child;
                                    l = (Button)g.Children[0];
                                    l.Content = "31";

                                    g = (Grid)bt37.Child;
                                    l = (Button)g.Children[0];
                                    l.Content = "";

                                    g = (Grid)bt38.Child;
                                    l = (Button)g.Children[0];
                                    l.Content = "";

                                    g = (Grid)bt39.Child;
                                    l = (Button)g.Children[0];
                                    l.Content = "";

                                    g = (Grid)bt40.Child;
                                    l = (Button)g.Children[0];
                                    l.Content = "";

                                    g = (Grid)bt41.Child;
                                    l = (Button)g.Children[0];
                                    l.Content = "";

                                    g = (Grid)bt42.Child;
                                    l = (Button)g.Children[0];
                                    l.Content = "";





                                }
                                else
                                {
                                    bt36.Visibility = Visibility.Collapsed;
                                    bt37.Visibility = Visibility.Collapsed;
                                    bt38.Visibility = Visibility.Collapsed;
                                    bt39.Visibility = Visibility.Collapsed;
                                    bt40.Visibility = Visibility.Collapsed;
                                    bt41.Visibility = Visibility.Collapsed;
                                    bt42.Visibility = Visibility.Collapsed;
                                }

                            }
                            else
                            {
                                bt36.Visibility = Visibility.Collapsed;
                                bt37.Visibility = Visibility.Collapsed;
                                bt38.Visibility = Visibility.Collapsed;
                                bt39.Visibility = Visibility.Collapsed;
                                bt40.Visibility = Visibility.Collapsed;
                                bt41.Visibility = Visibility.Collapsed;
                                bt42.Visibility = Visibility.Collapsed;
                                bt35.Visibility = Visibility.Collapsed;
                            }
                        }
                        else
                        {
                            bt36.Visibility = Visibility.Collapsed;
                            bt37.Visibility = Visibility.Collapsed;
                            bt38.Visibility = Visibility.Collapsed;
                            bt39.Visibility = Visibility.Collapsed;
                            bt40.Visibility = Visibility.Collapsed;
                            bt41.Visibility = Visibility.Collapsed;
                            bt42.Visibility = Visibility.Collapsed;
                            bt35.Visibility = Visibility.Collapsed;
                            bt34.Visibility = Visibility.Collapsed;

                        }
                        //bt33.Visibility = Visibility.Collapsed;
                        //bt34.Visibility = Visibility.Collapsed;
                        //bt35.Visibility = Visibility.Collapsed;

                    }
                    break;

                case "domingo":
                    {
                        Grid g1 = (Grid)bt1.Child;
                        g1.Visibility = Visibility.Collapsed;


                        //bt2.Visibility = Visibility.Collapsed;
                        Grid g2 = (Grid)bt2.Child;
                        g2.Visibility = Visibility.Collapsed;


                        Grid g3 = (Grid)bt3.Child;
                        g3.Visibility = Visibility.Collapsed;


                        Grid g4 = (Grid)bt4.Child;
                        g4.Visibility = Visibility.Collapsed;


                        Grid g5 = (Grid)bt5.Child;
                        g5.Visibility = Visibility.Collapsed;


                        Grid g6 = (Grid)bt6.Child;
                        g6.Visibility = Visibility.Collapsed;


                        Button l2 = (Button)g1.Children[0];
                        l2.Content = "0";
                        l2 = (Button)g2.Children[0];
                        l2.Content = "0";
                        l2 = (Button)g3.Children[0];
                        l2.Content = "0";
                        l2 = (Button)g4.Children[0];
                        l2.Content = "0";
                        l2 = (Button)g5.Children[0];
                        l2.Content = "0";
                        l2 = (Button)g6.Children[0];
                        l2.Content = "0";



                        Grid g = (Grid)bt7.Child;
                        Button l = (Button)g.Children[0];
                        l.Content = "1";

                        g = (Grid)bt8.Child;
                        l = (Button)g.Children[0];
                        l.Content = "2";

                        g = (Grid)bt9.Child;
                        l = (Button)g.Children[0];
                        l.Content = "3";

                        g = (Grid)bt10.Child;
                        l = (Button)g.Children[0];
                        l.Content = "4";

                        g = (Grid)bt11.Child;
                        l = (Button)g.Children[0];
                        l.Content = "5";

                        g = (Grid)bt12.Child;
                        l = (Button)g.Children[0];
                        l.Content = "6";

                        g = (Grid)bt13.Child;
                        l = (Button)g.Children[0];
                        l.Content = "7";

                        g = (Grid)bt14.Child;
                        l = (Button)g.Children[0];
                        l.Content = "8";

                        g = (Grid)bt15.Child;
                        l = (Button)g.Children[0];
                        l.Content = "9";

                        g = (Grid)bt16.Child;
                        l = (Button)g.Children[0];
                        l.Content = "10";

                        g = (Grid)bt17.Child;
                        l = (Button)g.Children[0];
                        l.Content = "11";

                        g = (Grid)bt18.Child;
                        l = (Button)g.Children[0];
                        l.Content = "12";

                        g = (Grid)bt19.Child;
                        l = (Button)g.Children[0];
                        l.Content = "13";

                        g = (Grid)bt20.Child;
                        l = (Button)g.Children[0];
                        l.Content = "14";

                        g = (Grid)bt21.Child;
                        l = (Button)g.Children[0];
                        l.Content = "15";

                        g = (Grid)bt22.Child;
                        l = (Button)g.Children[0];
                        l.Content = "16";

                        g = (Grid)bt23.Child;
                        l = (Button)g.Children[0];
                        l.Content = "17";

                        g = (Grid)bt24.Child;
                        l = (Button)g.Children[0];
                        l.Content = "18";

                        g = (Grid)bt25.Child;
                        l = (Button)g.Children[0];
                        l.Content = "19";

                        g = (Grid)bt26.Child;
                        l = (Button)g.Children[0];
                        l.Content = "20";

                        g = (Grid)bt27.Child;
                        l = (Button)g.Children[0];
                        l.Content = "21";

                        g = (Grid)bt28.Child;
                        l = (Button)g.Children[0];
                        l.Content = "22";

                        g = (Grid)bt29.Child;
                        l = (Button)g.Children[0];
                        l.Content = "23";

                        g = (Grid)bt30.Child;
                        l = (Button)g.Children[0];
                        l.Content = "24";

                        g = (Grid)bt31.Child;
                        l = (Button)g.Children[0];
                        l.Content = "25";

                        g = (Grid)bt32.Child;
                        l = (Button)g.Children[0];
                        l.Content = "26";

                        g = (Grid)bt33.Child;
                        l = (Button)g.Children[0];
                        l.Content = "27";

                        bt29.Visibility = Visibility.Visible;
                        g = (Grid)bt34.Child;
                        l = (Button)g.Children[0];
                        l.Content = "28";

                        bt30.Visibility = Visibility.Visible;
                        bt31.Visibility = Visibility.Visible;
                        bt32.Visibility = Visibility.Visible;
                        bt33.Visibility = Visibility.Visible;
                        bt34.Visibility = Visibility.Visible;

                        if (v1 > 28)
                        {

                            bt35.Visibility = Visibility.Visible;
                            g = (Grid)bt35.Child;
                            l = (Button)g.Children[0];
                            l.Content = "29";
                            if (v1 > 29)
                            {
                                bt36.Visibility = Visibility.Visible;
                                bt37.Visibility = Visibility.Visible;
                                bt38.Visibility = Visibility.Visible;
                                bt39.Visibility = Visibility.Visible;
                                bt40.Visibility = Visibility.Visible;
                                bt41.Visibility = Visibility.Visible;
                                bt42.Visibility = Visibility.Visible;
                                g = (Grid)bt36.Child;
                                l = (Button)g.Children[0];
                                l.Content = "30";
                                g = (Grid)bt37.Child;
                                l = (Button)g.Children[0];
                                l.Content = "";

                                g = (Grid)bt38.Child;
                                l = (Button)g.Children[0];
                                l.Content = "";

                                g = (Grid)bt39.Child;
                                l = (Button)g.Children[0];
                                l.Content = "";

                                g = (Grid)bt40.Child;
                                l = (Button)g.Children[0];
                                l.Content = "";

                                g = (Grid)bt41.Child;
                                l = (Button)g.Children[0];
                                l.Content = "";

                                g = (Grid)bt42.Child;
                                l = (Button)g.Children[0];
                                l.Content = "";
                                if (v1 > 30)
                                {
                                    g = (Grid)bt37.Child;
                                    l = (Button)g.Children[0];
                                    l.Content = "31";

                                }
                                else
                                {

                                    bt37.Visibility = Visibility.Collapsed;
                                    bt38.Visibility = Visibility.Collapsed;
                                    bt39.Visibility = Visibility.Collapsed;
                                    bt40.Visibility = Visibility.Collapsed;
                                    bt41.Visibility = Visibility.Collapsed;
                                    bt42.Visibility = Visibility.Collapsed;
                                }

                            }
                            else
                            {
                                bt36.Visibility = Visibility.Collapsed;
                                bt37.Visibility = Visibility.Collapsed;
                                bt38.Visibility = Visibility.Collapsed;
                                bt39.Visibility = Visibility.Collapsed;
                                bt40.Visibility = Visibility.Collapsed;
                                bt41.Visibility = Visibility.Collapsed;
                                bt42.Visibility = Visibility.Collapsed;
                                bt35.Visibility = Visibility.Collapsed;
                            }
                        }
                        else
                        {
                            bt36.Visibility = Visibility.Collapsed;
                            bt37.Visibility = Visibility.Collapsed;
                            bt38.Visibility = Visibility.Collapsed;
                            bt39.Visibility = Visibility.Collapsed;
                            bt40.Visibility = Visibility.Collapsed;
                            bt41.Visibility = Visibility.Collapsed;
                            bt42.Visibility = Visibility.Collapsed;
                            bt35.Visibility = Visibility.Collapsed;
                            bt34.Visibility = Visibility.Collapsed;

                        }
                        //bt33.Visibility = Visibility.Collapsed;
                        //bt34.Visibility = Visibility.Collapsed;
                        //bt35.Visibility = Visibility.Collapsed;

                    }
                    break;
            }
            foreach (var b in calendario.Children)
            {
                if (b is Border)
                {
                    Border bb = (Border)b;


                    Border but = (Border)bb.Child;

                    Grid g = (Grid)but.Child;
                    Button l = (Button)g.Children[0];
                    if (l.Content.Equals("0"))
                    {
                        but.Visibility = Visibility.Collapsed;

                    }



                }
            }

        }

        private void mirar_dia_rojo()
        {
            if (evento_borrado.Child != null)
            {
                Border b = evento_borrado as Border;
                //console.writeline(b.Child);
                Border bb = b.Child as Border;
                b.BorderThickness = new Thickness(0);
                b.BorderBrush = System.Windows.Media.Brushes.LightGray;
                evento_borrado.BorderThickness = new Thickness(0);
                evento_borrado.BorderBrush = System.Windows.Media.Brushes.LightGray;
                bb.BorderThickness = new Thickness(0);
                bb.BorderBrush = System.Windows.Media.Brushes.LightGray;
                evento_borrado = new Border();
            }
            if (dia_actual.Child is Border)
            {
                //console.writeline(dia_actual.Parent);
                Border b = dia_actual as Border;
                //console.writeline(b.Child);
                Border bb = b.Child as Border;
                b.BorderThickness = new Thickness(0);
                b.BorderBrush = System.Windows.Media.Brushes.LightGray;

                dia_actual.BorderThickness = borderthikness_dia_actual.BorderThickness;
                dia_actual.BorderBrush = System.Windows.Media.Brushes.LightGray;

            }
            else
            {
                dia_actual.BorderThickness = borderthikness_dia_actual.BorderThickness;
                dia_actual.BorderBrush = System.Windows.Media.Brushes.LightGray;
            }

        }

        private void diaSeleccionado(object sender, RoutedEventArgs e)
        {

            if (dia_actual != null)
            {

                dia_actual.BorderThickness = borderthikness_dia_actual.BorderThickness;
                dia_actual.BorderBrush = System.Windows.Media.Brushes.LightGray;
                if (dia_actual.Child is Border)
                {
                    Border bb = dia_actual.Child as Border;
                    bb.BorderThickness = borderthikness_dia_actual.BorderThickness;
                    dia_actual.BorderBrush = System.Windows.Media.Brushes.LightGray;
                }

                AddNewEvento.Visibility = Visibility.Visible;
                editEvento.Visibility = Visibility.Collapsed;
            }

            Button diab = (Button)sender;
            dia = diab.Content.ToString();

            Grid g = VisualTreeHelper.GetParent(diab) as Grid;
            Border b = VisualTreeHelper.GetParent(g) as Border;
            Border b2 = VisualTreeHelper.GetParent(b) as Border;

            ScrollViewer sv = (ScrollViewer)g.Children[1];
            Grid gg = sv.Content as Grid;
            ListView lv = gg.Children[0] as ListView;

            numero_eventos.Text = lv.Items.Count+"";


            mirar_dia_rojo();
            if (dia_actual.BorderThickness == new Thickness(2, 2, 2, 2))
            {

            }
            else
            {
                borderthikness_dia_actual = new Border();
                borderthikness_dia_actual.BorderThickness = dia_actual.BorderThickness;
            }

            dia_actual = b2;
            dia_actual.BorderThickness = new Thickness(2);
            dia_actual.BorderBrush = System.Windows.Media.Brushes.Red;

            if (!(lvw is null) && !bol)
            {
                cambiodia = true;
                lvw.SelectedItem = null;

                lvw = null;
                bol = true;

            }
            else
            {
                bol = false;
                if (lvw != null)
                    lvw.SelectedItem = null;
            }


            cambiodia = false;



            ComprobarRoles();


        }

        private void cambioEvento(object sender, SelectionChangedEventArgs e)
        {
            if (sender == null)
            {
                AddNewEvento.Visibility = Visibility.Visible;
                editEvento.Visibility = Visibility.Collapsed;
                deleteEvento.Visibility = Visibility.Collapsed;
            }
            if (!cambiodia)
            {
                if (lvw is null)
                {
                    if (!cambio)
                    {
                        mirar_dia_rojo();
                        lvw = (ListView)sender;
                        numero_eventos.Text = lvw.Items.Count+"";
                        Grid gg = (Grid)lvw.Parent;
                        ScrollViewer g = (ScrollViewer)gg.Parent;
                        Grid gr = (Grid)g.Parent;
                        Border b = (Border)gr.Parent;

                        dia_actual = b.Parent as Border;
                        dia_actual.BorderBrush = System.Windows.Media.Brushes.Red;
                        dia_actual.BorderThickness = new Thickness(2);
                        char[] bin = rol_log.Permisos_bin.ToArray();
                        if(bin[0]=='1')
                        editEvento.Visibility = Visibility.Visible;
                        else
                            editEvento.Visibility = Visibility.Collapsed;
                        deleteEvento.Visibility = Visibility.Visible;
                        AddNewEvento.Visibility = Visibility.Collapsed;
                    }
                }
                else
                {
                    cambio = true;
                    mirar_dia_rojo();
                    lvw.SelectedItem = null;
                    if (lvw != (ListView)sender)
                        lvw = (ListView)sender;
                    dia_actual.BorderThickness = borderthikness_dia_actual.BorderThickness;
                    dia_actual.BorderBrush = System.Windows.Media.Brushes.LightGray;
                    numero_eventos.Text = lvw.Items.Count+"";
                    Grid gg = (Grid)lvw.Parent;
                    ScrollViewer g = (ScrollViewer)gg.Parent;
                    Grid gr = (Grid)g.Parent;
                    Button bt = gr.Children[0] as Button;
                    Border b = (Border)gr.Parent;
                    dia_actual = b.Parent as Border;
                    dia_actual.BorderBrush = System.Windows.Media.Brushes.Red;
                    dia_actual.BorderThickness = new Thickness(2);
                    diaSeleccionado(bt, RoutedEventArgs);
                    cambio = false;
                    editEvento.Visibility = Visibility.Visible;
                    deleteEvento.Visibility = Visibility.Visible;
                    AddNewEvento.Visibility = Visibility.Collapsed;
                    //cambiar
                }
            }
            ComprobarRoles();
        }

        private void Border_MouseLeftButtonDown_1(object sender, MouseButtonEventArgs e)
        {
            if (e.ClickCount == 2)
            {
                cambio = true;
                if (dia_actual == null)
                {
                    dia_actual = (Border)sender;
                    //console.writeline(dia_actual.Child);
                }


                Grid g = new Grid();
                if (dia_actual.Child is Border)
                {
                    Border bb = dia_actual.Child as Border;
                    g = bb.Child as Grid;
                }
                else
                {
                    g = dia_actual.Child as Grid;
                }

                Border b = new Border();
                Button la = new Button();
                if (g.Children[0] is Border)
                {
                    b = g.Children[0] as Border;
                    la = b.Child as Button;
                }
                else
                {
                    la = g.Children[0] as Button;
                }

                ScrollViewer sv = (ScrollViewer)g.Children[1];
                Grid gg = (Grid)sv.Content as Grid;
                ListView lv = gg.Children[0] as ListView;
                string a = la.Content as string;
                if (lv.SelectedItem == null)
                {
                    Border bb = (Border)sender;
                    Grid gg2 = (Grid)bb.Child;
                    Label la2 = (Label)gg2.Children[0];
                    Eventos eee = (Eventos)lv.Items[0];

                    Eventos evento_actual = (Eventos)levn.Select(sublist => sublist).Where(item => item.id.Equals(la2.Content)).First();

                    //Console.WriteLine((Application.Current.Windows.OfType<ListadodeEventos>().Count()));

                    if (ve is null)
                    {
                        ve = new VentanaEvento(evento_actual, a, mes, año, "update", false);
                        ve.Show();
                    }
                    else
                    {
                        ve.Close();
                        ve = new VentanaEvento(evento_actual, a, mes, año, "update", false);
                        ve.Show();
                    }




                }
                else
                {
                    if (ve is null)
                    {
                        ve = new VentanaEvento(lv.SelectedItem as Eventos, a, mes, año, "update", false);
                        ve.Show();
                    }
                    else
                    {
                        ve.Close();
                        ve = new VentanaEvento(lv.SelectedItem as Eventos, a, mes, año, "update", false);
                        ve.Show();
                    }
                    lv.SelectedItem = null;
                }
                calendario.IsEnabled = false;

            }
            else
            {
                if (lvw != null)
                {


                    Border b2 = (Border)sender;

                    Grid g = new Grid();
                    if (b2.Child is Border)
                    {
                        Border bb = b2.Child as Border;
                        g = b2.Child as Grid;
                    }
                    else
                    {
                        g = b2.Child as Grid;
                    }

                    Border b = new Border();
                    Button la = new Button();
                    if (g.Children[0] is Border)
                    {
                        b = g.Children[0] as Border;
                        la = b.Child as Button;
                    }
                    else
                    {
                        la = g.Children[0] as Button;
                    }


                    Label l = (Label)g.Children[0];
                    if (lvw.Items.Contains(levn.Find(x => x.id == int.Parse(l.Content.ToString()))))
                        lvw = null;

                }
            }
        }









        //////////////////////////////////////////////////////////////////////////////////

        /*++++++++++ FUNCIONES Y BOTONES CLIENTES&  ++++++++++*/

        private void boton1_Cientes_Click(object sender, RoutedEventArgs e)
        {
            botones.Visibility = Visibility.Visible;
            if (cliente_menu.SelectedIndex != 2)
            {
                if (safe)
                {
                    MessageBoxResult result = MessageBox.Show("Hay cambios realizado en la pestaña ¿Desea continuar?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                    if (result == MessageBoxResult.OK)
                    {
                        Clientes c = (Clientes)Clientes.SelectedItem;
                        Clientes.SelectedItem = null;
                        Clientes.SelectedItem = c;
                        clearUser_Click(clearUser, RoutedEventArgs);
                        cliente_menu.SelectedIndex = 2;

                        boton1_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/clientclick.png", UriKind.RelativeOrAbsolute));
                        boton1_Cientest.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                        boton2_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                        boton2_Cientest.Foreground = Brushes.Black;
                        boton3_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                        boton3_Cientest.Foreground = Brushes.Black;

                        boton4_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                        boton4_Cientest.Foreground = Brushes.Black;

                        boton5_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                        boton5_Cientest.Foreground = Brushes.Black;


                        boton1_Cientes.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                        boton1_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                        boton1_Cientes.BorderThickness = new Thickness(1);

                        boton2_Cientes.Background = Brushes.Transparent;
                        boton2_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                        boton3_Cientes.Background = Brushes.Transparent;
                        boton3_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                        boton4_Cientes.Background = Brushes.Transparent;
                        boton4_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                        boton5_Cientes.Background = Brushes.Transparent;
                        boton5_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                        boton5_Cientes.Background = Brushes.LightGray;

                        safe = false;
                        ComprobarRoles();
                    }
                }
                else
                {
                    cliente_menu.SelectedIndex = 2;

                    boton1_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/clientclick.png", UriKind.RelativeOrAbsolute));
                    boton1_Cientest.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                    boton2_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton2_Cientest.Foreground = Brushes.Black;
                    boton3_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                    boton3_Cientest.Foreground = Brushes.Black;

                    boton4_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                    boton4_Cientest.Foreground = Brushes.Black;

                    boton5_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                    boton5_Cientest.Foreground = Brushes.Black;


                    boton1_Cientes.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                    boton1_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                    boton1_Cientes.BorderThickness = new Thickness(1);

                    boton2_Cientes.Background = Brushes.Transparent;
                    boton2_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton3_Cientes.Background = Brushes.Transparent;
                    boton3_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton4_Cientes.Background = Brushes.Transparent;
                    boton4_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                    boton5_Cientes.Background = Brushes.Transparent;
                    boton5_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                    boton5_Cientes.Background = Brushes.LightGray;

                    ComprobarRoles();
                }
            }
        }

        private void boton2_Cientes_Click(object sender, RoutedEventArgs e)
        {
            botones.Visibility = Visibility.Visible;
            if (cliente_menu.SelectedIndex != 3)
            {
                if (safe)
                {
                    MessageBoxResult result = MessageBox.Show("Hay cambios realizado en la pestaña ¿Desea continuar?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                    if (result == MessageBoxResult.OK)
                    {
                        Clientes c = (Clientes)Clientes.SelectedItem;
                        Clientes.SelectedItem = null;
                        Clientes.SelectedItem = c;
                        clearUser_Click(clearUser, RoutedEventArgs);
                        cliente_menu.SelectedIndex = 3;
                        boton1_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                        boton1_Cientest.Foreground = Brushes.Black;
                        boton2_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/articleclick.png", UriKind.RelativeOrAbsolute));
                        boton2_Cientest.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                        boton3_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                        boton3_Cientest.Foreground = Brushes.Black;
                        boton4_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                        boton4_Cientest.Foreground = Brushes.Black;
                        boton5_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                        boton5_Cientest.Foreground = Brushes.Black;

                        boton1_Cientes.Background = Brushes.Transparent;
                        boton1_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                        boton2_Cientes.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                        boton2_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                        boton2_Cientes.BorderThickness = new Thickness(1);

                        boton3_Cientes.Background = Brushes.Transparent;
                        boton3_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                        boton4_Cientes.Background = Brushes.Transparent;
                        boton4_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                        boton5_Cientes.Background = Brushes.LightGray;
                        boton5_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                        ComprobarRoles();
                        safe = false;
                    }
                }
                else
                {
                    cliente_menu.SelectedIndex = 3;
                    boton1_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                    boton1_Cientest.Foreground = Brushes.Black;
                    boton2_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/articleclick.png", UriKind.RelativeOrAbsolute));
                    boton2_Cientest.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                    boton3_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                    boton3_Cientest.Foreground = Brushes.Black;
                    boton4_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                    boton4_Cientest.Foreground = Brushes.Black;
                    boton5_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                    boton5_Cientest.Foreground = Brushes.Black;

                    boton1_Cientes.Background = Brushes.Transparent;
                    boton1_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton2_Cientes.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                    boton2_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                    boton2_Cientes.BorderThickness = new Thickness(1);

                    boton3_Cientes.Background = Brushes.Transparent;
                    boton3_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton4_Cientes.Background = Brushes.Transparent;
                    boton4_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton5_Cientes.Background = Brushes.LightGray;
                    boton5_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                    ComprobarRoles();
                }
            }
        }

        private void boton3_Cientes_Click(object sender, RoutedEventArgs e)
        {
            botones.Visibility = Visibility.Visible;
            if (cliente_menu.SelectedIndex != 4)
            {
                if (safe)
                {
                    MessageBoxResult result = MessageBox.Show("Hay cambios realizado en la pestaña ¿Desea continuar?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                    if (result == MessageBoxResult.OK)
                    {
                        Clientes c = (Clientes)Clientes.SelectedItem;
                        Clientes.SelectedItem = null;
                        Clientes.SelectedItem = c;
                        clearUser_Click(clearUser, RoutedEventArgs);
                        cliente_menu.SelectedIndex = 4;

                        boton1_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                        boton1_Cientest.Foreground = Brushes.Black;
                        boton2_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                        boton2_Cientest.Foreground = Brushes.Black;
                        boton3_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/cardclick.png", UriKind.RelativeOrAbsolute));
                        boton3_Cientest.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                        boton4_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                        boton4_Cientest.Foreground = Brushes.Black;
                        boton5_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                        boton5_Cientest.Foreground = Brushes.Black;

                        boton1_Cientes.Background = Brushes.Transparent;
                        boton1_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                        boton2_Cientes.Background = Brushes.Transparent;
                        boton2_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                        boton3_Cientes.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                        boton3_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                        boton3_Cientes.BorderThickness = new Thickness(1);

                        boton4_Cientes.Background = Brushes.Transparent;
                        boton4_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                        boton5_Cientes.Background = Brushes.LightGray;
                        boton5_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                        tarjeta.Focus();

                        vehiculo1_Click(vehiculo1, new RoutedEventArgs());
                        vehiculo1_Click(vehiculo2, new RoutedEventArgs());
                        vehiculo1_Click(vehiculo3, new RoutedEventArgs());
                        vehiculo1_Click(vehiculo4, new RoutedEventArgs());

                        nombre_cliente_alta.Focus();
                        tarjeta.Focus();
                        bastidor.Focus();
                        ComprobarRoles();
                        var cmbx = Vehiculo1_alta as ComboBox;
                        cmbx.IsDropDownOpen = false;
                        cmbx = Vehiculo2_alta as ComboBox;
                        cmbx.IsDropDownOpen = false;
                        cmbx = Vehiculo3_alta as ComboBox;
                        cmbx.IsDropDownOpen = false;
                        cmbx = Vehiculo4_alta as ComboBox;
                        cmbx.IsDropDownOpen = false;
                        cmbx = vehiculo1 as ComboBox;
                        cmbx.IsDropDownOpen = false;
                        cmbx = vehiculo2 as ComboBox;
                        cmbx.IsDropDownOpen = false;
                        cmbx = vehiculo3 as ComboBox;
                        cmbx.IsDropDownOpen = false;
                        cmbx = vehiculo4 as ComboBox;
                        cmbx.IsDropDownOpen = false;
                        vehiculo4.IsDropDownOpen = false;
                        vehiculo4.IsDropDownOpen = false;
                        vehiculo4.IsDropDownOpen = false;
                        vehiculo4.IsDropDownOpen = false;
                        vehiculo4.IsDropDownOpen = false;
                        safe = false;
                    }
                }
                else
                {
                    cliente_menu.SelectedIndex = 4;

                    boton1_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                    boton1_Cientest.Foreground = Brushes.Black;
                    boton2_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton2_Cientest.Foreground = Brushes.Black;
                    boton3_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/cardclick.png", UriKind.RelativeOrAbsolute));
                    boton3_Cientest.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                    boton4_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                    boton4_Cientest.Foreground = Brushes.Black;
                    boton5_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                    boton5_Cientest.Foreground = Brushes.Black;

                    boton1_Cientes.Background = Brushes.Transparent;
                    boton1_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton2_Cientes.Background = Brushes.Transparent;
                    boton2_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton3_Cientes.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                    boton3_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                    boton3_Cientes.BorderThickness = new Thickness(1);

                    boton4_Cientes.Background = Brushes.Transparent;
                    boton4_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton5_Cientes.Background = Brushes.LightGray;
                    boton5_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                    tarjeta.Focus();

                    Console.WriteLine(vehiculo1.IsDropDownOpen);
                    vehiculo1_Click(vehiculo1,new RoutedEventArgs());
                    vehiculo1_Click(vehiculo2,new RoutedEventArgs());
                    vehiculo1_Click(vehiculo3,new RoutedEventArgs());
                    vehiculo1_Click(vehiculo4,new RoutedEventArgs());

                    nombre_cliente_alta.Focus();
                    tarjeta.Focus();
                    bastidor.Focus();
                    ComprobarRoles();
                   var cmbx = Vehiculo1_alta as ComboBox;
                    cmbx.IsDropDownOpen = false;
                    cmbx = Vehiculo2_alta as ComboBox;
                    cmbx.IsDropDownOpen = false;
                    cmbx = Vehiculo3_alta as ComboBox;
                    cmbx.IsDropDownOpen = false;
                    cmbx = Vehiculo4_alta as ComboBox;
                    cmbx.IsDropDownOpen = false;
                    cmbx = vehiculo1 as ComboBox;
                    cmbx.IsDropDownOpen = false;
                    cmbx = vehiculo2 as ComboBox;
                    cmbx.IsDropDownOpen = false;
                    cmbx = vehiculo3 as ComboBox;
                    cmbx.IsDropDownOpen = false;
                    cmbx = vehiculo4 as ComboBox;
                    cmbx.IsDropDownOpen = false;
                    vehiculo4.IsDropDownOpen = false;
                    vehiculo4.IsDropDownOpen = false;
                    vehiculo4.IsDropDownOpen = false;
                    vehiculo4.IsDropDownOpen = false;
                    vehiculo4.IsDropDownOpen = false;
                }
            }
        }

        private void boton4_Cientes_Click(object sender, RoutedEventArgs e)
        {
            botones.Visibility = Visibility.Collapsed;
            if (cliente_menu.SelectedIndex != 5)
            {
                if (safe)
                {
                    MessageBoxResult result = MessageBox.Show("Hay cambios realizado en la pestaña ¿Desea continuar ? ", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                    if (result == MessageBoxResult.OK)
                    {
                        Clientes c = (Clientes)Clientes.SelectedItem;
                        Clientes.SelectedItem = null;
                        Clientes.SelectedItem = c;
                        clearUser_Click(clearUser, RoutedEventArgs);
                        cliente_menu.SelectedIndex = 5;

                        boton1_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                        boton1_Cientest.Foreground = Brushes.Black;
                        boton2_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                        boton2_Cientest.Foreground = Brushes.Black;
                        boton4_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/cardclick.png", UriKind.RelativeOrAbsolute));
                        boton4_Cientest.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                        boton3_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                        boton3_Cientest.Foreground = Brushes.Black;

                        boton5_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                        boton5_Cientest.Foreground = Brushes.Black;

                        boton1_Cientes.Background = Brushes.Transparent;
                        boton1_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                        boton2_Cientes.Background = Brushes.Transparent;
                        boton2_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                        boton4_Cientes.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                        boton4_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                        boton4_Cientes.BorderThickness = new Thickness(1);

                        boton3_Cientes.Background = Brushes.Transparent;
                        boton3_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                        boton5_Cientes.Background = Brushes.LightGray;
                        boton5_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                        nombre_cliente_alta.Focus();
                        tarjeta.Focus();
                        ComprobarRoles();
                        safe = false;
                    }
                }
                else
                {
                    cliente_menu.SelectedIndex = 5;

                    boton1_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                    boton1_Cientest.Foreground = Brushes.Black;
                    boton2_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton2_Cientest.Foreground = Brushes.Black;
                    boton4_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/cardclick.png", UriKind.RelativeOrAbsolute));
                    boton4_Cientest.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                    boton3_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                    boton3_Cientest.Foreground = Brushes.Black;

                    boton5_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                    boton5_Cientest.Foreground = Brushes.Black;

                    boton1_Cientes.Background = Brushes.Transparent;
                    boton1_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton2_Cientes.Background = Brushes.Transparent;
                    boton2_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton4_Cientes.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                    boton4_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                    boton4_Cientes.BorderThickness = new Thickness(1);

                    boton3_Cientes.Background = Brushes.Transparent;
                    boton3_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton5_Cientes.Background = Brushes.LightGray;
                    boton5_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                    nombre_cliente_alta.Focus();
                    tarjeta.Focus();
                    ComprobarRoles();
                }
            }
        }

        private void boton5_Cientes_Click(object sender, RoutedEventArgs e)
        {
            botones.Visibility = Visibility.Visible;
            if (cliente_menu.SelectedIndex != 1)
            {
                if (safe)
                {
                    MessageBoxResult result = MessageBox.Show("Hay cambios realizado en la pestaña ¿Desea continuar?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                    if (result == MessageBoxResult.OK)
                    {
                        Clientes c = (Clientes)Clientes.SelectedItem;
                        Clientes.SelectedItem = null;
                        Clientes.SelectedItem = c;
                        clearUser_Click(clearUser, RoutedEventArgs);
                        cliente_menu.SelectedIndex = 1;

                        boton1_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                        boton1_Cientest.Foreground = Brushes.Black;
                        boton2_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                        boton2_Cientest.Foreground = Brushes.Black;
                        boton4_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                        boton4_Cientest.Foreground = Brushes.Black;
                        boton3_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                        boton3_Cientest.Foreground = Brushes.Black;

                        boton5_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/libraryclick.png", UriKind.RelativeOrAbsolute));
                        boton5_Cientest.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                        boton1_Cientes.Background = Brushes.Transparent;
                        boton1_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                        boton2_Cientes.Background = Brushes.Transparent;
                        boton2_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                        boton5_Cientes.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                        boton5_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                        boton5_Cientes.BorderThickness = new Thickness(1);

                        boton3_Cientes.Background = Brushes.Transparent;
                        boton3_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                        boton4_Cientes.Background = Brushes.Transparent;
                        boton4_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                        nombre_cliente_alta.Focus();
                        tarjeta.Focus();
                        safe = false;
                        ComprobarRoles();
                    }
                }
                else
                {
                    cliente_menu.SelectedIndex = 1;

                    boton1_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                    boton1_Cientest.Foreground = Brushes.Black;
                    boton2_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton2_Cientest.Foreground = Brushes.Black;
                    boton4_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                    boton4_Cientest.Foreground = Brushes.Black;
                    boton3_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                    boton3_Cientest.Foreground = Brushes.Black;

                    boton5_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/libraryclick.png", UriKind.RelativeOrAbsolute));
                    boton5_Cientest.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                    boton1_Cientes.Background = Brushes.Transparent;
                    boton1_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton2_Cientes.Background = Brushes.Transparent;
                    boton2_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton5_Cientes.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                    boton5_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                    boton5_Cientes.BorderThickness = new Thickness(1);

                    boton3_Cientes.Background = Brushes.Transparent;
                    boton3_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton4_Cientes.Background = Brushes.Transparent;
                    boton4_Cientes.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                    nombre_cliente_alta.Focus();
                    tarjeta.Focus();
                    ComprobarRoles();

                }
            }
        }

        private void MirarFicha()
        {
            lista_clientes_ficha = new List<Clientes>();
            clearall();
            if (alta_baja_buscar.HorizontalAlignment == HorizontalAlignment.Right)
            {
                lista_clientes_ficha = lcln.Select(x => x).Where(x => x.DeBaja == false).ToList();
            }
            else
            {
                lista_clientes_ficha = lcln.Select(x => x).Where(x => x.DeBaja == true).ToList();
            }
            if (lista_clientes_ficha.Count > 0)
            {
                ficha.IsEnabled = true;
                ficha2.IsEnabled = true;
                ficha3.IsEnabled = true;
                ficha4.IsEnabled = true;
                ficha5.IsEnabled = true;
                Clientes.SelectedItem = null;
                Clientes.SelectedItem = lista_clientes_ficha[lista_clientes_ficha.Count()-1];
                //posicion = 0;
                contador.Text = posicion+1+"";
                total.Content = "de " + lista_clientes_ficha.Count;                
            }
            else
            {
                posicion = 0;
                contador.Text = posicion+1+"";
                total.Content = "de " + lista_clientes_ficha.Count;
                ficha.IsEnabled = false;
                ficha2.IsEnabled = false;
                ficha3.IsEnabled = false;
                ficha4.IsEnabled = false;
                ficha5.IsEnabled = false;
            }
            vehiculo1.IsDropDownOpen = false;
            matricula1.Focus();
            change_client.IsEnabled = false;
        }

        private void boton6_Cientes_Click(object sender, RoutedEventArgs e)
        {

        }

        private void boton7_Cientes_Click(object sender, RoutedEventArgs e)
        {

        }




        //BOTONES HERRAMIENTAS

        private void Añadir_Nuevo_Cliente(object sender, RoutedEventArgs e)
        {
            if ( cliente_menu.SelectedIndex != 10)
            {
                if (cliente_menu.SelectedIndex != 5)
                {
                    CargarVehiculos();
                    vc.Close();
                    if (lcln.Count > 0)
                        vc = new VentanaCliente(lcln.Select(x => x.n_cliemte).Last(), lcln, lnprc, lcnt, lvhc);
                    else

                        vc = new VentanaCliente(0, null, lnprc, lcnt, lvhc);
                    vc.Show();
                }
            }
           /* else
            {
                if (cliente_menu.SelectedIndex == 1)
                {
                    numero_plaza_alta.Items.Clear();
                    foreach(Parcelas p in lprc) 
                    {
                        if (p.ocupada == 0)
                        {
                            numero_plaza_alta.Items.Add(p);
                        }
                    }
                    newclient = true;
                    Clientes.SelectedItem = null;
                    Clientes_HoraEntrada_alta.Text = new DateTime(1, 1, 1, 12, 0, 0).ToString("HH:mm:ss");
                    Clientes_HoraPeriodo_alta.Text = new DateTime(1, 1, 1, 12, 0, 0).ToString("HH:mm:ss");

                    numero_cliente_alta.Text = "";
                    numero_plaza_alta.SelectedItem = null;
                    nombre_cliente_alta.Text = "";
                    apellido_cliente_alta.Text = "";
                    dni_cliente_alta.Text = "";
                    direccion_cliente_alta.Text = "";
                    poblacion_cliente_alta.Text = "";
                    cp_cliente_alta.Text = "";
                    provincia_cliente_alta.Text = "";
                    pais_cliente_alta.Text = "";
                    telefono_cliente_alta.Text = "";
                    telefono2_cliente_alta.Text = "";
                    email_cliente.Text = "";
                    email_cliente2.Text = "";
                    Vehiculo1_alta.Text = "";
                    bastidor1_alta.Text = "";
                    bastidor2_alta.Text = "";
                    medidas_alta.Text = "";
                    Clientes_FechaEntrada_alta.SelectedDate = null;
                    Clientes_HoraEntrada_alta.Text = "12:00";
                    Clientes_FechaSalida_alta.SelectedDate = null;
                    Clientes_FechaPago_alta.SelectedDate = null;
                    Clientes_FechaPeriodo_alta.SelectedDate = null;
                    Clientes_HoraPeriodo_alta.Text = "12:00";
                    MouseButtonEventArgs mb = new MouseButtonEventArgs(Mouse.PrimaryDevice, 0, MouseButton.Left);
                    if (on_off_border.HorizontalAlignment == HorizontalAlignment.Left)
                    {
                        FichaPotencia(on_off, mb);
                    }
                    Potencia_alta.SelectedItem = null;
                    if (alta_baja.HorizontalAlignment == HorizontalAlignment.Right)
                    {
                        FichaPotencia2(estado_alta, mb);
                    }
                    on_off.IsEnabled = false;
                    Potencia_alta.IsEnabled = false;
                    importe_alta.Text = "";
                    nota1_alta.Text = "";

                    botones_ficha.IsEnabled = false;
                    ficha.IsEnabled = true;
                    ficha2.IsEnabled = true;
                    ficha3.IsEnabled = true;
                    ficha4.IsEnabled = true;
                    ficha5.IsEnabled = true;
                    if (lcln.Count > 0)
                    {
                        Clientes c = lcln[lcln.Count - 1];

                        numero_cliente_alta.Text = c.n_cliemte + 1 + "";

                    }
                    else
                    {
                        numero_cliente_alta.Text = "1";

                    }


                    BrushConverter bc = new BrushConverter();
                    numero_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    numero_plaza_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");






                    nombre_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");




                    apellido_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");




                    dni_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");



                    direccion_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    poblacion_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");


                    telefono_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");


                    telefono2_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");


                    cp_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    email_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");



                    email_cliente2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");



                    /*u.Luz = "s";
                    u.Nota1 = "";
                    u.Nota2 = "";*/
                    /*if (!(cc.Metodo_Pago.ToString().Equals(Metodo_pago.Text)))
                    {
                        a = true;
                        sql_query += "Metodo_Pago=" + Metodo_pago.SelectedIndex + ", ";
                        parametros.Add("Metodo_Pago:" + Metodo_pago.SelectedIndex);
                    }




                    pais_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");


                    provincia_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");


                    Clientes_FechaEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");


                    Clientes_FechaSalida_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");


                    Vehiculo1_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");


                    bastidor1_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");


                    Vehiculo2_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");


                    bastidor2_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");


                    Potencia_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");





                    on_off_border.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");


                    nota1_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");


                    Clientes_HoraEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");


                    Clientes_HoraPeriodo_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");






                    Clientes_FechaPeriodo_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");


                    Clientes_FechaPago_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    medidas_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    change_client.IsEnabled = false;
                }
                else
                if (Clientes.SelectedItem != null)
                {

                    numero_plaza_alta.Items.Add(parcela);

                    Clientes c = Clientes.SelectedItem as Clientes;
                    Console.WriteLine(c.n_plaza.Equals("") + " " + (c.n_plaza != null));
                    if (!(c.n_plaza.Equals("")) && c.n_plaza != null)
                    {
                        vreg.Close();
                        vreg = new VentanaRegistro(null, c);
                        vreg.Show();
                    }
                    else
                    {
                        MessageBoxResult result = System.Windows.MessageBox.Show("Tienes que asignar una parcela al Cliente antes de proceder con la operación", "¡Alerta!", MessageBoxButton.OK, MessageBoxImage.Warning);

                    }

                }

            }*/

        }



        private void Clear_All(object sender, RoutedEventArgs e)
        {
            if (mapa_menu.SelectedIndex == 0)
            {
                int par = lista_parcelas.SelectedIndex;
                editando = false;
                SomeBool = false;
                Border b = checpoint.Child as Border;

                checpoint.Background = Brushes.LightGray;
                b.HorizontalAlignment = HorizontalAlignment.Left;
                SomeBool = false;
                ClearMapa();
                lista_parcelas.SelectedIndex = par;


            }
            else
            {
                ClearMapa1();
            }


        }

        private void ClearMapa()
        {
            foreach (Border b in lbtn)
            {
                b.Background = Brushes.Transparent;
            }
            listadeparcelas.Visibility = Visibility.Visible; lista_mapa.Visibility = Visibility.Collapsed;
            //Nombre_Parcela.SelectedItem = null;
            //Cliente_Parcela.SelectedItem = null;
            lista_parcelas.SelectedItem = null;
            viewBoxCamping.Width = Properties.Settings.Default.mapwidth;
            editmapa.Visibility = Visibility.Collapsed;
            viewBoxCamping.Height = Properties.Settings.Default.mapheight;
            lbtn.Clear();
            limpiarParcela();
        }

        private void Delete_Cliente(object sender, RoutedEventArgs e)
        {
            MessageBoxResult result = MessageBox.Show("¿Desea borrar el cliente seleccionado?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
            if (result == MessageBoxResult.OK)
            {
                if (cliente_menu.SelectedIndex != 3)
                    DeleteCliente();
                else
                {

                    DelteRegistro(Registros.SelectedItem as Registros);
                }
            }

        }

        private void DeleteCliente()
        {
            try
            {
                Clientes c = Clientes.SelectedItem as Clientes;
                string cn_String = conexiondb;
                Consulta consulta = new Consulta("Cliente", null, "Id:" + c.id, "DELETE");
                SQLiteConnection cn = new SQLiteConnection(cn_String);
                if (cn.State != ConnectionState.Open) cn.Open();
                SQLiteCommand sql_cmd = new SQLiteCommand("DELETE FROM Cliente WHERE Id=" + c.id, cn);
                while (observartodotoken)
                {

                }
                sql_cmd.ExecuteNonQuery();

                Lista_consultas.Add(consulta);

                cn.Close();




                if (c.Switch == 1)
                {



                    if (c.Lista_Parcelas.Count > 0)
                    {
                        Parcelas p = c.Lista_Parcelas[0];
                        if (p != null)
                        {
                            Direcciones d = ldrc2.Find(x => x.Id == p.Direccion);

                            /*_connection.Connect();
                            Thread.Sleep(1000);
                            if (KnxConnectionTunneling.ChannelId != 0)
                            {

                                _connection.Action(d.Descripcion, false);

                                Thread.Sleep(1000);
                                _connection.Disconnect();
                            }*/
                        }
                    }
                }
                foreach (Parcelas p in c.Lista_Parcelas)
                {
                    if (p != null)
                    {
                        foreach (Border b in p.botones)
                        {
                            b.Background = Brushes.Transparent;

                        }



                        cn = new SQLiteConnection(conexiondb);
                        cn.Open();

                        string sql_query = "UPDATE Parcelas SET asignada=" + 0 + ", n_cliente=0 WHERE Id=" + p.id;
                        sql_cmd = new SQLiteCommand(sql_query, cn);

                        sql_cmd.ExecuteNonQuery();
                        List<String> ls = new List<string>();
                        ls.Add("Parcelas=''");
                        ls.Add("asignada=0");
                        ls.Add("n_cliente=0");

                        consulta = new Consulta("Parcelas", ls, "Id:" + p.id, "UPDATE");
                    }
                }
                Clientes.SelectedItem=null;
                clientebool = true;
                cargarClientes();
                //CargarRegistros();

                while (observartodotoken)
                {

                }

                Registros.SelectedItem = null;
                Lista_consultas.Add(consulta);

                string cn_string = conexiondb;
                cn = new SQLiteConnection(cn_string);
                if (cn.State != ConnectionState.Open) cn.Open();
                string sql_Text = "UPDATE Version SET configurationcol=GETDATE()";
                SQLiteCommand sql_cmd2 = new SQLiteCommand(sql_Text, cn);

                cn.Close();
                //sql_cmd2.ExecuteNonQuery();
            }catch(Exception ee)
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                Peta(ee, line + "");
            }

        }

        private void editCliente_Click(object sender, RoutedEventArgs e)
        {
            if (lista_parcelas.SelectedItem != null)
            {
                boton2_Mapa_Click(boton2_Mapa, RoutedEventArgs);
                lista_parcelas2.SelectedItem = lista_parcelas.SelectedItem;
            }
        }

        private void filtrar_cliente_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            /*try
            {
                if (filtrar_Factura != null)
                    if (filtrar_Factura.SelectedIndex == 3)
                    {
                        Facturas_buscar_fecha.Visibility = Visibility.Visible;
                        Facturas_buscar.Visibility = Visibility.Collapsed;
                    }
                    else
                    {
                        Facturas_buscar_fecha.Visibility = Visibility.Collapsed;
                        Facturas_buscar.Visibility = Visibility.Visible;
                    }
            }
            catch (Exception ee)
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                Log oLog = new Log(path2);
                oLog.Add("Peto linea 5744 " + ee.Message);
            }*/

        }
        private async void change_client_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                string uri = string.Format("http://app.adex-integracio.com/sgc/index2.php");
                //SGC.Clases.Version v = new Version();
                //Debug.WriteLine("Hola ");
                //byteArray = Encoding.UTF8.GetBytes("tabla = Version");
                Clientes cliente = Clientes.SelectedItem as Clientes;
                List<KeyValuePair<string, string>> queries = new List<KeyValuePair<string, string>>()
                                {
                                    new KeyValuePair<string, string>("tabla", "Cliente"),
                                    new KeyValuePair<string, string>("action", "SelectOne"),
                                    new KeyValuePair<string, string>("parametros", cliente.id+"")
                                };
                //Uri = new Uri(uri);
                
                           
                            //console.writeline(mycontent);
                            //v = new Version(mycontent);
                            //Debug.WriteLine("IsSuccessStatusCode");

                            List<Clientes> lst = new List<Clientes>();
                           


                            //lst.Remove(lst[0]);

                           
                                try
                                {
                                    if (cliente_menu.SelectedIndex == 2 || cliente_menu.SelectedIndex == 3 || cliente_menu.SelectedIndex == 4)
                                    {
                                        Clientes c = Clientes.SelectedItem as Clientes;

                                        List<string> parametros = new List<string>();
                                        Consulta consulta;


                                        //sql_Text = "UPDATE Version SET configurationcol=GETDATE()";

                                        string sql_query = "UPDATE Cliente SET ";
                                        Boolean a = false;

                                        //string sql_query = "INSERT INTO Cliente([N_Cliente],[N_Plaza],[N_Tarjeta],[Nombre],[Apellidos],[DNI],[direccion],[poblacion],[Telefono1],[Telefono2],[TelefonoX],[CP],[Mail1],[Mail2],[MailX],[DatosBancario]) VALUES ('" + u.n_cliemte + "','" + u.n_plaza + "','" + u.n_tarjeta + "','" + u.nombre_cliente + "','" + u.apellidos_cliente + "','" + u.dni + "','" + u.direccion + "','" + u.poblacio + "','" + u.telefon1 + "','" + u.telefon2 + "','" + u.telefonx + "','" + u.codigo_postal + "','" + u.mail + "','" + u.mail2 + "','" + u.mailx + "','" + u.datosBancarios + "')";
                                        //string sql_query = "INSERT INTO Registro([Importe],[Vehiculo],[Vehiculo2],[N_bastido],[Medida],[Matricula],[Matricula2],[Fecha_In],[Fecha_Pago],[Periodo_Ini],[Periodo_Out],[Fecha_Out],[Nota1],[Nota2],[N_Plaza], [Luz], [N_cliente]) VALUES ('" + u.Importe + "','" + u.Vehiculo + "','" + u.Vehiculo2 + "','" + u.N_bastidor + "','" + u.Media + "','" + u.Matricula + "','" + u.Matricula2 + "','" + a2.ToString("MM/dd/yyyy") + "','" + b2.ToString("MM/dd/yyyy") + "','" + c2.ToString("MM/dd/yyyy") + "','" + d2.ToString("MM/dd/yyyy") + "','" + e2.ToString("MM/dd/yyyy") + "','" + u.Nota1 + "','" + u.Nota2 + "','" + u.N_Plaza + "','" + u.Luz + "', '" + u.N_cliente + "')";
                                        /*if (importe.Text.Length > 0)
                                        {
                                            //a = true;
                                            //u.N_cliente = long.Parse(cliente.Text);
                                        }
                                        */
                                      


                                        if (!(c.n_cliemte.ToString().Equals(numero_cliente.Text)))
                                        {
                                            a = true;
                                            sql_query += "N_Cliente=" + numero_cliente.Text + ", ";
                                            parametros.Add("N_Cliente:" + numero_cliente.Text);
                                        }
                                        if (!(nota.Text.Equals(c.Nota1)))
                                        {
                                            a = true;
                                            sql_query += "Nota1='" + nota.Text + "', ";
                                            parametros.Add("Nota1:" + nota.Text);
                                        }
                                        
                                        if (!(nota1_alta2.Text.Equals(c.Nota2)))
                                        {
                                            a = true;
                                            sql_query += "Nota2='" + nota1_alta2.Text + "', ";
                                            parametros.Add("Nota1:" + nota1_alta2.Text);
                                        }

                                        if (c.n_plaza != null)
                                        {

                                            Parcelas p = numero_plaza.SelectedItem as Parcelas;
                                            if (p == null)
                                            {
                                                p = new Parcelas();
                                                p.id = 0;
                                            }
                                            if (!(c.n_plaza.Equals(p.id + "")))
                                            {
                                                a = true;
                                                sql_query += "N_Plaza=" + p.id + ", ";
                                                parametros.Add("N_Plaza:" + p.id);
                                            }
                                        }
                                        else
                                        {
                                            if (numero_plaza.SelectedItem != null)
                                            {
                                                Parcelas p = numero_plaza.SelectedItem as Parcelas;
                                                a = true;
                                                sql_query += "N_Plaza='" + p.id + "', ";
                                                parametros.Add("N_Plaza:" + p.id);
                                            }
                                        }



                                        if (!(c.N_tarjeta.Equals(tarjeta.Text)))
                                        {
                                            a = true;
                                            sql_query += "Tarjeta='" + tarjeta.Text.Replace("€", "") + "', ";
                                            parametros.Add("Tarjeta:" + tarjeta.Text.Replace("€", "").Replace(",", "."));
                                        }

                                        if (!(c.nombre_cliente.Equals(nombre_cliente.Text)))
                                        {
                                            a = true;
                                            sql_query += "Nombre='" + nombre_cliente.Text + "', ";
                                            parametros.Add("Nombre:" + nombre_cliente.Text);


                                        }


                                        if (!(c.apellidos_cliente.Equals(apellidos_cliente.Text)))
                                        {
                                            a = true;
                                            sql_query += "Apellidos='" + apellidos_cliente.Text + "', ";
                                            parametros.Add("Apellidos:" + apellidos_cliente.Text);

                                        }


                                        if (!(c.dni.Equals(dni.Text)))
                                        {

                                            a = true;
                                            sql_query += "DNI='" + dni.Text + "', ";
                                            parametros.Add("DNI:" + dni.Text);
                                        }



                                        if (!(c.direccion.Equals(direccion_cliente.Text)))
                                        {

                                            a = true;
                                            sql_query += "direccion='" + direccion_cliente.Text + "', ";
                                            parametros.Add("direccion:" + direccion_cliente.Text);
                                        }

                                        if (!(c.poblacio.Equals(poblacion_cliente.Text)))
                                        {

                                            a = true;
                                            sql_query += "poblacion='" + poblacion_cliente.Text + "', ";
                                            parametros.Add("poblacion:" + poblacion_cliente.Text);
                                        }

                                        if (!(c.telefon1.Equals(telefonos_cliente.Text)))
                                        {


                                            a = true;
                                            sql_query += "Telefono1='" + telefonos_cliente.Text + "', ";
                                            parametros.Add("Telefono1:" + telefonos_cliente.Text);

                                        }

                                        if (!(c.telefon2.Equals(telefonos_cliente2.Text)))
                                        {


                                            a = true;
                                            sql_query += "Telefono2='" + telefonos_cliente2.Text + "', ";
                                            parametros.Add("Telefono2:" + telefonos_cliente2.Text);

                                        }

                                        if (!c.codigo_postal.Equals(CP.Text))
                                        {

                                            a = true;
                                            sql_query += "CP='" + CP.Text + "', ";
                                            parametros.Add("CP:" + CP.Text);
                                        }
                                        if (!(c.mail.Equals(mail_cliente.Text)))
                                        {
                                            a = true;
                                            sql_query += "Mail1='" + mail_cliente.Text + "', ";
                                            parametros.Add("Mail1:" + mail_cliente.Text);
                                        }
                                        if (!(c.mail2.Equals(mail_cliente2.Text)))
                                        {
                                            a = true;
                                            sql_query += "Mail2='" + mail_cliente2.Text + "', ";
                                            parametros.Add("Mail2:" + mail_cliente2.Text);
                                        }

                                        /*u.Luz = "s";
                                        u.Nota1 = "";
                                        u.Nota2 = "";*/
                                        /*if (!(c.Metodo_Pago.ToString().Equals(Metodo_pago.Text)))
                                        {
                                            a = true;
                                            sql_query += "Metodo_Pago=" + Metodo_pago.SelectedIndex + ", ";
                                            parametros.Add("Metodo_Pago:" + Metodo_pago.SelectedIndex);
                                        }*/

                                        if (!(c.titular.Equals(titular_tarjeta.Text)))
                                        {
                                            a = true;
                                            sql_query += "Titular_Tarjeta='" + titular_tarjeta.Text + "', ";
                                            parametros.Add("Titular_Tarjeta:" + titular_tarjeta.Text);

                                        }
                                        string fecha = caducidad + "/" + caducidad1;
                                        if (caducidad.Text.Length > 0)
                                        {
                                            if (!(c.caducidad.Equals(caducidad.Text + "/" + caducidad1.Text)))
                                            {
                                                //console.writeline(c.caducidad.Equals(caducidad + "/" + caducidad1));
                                                a = true;
                                                sql_query += "caducidad='" + caducidad.Text + "/" + caducidad1.Text + "', ";
                                                parametros.Add("caducidad:" + caducidad + "/" + caducidad1);
                                            }
                                        }
                                        else
                                        {
                                            if (c.caducidad.Length > 0)
                                            {
                                                //console.writeline(c.caducidad.Equals(caducidad + "/" + caducidad1));
                                                a = true;
                                                sql_query += "caducidad=' ', ";
                                                parametros.Add("caducidad: ");
                                            }
                                        }



                                        if (!(c.numero_secreto.Equals(numero_secreto.Text)))
                                        {
                                            a = true;
                                            sql_query += "N_secreto='" + numero_secreto.Text + "', ";
                                            parametros.Add("N_secreto:" + c.numero_secreto);

                                        }

                                        if (!(c.n_tarjeta.Equals(numero_tarjeta.Text)))
                                        {
                                            a = true;
                                            sql_query += "N_Tarjeta='" + numero_tarjeta.Text + "', ";
                                            parametros.Add("N_Tarjeta:" + numero_tarjeta.Text);
                                        }

                                        if (!(c.entidad_bacnaria.Equals(entidad_bancaria.Text)))
                                        {
                                            a = true;
                                            sql_query += "Entidad_Bancaria='" + entidad_bancaria.Text + "', ";
                                            parametros.Add("Entidad_Bancaria:" + entidad_bancaria.Text);

                                        }

                                        if (!(c.iban.Equals(Iban.Text)))
                                        {
                                            a = true;
                                            sql_query += "Iban='" + Iban.Text + "', ";
                                            parametros.Add("Iban:" + Iban.Text);

                                        }

                                        if (!(c.swift.Equals(Swift.Text)))
                                        {
                                            a = true;
                                            sql_query += "Swift='" + Swift.Text + "', ";
                                            parametros.Add("Swift:" + Swift.Text);
                                        }



                                        if (!(c.Pais.Equals(pais.Text)))
                                        {
                                            a = true;
                                            sql_query += "Pais='" + pais.Text + "', ";
                                            parametros.Add("Pais:" + pais.Text);
                                        }
                                        if (!(c.Numero.Equals(numero.Text)))
                                        {
                                            a = true;
                                            sql_query += "Numero='" + numero.Text + "', ";
                                            parametros.Add("Numero:" + numero.Text);
                                        }
                                        if (!(c.Piso.Equals(piso.Text)))
                                        {
                                            a = true;
                                            sql_query += "Piso='" + piso.Text + "', ";
                                            parametros.Add("Piso:" + piso.Text);
                                        }
                                        if (!(c.Puerta.Equals(puerta.Text)))
                                        {
                                            a = true;
                                            sql_query += "Puerta='" + puerta.Text + "', ";
                                            parametros.Add("Puerta:" + puerta.Text);
                                        }
                                        if (!(c.Provincia.Equals(provincia.Text)))
                                        {
                                            a = true;
                                            sql_query += "Provincia='" + provincia.Text + "', ";
                                            parametros.Add("Provincia:" + provincia.Text);
                                        }



                                        if (!(Clientes_FechaEntrada.SelectedDate==c.Fecha_In) && Clientes_FechaEntrada.SelectedDate != null)
                                        {
                                            a = true;
                                            c.Fecha_In = Clientes_FechaEntrada.SelectedDate.Value;
                                            DateTime dt = new DateTime();
                                            if (c.Fecha_In != null)
                                            {
                                                dt = (DateTime)c.Fecha_In;

                                                sql_query += "Fecha_In='" + dt.ToString("dd/MM/yyyy HH:mm:ss") + "', ";
                                                parametros.Add("Fecha_In:" + dt.ToString("yyyy/MM/dd HH:mm:ss"));
                                            }

                                        }
                                        if (!(Clientes_FechaSalida.SelectedDate==c.Fecha_Out) && Clientes_FechaSalida.SelectedDate != null)
                                        {
                                            a = true;
                                            c.Fecha_Out = Clientes_FechaSalida.SelectedDate.Value;
                                            DateTime dt = new DateTime();
                                            if (c.Fecha_Out != null)
                                            {
                                                dt = (DateTime)c.Fecha_Out;

                                                sql_query += "Fecha_Out='" + dt.ToString("dd/MM/yyyy HH:mm:ss") + "', ";
                                                parametros.Add("Fecha_Out:" + dt.ToString("yyyy/MM/dd HH:mm:ss"));
                                            }
                                        }

                                        if (!(vehiculo1.Text.Equals(c.Vehiculo1)))
                                        {
                                            a = true;
                                            sql_query += "Vehiculo1='" + vehiculo1.Text + "', ";
                                            parametros.Add("Vehiculo1:" + vehiculo1.Text);
                                        }
                                        if (!(matricula1.Text.Equals(c.matricula1)))
                                        {
                                            a = true;
                                            sql_query += "Marticula1='" + matricula1.Text + "', ";
                                            parametros.Add("Marticula1:" + matricula1.Text);
                                        }


                                        if (!(vehiculo2.Text.Equals(c.Vehiculo2)))
                                        {
                                            a = true;
                                            sql_query += "Vehiculo2='" + vehiculo2.Text + "', ";
                                            parametros.Add("Vehiculo2:" + vehiculo2.Text);
                                        }
                                        if (!(matricula2.Text.Equals(c.matricula2)))
                                        {

                                            a = true;
                                            sql_query += "Marticula2='" + matricula2.Text + "', ";
                                            parametros.Add("Marticula2:" + matricula2.Text);
                                        }

                                        if (!(vehiculo3.Text.Equals(c.Vehiculo3)))
                                        {
                                            a = true;
                                            sql_query += "Vehiculo3='" + vehiculo3.Text + "', ";
                                            parametros.Add("Vehiculo3:" + vehiculo3.Text);
                                        }
                                        if (!(matricula3.Text.Equals(c.matricula3)))
                                        {
                                            a = true;
                                            sql_query += "Matricula3='" + matricula3.Text + "', ";
                                            parametros.Add("Matricula3:" + matricula3.Text);
                                        }


                                        if (!(vehiculo4.Text.Equals(c.Vehiculo4)))
                                        {
                                            a = true;
                                            sql_query += "Vehiculo4='" + vehiculo4.Text + "', ";
                                            parametros.Add("Vehiculo4:" + vehiculo4.Text);
                                        }
                                        if (!(matricula4.Text.Equals(c.matricula4)))
                                        {

                                            a = true;
                                            sql_query += "Matricula4='" + matricula4.Text + "', ";
                                            parametros.Add("Matricula4:" + matricula4.Text);
                                        }
                                        if (!(medidas_vehiculo1.Text.Equals(c.Medidas_Vehiculo1)))
                                        {
                                            a = true;
                                            sql_query += "Medidas_Vehiculo1='" + medidas_vehiculo1.Text + "', ";
                                            parametros.Add("Medidas_Vehiculo1:" + vehiculo1.Text);
                                        }
                                        if (!(bastidor.Text.Equals(c.Numero_Bastidor1)))
                                        {
                                            a = true;
                                            sql_query += "Numero_Bastidor1='" + bastidor.Text + "', ";
                                            parametros.Add("Marticula1:" + matricula1.Text);
                                        }


                                        if (!(medidas2.Text.Equals(c.Medidas_Vehiculo2)))
                                        {
                                            a = true;
                                            sql_query += "Medidas_Vehiculo2='" + medidas2.Text + "', ";
                                            parametros.Add("Vehiculo2:" + vehiculo2.Text);
                                        }
                                        if (!(nbastidor2.Text.Equals(c.Numero_Bastidor2)))
                                        {

                                            a = true;
                                            sql_query += "Numero_Bastidor2='" + nbastidor2.Text + "', ";
                                            parametros.Add("Marticula2:" + matricula2.Text);
                                        }

                                        if (!(medidas3.Text.Equals(c.Medidas_Vehiculo3)))
                                        {
                                            a = true;
                                            sql_query += "Medidas_Vehiculo3='" + medidas3.Text + "', ";
                                            parametros.Add("Vehiculo1:" + vehiculo1.Text);
                                        }
                                        if (!(nbastidor3.Text.Equals(c.Numero_Bastidor3)))
                                        {
                                            a = true;
                                            sql_query += "Numero_Bastidor3='" + nbastidor3.Text + "', ";
                                            parametros.Add("Marticula1:" + matricula1.Text);
                                        }


                                        if (!(medidas4.Text.Equals(c.Medidas_Vehiculo4)))
                                        {
                                            a = true;
                                            sql_query += "Medidas_Vehiculo4='" + medidas4.Text + "', ";
                                            parametros.Add("Vehiculo2:" + vehiculo2.Text);
                                        }
                                        if (!(nbastidor4.Text.Equals(c.Numero_Bastidor4)))
                                        {

                                            a = true;
                                            sql_query += "Numero_Bastidor4='" + nbastidor4.Text + "', ";
                                            parametros.Add("Marticula2:" + matricula2.Text);
                                        }

                                       
                                        int pot = 0;
                                        if (Potencia.SelectedItem != null)
                                        {
                                            Potencia p = Potencia.SelectedItem as Potencia;
                                            pot = p.Id;
                                        }


                                        int b = 1;
                                        if (Switch.IsChecked.Value)
                                        {
                                            b = 0;
                                        }

                                        if (pot != c.Potencia)
                                        {
                                            a = true;
                                            sql_query += "Potencia=" + pot + ", ";
                                            parametros.Add("Potencia:" + pot);
                                        }

                                        if (b != c.Switch)
                                        {

                                            a = true;
                                            sql_query += "Switch=" + b + ", ";
                                            parametros.Add("Switch:" + b);

                                        }

                                        if (!nota1.Text.Equals(c.Nota1))
                                        {

                                            a = true;
                                            sql_query += "Nota1='" + nota1.Text + "', ";
                                            parametros.Add("Nota1:" + nota1.Text);
                                        }

                                        if (!Clientes_HoraEntrada.Text.Equals(c.Hora_entrada))
                                        {
                                            a = true;
                                            sql_query += "Hora_Entrada='" + Clientes_HoraEntrada.Text + "', ";
                                            parametros.Add("Hora_Entrada:" + Clientes_HoraEntrada.Text);
                                        }

                                        if (!Clientes_HoraSalida.Text.Equals(c.Hora_salida))
                                        {
                                            a = true;
                                            sql_query += "Hora_Salida='" + Clientes_HoraSalida.Text + "', ";
                                            parametros.Add("Hora_Salida:" + Clientes_HoraSalida.Text);
                                        }

                                        if (!(c.entidad_bacnaria2.Equals(entidad_bancaria2.Text)))
                                        {
                                            a = true;
                                            sql_query += "Entidad_Bancaria2='" + entidad_bancaria2.Text + "', ";
                                            parametros.Add("Entidad_Bancaria2:" + entidad_bancaria2.Text);

                                        }

                                        if (!(c.iban2.Equals(Iban2.Text)))
                                        {
                                            a = true;
                                            sql_query += "Iban2='" + Iban2.Text + "', ";
                                            parametros.Add("Iban2:" + Iban2.Text);

                                        }

                                        if (!(c.swift2.Equals(Swift2.Text)))
                                        {
                                            a = true;
                                            sql_query += "Swift2='" + Swift2.Text + "', ";
                                            parametros.Add("Swift2:" + Swift2.Text);
                                        }

                                        bool bb = false;
                                        if (bdr2.HorizontalAlignment == HorizontalAlignment.Left)
                                            bb = true;
                                        if (!(c.DeBaja == bb))
                                        {
                                            a = true;
                                            sql_query += "DeBaja='" + Convert.ToInt32(bb) + "', ";
                                            parametros.Add("DeBaja:" + Convert.ToInt32(bb));
                                        }

                                        try
                                        {
                                            if (!(Fecha_Entrada_Estado.SelectedDate==c.fecha_entrada_estado))
                                            {
                                                a = true;
                                                sql_query += "Fecha_Entrada='" + Fecha_Entrada_Estado.Text + "', ";
                                                parametros.Add("Fecha_Entrada:" + ((DateTime)Fecha_Entrada_Estado.SelectedDate).ToString("yyyy/MM/dd HH:mm:ss"));
                                            }
                                        }
                                        catch { }
                                        try
                                        {
                                            if (!(Fecha_Contrato.SelectedDate==c.fecha_contrato))
                                            {
                                                a = true;
                                                sql_query += "Fecha_Contratacion='" + Fecha_Contrato.Text + "', ";
                                                parametros.Add("Fecha_Contratacion:" + ((DateTime)Fecha_Contrato.SelectedDate).ToString("yyyy/MM/dd HH:mm:ss"));
                                            }
                                        }
                                        catch { }
                                        try
                                        {
                                            if (!(c.fecha_pago==Fecha_Pago.SelectedDate))
                                            {
                                                a = true;
                                                sql_query += "Fecha_Pega='" + Fecha_Pago.Text + "', ";
                                                parametros.Add("Fecha_Pega:" + ((DateTime)Fecha_Pago.SelectedDate).ToString("yyyy/MM/dd HH:mm:ss"));

                                            }
                                        }
                                        catch { }
                                        if (!(c.Medidas_Vehiculo1.Equals(medidas_vehiculo1.Text)))
                                        {
                                            a = true;
                                            sql_query += "Medidas_Vehiculo1='" + medidas_vehiculo1.Text + "', ";
                                            parametros.Add("Medidas_Vehiculo1:" + medidas_vehiculo1.Text);

                                        }

                                       
                                        if (!(c.importe.Equals(importe_alta.Text)))
                                        {
                                            a = true;
                                            sql_query += "Importe='" + importe_alta.Text.Replace("€", "") + "', ";
                                            parametros.Add("Importe:" + importe_alta.Text.Replace("€", "").Replace(",", "."));
                                        }



                                        sql_query = sql_query.Remove(sql_query.Length - 2);

                                        sql_query += " WHERE Id='" + c.id + "'";
                                        consulta = new Consulta("Cliente", parametros, "N_cliente:" + c.n_cliemte, "UPDATE");



                                        UpdateCliente(sql_query, parametros, consulta);
                                    }
                                    else if (cliente_menu.SelectedIndex == 1)
                                    {
                                        if (newclient)
                                        {
                                            Clientes c = new Clientes();
                                            c.n_cliemte = int.Parse(numero_cliente_alta.Text);
                                            c.nombre_cliente = nombre_cliente_alta.Text;
                                            c.apellidos_cliente = apellido_cliente_alta.Text;
                                            c.poblacio = poblacion_cliente_alta.Text;
                                            c.dni = dni_cliente_alta.Text;

                                            c.direccion = direccion_cliente_alta.Text;
                                            c.codigo_postal = cp_cliente_alta.Text;
                                            c.Provincia = provincia_cliente_alta.Text;
                                            c.Pais = pais_cliente_alta.Text;

                                            c.telefon1 = telefono_cliente_alta.Text;
                                            c.telefon2 = telefono2_cliente_alta.Text;
                                            c.mail = email_cliente.Text;
                                            c.mail2 = email_cliente2.Text;

                                            c.Vehiculo1 = Vehiculo1_alta.Text;
                                            c.matricula1 = bastidor1_alta.Text;
                                            c.matricula2 = bastidor2_alta.Text;
                                            c.Vehiculo2 = Vehiculo2_alta.Text;

                                            c.Medidas_Vehiculo1 = medidas_alta.Text;

                                            c.Fecha_In = Clientes_FechaEntrada_alta.SelectedDate;
                                            c.Hora_entrada = Clientes_HoraEntrada_alta.Text;

                                            c.Fecha_Out = Clientes_FechaSalida_alta.SelectedDate;
                                            c.fecha_pago = Clientes_FechaPago_alta.SelectedDate;
                                            c.fecha_entrada_estado = Clientes_FechaPeriodo_alta.SelectedDate;
                                            c.Hora_salida = Clientes_HoraPeriodo_alta.Text;

                                            c.Switch = 1;
                                            if (on_off_border.HorizontalAlignment == HorizontalAlignment.Right)
                                                c.Switch = 0;



                                            int pot = 0;
                                            if (Potencia_alta.SelectedItem != null)
                                            {
                                                Potencia po = Potencia_alta.SelectedItem as Potencia;
                                                c.Potencia = po.Id;
                                            }

                                            c.DeBaja = false;
                                            if (alta_baja.HorizontalAlignment == HorizontalAlignment.Left)
                                                c.DeBaja = true;

                                            c.Nota1 = nota1_alta.Text;
                                            c.Lista_Parcelas = new List<Parcelas>();
                                            Parcelas p = null;
                                            if (numero_plaza_alta.SelectedItem != null)
                                            {
                                                p = numero_plaza_alta.SelectedItem as Parcelas;
                                                c.n_plaza = p.id + "";
                                                c.Lista_Parcelas.Add(p);

                                            }
                                            c.importe = importe_alta.Text.Replace("€", "");


                                            c.Nota1 = nota1_alta.Text;
                                            Consulta consulta;
                                            List<string> parametros = new List<string>();

                                            parametros.Add("N_Cliente:" + c.n_cliemte);



                                            parametros.Add("Nombre:" + c.nombre_cliente);



                                            parametros.Add("Apellidos:" + c.apellidos_cliente);

                                            parametros.Add("direccion:" + c.direccion);


                                            parametros.Add("DNI:" + c.dni);

                                            parametros.Add("poblacion:" + c.poblacio);


                                            parametros.Add("Telefono1:" + c.telefon1);
                                            parametros.Add("CP:" + c.codigo_postal);
                                            parametros.Add("Mail1:" + c.mail);
                                            parametros.Add("Titular_Tarjeta:" + c.titular);
                                            parametros.Add("Caducidad:" + c.caducidad);
                                            parametros.Add("N_secreto:" + c.numero_secreto);
                                            parametros.Add("N_Tarjeta:" + c.n_tarjeta);
                                            parametros.Add("Entidad_Bancaria:" + c.entidad_bacnaria);
                                            parametros.Add("IBAN:" + c.iban);
                                            parametros.Add("SWIFT:" + c.swift);


                                            parametros.Add("Pais:" + c.Pais);


                                            parametros.Add("Numero:" + c.Numero);

                                            parametros.Add("Piso:" + c.Piso);

                                            parametros.Add("Puerta:" + c.Puerta);

                                            parametros.Add("Provincia:" + c.Pais);


                                            parametros.Add("Fecha_In:" + c.Fecha_In);

                                            parametros.Add("Fecha_Out:" + c.Fecha_Out);

                                            parametros.Add("Vehiculo1:" + c.Vehiculo1);

                                            parametros.Add("Marticula1:" + c.matricula1);

                                            parametros.Add("Numero_Bastidor1:" + c.Numero_Bastidor1);

                                            parametros.Add("Vehiculo2:" + c.Vehiculo2);

                                            parametros.Add("Marticula2:" + c.matricula2);

                                            parametros.Add("Numero_Bastidor2:" + c.Numero_Bastidor2);

                                            parametros.Add("Potencia:" + c.Potencia);

                                            parametros.Add("Switch:" + c.Switch);

                                            parametros.Add("Nota1:" + c.Nota1);

                                            parametros.Add("Hora_Entrada:" + c.Hora_entrada);
                                            parametros.Add("Hora_Salida:" + c.Hora_salida);
                                            parametros.Add("Entidad_Bancaria2:" + c.entidad_bacnaria2);
                                            parametros.Add("Iban2:" + c.iban2);

                                            parametros.Add("Swift2:" + c.swift2);
                                            parametros.Add("DeBaja:" + Convert.ToInt32(c.DeBaja));

                                            parametros.Add("N_Plaza:" + c.n_plaza);
                                            parametros.Add("Importe:" + c.importe.Replace("€", ""));



                                            string cn_String = conexiondb;
                                            if (!consultar_cliente(c.dni, c.n_cliemte + ""))
                                            {

                                                SQLiteConnection cn = new SQLiteConnection(cn_String);

                                                if (cn.State != ConnectionState.Open) cn.Open();
                                                DateTime dt = new DateTime();
                                                string dtt = "";
                                                DateTime dt2 = new DateTime();
                                                string dtt2 = "";
                                                string sql_query = "";
                                                if (c.Fecha_Out != null)
                                                {
                                                    dt = (DateTime)c.Fecha_Out;
                                                    dtt = dt.ToString("dd/MM/yyyy");

                                                }
                                                if (c.fecha_pago != null)
                                                {
                                                    dt2 = (DateTime)c.fecha_pago;

                                                    dtt2 = dt.ToString("dd/MM/yyyy");
                                                }
                                                if (c.importe.Length == 0)
                                                {
                                                    c.importe = "0";
                                                }

                                                if (c.n_plaza == null)
                                                {
                                                    sql_query = "INSERT INTO Cliente(N_Cliente,Nombre,Apellidos,DNI,direccion,poblacion,Telefono1,Telefono2,CP,Mail1,Pais,Provincia,DeBaja,Fecha_In,Fecha_Out,Potencia,Switch,Vehiculo1,Marticula1,Vehiculo2,Marticula2,Nota1,Hora_entrada,Hora_salida,Mail2,Fecha_Entrada,Fecha_Pega,Medidas_Vehiculo1, Importe) VALUES (" + c.n_cliemte + ",'" + c.nombre_cliente + "','" + c.apellidos_cliente + "','" + c.dni + "','" + c.direccion + "','" + c.poblacio + "','" + c.telefon1 + "','" + c.telefon2 + "','" + c.codigo_postal + "','" + c.mail + "','" + c.Pais + "','" + c.Provincia + "'," + Convert.ToInt32(c.DeBaja) + ",'" + c.Fecha_In.Value.ToString("dd/MM/yyyy") + "','" + dtt + "'," + c.Potencia + "," + Convert.ToInt32(c.Switch) + ",'" + c.Vehiculo1 + "','" + c.matricula1 + "','" + c.Vehiculo2 + "','" + c.matricula2 + "','" + c.Nota1 + "','" + c.Hora_entrada + "','" + c.Hora_salida + "','" + c.mail2 + "','" + c.fecha_entrada_estado.Value.ToString("dd/MM/yyyy") + "','" + dtt2 + "','" + c.Medidas_Vehiculo1 + "','" + c.importe + "')";


                                                }
                                                else
                                                {
                                                    sql_query = "INSERT INTO Cliente(N_Cliente, N_Plaza,Nombre,Apellidos,DNI,direccion,poblacion,Telefono1,Telefono2,CP,Mail1,Pais,Provincia,DeBaja,Fecha_In,Fecha_Out,Potencia,Switch,Vehiculo1,Marticula1,Vehiculo2,Marticula2,Nota1,Hora_entrada,Hora_salida,Mail2,Fecha_Entrada,Fecha_Pega,Medidas_Vehiculo1, Asignado, Importe) VALUES (" + c.n_cliemte + "," + c.n_plaza + ",'" + c.nombre_cliente + "','" + c.apellidos_cliente + "','" + c.dni + "','" + c.direccion + "','" + c.poblacio + "','" + c.telefon1 + "','" + c.telefon2 + "','" + c.codigo_postal + "','" + c.mail + "','" + c.Pais + "','" + c.Provincia + "'," + Convert.ToInt32(c.DeBaja) + ",'" + c.Fecha_In.Value.ToString("dd/MM/yyyy") + "','" + dtt + "'," + c.Potencia + ",'" + Convert.ToInt32(c.Switch) + "','" + c.Vehiculo1 + "','" + c.matricula1 + "','" + c.Vehiculo2 + "','" + c.matricula2 + "','" + c.Nota1 + "','" + c.Hora_entrada + "','" + c.Hora_salida + "','" + c.mail2 + "','" + c.fecha_entrada_estado.Value.ToString("dd/MM/yyyy") + "','" + dtt2 + "','" + c.Medidas_Vehiculo1 + "', 1,'" + c.importe + "')";

                                                }


                                                SQLiteCommand sql_cmd = new SQLiteCommand(sql_query, cn);

                                                sql_cmd.ExecuteNonQuery();

                                                int b = 0;
                                                if (Switch.IsChecked.Value)
                                                {
                                                    b = 1;
                                                }



                                                if (b == 1)
                                                {



                                                    if (c.Lista_Parcelas.Count > 0)
                                                    {
                                                        p = c.Lista_Parcelas[0];

                                                        Direcciones d = ldrc2.Find(x => x.Id == p.Direccion);

                                                       /* _connection.Connect();
                                                        Thread.Sleep(1000);
                                                        if (KnxConnectionTunneling.ChannelId != 0)
                                                        {
                                                            if (b == 0)
                                                                _connection.Action(d.Descripcion, false);
                                                            else
                                                                _connection.Action(d.Descripcion, true);


                                                            Thread.Sleep(1000);
                                                           
                                                            _connection.Disconnect();
                                                        }*/
                                                    }
                                                }
                                                cn.Close();
                                                while (observartodotoken)
                                                {

                                                }
                                                consulta = new Consulta("Cliente", parametros, "", "INSERT");
                                                Lista_consultas.Add(consulta);
                                                clearall();
                                                string cn_string = conexiondb;
                                                cn = new SQLiteConnection(cn_string);
                                                if (cn.State != ConnectionState.Open) cn.Open();
                                                string sql_Text = "UPDATE Version SET configurationcol=GETDATE()";
                                                SQLiteCommand sql_cmd2 = new SQLiteCommand(sql_Text, cn);

                                                //sql_cmd2.ExecuteNonQuery();
                                                cargarClientes();

                                                c = lcln.Find(x => x.n_cliemte.Equals(c.n_cliemte));
                                                if (p != null)
                                                {



                                                    String query = "UPDATE Parcelas SET asignada=1, N_Cliente=" + c.id + " WHERE Id=" + c.n_plaza;

                                                    SQLiteCommand sql_cmd3 = new SQLiteCommand(query, cn);
                                                    sql_cmd3.ExecuteNonQuery();
                                                    //HOLAA


                                                }
                                                cn.Close();
                                                botones_ficha.IsEnabled = true;
                                                vc.Close();
                                            }

                                            newclient = false;

                                        }
                                        else
                                        {
                                            Clientes c = Clientes.SelectedItem as Clientes;

                                            List<string> parametros = new List<string>();
                                            Consulta consulta;


                                            //sql_Text = "UPDATE Version SET configurationcol=GETDATE()";

                                            string sql_query = "UPDATE Cliente SET ";
                                            Boolean a = false;

                                            //string sql_query = "INSERT INTO Cliente([N_Cliente],[N_Plaza],[N_Tarjeta],[Nombre],[Apellidos],[DNI],[direccion],[poblacion],[Telefono1],[Telefono2],[TelefonoX],[CP],[Mail1],[Mail2],[MailX],[DatosBancario]) VALUES ('" + u.n_cliemte + "','" + u.n_plaza + "','" + u.n_tarjeta + "','" + u.nombre_cliente + "','" + u.apellidos_cliente + "','" + u.dni + "','" + u.direccion + "','" + u.poblacio + "','" + u.telefon1 + "','" + u.telefon2 + "','" + u.telefonx + "','" + u.codigo_postal + "','" + u.mail + "','" + u.mail2 + "','" + u.mailx + "','" + u.datosBancarios + "')";
                                            //string sql_query = "INSERT INTO Registro([Importe],[Vehiculo],[Vehiculo2],[N_bastido],[Medida],[Matricula],[Matricula2],[Fecha_In],[Fecha_Pago],[Periodo_Ini],[Periodo_Out],[Fecha_Out],[Nota1],[Nota2],[N_Plaza], [Luz], [N_cliente]) VALUES ('" + u.Importe + "','" + u.Vehiculo + "','" + u.Vehiculo2 + "','" + u.N_bastidor + "','" + u.Media + "','" + u.Matricula + "','" + u.Matricula2 + "','" + a2.ToString("MM/dd/yyyy") + "','" + b2.ToString("MM/dd/yyyy") + "','" + c2.ToString("MM/dd/yyyy") + "','" + d2.ToString("MM/dd/yyyy") + "','" + e2.ToString("MM/dd/yyyy") + "','" + u.Nota1 + "','" + u.Nota2 + "','" + u.N_Plaza + "','" + u.Luz + "', '" + u.N_cliente + "')";
                                            /*if (importe.Text.Length > 0)
                                            {
                                                //a = true;
                                                //u.N_cliente = long.Parse(cliente.Text);
                                            }
                                            */

                                            if (!(c.N_tarjeta.Equals(tarjeta_alta.Text)))
                                            {
                                                a = true;
                                                sql_query += "Tarjeta='" + tarjeta_alta.Text + "', ";
                                                parametros.Add("Tarjeta:" + tarjeta_alta.Text);
                                            }
                                            if (!(c.n_cliemte.ToString().Equals(numero_cliente_alta.Text)))
                                            {
                                                a = true;
                                                sql_query += "N_Cliente=" + numero_cliente_alta.Text + ", ";
                                                parametros.Add("N_Cliente:" + numero_cliente_alta.Text);
                                            }
                                            if (!(nota.Text.Equals(c.Nota1)))
                                            {
                                                a = true;
                                                sql_query += "Nota1='" + nota.Text + "', ";
                                                parametros.Add("Nota1:" + nota.Text);
                                            }
                                            if (c.n_plaza != null)
                                            {

                                                Parcelas p = numero_plaza_alta.SelectedItem as Parcelas;
                                                if (p == null)
                                                {
                                                    p = new Parcelas();
                                                    p.id = 0;
                                                }
                                                if (!(c.n_plaza.Equals(p.id + "")))
                                                {
                                                    a = true;
                                                    sql_query += "N_Plaza=" + p.id + ", ";
                                                    parametros.Add("N_Plaza:" + p.id);
                                                    //Potencia_alta.SelectedItem = null;
                                                    /*if (on_off_border.HorizontalAlignment == HorizontalAlignment.Left)
                                                    { MouseButtonEventArgs mb = new MouseButtonEventArgs(Mouse.PrimaryDevice, 0, MouseButton.Left);
                                                        FichaPotencia(on_off, mb);
                                                    }*/
                                                }
                                            }
                                            else
                                            {
                                                if (numero_plaza_alta.SelectedItem != null)
                                                {
                                                    Parcelas p = numero_plaza_alta.SelectedItem as Parcelas;
                                                    a = true;
                                                    sql_query += "N_Plaza='" + p.id + "', ";
                                                    parametros.Add("N_Plaza:" + p.id);
                                                }

                                                if (on_off_border.HorizontalAlignment == HorizontalAlignment.Right)
                                                { MouseButtonEventArgs mb = new MouseButtonEventArgs(Mouse.PrimaryDevice, 0, MouseButton.Left);
                                                    FichaPotencia(on_off, mb);
                                                }
                                            }




                                            if (!(c.nombre_cliente.Equals(nombre_cliente_alta.Text)))
                                            {
                                                a = true;
                                                sql_query += "Nombre='" + nombre_cliente_alta.Text + "', ";
                                                parametros.Add("Nombre:" + nombre_cliente_alta.Text);


                                            }


                                            if (!(c.apellidos_cliente.Equals(apellido_cliente_alta.Text)))
                                            {
                                                a = true;
                                                sql_query += "Apellidos='" + apellido_cliente_alta.Text + "', ";
                                                parametros.Add("Apellidos:" + apellido_cliente_alta.Text);

                                            }


                                            if (!(c.dni.Equals(dni_cliente_alta.Text)))
                                            {

                                                a = true;
                                                sql_query += "DNI='" + dni_cliente_alta.Text + "', ";
                                                parametros.Add("DNI:" + dni_cliente_alta.Text);
                                            }



                                            if (!(c.direccion.Equals(direccion_cliente_alta.Text)))
                                            {

                                                a = true;
                                                sql_query += "direccion='" + direccion_cliente_alta.Text + "', ";
                                                parametros.Add("direccion:" + direccion_cliente_alta.Text);
                                            }

                                            if (!(c.poblacio.Equals(poblacion_cliente_alta.Text)))
                                            {

                                                a = true;
                                                sql_query += "poblacion='" + poblacion_cliente_alta.Text + "', ";
                                                parametros.Add("poblacion:" + poblacion_cliente_alta.Text);
                                            }

                                            if (!(c.telefon1.Equals(telefono_cliente_alta.Text)))
                                            {


                                                a = true;
                                                sql_query += "Telefono1='" + telefono_cliente_alta.Text + "', ";
                                                parametros.Add("Telefono1:" + telefono_cliente_alta.Text);

                                            }

                                            if (!(c.telefon2.Equals(telefono2_cliente_alta.Text)))
                                            {


                                                a = true;
                                                sql_query += "Telefono2='" + telefono2_cliente_alta.Text + "', ";
                                                parametros.Add("Telefono2:" + telefono2_cliente_alta.Text);

                                            }

                                            if (!c.codigo_postal.Equals(cp_cliente_alta.Text))
                                            {

                                                a = true;
                                                sql_query += "CP='" + cp_cliente_alta.Text + "', ";
                                                parametros.Add("CP:" + cp_cliente_alta.Text);
                                            }
                                            if (!(c.mail.Equals(email_cliente.Text)))
                                            {
                                                a = true;
                                                sql_query += "Mail1='" + email_cliente.Text + "', ";
                                                parametros.Add("Mail1:" + email_cliente.Text);
                                            }
                                            if (!(c.mail2.Equals(email_cliente2.Text)))
                                            {
                                                a = true;
                                                sql_query += "Mail2='" + email_cliente2.Text + "', ";
                                                parametros.Add("Mail2:" + email_cliente2.Text);
                                            }

                                            /*u.Luz = "s";
                                            u.Nota1 = "";
                                            u.Nota2 = "";*/
                                            /*if (!(c.Metodo_Pago.ToString().Equals(Metodo_pago.Text)))
                                            {
                                                a = true;
                                                sql_query += "Metodo_Pago=" + Metodo_pago.SelectedIndex + ", ";
                                                parametros.Add("Metodo_Pago:" + Metodo_pago.SelectedIndex);
                                            }*/




                                            if (!(c.Pais.Equals(pais_cliente_alta.Text)))
                                            {
                                                a = true;
                                                sql_query += "Pais='" + pais_cliente_alta.Text + "', ";
                                                parametros.Add("Pais:" + pais_cliente_alta.Text);
                                            }

                                            if (!(c.Provincia.Equals(provincia_cliente_alta.Text)))
                                            {
                                                a = true;
                                                sql_query += "Provincia='" + provincia_cliente_alta.Text + "', ";
                                                parametros.Add("Provincia:" + provincia_cliente_alta.Text);
                                            }



                                            if (!(Clientes_FechaEntrada_alta.SelectedDate.Equals(c.Fecha_In)) && Clientes_FechaEntrada_alta.SelectedDate != null)
                                            {
                                                a = true;
                                                c.Fecha_In = Clientes_FechaEntrada_alta.SelectedDate.Value;
                                                DateTime dt = new DateTime();
                                                if (c.Fecha_In != null)
                                                {
                                                    dt = (DateTime)c.Fecha_In;

                                                    sql_query += "Fecha_In='" + dt.ToString("dd/MM/yyyy HH:mm:ss") + "', ";
                                                    parametros.Add("Fecha_In:" + dt.ToString("yyyy-MM-dd HH:mm:ss"));
                                                }

                                            }
                                            if (!(Clientes_FechaSalida_alta.SelectedDate.Equals(c.Fecha_Out)) && Clientes_FechaSalida_alta.SelectedDate != null)
                                            {
                                                a = true;
                                                c.Fecha_Out = Clientes_FechaSalida_alta.SelectedDate.Value;
                                                DateTime dt = new DateTime();
                                                if (c.Fecha_Out != null)
                                                {
                                                    dt = (DateTime)c.Fecha_Out;

                                                    sql_query += "Fecha_Out='" + dt.ToString("dd/MM/yyyy HH:mm:ss") + "', ";
                                                    parametros.Add("Fecha_Out:" + dt.ToString("yyyy-MM-dd HH:mm:ss"));
                                                }
                                            }

                                            if (!(Vehiculo1_alta.Text.Equals(c.Vehiculo1)))
                                            {
                                                a = true;
                                                sql_query += "Vehiculo1='" + Vehiculo1_alta.Text + "', ";
                                                parametros.Add("Vehiculo1:" + Vehiculo1_alta.Text);
                                            }
                                            if (!(bastidor1_alta.Text.Equals(c.matricula1)))
                                            {
                                                a = true;
                                                sql_query += "Marticula1='" + bastidor1_alta.Text + "', ";
                                                parametros.Add("Marticula1:" + bastidor1_alta.Text);
                                            }


                                            if (!(Vehiculo2_alta.Text.Equals(c.Vehiculo2)))
                                            {
                                                a = true;
                                                sql_query += "Vehiculo2='" + Vehiculo2_alta.Text + "', ";
                                                parametros.Add("Vehiculo2:" + Vehiculo2_alta.Text);
                                            }
                                            if (!(bastidor2_alta.Text.Equals(c.matricula2)))
                                            {

                                                a = true;
                                                sql_query += "Marticula2='" + bastidor2_alta.Text + "', ";
                                                parametros.Add("Marticula2:" + bastidor2_alta.Text);
                                            }
                                            if (!(Vehiculo3_alta.Text.Equals(c.Vehiculo3)))
                                            {
                                                a = true;
                                                sql_query += "Vehiculo3='" + Vehiculo3_alta.Text + "', ";
                                                parametros.Add("Vehiculo3:" + Vehiculo3_alta.Text);
                                            }
                                            if (!(bastidor3_alta.Text.Equals(c.matricula3)))
                                            {
                                                a = true;
                                                sql_query += "Matricula3='" + bastidor3_alta.Text + "', ";
                                                parametros.Add("Matricula3:" + bastidor3_alta.Text);
                                            }


                                            if (!(Vehiculo4_alta.Text.Equals(c.Vehiculo4)))
                                            {
                                                a = true;
                                                sql_query += "Vehiculo4='" + Vehiculo4_alta.Text + "', ";
                                                parametros.Add("Vehiculo4:" + Vehiculo4_alta.Text);
                                            }
                                            if (!(bastidor4_alta.Text.Equals(c.matricula4)))
                                            {

                                                a = true;
                                                sql_query += "Matricula4='" + bastidor4_alta.Text + "', ";
                                                parametros.Add("Matricula4:" + bastidor4_alta.Text);
                                            }


                                            int pot = 0;
                                            if (Potencia_alta.SelectedItem != null)
                                            {
                                                Potencia p = Potencia_alta.SelectedItem as Potencia;
                                                pot = p.Id;
                                            }


                                            int b = 0;
                                            if (on_off_border.HorizontalAlignment == HorizontalAlignment.Right)
                                            {
                                                b = 1;
                                            }

                                            if (pot != c.Potencia)
                                            {

                                                a = true;
                                                sql_query += "Potencia=" + pot + ", ";
                                                parametros.Add("Potencia:" + pot);
                                            }

                                            if (b != c.Switch)
                                            {

                                                a = true;
                                                sql_query += "Switch=" + b + ", ";
                                                parametros.Add("Switch:" + b);
                                                if (c.Lista_Parcelas.Count > 0)
                                                {
                                                    Parcelas p = c.Lista_Parcelas[0];

                                                    Direcciones d = ldrc2.Find(x => x.Id == p.Direccion);

                                                   /* _connection.Connect();
                                                    Thread.Sleep(1000);
                                                    if (KnxConnectionTunneling.ChannelId != 0)
                                                    {
                                                        if (b == 0)
                                                            _connection.Action(d.Descripcion, false);
                                                        else
                                                            _connection.Action(d.Descripcion, true);


                                                        Thread.Sleep(1000);
                                                       
                                                        _connection.Disconnect();
                                                    }*/
                                                }
                                            }

                                            if (!nota1_alta.Text.Equals(c.Nota1))
                                            {

                                                a = true;
                                                sql_query += "Nota1='" + nota1_alta.Text + "', ";
                                                parametros.Add("Nota1:" + nota1_alta.Text);
                                            }
                                            if (!nota1_alta2.Text.Equals(c.Nota2))
                                            {

                                                a = true;
                                                sql_query += "Nota2='" + nota1_alta2.Text + "', ";
                                                parametros.Add("Nota2:" + nota1_alta2.Text);
                                            }

                                            if (!Clientes_HoraEntrada_alta.Text.Equals(c.Hora_entrada))
                                            {
                                                a = true;
                                                sql_query += "Hora_Entrada='" + Clientes_HoraEntrada_alta.Text + "', ";
                                                parametros.Add("Hora_Entrada:" + Clientes_HoraEntrada_alta.Text);
                                            }

                                            if (!Clientes_HoraPeriodo_alta.Text.Equals(c.Hora_salida))
                                            {
                                                a = true;
                                                sql_query += "Hora_Salida='" + Clientes_HoraPeriodo_alta.Text + "', ";
                                                parametros.Add("Hora_Salida:" + Clientes_HoraPeriodo_alta.Text);
                                            }



                                            bool bb = false;
                                            if (alta_baja.HorizontalAlignment == HorizontalAlignment.Left)
                                                bb = true;
                                            if (!(c.DeBaja == bb))
                                            {
                                                a = true;
                                                sql_query += "DeBaja='" + Convert.ToInt32(bb) + "', ";
                                                parametros.Add("DeBaja:" + Convert.ToInt32(bb));
                                            }

                                            try
                                            {
                                                if (!Clientes_FechaPeriodo_alta.SelectedDate.Equals(c.fecha_entrada_estado))
                                                {
                                                    a = true;
                                                    sql_query += "Fecha_Entrada='" + Clientes_FechaPeriodo_alta.Text + "', ";
                                                    parametros.Add("Fecha_Entrada:" + ((DateTime)Clientes_FechaPeriodo_alta.SelectedDate).ToString("yyyy-MM-dd HH:mm:ss"));
                                                }
                                            }
                                            catch { }


                                            try
                                            {
                                                if (!(c.fecha_pago.Equals(Clientes_FechaPago_alta.SelectedDate)))
                                                {
                                                    a = true;
                                                    sql_query += "Fecha_Pega='" + Clientes_FechaPago_alta.Text + "', ";
                                                    parametros.Add("Fecha_Pega:" + ((DateTime)Clientes_FechaPago_alta.SelectedDate).ToString("yyyy-MM-dd HH:mm:ss"));

                                                }
                                            }
                                            catch { }
                                            if (!(c.Medidas_Vehiculo1.Equals(medidas_alta.Text)))
                                            {
                                                a = true;
                                                sql_query += "Medidas_Vehiculo1='" + medidas_alta.Text + "', ";
                                                parametros.Add("Medidas_Vehiculo1:" + medidas_alta.Text);

                                            }
                                            if (!(c.importe.Equals(importe_alta.Text)))
                                            {
                                                a = true;
                                                sql_query += "Importe='" + importe_alta.Text.Replace("€", "") + "', ";
                                                parametros.Add("Importe:" + importe_alta.Text.Replace("€", ""));
                                            }

                                            int pos = posicion;



                                            sql_query = sql_query.Remove(sql_query.Length - 2);

                                            sql_query += " WHERE N_Cliente='" + c.n_cliemte + "'";
                                            consulta = new Consulta("Cliente", parametros, "Id:" + c.id, "UPDATE");

                                            UpdateCliente2(sql_query, parametros, consulta);
                                            botones_ficha.IsEnabled = true;
                                            posicion = pos;
                                            Clientes.SelectedItem = c;
                                        }

                                    }
                                }
                                catch (Exception ee)
                                {
                                    var st = new StackTrace(ee, true);
                                    var frame = st.GetFrame(0);
                                      var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                                    Peta(ee, line+"");
                                    string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                                }
                            
                            clientebool = true; 
                            cargarClientes();
                            pasos = 0;
                        





            }
            catch (Exception ee){
                var st = new StackTrace(ee, true);
                var frame = st.GetFrame(0);
                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                Peta(ee, line + "");
            };
           
        }

        private void UpdateCliente2(string sql_query, List<string> parametros, Consulta consulta)
        {
            try
            {
                if (permisos[6] == '1')
                {
                    MessageBoxResult result = System.Windows.MessageBox.Show("¿Quieres guardar los cambios?", "¡Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                    if (result == MessageBoxResult.OK)
                    {
                        string cn_String = conexiondb;
                        SQLiteConnection cn = new SQLiteConnection(cn_String);
                        if (cn.State != ConnectionState.Open) cn.Open();

                        Parcelas p = numero_plaza_alta.SelectedItem as Parcelas;
                        Parcelas p2 = numero_plaza_alta.SelectedItem as Parcelas;
                        Clientes c = Clientes.SelectedItem as Clientes;
                        int b = 0;
                        if (on_off_border.HorizontalAlignment == HorizontalAlignment.Left)
                        {
                            b = 1;
                        }


                        if (b != c.Switch)
                        {


                            if (c.Lista_Parcelas.Count > 0&&p!=null)
                            {


                                Direcciones d = ldrc2.Find(x => x.Id == p.Direccion);

                                /*_connection.Connect();
                                Thread.Sleep(1000);
                                if (KnxConnectionTunneling.ChannelId != 0)
                                {
                                    if (b == 0)
                                        _connection.Action(d.Descripcion, false);
                                    else
                                        _connection.Action(d.Descripcion, true);


                                    Thread.Sleep(1000);
                                    _connection.Disconnect();
                                }*/
                            }
                        }
                        SQLiteCommand sql_cmd;
                        if (p != null)
                        {

                            Parcelas pp = lprc.Find(x => x.id == int.Parse(c.n_plaza));
                            if (pp != null)
                            {


                                String query2 = "UPDATE Parcelas SET asignada=0, N_Cliente=" + 0 + " WHERE Id=" + pp.id;
                                sql_cmd = new SQLiteCommand(query2, cn);
                                sql_cmd.ExecuteNonQuery();
                                String query5 = "UPDATE Cliente SET Asignado=0 WHERE Id=" + c.id;

                                sql_cmd = new SQLiteCommand(query5, cn);
                                sql_cmd.ExecuteNonQuery();
                            }

                            String query = "UPDATE Parcelas SET asignada=1, N_Cliente=" + c.id + " WHERE Id=" + p.id;

                            sql_cmd = new SQLiteCommand(query, cn);
                            sql_cmd.ExecuteNonQuery();
                            String query4 = "UPDATE Cliente SET Asignado=1 WHERE Id=" + c.id;

                            sql_cmd = new SQLiteCommand(query4, cn);
                            sql_cmd.ExecuteNonQuery();
                            //HOLAA


                        }
                        else
                        {
                            p2 = lprc.Find(x => x.id == int.Parse(c.n_plaza));
                            if (p2 != null)
                            {


                                String query2 = "UPDATE Parcelas SET asignada=0, N_Cliente=" + 0 + " WHERE Id=" + p2.id;
                                sql_cmd = new SQLiteCommand(query2, cn);
                                sql_cmd.ExecuteNonQuery();

                                String query4 = "UPDATE Cliente SET Asignado=0 WHERE Id=" + c.id;

                                sql_cmd = new SQLiteCommand(query4, cn);
                                sql_cmd.ExecuteNonQuery();
                            }
                        }





                        sql_cmd = new SQLiteCommand(sql_query, cn);

                        sql_cmd.ExecuteNonQuery();
                        int i = 0;
                        if (contador.Text.Length > 0)
                            i = int.Parse(contador.Text) - 1;

                        cn.Close();


                        //CargarRegistros();
                        //clearall();

                       
                        while (observartodotoken)
                        {

                        }
                        Lista_consultas.Add(consulta);

                        string cn_string = conexiondb;
                        cn = new SQLiteConnection(cn_string);
                        if (cn.State != ConnectionState.Open) cn.Open();
                        string sql_Text = "UPDATE Version SET configurationcol=GETDATE()";
                        SQLiteCommand sql_cmd2 = new SQLiteCommand(sql_Text, cn);
                        if (lista_clientes_ficha.Count > 0)
                            Clientes.SelectedItem = lista_clientes_ficha[i];

                        Thread.Sleep(1000);
                        CargarParcela();
                        cargarClientes();
                        
                        
                        //sql_cmd2.ExecuteNonQuery();
                    }
                    else
                    {
                        Clientes c = Clientes.SelectedItem as Clientes;
                        Clientes.SelectedItem = null;
                        Clientes.SelectedItem = c;

                    }
                }
                else
                {
                    CargarParcela();
                    cargarClientes();

                    //CargarRegistros();
                    clearall();
                    Clientes c = Clientes.SelectedItem as Clientes;
                    Clientes.SelectedItem = null;
                    Clientes.SelectedItem = c;
                }
            }catch(Exception ee)
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                Peta(ee, line + "");
            }
        }




        //FUNCIONES

        private void mirar(object sender, TextChangedEventArgs e)
        {

            Clientes cc = Clientes.SelectedItem as Clientes;
            if (mirar2)
                if (!(cc is null))
                {
                    int pot = 0;
                    if (Potencia.SelectedItem != null)
                    {
                        Potencia pp = Potencia.SelectedItem as Potencia;
                        pot = pp.Id;
                    }
                    /*int b = 0;
                    if (Switch.IsChecked.Value)
                    {
                        b = 1;
                    }*/
                    Parcelas p = numero_plaza.SelectedItem as Parcelas;


                    if (p == null)
                        p = new Parcelas();

                    if (cc.Fecha_In != null)
                    {

                    }
                    else
                    {

                    }
                    ////console.writeline(numero_secreto.Text.Equals(cc.numero_secreto.ToString()) + " " + caducidad.Text.Equals(cc.caducidad.Split('/')[0]) + " " + caducidad1.Text.Equals(cc.caducidad.Split('/')[1]) + " " + titular_tarjeta.Text.Equals(cc.titular) + " " + numero_tarjeta.Text.Equals(cc.n_tarjeta.ToString()) + " " + mail_cliente.Text.Equals(cc.mail) + " " + telefonos_cliente2.Text.Equals(cc.telefon2) + " " + telefonos_cliente.Text.Equals(cc.telefon1));
                    //console.writeline(pais.Text.Equals(cc.Pais) + " " + provincia.Text.Equals(cc.Provincia) + " " + poblacion_cliente.Text.Equals(cc.poblacio) + " " + CP.Text.Equals(cc.codigo_postal) + " " + puerta.Text.Equals(cc.Puerta) + " " + piso.Text.Equals(cc.Piso) + " " + numero.Text.Equals(cc.Numero) + " " + direccion_cliente.Text.Equals(cc.direccion) + " " + dni.Text.Equals(cc.dni) + " " + apellidos_cliente.Text.Equals(cc.apellidos_cliente) + " " + nombre_cliente.Text.Equals(cc.nombre_cliente));
                    ////console.writeline(numero_cliente.Text.Equals(cc.n_cliemte) +" "+ Clientes_FechaEntrada.SelectedDate.Equals(cc.Fecha_In) +" "+ Clientes_FechaSalida.SelectedDate.Equals(cc.Fecha_Out) +" "+ vehiculo1.Text.Equals(cc.Vehiculo1) +" "+ matricula1.Text.Equals(cc.matricula1) +" "+ numero_bastidor.Text.Equals(cc.Numero_Bastidor1) +" "+ vehiculo2.Text.Equals(cc.Vehiculo2) +" "+ matricula2.Text.Equals(cc.matricula2) +" "+ numero_bastidor2.Text.Equals(cc.Numero_Bastidor2)  +" "+ nota1.Text.Equals(cc.Nota1) +" "+ Clientes_HoraEntrada.Text.Equals(cc.Hora_entrada) +" "+ Clientes_HoraSalida.Text.Equals(cc.Hora_salida));
                    //console.writeline((b == cc.Switch) + " " + (p.id == int.Parse(cc.n_plaza)) + " " + (pot == cc.Potencia));

                    if (p.id == null)
                        p.id = 0;
                    bool pos = false;
                    if (bdr2.HorizontalAlignment == HorizontalAlignment.Left)
                        pos = true;
                    //console.writeline(p.id + " " + cc.n_plaza);



                    string cd = "";
                    string cd2 = "";
                    if (cc.caducidad.Contains("/"))
                    {
                        cd = cc.caducidad.Split('/')[0];
                        cd2 = cc.caducidad.Split('/')[1];
                    }

                    Console.WriteLine(email_cliente.Text.Equals(cc.mail));
                    Console.WriteLine(telefono2_cliente_alta.Text.Equals(cc.telefon2));
                    Console.WriteLine(telefono_cliente_alta.Text.Equals(cc.telefon1));
                    Console.WriteLine(pais_cliente_alta.Text.Equals(cc.Pais));
                    Console.WriteLine(provincia_cliente_alta.Text.Equals(cc.Provincia));
                    Console.WriteLine(poblacion_cliente_alta.Text.Equals(cc.poblacio));
                    Console.WriteLine(cp_cliente_alta.Text.Equals(cc.codigo_postal));
                    Console.WriteLine(direccion_cliente_alta.Text.Equals(cc.direccion));
                    Console.WriteLine(apellido_cliente_alta.Text.Equals(cc.apellidos_cliente) + " " + nombre_cliente_alta.Text.Equals(cc.nombre_cliente));
                    Console.WriteLine(numero_cliente_alta.Text.Equals(cc.n_cliemte + ""));
                    string aa = Clientes_FechaEntrada_alta.SelectedDate.ToString();
                    string aa2 = cc.Fecha_In.ToString();

                  
                    Console.WriteLine(Vehiculo1_alta.Text.Equals(cc.Vehiculo1 + "")); //
                    Console.WriteLine(bastidor1_alta.Text.Equals(cc.matricula1)); //
                    Console.WriteLine(Vehiculo2_alta.Text.Equals(cc.Vehiculo2) + " " + bastidor2_alta.Text.Equals(cc.matricula2)); //
                    Console.WriteLine((nota1_alta.Text.Equals(cc.Nota1))); //
                    //Console.WriteLine((b == cc.Switch)); //
                    Console.WriteLine((p.id == int.Parse(cc.n_plaza))); //
                    Console.WriteLine((Clientes_HoraEntrada_alta.Text.Equals(cc.Hora_entrada))); //
                    Console.WriteLine((Clientes_HoraPeriodo_alta.Text.Equals(cc.Hora_salida))); //
                    Console.WriteLine((email_cliente2.Text.Equals(cc.mail2))); //
                    Console.WriteLine((pos == cc.DeBaja)); //
                    Console.WriteLine((Clientes_FechaPeriodo_alta.SelectedDate == cc.fecha_entrada_estado)); //
                    Console.WriteLine((Clientes_FechaPago_alta.SelectedDate == cc.fecha_pago));
                    Console.WriteLine((medidas_alta.Text.Equals(cc.Medidas_Vehiculo1)));

                    if (numero_secreto.Text.Equals(cc.numero_secreto.ToString()) && caducidad.Text.Equals(cd) && caducidad1.Text.Equals(cd2) && titular_tarjeta.Text.Equals(cc.titular) && numero_tarjeta.Text.Equals(cc.n_tarjeta.ToString()) && mail_cliente.Text.Equals(cc.mail) && telefonos_cliente2.Text.Equals(cc.telefon2) && telefonos_cliente.Text.Equals(cc.telefon1) && pais.Text.Equals(cc.Pais) && provincia.Text.Equals(cc.Provincia) && poblacion_cliente.Text.Equals(cc.poblacio) && CP.Text.Equals(cc.codigo_postal) && puerta.Text.Equals(cc.Puerta) && piso.Text.Equals(cc.Piso) && numero.Text.Equals(cc.Numero) && direccion_cliente.Text.Equals(cc.direccion) && dni.Text.Equals(cc.dni) && apellidos_cliente.Text.Equals(cc.apellidos_cliente) && nombre_cliente.Text.Equals(cc.nombre_cliente) && numero_cliente.Text.Equals(cc.n_cliemte + "") && Clientes_FechaEntrada.SelectedDate == cc.Fecha_In && Clientes_FechaSalida.SelectedDate == cc.Fecha_Out && vehiculo1.Text.Equals(cc.Vehiculo1) && matricula1.Text.Equals(cc.matricula1) && vehiculo2.Text.Equals(cc.Vehiculo2) && matricula2.Text.Equals(cc.matricula2) && vehiculo3.Text.Equals(cc.Vehiculo3) && matricula3.Text.Equals(cc.matricula3) && vehiculo4.Text.Equals(cc.Vehiculo4) && matricula2.Text.Equals(cc.matricula2) && pot == cc.Potencia && nota1.Text.Equals(cc.Nota1) && p.id == int.Parse(cc.n_plaza) && Clientes_HoraEntrada.Text.Equals(cc.Hora_entrada) && Clientes_HoraSalida.Text.Equals(cc.Hora_salida) && Iban.Text.Equals(cc.iban) && Swift.Text.Equals(cc.swift) && entidad_bancaria.Text.Equals(cc.entidad_bacnaria) && Iban2.Text.Equals(cc.iban2) && Swift2.Text.Equals(cc.swift2) && entidad_bancaria2.Text.Equals(cc.entidad_bacnaria2) && mail_cliente2.Text.Equals(cc.mail2) && pos == cc.DeBaja && Fecha_Entrada_Estado.SelectedDate == cc.fecha_entrada_estado && Fecha_Contrato.SelectedDate == cc.fecha_contrato && Fecha_Pago.SelectedDate == cc.fecha_pago && medidas_vehiculo1.Text.Equals(cc.Medidas_Vehiculo1) && bastidor.Text.Equals(cc.Numero_Bastidor1) && nbastidor2.Text.Equals(cc.Numero_Bastidor2) && nbastidor3.Text.Equals(cc.Numero_Bastidor3) && nbastidor4.Text.Equals(cc.Numero_Bastidor4)&& medidas2.Text.Equals(cc.Medidas_Vehiculo2) && medidas3.Text.Equals(cc.Medidas_Vehiculo3) && medidas4.Text.Equals(cc.Medidas_Vehiculo4)&& nota.Text.Equals(cc.Nota1)&&tarjeta.Text.Equals(cc.N_tarjeta)&&nota1_alta2.Text.Equals(cc.Nota2))
                    {
                        Console.WriteLine("10069");
                        change_client.IsEnabled = false;

                        change_client.IsEnabled = false;
                        safe = false;
                        //añadir_evento.IsEnabled = false;
                    }
                    else
                    {
                        Console.WriteLine("!10069");
                        change_client.IsEnabled = true;

                        change_client.IsEnabled = true;
                        safe = true;
                        //añadir_evento.IsEnabled = true;
                    }

                    try
                    {

                        
                        
                        
                        
                        if (!(tarjeta.Text.Equals(cc.N_tarjeta + "")))
                        {
                            tarjeta.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            tarjeta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        }
                        if (!(vehiculo1.Text.Equals(cc.Vehiculo1 + "")))
                        {
                            vehiculo1.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            vehiculo1.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        }
                        if (!(vehiculo2.Text.Equals(cc.Vehiculo2 + "")))
                        {
                            vehiculo2.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            vehiculo2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        }
                        if (!(vehiculo3.Text.Equals(cc.Vehiculo3 + "")))
                        {
                            vehiculo3.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            vehiculo3.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        }
                        if (!(vehiculo4.Text.Equals(cc.Vehiculo4 + "")))
                        {
                            vehiculo4.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            vehiculo4.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        }
                        if (!(nbastidor2.Text.Equals(cc.Numero_Bastidor2 + "")))
                        {
                            nbastidor2.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            nbastidor2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        }
                        if (!(nbastidor3.Text.Equals(cc.Numero_Bastidor3 + "")))
                        {
                            nbastidor3.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            nbastidor3.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        }
                        if (!(nbastidor4.Text.Equals(cc.Numero_Bastidor4 + "")))
                        {
                            nbastidor4.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            nbastidor4.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        }
                        if (!(bastidor.Text.Equals(cc.Numero_Bastidor1 + "")))
                        {
                            bastidor.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            bastidor.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        }
                        if (!(numero_cliente.Text.Equals(cc.n_cliemte + "")))
                        {
                            numero_cliente.BorderBrush = Brushes.Red;
                        }
                        
                        if (!(numero_cliente.Text.Equals(cc.n_cliemte + "")))
                        {
                            numero_cliente.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            numero_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        }
                       
                        
                        Parcelas pr = numero_plaza.SelectedItem as Parcelas;
                        if (pr != null)
                            if (cc.n_plaza != pr.id + "")
                            {

                                numero_plaza.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                numero_plaza.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }




                        if (!(cc.nombre_cliente.Equals(nombre_cliente.Text)))
                        {
                            nombre_cliente.BorderBrush = Brushes.Red;


                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            nombre_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(cc.Nota1.Equals(nota.Text)))
                        {
                            nota.BorderBrush = Brushes.Red;


                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            nota.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }


                        if (!(cc.apellidos_cliente.Equals(apellidos_cliente.Text)))
                        {
                            apellidos_cliente.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            apellidos_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }


                        if (!(cc.dni.Equals(dni.Text)))
                        {
                            dni.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            dni.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }



                        if (!(cc.direccion.Equals(direccion_cliente.Text)))
                        {

                            direccion_cliente.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            direccion_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(cc.poblacio.Equals(poblacion_cliente.Text)))
                        {
                            poblacion_cliente.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            poblacion_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(cc.telefon1.Equals(telefonos_cliente.Text)))
                        {

                            telefonos_cliente.BorderBrush = Brushes.Red;


                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            telefonos_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(cc.telefon2.Equals(telefonos_cliente2.Text)))
                        {
                            telefonos_cliente2.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            telefonos_cliente2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!cc.codigo_postal.Equals(CP.Text))
                        {
                            CP.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            CP.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(cc.mail.Equals(mail_cliente.Text)))
                        {
                            mail_cliente.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            mail_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(cc.mail2.Equals(mail_cliente2.Text)))
                        {
                            mail_cliente2.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            mail_cliente2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        /*u.Luz = "s";
                        u.Nota1 = "";
                        u.Nota2 = "";*/
                        /*if (!(cc.Metodo_Pago.ToString().Equals(Metodo_pago.Text)))
                        {
                            a = true;
                            sql_query += "Metodo_Pago=" + Metodo_pago.SelectedIndex + ", ";
                            parametros.Add("Metodo_Pago:" + Metodo_pago.SelectedIndex);
                        }*/

                        if (!(cc.titular.Equals(titular_tarjeta.Text)))
                        {
                            titular_tarjeta.BorderBrush = Brushes.Red;


                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            titular_tarjeta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        string fecha = caducidad + "/" + caducidad1;
                        if (cc.caducidad.Contains("/"))
                            if (!(cc.caducidad.Equals(caducidad.Text + "/" + caducidad1.Text)))
                            {
                                caducidad.BorderBrush = Brushes.Red;
                                caducidad1.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                caducidad.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                                caducidad1.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                        else
                             if (!(caducidad.Text.Equals("")) && !(caducidad1.Text.Equals("")))
                            {
                                caducidad.BorderBrush = Brushes.Red;
                                caducidad1.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                caducidad.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                                caducidad1.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                        if (!(cc.numero_secreto.Equals(numero_secreto.Text)))
                        {
                            numero_secreto.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            numero_secreto.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(cc.n_tarjeta.Equals(numero_tarjeta.Text)))
                        {
                            numero_tarjeta.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            numero_tarjeta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(cc.entidad_bacnaria.Equals(entidad_bancaria.Text)))
                        {
                            entidad_bancaria.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            entidad_bancaria.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(cc.iban.Equals(Iban.Text)))
                        {
                            Iban.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Iban.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(cc.swift.Equals(Swift.Text)))
                        {
                            Swift.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Swift.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }



                        if (!(cc.Pais.Equals(pais.Text)))
                        {
                            pais.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            pais.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(cc.Numero.Equals(numero.Text)))
                        {
                            numero.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            numero.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(cc.Piso.Equals(piso.Text)))
                        {
                            piso.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            piso.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(cc.Puerta.Equals(puerta.Text)))
                        {
                            puerta.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            puerta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(cc.Provincia.Equals(provincia.Text)))
                        {
                            provincia.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            provincia.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }



                        if (!(Clientes_FechaEntrada.SelectedDate.Equals(cc.Fecha_In)))
                        {
                            Clientes_FechaEntrada.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Clientes_FechaEntrada.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(Clientes_FechaSalida.SelectedDate.Equals(cc.Fecha_Out)))
                        {
                            Clientes_FechaSalida.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Clientes_FechaSalida.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(Vehiculo1_alta.Text.Equals(cc.Vehiculo1)))
                        {
                            vehiculo1.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            vehiculo1.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(matricula1.Text.Equals(cc.matricula1)))
                        {
                            matricula1.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            matricula1.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        

                        if (!(vehiculo2.Text.Equals(cc.Vehiculo2)))
                        {
                            vehiculo2.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            vehiculo2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(matricula2.Text.Equals(cc.matricula2)))
                        {
                            matricula2.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            matricula2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(vehiculo3.Text.Equals(cc.Vehiculo3)))
                        {
                            vehiculo3.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            vehiculo3.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        }
                        if (!(vehiculo4.Text.Equals(cc.Vehiculo4)))
                        {
                            vehiculo4.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            vehiculo4.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        }
                        if (!(matricula3.Text.Equals(cc.matricula3)))
                        {
                            matricula3.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            matricula3.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(matricula4.Text.Equals(cc.matricula4)))
                        {
                            matricula4.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            matricula4.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                       
                        int pott = 0;
                        if (Potencia.SelectedItem != null)
                        {
                            Potencia poten = Potencia.SelectedItem as Potencia;
                            if (cc.Potencia != poten.Id)
                            {
                                Potencia.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Potencia.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                        }



                        int b2 = 0;
                        if (Switch.IsChecked.Value)
                        {
                            b2 = 1;
                        }
                        if (b2 != cc.Switch)
                        {
                            Switch.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Switch.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }





                        if (!nota1.Text.Equals(cc.Nota1))
                        {

                            nota1.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            nota1.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        try
                        {
                            DateTime dt2 = (DateTime)Clientes_HoraEntrada.Value;

                            if (!dt2.ToString("H:mm").Equals(cc.Hora_entrada))
                            {
                                Clientes_HoraEntrada.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_HoraEntrada.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                        }
                        catch (Exception ee){
                            var st = new StackTrace(ee, true); // Get the top stack frame var frame = st.GetFrame(0); // Get the line number from the stack frame   var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                            var frame = st.GetFrame(0);
                             
                            var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                            Peta(ee, line + "");
                        }
                        DateTime dt3 = (DateTime)Clientes_HoraSalida.Value;
                        if (!dt3.ToString("H:mm").Equals(cc.Hora_salida))
                        {
                            Clientes_HoraSalida.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Clientes_HoraSalida.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(cc.entidad_bacnaria2.Equals(entidad_bancaria2.Text)))
                        {

                            entidad_bancaria2.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            entidad_bancaria2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(cc.iban2.Equals(Iban2.Text)))
                        {
                            Iban2.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Iban2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(cc.swift2.Equals(Swift2.Text)))
                        {
                            Swift2.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Swift2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        bool bb = false;
                        if (bdr2.HorizontalAlignment == HorizontalAlignment.Left)
                            bb = true;
                        /*if (!(cc.DeBaja == bb))
                        {
                            numero_cliente.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            apellidos_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }*/


                        if (!Fecha_Entrada_Estado.SelectedDate.Equals(cc.fecha_entrada_estado))
                        {
                            Fecha_Entrada_Estado.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Fecha_Entrada_Estado.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!Fecha_Contrato.SelectedDate.Equals(cc.fecha_contrato))
                        {
                            Fecha_Contrato.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Fecha_Contrato.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(cc.fecha_pago.Equals(Fecha_Pago.SelectedDate)))
                        {
                            Fecha_Pago.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Fecha_Pago.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(cc.Medidas_Vehiculo1.Equals(medidas_vehiculo1.Text)))
                        {
                            medidas_vehiculo1.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            medidas_vehiculo1.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(cc.Medidas_Vehiculo2.Equals(medidas2.Text)))
                        {
                            medidas2.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            medidas2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(cc.Medidas_Vehiculo3.Equals(medidas3.Text)))
                        {
                            medidas3.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            medidas3.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(cc.Medidas_Vehiculo4.Equals(medidas4.Text)))
                        {
                            medidas4.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            medidas4.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                       
                    }
                    catch
                    {

                    }

                }
        }

        private void Border_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            if (e.ClickCount == 2)
            {
                cliente_menu.SelectedIndex = 1;
                boton2_Cientes_Click(boton2_Cientes, RoutedEventArgs);
            }
        }

        private void Border_MouseLeftButtonDown_2(object sender, MouseButtonEventArgs e)
        {
            if (e.ClickCount == 2)
            {
                Registros r = Registros.SelectedItem as Registros;
                if (vreg != null)
                    vreg.Close();

                vreg = new VentanaRegistro(r, null);
                vreg.Show();

            }
        }
        private void Clientes_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                if (Clientes.SelectedItem != null)
                {
                    var cmbx = Vehiculo1_alta as ComboBox;
                    cmbx.IsDropDownOpen = false;
                    cmbx = Vehiculo2_alta as ComboBox;
                    cmbx.IsDropDownOpen = false;
                    cmbx = Vehiculo3_alta as ComboBox;
                    cmbx.IsDropDownOpen = false;
                    cmbx = Vehiculo4_alta as ComboBox;
                    cmbx.IsDropDownOpen = false;
                    cmbx = vehiculo1 as ComboBox;
                    cmbx.IsDropDownOpen = false;
                    cmbx = vehiculo2 as ComboBox;
                    cmbx.IsDropDownOpen = false;
                    cmbx = vehiculo3 as ComboBox;
                    cmbx.IsDropDownOpen = false;
                    cmbx = vehiculo4 as ComboBox;
                    cmbx.IsDropDownOpen = false;

                    char[] bin = rol_log.Permisos_bin.ToArray();
                    if (bin[14] == '1')
                    {
                        gotoPDF.Visibility = Visibility.Visible;
                        gotoRecibo.Visibility = Visibility.Visible;
                    }
                    cargarRegistros();
                    Clientes c = (Clientes)Clientes.SelectedItem;
                    clienteapli.SelectedItem = null;
                    for (int i=0;i<lista_clientes_ficha.Count;i++)
                    {
                        if (lista_clientes_ficha[i].id == c.id)
                        {
                            posicion = i;
                            contador.Text = i + 1+"";
                        }
                    }
                    try
                    {
                        
                            clienteapli.SelectedItem = c;
                        
                    }
                    catch { }
                    try
                    {
                        //console.writeline(c.n_cliemte.ToString());
                        string s = c.n_cliemte.ToString();
                        numero_cliente.Text = "";
                        numero_cliente.Text = s;




                    }
                    catch (Exception ee)
                    {
                        //console.writeline(ee.Message);
                    }
                    

                    try
                    {if(!editando_parcela)
                        if (!(c.n_plaza.Equals("0")) && c.n_plaza.Length > 0)
                        {

                            numero_plaza.Items.Clear();
                                numero_plaza.Items.Add(lprc.Find(x => x.id == int.Parse(c.n_plaza)));
                            foreach (Parcelas ppp in lnprc)
                            {
                                numero_plaza.Items.Add(ppp);
                            }



                                numero_plaza.SelectedIndex = 0;

                            direcion.IsEnabled = true;
                        }
                        else
                        {
                            numero_plaza.Items.Clear();
                            foreach (Parcelas par in lnprc)
                            {
                                numero_plaza.Items.Add(par);
                            }
                            direcion.IsEnabled = false;
                                numero_plaza.SelectedIndex = -1;
                            }
                    }
                    catch
                    {

                    }

                    tarjeta_alta.Text = c.N_tarjeta;
                    tarjeta.Text = c.N_tarjeta;

                    try
                    {
                        //console.writeline(c.n_tarjeta.ToString());
                        string s = c.n_tarjeta.ToString();
                        numero_tarjeta.Text = c.n_tarjeta.ToString();

                    }
                    catch (Exception ee)
                    {
                        Console.WriteLine(ee.Message);
                    }
                    logs.ItemsSource = c.lstring;

                    try
                    {
                        //console.writeline(c.nombre_cliente.ToString());
                        string s = c.nombre_cliente.ToString();
                        nombre_cliente.Text = c.nombre_cliente;
                    }
                    catch (Exception ee)
                    {
                        Console.WriteLine(ee.Message);
                    }

                    try
                    {
                        //console.writeline(c.apellidos_cliente.ToString());
                        string s = c.apellidos_cliente.ToString();
                        apellidos_cliente.Text = c.apellidos_cliente;
                    }
                    catch (Exception ee)
                    {
                        Console.WriteLine(ee.Message);
                    }

                    try
                    {
                        dni.Text = c.dni;
                    }
                    catch (Exception ee)
                    {
                        Console.WriteLine(ee.Message);
                    }

                    try
                    {
                        direccion_cliente.Text = c.direccion;
                    }
                    catch (Exception ee)
                    {
                        Console.WriteLine(ee.Message);
                    }

                    try
                    {
                        poblacion_cliente.Text = c.poblacio;
                    }
                    catch { }

                    try
                    {
                        telefonos_cliente.Text = c.telefon1;
                    }
                    catch { }

                    try
                    {
                        telefonos_cliente2.Text = c.telefon2;
                    }
                    catch
                    {

                    }



                    try
                    {
                        CP.Text = c.codigo_postal.ToString();
                    }
                    catch { }

                    try
                    {
                        mail_cliente.Text = c.mail;
                    }
                    catch { }


                    try
                    {
                        // = rdr.GetString(16);
                    }
                    catch
                    {

                    }

                    try
                    {
                        numero.Text = c.Numero;
                    }
                    catch { }


                    try
                    {
                        piso.Text = c.Piso;
                    }
                    catch { }


                    try
                    {
                        puerta.Text = c.Puerta;
                    }
                    catch { }


                    try
                    {
                        pais.Text = c.Pais;
                    }
                    catch { }


                    try
                    {
                        provincia.Text = c.Provincia;
                    }
                    catch { }

                    nota.Text = c.Nota1;




                    //c = new Cliente(str[0], str[2], str[3], str[4]);

                    /* Name.Text = user.Nom;
                     Cog.Text = user.Cognom;
                     tlf.Text = user.Telefon;
                     n_client.Text = user.n_cliente;
                     btn1.Content = "Update";
                     Delete.IsEnabled = true;
                     Delete.Visibility = Visibility.Visible;
                     n_client.IsEnabled = false;
                     candado.Visibility = Visibility.Visible;

                     Console.WriteLine(i);*/
                    //Metodo_pago.SelectedIndex = clientee.Metodo_Pago;
                    try
                    {
                        titular_tarjeta.Text = c.titular;
                    }
                    catch { }
                    try
                    {
                        string cd = "";
                        string cd2 = "";
                        if (c.caducidad.Contains("/"))
                        {
                            cd = c.caducidad.Split('/')[0];
                            cd2 = c.caducidad.Split('/')[1];
                        }
                        caducidad.Text = cd;
                    }
                    catch { }
                    try
                    {
                        string cd = "";
                        string cd2 = "";
                        if (c.caducidad.Contains("/"))
                        {
                            cd = c.caducidad.Split('/')[0];
                            cd2 = c.caducidad.Split('/')[1];
                        }
                        caducidad1.Text = cd2;
                    }
                    catch { }
                    try
                    {
                        numero_secreto.Text = c.numero_secreto;
                    }
                    catch { }
                    try
                    {
                        c.titular = c.titular;
                    }
                    catch { }
                    try
                    {
                        c.caducidad = c.caducidad;
                    }
                    catch { }
                    try
                    {
                        c.numero_secreto = c.numero_secreto;
                    }
                    catch { }

                    try
                    {
                        entidad_bancaria.Text = c.entidad_bacnaria;
                    }
                    catch { }
                    try
                    {
                        Iban.Text = c.iban;
                    }
                    catch { }
                    try
                    {
                        Swift.Text = c.swift;
                    }
                    catch { }
                    try
                    {
                        Swift2.Text = c.swift2;
                    }
                    catch { }
                    try
                    {
                        entidad_bancaria2.Text = c.entidad_bacnaria2;
                    }
                    catch { }
                    try
                    {
                        Iban2.Text = c.iban2;
                    }
                    catch { }

                    try
                    {
                        Clientes_FechaEntrada.SelectedDate = c.Fecha_In;
                    }
                    catch { }
                    try
                    {
                        Clientes_FechaSalida.SelectedDate = c.Fecha_Out;
                    }
                    catch { }
                    Potencia pp = lcnt.Find(x => x.Id == c.Potencia);

                    try
                    {
                        if (pp != null)
                            Potencia.SelectedItem = pp;
                        else
                            Potencia.SelectedItem = null;
                    }
                    catch { }

                    try
                    {

                        vehiculo1.Text = c.Vehiculo1;
                        vehiculo2.Text = c.Vehiculo2;
                        matricula1.Text = c.matricula1;
                        matricula2.Text = c.matricula2;
                        vehiculo3.Text = c.Vehiculo3;
                        vehiculo4.Text = c.Vehiculo4;
                        matricula3.Text = c.matricula3;
                        matricula4.Text = c.matricula4;
                        medidas_vehiculo1.Text = c.Medidas_Vehiculo1;
                        medidas2.Text = c.Medidas_Vehiculo2;
                        medidas3.Text = c.Medidas_Vehiculo3;
                        medidas4.Text = c.Medidas_Vehiculo4;
                        bastidor.Text = c.Numero_Bastidor1;
                        nbastidor2.Text = c.Numero_Bastidor2;
                        nbastidor3.Text = c.Numero_Bastidor3;
                        nbastidor4.Text = c.Numero_Bastidor4;
                        nbastidor4.Focus();

                        int i = 0;
                        if (modulo_ele.Content.Equals("Conectado!"))
                        {
                           /* if (KnxConnectionTunneling.ChannelId != 0)
                            {
                                if (c.Lista_Parcelas.Count > 0 && p != null)
                                {
                                    string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                                    Log oLog = new Log(path2);
                                   
                                    Parcelas p = c.Lista_Parcelas[0];

                                    Direcciones d = ldrc2.Find(x => x.Id == p.Direccion);
                                    oLog.Add("Direccion: " + d.Descripcion);
                                    string[] dd = d.Descripcion.Split('/');
                                    while (observartodotoken)
                                    {

                                    }
                                    _connection.SetLockIntervalMs(2000);
                                    _connection.RequestStatus("1/"+dd[1]+"/"+dd[2]);
                                    Thread.Sleep(1000);
                                    oLog.Add("Variable: " + variable);
                                    if (variable != -1)
                                    {
                                        if (variable == 0)
                                        {
                                            if (bdrpower.HorizontalAlignment != HorizontalAlignment.Left)
                                            {
                                                MouseButtonEventArgs mb = new MouseButtonEventArgs(Mouse.PrimaryDevice, 0, MouseButton.Left);
                                                power_MouseLeftButtonDown(power, mb);
                                            }
                                        }
                                        else
                                        {
                                            if (bdrpower.HorizontalAlignment != HorizontalAlignment.Right)
                                            {
                                                MouseButtonEventArgs mb = new MouseButtonEventArgs(Mouse.PrimaryDevice, 0, MouseButton.Left);
                                                power_MouseLeftButtonDown(power, mb);
                                            }
                                        }
                                    }
                                    variable = -1;
                                    Thread.Sleep(1000);
                                    
                                }
                           

                            }*/
                        }
                        /*if (c.Switch == 0)
                        {

                            if (bdrpower.HorizontalAlignment != HorizontalAlignment.Left)
                            {
                                MouseButtonEventArgs mb = new MouseButtonEventArgs(Mouse.PrimaryDevice, 0, MouseButton.Left);
                                power_MouseLeftButtonDown(power, mb);
                            }
                        }
                        else
                            if (bdrpower.HorizontalAlignment != HorizontalAlignment.Right)
                        {
                            MouseButtonEventArgs mb = new MouseButtonEventArgs(Mouse.PrimaryDevice, 0, MouseButton.Left);
                            power_MouseLeftButtonDown(power, mb);
                        }*/
                    }
                    catch { }

                    try
                    {
                        vehiculo1.Text = c.Vehiculo1;
                    }
                    catch { }
                    try
                    {
                        vehiculo2.Text = c.Vehiculo2;
                    }
                    catch { }
                    try
                    {
                        vehiculo3.Text = c.Vehiculo3;
                    }
                    catch { }
                    try
                    {
                        vehiculo4.Text = c.Vehiculo4;
                    }
                    catch { }
                    try
                    {
                        matricula1.Text = c.matricula1;
                    }
                    catch { }
                   
                    try
                    {
                        matricula2.Text = c.matricula2;
                    }
                    catch { }
                    try
                    {
                        matricula3.Text = c.matricula3;
                    }
                    catch { }
                   
                    try
                    {
                        matricula4.Text = c.matricula4;
                    }
                    catch { }
                   

                    try
                    {
                        nota1.Text = c.Nota1;
                        nota1.Focus();
                    }
                    catch { }
                    try
                    {
                        change_client.IsEnabled = false;
                    }
                    catch { }

                    try
                    {
                        if (c.Hora_entrada != null && c.Hora_salida != null)
                            if ((!c.Hora_entrada.Equals("")) && (!c.Hora_salida.Equals("")))
                            {
                                Clientes_HoraEntrada.Text = c.Hora_entrada;
                                Clientes_HoraSalida.Text = c.Hora_salida;
                            }
                            else
                            {
                                Clientes_HoraEntrada.Text = new DateTime(1, 1, 1, 0, 0, 0).ToString("HH:mm:ss");
                                Clientes_HoraSalida.Text = new DateTime(1, 1, 1, 0, 0, 0).ToString("HH:mm:ss");
                            }
                        else
                        {
                            Clientes_HoraEntrada.Text = new DateTime(1, 1, 1, 0, 0, 0).ToString("HH:mm:ss");
                            Clientes_HoraSalida.Text = new DateTime(1, 1, 1, 0, 0, 0).ToString("HH:mm:ss");
                        }
                    }
                    catch { }



                    try
                    {
                        //Cliente_nombre.Content = "Cliente: " + c.nombre_cliente + " " + c.apellidos_cliente;
                    }
                    catch { }

                    if (!c.DeBaja)
                    {
                        if (bdr2.HorizontalAlignment == HorizontalAlignment.Left)
                        {
                            MouseButtonEventArgs m = new MouseButtonEventArgs(Mouse.PrimaryDevice, 0, MouseButton.Left);

                            debaja_MouseLeftButtonDown(debaja, m);
                        }
                        gotoRecibo.IsEnabled = true;
                        gotoPDF.IsEnabled = true;

                        numero_plaza_alta.IsEnabled = false;
                    }
                    else
                    {
                        gotoRecibo.IsEnabled = false;
                        gotoPDF.IsEnabled = false;
                        numero_plaza.IsEnabled = false;
                        numero_plaza.SelectedItem = null;
                    }
                    try
                    {
                        medidas_vehiculo1.Text = c.Medidas_Vehiculo1;
                    }
                    catch { }
                    try { 
                    mail_cliente2.Text = c.mail2;
                    }
                    catch { }
                    try
                    {
                        Fecha_Entrada_Estado.SelectedDate = c.fecha_entrada_estado;
                    }
                    catch { }
                    try
                    {
                        Fecha_Contrato.SelectedDate = c.fecha_contrato;
                    }
                    catch { }
                    try
                    {
                        Fecha_Pago.SelectedDate = c.fecha_pago;
                    }
                    catch { }
                    if (!(vehiculo1.Text.Equals(c.Vehiculo1)))
                    {
                        vehiculo1.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        vehiculo1.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }

                    if (lista_clientes_ficha.Count > 0 || buscarcliente)
                    {
                        mirar2 = true;
                        ficha.IsEnabled = true;
                        ficha2.IsEnabled = true;
                        ficha4.IsEnabled = true;
                        ficha5.IsEnabled = true;
                        numero_cliente_alta.Text = c.n_cliemte + "";
                        Parcelas pa = lprc.Find(x => x.id == int.Parse(c.n_plaza));
                        //lnprc.Remove(lnprc.Count() - 1);
                        try
                        {
                            if (!(c.n_plaza.Equals("0")) && c.n_plaza.Length > 0)
                            {
                                numero_plaza_alta.Items.Clear();
                                numero_plaza_alta.Items.Add(lprc.Find(x => x.id == int.Parse(c.n_plaza)));
                                string[] ss = lprc.Find(z => z.id == int.Parse(c.n_plaza)).direccion.Split('/');
                                Direcciones d = ldir.Find(x=>x.Descripcion.Equals("1/"+ss[1]+"/"+ss[2]));
                                foreach (Parcelas ppp in lnprc)
                                {
                                    numero_plaza_alta.Items.Add(ppp);
                                }
                                if (d.imagee != null)
                                    if (d.imagee.Length > 0)
                                    {
                                        luz.Content = d.imagee;

                                        luzPanel.UpdateLayout();
                                    }
                                    else
                                    {

                                        luz.Content = "NA";
                                        onoffparcela.IsEnabled = false;
                                        actu.IsEnabled = false;

                                        luzPanel.UpdateLayout();
                                    }
                                else
                                {

                                    luz.Content = "NA";

                                    onoffparcela.IsEnabled = false;
                                    actu.IsEnabled = false;

                                    luzPanel.UpdateLayout();
                                }
                                numero_plaza_alta.SelectedIndex = 0;
                                
                                on_off.IsEnabled = true;
                                Potencia_alta.IsEnabled = false;
                            }
                            else
                            {
                                on_off.IsEnabled = true;
                                numero_plaza_alta.Items.Clear();
                                foreach (Parcelas par in lnprc)
                                {
                                    numero_plaza_alta.Items.Add(par);
                                }
                                if (on_off_border.HorizontalAlignment == HorizontalAlignment.Left)
                                {
                                    MouseButtonEventArgs merg = new MouseButtonEventArgs(Mouse.PrimaryDevice, 0, MouseButton.Left);
                                    FichaPotencia(on_off, merg);
                                }

                                luz.Content = "NA";

                                onoffparcela.IsEnabled = false;
                                actu.IsEnabled = false;
                                on_off.IsEnabled = false;
                                Potencia_alta.IsEnabled = false;
                                numero_plaza_alta.SelectedIndex =-1;

                            }
                        }
                        catch
                        {

                        }
                        nombre_cliente_alta.Text = c.nombre_cliente;
                        apellido_cliente_alta.Text = c.apellidos_cliente;
                        dni_cliente_alta.Text = c.dni;
                        direccion_cliente_alta.Text = c.direccion;
                        poblacion_cliente_alta.Text = c.poblacio;
                        cp_cliente_alta.Text = c.codigo_postal;
                        provincia_cliente_alta.Text = c.Provincia;
                        pais_cliente_alta.Text = c.Pais;

                        telefono_cliente_alta.Text = c.telefon1;
                        telefono2_cliente_alta.Text = c.telefon2;
                        email_cliente.Text = c.mail;
                        email_cliente2.Text = c.mail2;


                        Vehiculo1_alta.Text = c.Vehiculo1;
                        Vehiculo1_alta.IsDropDownOpen = false;
                        Vehiculo2_alta.Text = c.Vehiculo2;
                        bastidor1_alta.Text = c.matricula1;
                        bastidor2_alta.Text = c.matricula2;
                        Vehiculo3_alta.Text = c.Vehiculo3;
                        Vehiculo4_alta.Text = c.Vehiculo4;
                        bastidor3_alta.Text = c.matricula3;
                        bastidor4_alta.Text = c.matricula4;
                        medidas_alta.Text = c.Medidas_Vehiculo1;
                        medidas2_alta.Text = c.Medidas_Vehiculo2;
                        medidas3_alta.Text = c.Medidas_Vehiculo3;
                        medidas4_alta.Text = c.Medidas_Vehiculo4;
                        bastidor_alta.Text = c.Numero_Bastidor1;
                        nbastidor2_alta.Text = c.Numero_Bastidor2;
                        nbastidor3_alta.Text = c.Numero_Bastidor3;
                        nbastidor4_alta.Text = c.Numero_Bastidor4;
                        Clientes_FechaEntrada_alta.SelectedDate = c.Fecha_In;
                        Clientes_FechaSalida_alta.SelectedDate = c.Fecha_Out;
                        importe_alta.Text = c.importe;
                        nombreacompañante1_alta.Text = "";
                        nombreacompañante1.Text = "";
                        nombreacompañante2_alta.Text = "";
                        nombreacompañante2.Text = "";
                        nombreacompañante3_alta.Text = "";
                        nombreacompañante3.Text = "";
                        nombreacompañante4_alta.Text = "";
                        nombreacompañante4.Text = "";
                        nombreacompañante5_alta.Text = "";
                        nombreacompañante5.Text = "";
                        for (int i =0; i < c.lista_acompañantes.Count(); i++)
                        {
                            switch (i)
                            {
                                case 0:
                                    if (c.lista_acompañantes[0] != null)
                                    {
                                        nombreacompañante1_alta.Text = c.lista_acompañantes[0].ToString();
                                        nombreacompañante1.Text = c.lista_acompañantes[0].ToString();
                                    }
                                    else
                                    {
                                        nombreacompañante1_alta.Text = "";
                                        nombreacompañante1.Text = "";
                                    }
                                    break;
                                case 1:
                                    if (c.lista_acompañantes[1] != null)
                                    {
                                        nombreacompañante2_alta.Text = c.lista_acompañantes[1].ToString();
                                        nombreacompañante2.Text = c.lista_acompañantes[1].ToString();
                                    }
                                    else
                                    {
                                        nombreacompañante2_alta.Text = "";
                                        nombreacompañante2.Text = "";
                                    }
                                    break;
                                case 2:
                                    if (c.lista_acompañantes[2] != null)
                                    {
                                        nombreacompañante3_alta.Text = c.lista_acompañantes[2].ToString();
                                        nombreacompañante3.Text = c.lista_acompañantes[2].ToString();
                                    }
                                    else
                                    {
                                        nombreacompañante3_alta.Text = "";
                                        nombreacompañante3.Text = "";
                                    }
                                    break;
                                case 3:
                                    if (c.lista_acompañantes[3] != null)
                                    {
                                        nombreacompañante4_alta.Text = c.lista_acompañantes[3].ToString();
                                        nombreacompañante4.Text = c.lista_acompañantes[3].ToString();
                                    }
                                    else
                                    {
                                        nombreacompañante4_alta.Text = "";
                                        nombreacompañante4.Text = "";
                                    }
                                    break;
                                case 4:
                                    if (c.lista_acompañantes[4] != null)
                                    {
                                        nombreacompañante5_alta.Text = c.lista_acompañantes[4].ToString();
                                        nombreacompañante5.Text = c.lista_acompañantes[4].ToString();
                                    }
                                    else
                                    {
                                        nombreacompañante5_alta.Text = "";
                                        nombreacompañante5.Text = "";
                                    }
                                    break;
                                case 5:
                                    if (c.lista_acompañantes[5] != null)
                                    {
                                        nombreacompañante6_alta.Text = c.lista_acompañantes[5].ToString();
                                        //nombreacompañante6.Text = c.lista_acompañantes[5].ToString();
                                    }
                                    else
                                    {
                                        nombreacompañante6_alta.Text = "";
                                        //nombreacompañante6.Text = "";
                                    }
                                    break;
                            }
                        }

                        if (c.Hora_entrada != null && c.Hora_salida != null)
                            if ((!c.Hora_entrada.Equals("")) && (!c.Hora_salida.Equals("")))
                            {
                                Clientes_HoraEntrada_alta.Text = c.Hora_entrada;
                                Clientes_HoraPeriodo_alta.Text = c.Hora_salida;
                            }
                            else
                            {
                                Clientes_HoraEntrada_alta.Text = new DateTime(1, 1, 1, 12, 0, 0).ToString("HH:mm:ss");
                                Clientes_HoraPeriodo_alta.Text = new DateTime(1, 1, 1, 12, 0, 0).ToString("HH:mm:ss");
                            }
                        else
                        {
                            Clientes_HoraEntrada_alta.Text = new DateTime(1, 1, 1, 12, 0, 0).ToString("HH:mm:ss");
                            Clientes_HoraPeriodo_alta.Text = new DateTime(1, 1, 1, 12, 0, 0).ToString("HH:mm:ss");
                        }
                        Clientes_FechaPago_alta.SelectedDate = c.fecha_pago;
                        Clientes_FechaPeriodo_alta.SelectedDate = c.fecha_entrada_estado;

                        if (c.Switch == 0)
                        {
                            if (on_off_border.HorizontalAlignment != HorizontalAlignment.Left)
                            {
                                MouseButtonEventArgs merg = new MouseButtonEventArgs(Mouse.PrimaryDevice, 0, MouseButton.Left);
                                FichaPotencia(on_off, merg);
                            }
                        }
                        else
                        {
                            if (on_off_border.HorizontalAlignment == HorizontalAlignment.Left)
                            {
                                MouseButtonEventArgs merg = new MouseButtonEventArgs(Mouse.PrimaryDevice, 0, MouseButton.Left);
                                FichaPotencia(on_off, merg);
                            }
                        }
                        pp = lcnt.Find(x => x.Id == c.Potencia);

                        try
                        {
                            if (pp != null)
                                Potencia_alta.SelectedItem = pp;
                            else
                                Potencia_alta.SelectedItem = null;
                        }
                        catch { }


                        nota1_alta.Text = c.Nota1;
                        nota1_alta2.Text = c.Nota2;

                        contador.Text = posicion + 1 + "";


                        if (c.DeBaja)
                        {
                            if (alta_baja.HorizontalAlignment == HorizontalAlignment.Right)
                            {
                                MouseButtonEventArgs merg = new MouseButtonEventArgs(Mouse.PrimaryDevice, 0, MouseButton.Left);
                                FichaPotencia2(estado_alta, merg);
                            }

                            numero_plaza_alta.IsEnabled = false;
                            numero_plaza_alta.SelectedItem = null;
                            numero_plaza_alta.SelectedItem = null;
                        }
                        else
                        {
                            if (alta_baja.HorizontalAlignment == HorizontalAlignment.Left)
                            {
                                MouseButtonEventArgs merg = new MouseButtonEventArgs(Mouse.PrimaryDevice, 0, MouseButton.Left);
                                FichaPotencia2(estado_alta, merg);
                            }

                            numero_plaza_alta.SelectedIndex = 0;
                            numero_plaza_alta.IsEnabled = false;

                        }
                        if (c.n_plaza.Equals("0"))
                        {
                            numero_plaza_alta.SelectedIndex = -1;
                        }

                        BrushConverter bc = new BrushConverter();
                        numero_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        nombreacompañante1.BorderBrush= (Brush)bc.ConvertFrom("#e2e6ee");
                        nombreacompañante2.BorderBrush= (Brush)bc.ConvertFrom("#e2e6ee");
                        nombreacompañante3.BorderBrush= (Brush)bc.ConvertFrom("#e2e6ee");
                        nombreacompañante4.BorderBrush= (Brush)bc.ConvertFrom("#e2e6ee");
                        nombreacompañante5.BorderBrush= (Brush)bc.ConvertFrom("#e2e6ee");

                        tarjeta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        tarjeta_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");


                        bc = new BrushConverter();
                        numero_plaza.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");







                        bc = new BrushConverter();
                        nombre_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");





                        bc = new BrushConverter();
                        apellidos_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");




                        bc = new BrushConverter();
                        dni.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");





                        bc = new BrushConverter();
                        direccion_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        Clientes_HoraEntrada.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        Clientes_HoraSalida.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");





                        bc = new BrushConverter();
                        poblacion_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");




                        bc = new BrushConverter();
                        telefonos_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");



                        bc = new BrushConverter();
                        telefonos_cliente2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");




                        bc = new BrushConverter();
                        CP.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");




                        bc = new BrushConverter();
                        mail_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");



                        bc = new BrushConverter();
                        mail_cliente2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");



                        /*u.Luz = "s";
                        u.Nota1 = "";
                        u.Nota2 = "";*/
                        /*if (!(cc.Metodo_Pago.ToString().Equals(Metodo_pago.Text)))
                        {
                            a = true;
                            sql_query += "Metodo_Pago=" + Metodo_pago.SelectedIndex + ", ";
                            parametros.Add("Metodo_Pago:" + Metodo_pago.SelectedIndex);
                        }*/

                        bc = new BrushConverter();
                        titular_tarjeta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");



                        bc = new BrushConverter();
                        caducidad.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        caducidad1.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");





                        bc = new BrushConverter();
                        numero_secreto.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");




                        bc = new BrushConverter();
                        numero_tarjeta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");



                        bc = new BrushConverter();
                        entidad_bancaria.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");



                        bc = new BrushConverter();
                        Iban.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");



                        bc = new BrushConverter();
                        Swift.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");






                        bc = new BrushConverter();
                        pais.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");



                        bc = new BrushConverter();
                        numero.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");



                        bc = new BrushConverter();
                        piso.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");


                        bc = new BrushConverter();
                        puerta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");



                        bc = new BrushConverter();
                        provincia.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");





                        bc = new BrushConverter();
                        Clientes_FechaEntrada.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");



                        bc = new BrushConverter();
                        Clientes_FechaSalida.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");




                        bc = new BrushConverter();
                        vehiculo1.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");



                        bc = new BrushConverter();
                        matricula1.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");




                      




                        bc = new BrushConverter();
                        vehiculo2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");



                        bc = new BrushConverter();
                        matricula2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");




                       



                        bc = new BrushConverter();
                        Potencia.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");





                        bc = new BrushConverter();
                        Switch.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");




                        bc = new BrushConverter();
                        nota1.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");



                        bc = new BrushConverter();
                        Clientes_HoraEntrada.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");



                        bc = new BrushConverter();
                        Clientes_HoraSalida.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");



                        bc = new BrushConverter();
                        entidad_bancaria2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");




                        Iban2.BorderBrush = Brushes.Red;


                        bc = new BrushConverter();
                        Iban2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");




                        bc = new BrushConverter();
                        Swift2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");






                        bc = new BrushConverter();
                        Fecha_Entrada_Estado.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        Fecha_Contrato.BorderBrush = Brushes.Red;

                        bc = new BrushConverter();
                        Fecha_Contrato.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        Fecha_Pago.BorderBrush = Brushes.Red;

                        bc = new BrushConverter();
                        Fecha_Pago.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");


                        medidas_vehiculo1.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");




                      


                        bc = new BrushConverter();
                        Clientes_HoraEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        bc = new BrushConverter();
                        Clientes_HoraPeriodo_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");


                        bc = new BrushConverter();
                        Fecha_Entrada_Estado.BorderBrush= (Brush)bc.ConvertFrom("#e2e6ee");
                        Clientes_FechaSalida.BorderBrush= (Brush)bc.ConvertFrom("#e2e6ee");
                        Clientes_FechaEntrada.BorderBrush= (Brush)bc.ConvertFrom("#e2e6ee");
                        Fecha_Contrato.BorderBrush= (Brush)bc.ConvertFrom("#e2e6ee");
                        Fecha_Pago.BorderBrush= (Brush)bc.ConvertFrom("#e2e6ee");



                        bc = new BrushConverter();
                        numero_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        bc = new BrushConverter();
                        numero_plaza_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");




                        bc = new BrushConverter();
                        nombre_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");


                        bc = new BrushConverter();
                        apellido_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        bc = new BrushConverter();
                        dni_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");




                        dni_cliente_alta.BorderBrush = Brushes.Red;

                        bc = new BrushConverter();
                        dni_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");


                        bc = new BrushConverter();
                        poblacion_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");



                        bc = new BrushConverter();
                        telefono_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        bc = new BrushConverter();
                        telefono2_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        bc = new BrushConverter();
                        cp_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");


                        bc = new BrushConverter();
                        email_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        bc = new BrushConverter();
                        email_cliente2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");


                        bc = new BrushConverter();
                        pais_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        bc = new BrushConverter();
                        provincia_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        bc = new BrushConverter();
                        Clientes_FechaEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        bc = new BrushConverter();
                        Clientes_FechaSalida_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        bc = new BrushConverter();
                        Vehiculo1_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                        bc = new BrushConverter();
                        bastidor1_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");


                        bc = new BrushConverter();
                        Vehiculo2_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                        bc = new BrushConverter();
                        bastidor2_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");
                        bc = new BrushConverter();
                        Vehiculo3_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                        bc = new BrushConverter();
                        bastidor3_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");


                        bc = new BrushConverter();
                        Vehiculo4_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                        bc = new BrushConverter();
                        bastidor4_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                        bc = new BrushConverter();
                        Potencia_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        bc = new BrushConverter();
                        on_off_border.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        bc = new BrushConverter();
                        nota1_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                          bc = new BrushConverter();
                        nota1_alta2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");


                        bc = new BrushConverter();
                        Clientes_HoraEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        bc = new BrushConverter();
                        Clientes_HoraPeriodo_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");


                        bc = new BrushConverter();
                        Clientes_FechaPeriodo_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        bc = new BrushConverter();
                        Clientes_FechaPago_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        direccion_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");


                        bc = new BrushConverter();
                        medidas_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        safe = false;
                        change_client.IsEnabled = false;

                    }
                    else
                    {
                        ficha.IsEnabled = false;
                        ficha2.IsEnabled = false;
                        ficha4.IsEnabled = false;
                        ficha5.IsEnabled = false;
                        Clientes_HoraEntrada_alta.Text = new DateTime(1, 1, 1, 12, 0, 0).ToString("HH:mm:ss");
                        Clientes_HoraPeriodo_alta.Text = new DateTime(1, 1, 1, 12, 0, 0).ToString("HH:mm:ss");
                        mirar2 = true;
                    }

                  
                    nombrecliente1.Text = "Clientes - Lista Clientes: " + c.nombre_completo;
                    nombrecliente2.Content = "Clientes - Ficha Clientes: " + c.nombre_completo;
                    nombrecliente3.Content = "Clientes - Datos Cliente: " + c.nombre_completo;
                    nombrecliente4.Content = "Clientes - Datos Bancarios: " + c.nombre_completo;
                    nombrecliente5.Content = "Clientes - Contratacion: " + c.nombre_completo;
                    cmbx = Vehiculo1_alta as ComboBox;
                    cmbx.IsDropDownOpen = false;
                     cmbx = Vehiculo2_alta as ComboBox;
                    cmbx.IsDropDownOpen = false;
                     cmbx = Vehiculo3_alta as ComboBox;
                    cmbx.IsDropDownOpen = false;
                     cmbx = Vehiculo4_alta as ComboBox;
                    cmbx.IsDropDownOpen = false;
                     cmbx = vehiculo1 as ComboBox;
                    cmbx.IsDropDownOpen = false;
                     cmbx = vehiculo2 as ComboBox;
                    cmbx.IsDropDownOpen = false;
                     cmbx = vehiculo3 as ComboBox;
                    cmbx.IsDropDownOpen = false;
                     cmbx = vehiculo4 as ComboBox;
                    cmbx.IsDropDownOpen = false;
                    vehiculo4.IsDropDownOpen = false;
                    vehiculo4.IsDropDownOpen = false;
                    vehiculo4.IsDropDownOpen = false;
                    vehiculo4.IsDropDownOpen = false;
                    vehiculo4.IsDropDownOpen = false;

                    nombre_cliente_alta.Focus();
                    tarjeta.Focus();
                    bastidor.Focus();


                }
                else
                {


                    //Cliente_nombre.Content = "Clientes";
                    
                    nombrecliente1.Text = "Clientes - Lista Clientes";
                    nombrecliente2.Content = "Clientes - Ficha Clientes";
                    nombrecliente3.Content = "Clientes - Datos Cliente";
                    nombrecliente4.Content = "Clientes - Datos Bancarios";
                    nombrecliente5.Content = "Clientes - Contratacion";
                    gotoPDF.Visibility = Visibility.Collapsed;
                    gotoRecibo.Visibility = Visibility.Collapsed;

                    nombreacompañante1_alta.Text = "";
                    nombreacompañante2_alta.Text = "";
                    nombreacompañante2_alta.Text = "";
                    nombreacompañante3_alta.Text = "";
                    nombreacompañante4_alta.Text = "";
                    nombreacompañante5_alta.Text = "";
                    nombreacompañante6_alta.Text = ""; 
                    nombreacompañante1.Text = "";
                    nombreacompañante2.Text = "";
                    nombreacompañante2.Text = "";
                    nombreacompañante3.Text = "";
                    nombreacompañante4.Text = "";
                    nombreacompañante5.Text = "";
                    nombreacompañante6.Text = "";



                    nombre_cliente_alta.Focus();
                    tarjeta.Focus();
                    bastidor.Focus();

                }
            }
            catch (Exception ee)
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop); 
                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                Peta(ee, line + "");
            }

        }
        //////////////////////////////////////////////////////////////////////////////////


        /*++++++++++  FUNCIONES Y BOTONES SISTEMA&  ++++++++++*/

        //BOTONES SUBMENU

        private void boton1_Sistema_Click(object sender, RoutedEventArgs e)
        {
            if (safe)
            {
                safe = false;
                MessageBoxResult result = MessageBox.Show("Hay cambios realizado en la pestaña ¿Desea continuar?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                if (result == MessageBoxResult.OK)
                {
                    clearSistema_Click(clearSistema, RoutedEventArgs);
                    usuarios_menu.SelectedIndex = 0;
                    boton1_Sistema.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                    boton1_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                    boton2_Sistema.Background = Brushes.Transparent;
                    boton2_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton3_Sistema.Background = Brushes.Transparent;
                    boton3_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton4_Sistema.Background = Brushes.Transparent;
                    boton4_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton5_Sistema.Background = Brushes.Transparent;
                    boton5_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton6_Sistema.Background = Brushes.Transparent;
                    boton6_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton7_Sistema.Background = Brushes.Transparent;
                    boton7_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton8_Sistema.Background = Brushes.Transparent;
                    boton8_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton9_Sistema.Background = Brushes.Transparent;
                    boton9_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                    boton10_Sistema.Background = Brushes.Transparent;
                    boton10_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");


                    boton1_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/clientclick.png", UriKind.RelativeOrAbsolute));
                    boton1_Sistemat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                    boton2_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton2_Sistemat.Foreground = Brushes.Black;
                    boton3_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                    boton3_Sistemat.Foreground = Brushes.Black;
                    boton4_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/list.png", UriKind.RelativeOrAbsolute));
                    boton4_Sistemat.Foreground = Brushes.Black;
                    boton5_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton5_Sistemat.Foreground = Brushes.Black;


                    boton6_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                    boton6_Sistemat.Foreground = Brushes.Black;
                    boton7_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton7_Sistemat.Foreground = Brushes.Black;
                    boton8_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/folder.png", UriKind.RelativeOrAbsolute));
                    boton8_Sistemat.Foreground = Brushes.Black;
                    boton9_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton9_Sistemat.Foreground = Brushes.Black;
                    boton10_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/box.png", UriKind.RelativeOrAbsolute));
                    boton10_Sistemat.Foreground = Brushes.Black;
                    boton11_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton11_Sistemat.Foreground = Brushes.Black;

                    boton11_Sistema.Background = Brushes.Transparent;
                    boton11_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                    boton1_Sistema.BorderThickness = new Thickness(1);

                    CargarUsuarios();


                    filtrar_Sistema.Items.Clear();
                    ComboBoxItem ci = new ComboBoxItem();
                    ci.Content = "Nombre y Apellidos";
                    ci.IsSelected = true;
                    filtrar_Sistema.Items.Add(ci);
                    ci = new ComboBoxItem();
                    ci.Content = "DNI";
                    ci.IsSelected = false;
                    filtrar_Sistema.Items.Add(ci);
                    ci = new ComboBoxItem();
                    ci.Content = "Rol";
                    ci.IsSelected = false;
                    filtrar_Sistema.Items.Add(ci);
                    ci = new ComboBoxItem();
                    ci.Content = "Direccion";
                    ci.IsSelected = false;
                    filtrar_Sistema.Items.Add(ci);
                    ci = new ComboBoxItem();
                    ci.Content = "Poblacion";
                    ci.IsSelected = false;
                    filtrar_Sistema.Items.Add(ci);

                    ci = new ComboBoxItem();
                    ci.Content = "Telefono";
                    ci.IsSelected = false;
                    filtrar_Sistema.Items.Add(ci);
                    ci = new ComboBoxItem();
                    ci.Content = "Codigo Postal";
                    ci.IsSelected = false;
                    filtrar_Sistema.Items.Add(ci);
                    ci = new ComboBoxItem();
                    ci.Content = "Mail";
                    ci.IsSelected = false;
                    filtrar_Sistema.Items.Add(ci);
                    ci = new ComboBoxItem();
                    ci.Content = "Pais";
                    ci.IsSelected = false;
                    filtrar_Sistema.Items.Add(ci);

                    ci = new ComboBoxItem();
                    ci.Content = "Provincia";
                    ci.IsSelected = false;
                    filtrar_Sistema.Items.Add(ci);


                    AddnewSistema.ToolTip = "Añadir nuevo usuario";
                    editSistema.ToolTip = "Editar usuario";
                    deleteSistema.ToolTip = "Borrar usuario seleccionado";
                    boton12_Sistema.Background = Brushes.Transparent;
                    boton12_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                    boton12_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton12_Sistemat.Foreground = Brushes.Black;

                    AddnewSistema.Visibility = Visibility.Visible;
                    deleteSistema.Visibility = Visibility.Collapsed;

                    ComprobarRoles();
                }
            }
            else
            {
                usuarios_menu.SelectedIndex = 0;
                boton1_Sistema.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                boton1_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                boton2_Sistema.Background = Brushes.Transparent;
                boton2_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton3_Sistema.Background = Brushes.Transparent;
                boton3_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton4_Sistema.Background = Brushes.Transparent;
                boton4_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton5_Sistema.Background = Brushes.Transparent;
                boton5_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton6_Sistema.Background = Brushes.Transparent;
                boton6_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton7_Sistema.Background = Brushes.Transparent;
                boton7_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton8_Sistema.Background = Brushes.Transparent;
                boton8_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton9_Sistema.Background = Brushes.Transparent;
                boton9_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                boton10_Sistema.Background = Brushes.Transparent;
                boton10_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton1_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/clientclick.png", UriKind.RelativeOrAbsolute));
                boton1_Sistemat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                boton2_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton2_Sistemat.Foreground = Brushes.Black;
                boton3_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                boton3_Sistemat.Foreground = Brushes.Black;
                boton4_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/list.png", UriKind.RelativeOrAbsolute));
                boton4_Sistemat.Foreground = Brushes.Black;
                boton5_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton5_Sistemat.Foreground = Brushes.Black;


                boton6_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                boton6_Sistemat.Foreground = Brushes.Black;
                boton7_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton7_Sistemat.Foreground = Brushes.Black;
                boton8_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/folder.png", UriKind.RelativeOrAbsolute));
                boton8_Sistemat.Foreground = Brushes.Black;
                boton9_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton9_Sistemat.Foreground = Brushes.Black;
                boton10_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/box.png", UriKind.RelativeOrAbsolute));
                boton10_Sistemat.Foreground = Brushes.Black;

                boton11_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton11_Sistemat.Foreground = Brushes.Black;

                boton11_Sistema.Background = Brushes.Transparent;
                boton11_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton1_Sistema.BorderThickness = new Thickness(1);
                CargarUsuarios();


                filtrar_Sistema.Items.Clear();
                ComboBoxItem ci = new ComboBoxItem();
                ci.Content = "Nombre y Apellidos";
                ci.IsSelected = true;
                filtrar_Sistema.Items.Add(ci);
                ci = new ComboBoxItem();
                ci.Content = "DNI";
                ci.IsSelected = false;
                filtrar_Sistema.Items.Add(ci);
                ci = new ComboBoxItem();
                ci.Content = "Rol";
                ci.IsSelected = false;
                filtrar_Sistema.Items.Add(ci);
                ci = new ComboBoxItem();
                ci.Content = "Direccion";
                ci.IsSelected = false;
                filtrar_Sistema.Items.Add(ci);
                ci = new ComboBoxItem();
                ci.Content = "Poblacion";
                ci.IsSelected = false;
                filtrar_Sistema.Items.Add(ci);

                ci = new ComboBoxItem();
                ci.Content = "Telefono";
                ci.IsSelected = false;
                filtrar_Sistema.Items.Add(ci);
                ci = new ComboBoxItem();
                ci.Content = "Codigo Postal";
                ci.IsSelected = false;
                filtrar_Sistema.Items.Add(ci);
                ci = new ComboBoxItem();
                ci.Content = "Mail";
                ci.IsSelected = false;
                filtrar_Sistema.Items.Add(ci);
                ci = new ComboBoxItem();
                ci.Content = "Pais";
                ci.IsSelected = false;
                filtrar_Sistema.Items.Add(ci);

                ci = new ComboBoxItem();
                ci.Content = "Provincia";
                ci.IsSelected = false;
                filtrar_Sistema.Items.Add(ci);
                boton12_Sistema.Background = Brushes.Transparent;
                boton12_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                boton12_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton12_Sistemat.Foreground = Brushes.Black;

                AddnewSistema.ToolTip = "Añadir nuevo usuario";
                editSistema.ToolTip = "Editar usuario";
                deleteSistema.ToolTip = "Borrar usuario seleccionado";


                AddnewSistema.Visibility = Visibility.Visible;
                deleteSistema.Visibility = Visibility.Collapsed;

                //ComprobarRoles();
            }
        }



        private void boton2_Sistema_Click(object sender, RoutedEventArgs e)
        {
            if (safe)
            {
                MessageBoxResult result = MessageBox.Show("Hay cambios realizado en la pestaña ¿Desea continuar?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                if (result == MessageBoxResult.OK)
                {
                    safe = false;
                    clearSistema_Click(clearSistema, RoutedEventArgs);
                    usuarios_menu.SelectedIndex = 1;

                    boton1_Sistema.Background = Brushes.Transparent;
                    boton1_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton2_Sistema.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                    boton2_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                    boton3_Sistema.Background = Brushes.Transparent;
                    boton3_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton4_Sistema.Background = Brushes.Transparent;
                    boton4_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton5_Sistema.Background = Brushes.Transparent;
                    boton5_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton6_Sistema.Background = Brushes.Transparent;
                    boton6_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton7_Sistema.Background = Brushes.Transparent;
                    boton7_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton8_Sistema.Background = Brushes.Transparent;
                    boton8_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton9_Sistema.Background = Brushes.Transparent;
                    boton9_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                    boton10_Sistema.Background = Brushes.Transparent;
                    boton10_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton1_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                    boton1_Sistemat.Foreground = Brushes.Black;
                    boton2_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/articleclick.png", UriKind.RelativeOrAbsolute));
                    boton2_Sistemat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                    boton3_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                    boton3_Sistemat.Foreground = Brushes.Black;
                    boton4_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/list.png", UriKind.RelativeOrAbsolute));
                    boton4_Sistemat.Foreground = Brushes.Black;
                    boton5_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton5_Sistemat.Foreground = Brushes.Black;

                    boton6_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                    boton6_Sistemat.Foreground = Brushes.Black;
                    boton7_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton7_Sistemat.Foreground = Brushes.Black;
                    boton8_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/folder.png", UriKind.RelativeOrAbsolute));
                    boton8_Sistemat.Foreground = Brushes.Black;
                    boton9_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton9_Sistemat.Foreground = Brushes.Black;
                    boton10_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/box.png", UriKind.RelativeOrAbsolute));
                    boton10_Sistemat.Foreground = Brushes.Black;


                    boton11_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton11_Sistemat.Foreground = Brushes.Black;

                    boton11_Sistema.Background = Brushes.Transparent;
                    boton11_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton12_Sistema.Background = Brushes.Transparent;
                    boton12_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                    boton12_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton12_Sistemat.Foreground = Brushes.Black;



                    AddnewSistema.ToolTip = "Añadir nuevo usuario";
                    editSistema.ToolTip = "Editar usuario";
                    deleteSistema.ToolTip = "Borrar usuario seleccionado";


                    AddnewSistema.Visibility = Visibility.Visible;
                    deleteSistema.Visibility = Visibility.Collapsed;
                    ComprobarRoles();
                }
            }
            else
            {
                usuarios_menu.SelectedIndex = 1;

                boton1_Sistema.Background = Brushes.Transparent;
                boton1_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton2_Sistema.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                boton2_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                boton3_Sistema.Background = Brushes.Transparent;
                boton3_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton4_Sistema.Background = Brushes.Transparent;
                boton4_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton5_Sistema.Background = Brushes.Transparent;
                boton5_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton6_Sistema.Background = Brushes.Transparent;
                boton6_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton7_Sistema.Background = Brushes.Transparent;
                boton7_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton8_Sistema.Background = Brushes.Transparent;
                boton8_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton9_Sistema.Background = Brushes.Transparent;
                boton9_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                boton10_Sistema.Background = Brushes.Transparent;
                boton10_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton1_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                boton1_Sistemat.Foreground = Brushes.Black;
                boton2_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/articleclick.png", UriKind.RelativeOrAbsolute));
                boton2_Sistemat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                boton3_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                boton3_Sistemat.Foreground = Brushes.Black;
                boton4_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/list.png", UriKind.RelativeOrAbsolute));
                boton4_Sistemat.Foreground = Brushes.Black;
                boton5_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton5_Sistemat.Foreground = Brushes.Black;

                boton6_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                boton6_Sistemat.Foreground = Brushes.Black;
                boton7_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton7_Sistemat.Foreground = Brushes.Black;
                boton8_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/folder.png", UriKind.RelativeOrAbsolute));
                boton8_Sistemat.Foreground = Brushes.Black;
                boton9_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton9_Sistemat.Foreground = Brushes.Black;
                boton10_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/box.png", UriKind.RelativeOrAbsolute));
                boton10_Sistemat.Foreground = Brushes.Black;


                boton11_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton11_Sistemat.Foreground = Brushes.Black;

                boton11_Sistema.Background = Brushes.Transparent;
                boton11_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");


                boton12_Sistema.Background = Brushes.Transparent;
                boton12_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                boton12_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton12_Sistemat.Foreground = Brushes.Black;

                AddnewSistema.ToolTip = "Añadir nuevo usuario";
                editSistema.ToolTip = "Editar usuario";
                deleteSistema.ToolTip = "Borrar usuario seleccionado";


                AddnewSistema.Visibility = Visibility.Visible;
                deleteSistema.Visibility = Visibility.Collapsed;
                //ComprobarRoles();
            }
        }

        private void boton3_Sistema_Click(object sender, RoutedEventArgs e)
        {
            if (safe)
            {
                MessageBoxResult result = MessageBox.Show("Hay cambios realizado en la pestaña ¿Desea continuar?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                if (result == MessageBoxResult.OK)
                {
                    safe = false;
                    clearSistema_Click(clearSistema, RoutedEventArgs);
                    CargarRoles();

                    usuarios_menu.SelectedIndex = 2;

                    boton1_Sistema.Background = Brushes.Transparent;
                    boton1_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton2_Sistema.Background = Brushes.Transparent;
                    boton2_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton3_Sistema.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                    boton3_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                    boton4_Sistema.Background = Brushes.Transparent;
                    boton4_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton5_Sistema.Background = Brushes.Transparent;
                    boton5_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton6_Sistema.Background = Brushes.Transparent;
                    boton6_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton7_Sistema.Background = Brushes.Transparent;
                    boton7_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton8_Sistema.Background = Brushes.Transparent;
                    boton8_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton9_Sistema.Background = Brushes.Transparent;
                    boton9_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton10_Sistema.Background = Brushes.Transparent;
                    boton10_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton1_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                    boton1_Sistemat.Foreground = Brushes.Black;
                    boton2_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton2_Sistemat.Foreground = Brushes.Black;
                    boton3_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/cardclick.png", UriKind.RelativeOrAbsolute));
                    boton3_Sistemat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                    boton4_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/list.png", UriKind.RelativeOrAbsolute));
                    boton4_Sistemat.Foreground = Brushes.Black;
                    boton5_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton5_Sistemat.Foreground = Brushes.Black;


                    boton6_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                    boton6_Sistemat.Foreground = Brushes.Black;
                    boton7_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton7_Sistemat.Foreground = Brushes.Black;
                    boton8_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/folder.png", UriKind.RelativeOrAbsolute));
                    boton8_Sistemat.Foreground = Brushes.Black;
                    boton9_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton9_Sistemat.Foreground = Brushes.Black;
                    boton10_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/box.png", UriKind.RelativeOrAbsolute));
                    boton10_Sistemat.Foreground = Brushes.Black;


                    boton11_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton11_Sistemat.Foreground = Brushes.Black;

                    boton11_Sistema.Background = Brushes.Transparent;
                    boton11_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");


                    boton8_Sistema.Background = Brushes.Transparent;
                    boton8_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton9_Sistema.Background = Brushes.Transparent;
                    boton9_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");



                    filtrar_Sistema2.Items.Clear();

                    ComboBoxItem ci = new ComboBoxItem();
                    ci.Content = "Rol";
                    ci.IsSelected = true;
                    filtrar_Sistema2.Items.Add(ci);
                    ci = new ComboBoxItem();
                    ci.Content = "Permisos";
                    ci.IsSelected = false;
                    filtrar_Sistema2.Items.Add(ci);

                    AddnewSistema.ToolTip = "Añadir nuevo rol";
                    editSistema.ToolTip = "Editar rol";
                    deleteSistema.ToolTip = "Borrar rol seleccionado";

                    boton12_Sistema.Background = Brushes.Transparent;
                    boton12_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                    boton12_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton12_Sistemat.Foreground = Brushes.Black;

                    AddnewSistema.Visibility = Visibility.Visible;
                    deleteSistema.Visibility = Visibility.Collapsed;

                    ComprobarRoles();
                }
            }
            else
            {

                usuarios_menu.SelectedIndex = 2;
                CargarRoles();
                boton1_Sistema.Background = Brushes.Transparent;
                boton1_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton2_Sistema.Background = Brushes.Transparent;
                boton2_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton3_Sistema.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                boton3_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                boton4_Sistema.Background = Brushes.Transparent;
                boton4_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton5_Sistema.Background = Brushes.Transparent;
                boton5_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton6_Sistema.Background = Brushes.Transparent;
                boton6_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton7_Sistema.Background = Brushes.Transparent;
                boton7_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton8_Sistema.Background = Brushes.Transparent;
                boton8_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton9_Sistema.Background = Brushes.Transparent;
                boton9_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton10_Sistema.Background = Brushes.Transparent;
                boton10_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton1_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                boton1_Sistemat.Foreground = Brushes.Black;
                boton2_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton2_Sistemat.Foreground = Brushes.Black;
                boton3_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/cardclick.png", UriKind.RelativeOrAbsolute));
                boton3_Sistemat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                boton4_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/list.png", UriKind.RelativeOrAbsolute));
                boton4_Sistemat.Foreground = Brushes.Black;
                boton5_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton5_Sistemat.Foreground = Brushes.Black;


                boton6_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                boton6_Sistemat.Foreground = Brushes.Black;
                boton7_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton7_Sistemat.Foreground = Brushes.Black;
                boton8_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/folder.png", UriKind.RelativeOrAbsolute));
                boton8_Sistemat.Foreground = Brushes.Black;
                boton9_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton9_Sistemat.Foreground = Brushes.Black;
                boton10_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/box.png", UriKind.RelativeOrAbsolute));
                boton10_Sistemat.Foreground = Brushes.Black;

                boton11_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton11_Sistemat.Foreground = Brushes.Black;

                boton11_Sistema.Background = Brushes.Transparent;
                boton11_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                boton8_Sistema.Background = Brushes.Transparent;
                boton8_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton9_Sistema.Background = Brushes.Transparent;
                boton9_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton3_Sistema.BorderThickness = new Thickness(1);

                filtrar_Sistema2.Items.Clear();

                ComboBoxItem ci = new ComboBoxItem();
                ci.Content = "Rol";
                ci.IsSelected = true;
                filtrar_Sistema2.Items.Add(ci);
                ci = new ComboBoxItem();
                ci.Content = "Permisos";
                ci.IsSelected = false;
                filtrar_Sistema2.Items.Add(ci);

                AddnewSistema.ToolTip = "Añadir nuevo rol";
                editSistema.ToolTip = "Editar rol";
                deleteSistema.ToolTip = "Borrar rol seleccionado";
                boton12_Sistema.Background = Brushes.Transparent;
                boton12_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                boton12_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton12_Sistemat.Foreground = Brushes.Black;

                AddnewSistema.Visibility = Visibility.Visible;
                deleteSistema.Visibility = Visibility.Collapsed;

                ComprobarRoles();
            }
        }



        private void boton4_Sistema_Click(object sender, RoutedEventArgs e)
        {
            if (safe)
            {
                MessageBoxResult result = MessageBox.Show("Hay cambios realizado en la pestaña ¿Desea continuar?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                if (result == MessageBoxResult.OK)
                {
                    safe = false;
                    clearSistema_Click(clearSistema, RoutedEventArgs);
                    usuarios_menu.SelectedIndex = 3;

                    boton1_Sistema.Background = Brushes.Transparent;
                    boton1_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton2_Sistema.Background = Brushes.Transparent;
                    boton2_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton3_Sistema.Background = Brushes.Transparent;
                    boton3_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton4_Sistema.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                    boton4_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                    boton5_Sistema.Background = Brushes.Transparent;
                    boton5_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton6_Sistema.Background = Brushes.Transparent;
                    boton6_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton7_Sistema.Background = Brushes.Transparent;
                    boton7_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton8_Sistema.Background = Brushes.Transparent;
                    boton8_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton9_Sistema.Background = Brushes.Transparent;
                    boton9_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton10_Sistema.Background = Brushes.Transparent;
                    boton10_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton1_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                    boton1_Sistemat.Foreground = Brushes.Black;
                    boton2_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton2_Sistemat.Foreground = Brushes.Black;
                    boton3_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                    boton3_Sistemat.Foreground = Brushes.Black;
                    boton4_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/listclick.png", UriKind.RelativeOrAbsolute));
                    boton4_Sistemat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                    boton5_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton5_Sistemat.Foreground = Brushes.Black;



                    boton6_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                    boton6_Sistemat.Foreground = Brushes.Black;
                    boton7_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton7_Sistemat.Foreground = Brushes.Black;
                    boton8_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/folder.png", UriKind.RelativeOrAbsolute));
                    boton8_Sistemat.Foreground = Brushes.Black;
                    boton9_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton9_Sistemat.Foreground = Brushes.Black;
                    boton10_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/box.png", UriKind.RelativeOrAbsolute));
                    boton10_Sistemat.Foreground = Brushes.Black;

                    boton11_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton11_Sistemat.Foreground = Brushes.Black;

                    boton11_Sistema.Background = Brushes.Transparent;
                    boton11_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                    boton8_Sistema.Background = Brushes.Transparent;
                    boton8_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton9_Sistema.Background = Brushes.Transparent;
                    boton9_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton4_Sistema.BorderThickness = new Thickness(1);

                    boton12_Sistema.Background = Brushes.Transparent;
                    boton12_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                    boton12_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton12_Sistemat.Foreground = Brushes.Black;


                    AddnewSistema.ToolTip = "Añadir nuevo rol";
                    editSistema.ToolTip = "Editar rol";
                    deleteSistema.ToolTip = "Borrar rol seleccionado";


                    AddnewSistema.Visibility = Visibility.Visible;
                    deleteSistema.Visibility = Visibility.Collapsed;

                    ComprobarRoles();
                }
            }
            else
            {
                usuarios_menu.SelectedIndex = 3;

                boton1_Sistema.Background = Brushes.Transparent;
                boton1_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton2_Sistema.Background = Brushes.Transparent;
                boton2_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton3_Sistema.Background = Brushes.Transparent;
                boton3_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton4_Sistema.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                boton4_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                boton5_Sistema.Background = Brushes.Transparent;
                boton5_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton6_Sistema.Background = Brushes.Transparent;
                boton6_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton7_Sistema.Background = Brushes.Transparent;
                boton7_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton8_Sistema.Background = Brushes.Transparent;
                boton8_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton9_Sistema.Background = Brushes.Transparent;
                boton9_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton10_Sistema.Background = Brushes.Transparent;
                boton10_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton1_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                boton1_Sistemat.Foreground = Brushes.Black;
                boton2_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton2_Sistemat.Foreground = Brushes.Black;
                boton3_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                boton3_Sistemat.Foreground = Brushes.Black;
                boton4_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/listclick.png", UriKind.RelativeOrAbsolute));
                boton4_Sistemat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                boton5_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton5_Sistemat.Foreground = Brushes.Black;



                boton6_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                boton6_Sistemat.Foreground = Brushes.Black;
                boton7_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton7_Sistemat.Foreground = Brushes.Black;
                boton8_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/folder.png", UriKind.RelativeOrAbsolute));
                boton8_Sistemat.Foreground = Brushes.Black;
                boton9_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton9_Sistemat.Foreground = Brushes.Black;
                boton10_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/box.png", UriKind.RelativeOrAbsolute));
                boton10_Sistemat.Foreground = Brushes.Black;

                boton11_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton11_Sistemat.Foreground = Brushes.Black;

                boton11_Sistema.Background = Brushes.Transparent;
                boton11_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                boton8_Sistema.Background = Brushes.Transparent;
                boton8_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton9_Sistema.Background = Brushes.Transparent;
                boton9_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton4_Sistema.BorderThickness = new Thickness(1);


                boton12_Sistema.Background = Brushes.Transparent;
                boton12_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                boton12_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton12_Sistemat.Foreground = Brushes.Black;

                AddnewSistema.ToolTip = "Añadir nuevo rol";
                editSistema.ToolTip = "Editar rol";
                deleteSistema.ToolTip = "Borrar rol seleccionado";


                AddnewSistema.Visibility = Visibility.Visible;
                deleteSistema.Visibility = Visibility.Collapsed;

                ComprobarRoles();
            }
        }

        private void boton5_Sistema_Click(object sender, RoutedEventArgs e)
        {
            if (safe)
            {
                MessageBoxResult result = MessageBox.Show("Hay cambios realizado en la pestaña ¿Desea continuar?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                if (result == MessageBoxResult.OK)
                {
                    safe = false;
                    CargarIva();
                    clearSistema_Click(clearSistema, RoutedEventArgs);
                    usuarios_menu.SelectedIndex = 4;

                    boton1_Sistema.Background = Brushes.Transparent;
                    boton1_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton2_Sistema.Background = Brushes.Transparent;
                    boton2_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton3_Sistema.Background = Brushes.Transparent;
                    boton3_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton4_Sistema.Background = Brushes.Transparent;
                    boton4_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton5_Sistema.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                    boton5_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                    boton6_Sistema.Background = Brushes.Transparent;
                    boton6_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton7_Sistema.Background = Brushes.Transparent;
                    boton7_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton8_Sistema.Background = Brushes.Transparent;
                    boton8_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton9_Sistema.Background = Brushes.Transparent;
                    boton9_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                    boton10_Sistema.Background = Brushes.Transparent;
                    boton10_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton1_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                    boton1_Sistemat.Foreground = Brushes.Black;
                    boton2_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton2_Sistemat.Foreground = Brushes.Black;
                    boton3_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                    boton3_Sistemat.Foreground = Brushes.Black;
                    boton4_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/list.png", UriKind.RelativeOrAbsolute));
                    boton4_Sistemat.Foreground = Brushes.Black;
                    boton5_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/articleclick.png", UriKind.RelativeOrAbsolute));
                    boton5_Sistemat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);


                    boton6_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                    boton6_Sistemat.Foreground = Brushes.Black;
                    boton7_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton7_Sistemat.Foreground = Brushes.Black;
                    boton8_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/folder.png", UriKind.RelativeOrAbsolute));
                    boton8_Sistemat.Foreground = Brushes.Black;
                    boton9_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton9_Sistemat.Foreground = Brushes.Black;
                    boton10_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/box.png", UriKind.RelativeOrAbsolute));
                    boton10_Sistemat.Foreground = Brushes.Black;

                    boton11_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton11_Sistemat.Foreground = Brushes.Black;

                    boton11_Sistema.Background = Brushes.Transparent;
                    boton11_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                    boton5_Sistema.BorderThickness = new Thickness(1);

                    CargarIva();

                    //filtrar_Sistema3.Items.Clear();

                    ComboBoxItem ci = new ComboBoxItem();
                    ci.Content = "IVA";
                    ci.IsSelected = true;
                    //filtrar_Sistema3.Items.Add(ci);
                    ci = new ComboBoxItem();
                    ci.Content = "%";
                    ci.IsSelected = false;
                    //filtrar_Sistema3.Items.Add(ci);
                    boton12_Sistema.Background = Brushes.Transparent;
                    boton12_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                    boton12_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton12_Sistemat.Foreground = Brushes.Black;

                    AddnewSistema.ToolTip = "Añadir nuevo IVA";
                    editSistema.ToolTip = "Editar IVA";
                    deleteSistema.ToolTip = "Borrar IVA seleccionado";


                    AddnewSistema.Visibility = Visibility.Visible;
                    deleteSistema.Visibility = Visibility.Collapsed;

                    ComprobarRoles();
                }
            }
            else
            {
                usuarios_menu.SelectedIndex = 4;

                CargarIva();
                boton1_Sistema.Background = Brushes.Transparent;
                boton1_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton2_Sistema.Background = Brushes.Transparent;
                boton2_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton3_Sistema.Background = Brushes.Transparent;
                boton3_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton4_Sistema.Background = Brushes.Transparent;
                boton4_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton5_Sistema.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                boton5_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                boton6_Sistema.Background = Brushes.Transparent;
                boton6_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton7_Sistema.Background = Brushes.Transparent;
                boton7_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton8_Sistema.Background = Brushes.Transparent;
                boton8_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton9_Sistema.Background = Brushes.Transparent;
                boton9_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                boton10_Sistema.Background = Brushes.Transparent;
                boton10_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton1_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                boton1_Sistemat.Foreground = Brushes.Black;
                boton2_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton2_Sistemat.Foreground = Brushes.Black;
                boton3_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                boton3_Sistemat.Foreground = Brushes.Black;
                boton4_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/list.png", UriKind.RelativeOrAbsolute));
                boton4_Sistemat.Foreground = Brushes.Black;
                boton5_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/articleclick.png", UriKind.RelativeOrAbsolute));
                boton5_Sistemat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);


                boton6_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                boton6_Sistemat.Foreground = Brushes.Black;
                boton7_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton7_Sistemat.Foreground = Brushes.Black;
                boton8_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/folder.png", UriKind.RelativeOrAbsolute));
                boton8_Sistemat.Foreground = Brushes.Black;
                boton9_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton9_Sistemat.Foreground = Brushes.Black;
                boton10_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/box.png", UriKind.RelativeOrAbsolute));
                boton10_Sistemat.Foreground = Brushes.Black;

                boton11_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton11_Sistemat.Foreground = Brushes.Black;

                boton11_Sistema.Background = Brushes.Transparent;
                boton11_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                boton5_Sistema.BorderThickness = new Thickness(1);

                CargarIva();

                //filtrar_Sistema3.Items.Clear();

                ComboBoxItem ci = new ComboBoxItem();
                ci.Content = "IVA";
                ci.IsSelected = true;
                //filtrar_Sistema3.Items.Add(ci);
                ci = new ComboBoxItem();
                ci.Content = "%";
                ci.IsSelected = false;
                //filtrar_Sistema3.Items.Add(ci);
                boton12_Sistema.Background = Brushes.Transparent;
                boton12_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                boton12_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton12_Sistemat.Foreground = Brushes.Black;

                AddnewSistema.ToolTip = "Añadir nuevo IVA";
                editSistema.ToolTip = "Editar IVA";
                deleteSistema.ToolTip = "Borrar IVA seleccionado";


                AddnewSistema.Visibility = Visibility.Visible;
                deleteSistema.Visibility = Visibility.Collapsed;

                ComprobarRoles();
            }
        }



        private void boton6_Sistema_Click(object sender, RoutedEventArgs e)
        {
            if (safe)
            {
                MessageBoxResult result = MessageBox.Show("Hay cambios realizado en la pestaña ¿Desea continuar?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                if (result == MessageBoxResult.OK)
                {
                    safe = false;
                    clearSistema_Click(clearSistema, RoutedEventArgs);
                    usuarios_menu.SelectedIndex = 5;

                    boton1_Sistema.Background = Brushes.Transparent;
                    boton1_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton2_Sistema.Background = Brushes.Transparent;
                    boton2_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton3_Sistema.Background = Brushes.Transparent;
                    boton3_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton4_Sistema.Background = Brushes.Transparent;
                    boton4_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton5_Sistema.Background = Brushes.Transparent;
                    boton5_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton6_Sistema.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                    boton6_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                    boton7_Sistema.Background = Brushes.Transparent;
                    boton7_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton8_Sistema.Background = Brushes.Transparent;
                    boton8_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton9_Sistema.Background = Brushes.Transparent;
                    boton9_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                    boton10_Sistema.Background = Brushes.Transparent;
                    boton10_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton11_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton11_Sistemat.Foreground = Brushes.Black;

                    boton11_Sistema.Background = Brushes.Transparent;
                    boton11_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                    boton1_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                    boton1_Sistemat.Foreground = Brushes.Black;
                    boton2_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton2_Sistemat.Foreground = Brushes.Black;
                    boton3_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                    boton3_Sistemat.Foreground = Brushes.Black;
                    boton4_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/list.png", UriKind.RelativeOrAbsolute));
                    boton4_Sistemat.Foreground = Brushes.Black;
                    boton5_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton5_Sistemat.Foreground = Brushes.Black;
                    boton6_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/articleclick.png", UriKind.RelativeOrAbsolute));

                    boton6_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/libraryclick.png", UriKind.RelativeOrAbsolute));
                    boton6_Sistemat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                    boton7_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton7_Sistemat.Foreground = Brushes.Black;
                    boton8_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/folder.png", UriKind.RelativeOrAbsolute));
                    boton8_Sistemat.Foreground = Brushes.Black;
                    boton9_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton9_Sistemat.Foreground = Brushes.Black;
                    boton10_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/box.png", UriKind.RelativeOrAbsolute));
                    boton10_Sistemat.Foreground = Brushes.Black;


                    boton6_Sistema.BorderThickness = new Thickness(1);

                    boton12_Sistema.Background = Brushes.Transparent;
                    boton12_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                    boton12_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton12_Sistemat.Foreground = Brushes.Black;

                    AddnewSistema.ToolTip = "Añadir nuevo IVA";
                    editSistema.ToolTip = "Editar IVA";
                    deleteSistema.ToolTip = "Borrar IVA seleccionado";


                    AddnewSistema.Visibility = Visibility.Visible;
                    deleteSistema.Visibility = Visibility.Collapsed;

                    ComprobarRoles();
                }
            }
            else
            {
                usuarios_menu.SelectedIndex = 5;

                boton1_Sistema.Background = Brushes.Transparent;
                boton1_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton2_Sistema.Background = Brushes.Transparent;
                boton2_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton3_Sistema.Background = Brushes.Transparent;
                boton3_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton4_Sistema.Background = Brushes.Transparent;
                boton4_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton5_Sistema.Background = Brushes.Transparent;
                boton5_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton6_Sistema.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                boton6_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                boton7_Sistema.Background = Brushes.Transparent;
                boton7_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton8_Sistema.Background = Brushes.Transparent;
                boton8_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton9_Sistema.Background = Brushes.Transparent;
                boton9_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                boton10_Sistema.Background = Brushes.Transparent;
                boton10_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton1_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                boton1_Sistemat.Foreground = Brushes.Black;
                boton2_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton2_Sistemat.Foreground = Brushes.Black;
                boton3_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                boton3_Sistemat.Foreground = Brushes.Black;
                boton4_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/list.png", UriKind.RelativeOrAbsolute));
                boton4_Sistemat.Foreground = Brushes.Black;
                boton5_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton5_Sistemat.Foreground = Brushes.Black;
                boton6_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/articleclick.png", UriKind.RelativeOrAbsolute));

                boton6_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/libraryclick.png", UriKind.RelativeOrAbsolute));
                boton6_Sistemat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                boton7_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton7_Sistemat.Foreground = Brushes.Black;
                boton8_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/folder.png", UriKind.RelativeOrAbsolute));
                boton8_Sistemat.Foreground = Brushes.Black;
                boton9_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton9_Sistemat.Foreground = Brushes.Black;
                boton10_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/box.png", UriKind.RelativeOrAbsolute));
                boton10_Sistemat.Foreground = Brushes.Black;

                boton11_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton11_Sistemat.Foreground = Brushes.Black;

                boton11_Sistema.Background = Brushes.Transparent;
                boton11_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton6_Sistema.BorderThickness = new Thickness(1);

                boton12_Sistema.Background = Brushes.Transparent;
                boton12_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                boton12_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton12_Sistemat.Foreground = Brushes.Black;

                AddnewSistema.ToolTip = "Añadir nuevo IVA";
                editSistema.ToolTip = "Editar IVA";
                deleteSistema.ToolTip = "Borrar IVA seleccionado";


                AddnewSistema.Visibility = Visibility.Visible;
                deleteSistema.Visibility = Visibility.Collapsed;

                ComprobarRoles();
            }
        }

        private void boton7_Sistema_Click(object sender, RoutedEventArgs e)
        {
            if (safe)
            {
                MessageBoxResult result = MessageBox.Show("Hay cambios realizado en la pestaña ¿Desea continuar?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                if (result == MessageBoxResult.OK)
                {
                   
                    safe = false;
                    clearSistema_Click(clearSistema, RoutedEventArgs);
                    usuarios_menu.SelectedIndex = 6;

                    boton1_Sistema.Background = Brushes.Transparent;
                    boton1_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton2_Sistema.Background = Brushes.Transparent;
                    boton2_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton3_Sistema.Background = Brushes.Transparent;
                    boton3_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton4_Sistema.Background = Brushes.Transparent;
                    boton4_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton5_Sistema.Background = Brushes.Transparent;
                    boton5_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton6_Sistema.Background = Brushes.Transparent;
                    boton6_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton7_Sistema.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                    boton7_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                    boton8_Sistema.Background = Brushes.Transparent;
                    boton8_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton9_Sistema.Background = Brushes.Transparent;
                    boton9_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                    boton10_Sistema.Background = Brushes.Transparent;
                    boton10_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton1_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                    boton1_Sistemat.Foreground = Brushes.Black;
                    boton2_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton2_Sistemat.Foreground = Brushes.Black;
                    boton3_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                    boton3_Sistemat.Foreground = Brushes.Black;
                    boton4_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/list.png", UriKind.RelativeOrAbsolute));
                    boton4_Sistemat.Foreground = Brushes.Black;
                    boton5_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton5_Sistemat.Foreground = Brushes.Black;


                    boton6_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                    boton6_Sistemat.Foreground = Brushes.Black;
                    boton7_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/articleclick.png", UriKind.RelativeOrAbsolute));
                    boton7_Sistemat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                    boton8_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/folder.png", UriKind.RelativeOrAbsolute));
                    boton8_Sistemat.Foreground = Brushes.Black;
                    boton9_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton9_Sistemat.Foreground = Brushes.Black;
                    boton10_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/box.png", UriKind.RelativeOrAbsolute));
                    boton10_Sistemat.Foreground = Brushes.Black;

                    boton11_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton11_Sistemat.Foreground = Brushes.Black;

                    boton11_Sistema.Background = Brushes.Transparent;
                    boton11_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                    boton7_Sistema.BorderThickness = new Thickness(1);
                    boton12_Sistema.Background = Brushes.Transparent;
                    boton12_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                    boton12_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton12_Sistemat.Foreground = Brushes.Black;
                    CargarContratos();

                    AddnewSistema.ToolTip = "Añadir nuevo contrato";
                    editSistema.ToolTip = "Editar contrato";
                    deleteSistema.ToolTip = "Borrar contrato seleccionado";
                    AddnewSistema.Visibility = Visibility.Visible;
                    deleteSistema.Visibility = Visibility.Collapsed;
                    Iluminacion_Potencia.IsEnabled = true;

                    ComprobarRoles();
                }
            }
            else
            {
                usuarios_menu.SelectedIndex = 6;

                boton1_Sistema.Background = Brushes.Transparent;
                boton1_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton2_Sistema.Background = Brushes.Transparent;
                boton2_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton3_Sistema.Background = Brushes.Transparent;
                boton3_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton4_Sistema.Background = Brushes.Transparent;
                boton4_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton5_Sistema.Background = Brushes.Transparent;
                boton5_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton6_Sistema.Background = Brushes.Transparent;
                boton6_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton7_Sistema.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                boton7_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                boton8_Sistema.Background = Brushes.Transparent;
                boton8_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton9_Sistema.Background = Brushes.Transparent;
                boton9_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                boton10_Sistema.Background = Brushes.Transparent;
                boton10_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton1_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                boton1_Sistemat.Foreground = Brushes.Black;
                boton2_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton2_Sistemat.Foreground = Brushes.Black;
                boton3_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                boton3_Sistemat.Foreground = Brushes.Black;
                boton4_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/list.png", UriKind.RelativeOrAbsolute));
                boton4_Sistemat.Foreground = Brushes.Black;
                boton5_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton5_Sistemat.Foreground = Brushes.Black;


                boton6_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                boton6_Sistemat.Foreground = Brushes.Black;
                boton7_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/articleclick.png", UriKind.RelativeOrAbsolute));
                boton7_Sistemat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                boton8_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/folder.png", UriKind.RelativeOrAbsolute));
                boton8_Sistemat.Foreground = Brushes.Black;
                boton9_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton9_Sistemat.Foreground = Brushes.Black;
                boton10_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/box.png", UriKind.RelativeOrAbsolute));
                boton10_Sistemat.Foreground = Brushes.Black;

                boton11_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton11_Sistemat.Foreground = Brushes.Black;

                boton11_Sistema.Background = Brushes.Transparent;
                boton11_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                boton7_Sistema.BorderThickness = new Thickness(1);
                boton12_Sistema.Background = Brushes.Transparent;
                boton12_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                boton12_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton12_Sistemat.Foreground = Brushes.Black;
                CargarContratos();

                AddnewSistema.ToolTip = "Añadir nuevo contrato";
                editSistema.ToolTip = "Editar contrato";
                deleteSistema.ToolTip = "Borrar contrato seleccionado";
                AddnewSistema.Visibility = Visibility.Visible;
                deleteSistema.Visibility = Visibility.Collapsed;
                Iluminacion_Potencia.IsEnabled = true;

                ComprobarRoles();
                safe = false;
            }
        }



        private void boton11_Sistema_Click(object sender, RoutedEventArgs e)
        {
            if (safe)
            {
                MessageBoxResult result = MessageBox.Show("Hay cambios realizado en la pestaña ¿Desea continuar?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                if (result == MessageBoxResult.OK)
                {
                    safe = false;
                    clearSistema_Click(clearSistema, RoutedEventArgs);
                    usuarios_menu.SelectedIndex = 9;

                    boton1_Sistema.Background = Brushes.Transparent;
                    boton1_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton2_Sistema.Background = Brushes.Transparent;
                    boton2_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton3_Sistema.Background = Brushes.Transparent;
                    boton3_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton4_Sistema.Background = Brushes.Transparent;
                    boton4_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton5_Sistema.Background = Brushes.Transparent;
                    boton5_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton6_Sistema.Background = Brushes.Transparent;
                    boton6_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton11_Sistema.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                    boton11_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                    boton8_Sistema.Background = Brushes.Transparent;
                    boton8_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton9_Sistema.Background = Brushes.Transparent;
                    boton9_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                    boton10_Sistema.Background = Brushes.Transparent;
                    boton10_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                    boton7_Sistema.Background = Brushes.Transparent;
                    boton7_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton1_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                    boton1_Sistemat.Foreground = Brushes.Black;
                    boton2_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton2_Sistemat.Foreground = Brushes.Black;
                    boton3_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                    boton3_Sistemat.Foreground = Brushes.Black;
                    boton4_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/list.png", UriKind.RelativeOrAbsolute));
                    boton4_Sistemat.Foreground = Brushes.Black;
                    boton5_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton5_Sistemat.Foreground = Brushes.Black;


                    boton6_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                    boton6_Sistemat.Foreground = Brushes.Black;
                    boton11_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/articleclick.png", UriKind.RelativeOrAbsolute));
                    boton11_Sistemat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                    boton8_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/folder.png", UriKind.RelativeOrAbsolute));
                    boton8_Sistemat.Foreground = Brushes.Black;
                    boton9_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton9_Sistemat.Foreground = Brushes.Black;
                    boton10_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/box.png", UriKind.RelativeOrAbsolute));
                    boton10_Sistemat.Foreground = Brushes.Black;
                    boton7_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton7_Sistemat.Foreground = Brushes.Black;

                    boton11_Sistema.BorderThickness = new Thickness(1);

                    CargarVehiculos();

                    AddnewSistema.Visibility = Visibility.Visible;

                    ComprobarRoles(); AddnewSistema.ToolTip = "Añadir nuevo tipo de vehiculo";
                    editSistema.ToolTip = "Editar vehiculo";
                    deleteSistema.ToolTip = "Borrar tipo de vehiculo seleccionado";

                    deleteSistema.Visibility = Visibility.Collapsed;
                    editSistema.Visibility = Visibility.Collapsed;
                }
            }
            else
            {
                clearSistema_Click(clearSistema, RoutedEventArgs);
                usuarios_menu.SelectedIndex = 7;

                boton1_Sistema.Background = Brushes.Transparent;
                boton1_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton2_Sistema.Background = Brushes.Transparent;
                boton2_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton3_Sistema.Background = Brushes.Transparent;
                boton3_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton4_Sistema.Background = Brushes.Transparent;
                boton4_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton5_Sistema.Background = Brushes.Transparent;
                boton5_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton6_Sistema.Background = Brushes.Transparent;
                boton6_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton11_Sistema.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                boton11_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                boton8_Sistema.Background = Brushes.Transparent;
                boton8_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton9_Sistema.Background = Brushes.Transparent;
                boton9_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                boton10_Sistema.Background = Brushes.Transparent;
                boton10_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                boton7_Sistema.Background = Brushes.Transparent;
                boton7_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton1_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                boton1_Sistemat.Foreground = Brushes.Black;
                boton2_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton2_Sistemat.Foreground = Brushes.Black;
                boton3_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                boton3_Sistemat.Foreground = Brushes.Black;
                boton4_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/list.png", UriKind.RelativeOrAbsolute));
                boton4_Sistemat.Foreground = Brushes.Black;
                boton5_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton5_Sistemat.Foreground = Brushes.Black;


                boton6_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                boton6_Sistemat.Foreground = Brushes.Black;
                boton11_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/articleclick.png", UriKind.RelativeOrAbsolute));
                boton11_Sistemat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                boton8_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/folder.png", UriKind.RelativeOrAbsolute));
                boton8_Sistemat.Foreground = Brushes.Black;
                boton9_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton9_Sistemat.Foreground = Brushes.Black;
                boton10_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/box.png", UriKind.RelativeOrAbsolute));
                boton10_Sistemat.Foreground = Brushes.Black;
                boton7_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton7_Sistemat.Foreground = Brushes.Black;

                boton11_Sistema.BorderThickness = new Thickness(1);

                CargarVehiculos();


                AddnewSistema.Visibility = Visibility.Visible;

                ComprobarRoles(); AddnewSistema.ToolTip = "Añadir nuevo tipo de vehiculo";
                editSistema.ToolTip = "Editar vehiculo";
                deleteSistema.ToolTip = "Borrar tipo de vehiculo seleccionado";

                deleteSistema.Visibility = Visibility.Collapsed;
                editSistema.Visibility = Visibility.Collapsed;
            }
        }



        private void boton8_Sistema_Click(object sender, RoutedEventArgs e)
        {
            if (safe)
            {
                MessageBoxResult result = MessageBox.Show("Hay cambios realizado en la pestaña ¿Desea continuar?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                if (result == MessageBoxResult.OK)
                {
                    safe = false;
                    clearSistema_Click(clearSistema, RoutedEventArgs);
                    usuarios_menu.SelectedIndex = 8;

                    boton1_Sistema.Background = Brushes.Transparent;
                    boton1_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton2_Sistema.Background = Brushes.Transparent;
                    boton2_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton3_Sistema.Background = Brushes.Transparent;
                    boton3_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton4_Sistema.Background = Brushes.Transparent;
                    boton4_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton5_Sistema.Background = Brushes.Transparent;
                    boton5_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton6_Sistema.Background = Brushes.Transparent;
                    boton6_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton7_Sistema.Background = Brushes.Transparent;
                    boton7_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton8_Sistema.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                    boton8_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                    boton9_Sistema.Background = Brushes.Transparent;
                    boton9_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                    boton10_Sistema.Background = Brushes.Transparent;
                    boton10_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton1_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                    boton1_Sistemat.Foreground = Brushes.Black;
                    boton2_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton2_Sistemat.Foreground = Brushes.Black;
                    boton3_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                    boton3_Sistemat.Foreground = Brushes.Black;
                    boton4_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/list.png", UriKind.RelativeOrAbsolute));
                    boton4_Sistemat.Foreground = Brushes.Black;
                    boton5_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton5_Sistemat.Foreground = Brushes.Black;

                    boton6_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                    boton6_Sistemat.Foreground = Brushes.Black;
                    boton7_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton7_Sistemat.Foreground = Brushes.Black;
                    boton8_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/folderclick.png", UriKind.RelativeOrAbsolute));
                    boton8_Sistemat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                    boton9_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton9_Sistemat.Foreground = Brushes.Black;
                    boton10_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/box.png", UriKind.RelativeOrAbsolute));
                    boton10_Sistemat.Foreground = Brushes.Black;

                    boton11_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton11_Sistemat.Foreground = Brushes.Black;

                    boton11_Sistema.Background = Brushes.Transparent;
                    boton11_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                    boton8_Sistema.BorderThickness = new Thickness(1);
                    boton12_Sistema.Background = Brushes.Transparent;
                    boton12_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                    boton12_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton12_Sistemat.Foreground = Brushes.Black;
                    ComprobarRoles();
                }
            }
            else
            {
                usuarios_menu.SelectedIndex = 8;

                boton1_Sistema.Background = Brushes.Transparent;
                boton1_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton2_Sistema.Background = Brushes.Transparent;
                boton2_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton3_Sistema.Background = Brushes.Transparent;
                boton3_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton4_Sistema.Background = Brushes.Transparent;
                boton4_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton5_Sistema.Background = Brushes.Transparent;
                boton5_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton6_Sistema.Background = Brushes.Transparent;
                boton6_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton7_Sistema.Background = Brushes.Transparent;
                boton7_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton8_Sistema.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                boton8_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                boton9_Sistema.Background = Brushes.Transparent;
                boton9_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                boton10_Sistema.Background = Brushes.Transparent;
                boton10_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton1_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                boton1_Sistemat.Foreground = Brushes.Black;
                boton2_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton2_Sistemat.Foreground = Brushes.Black;
                boton3_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                boton3_Sistemat.Foreground = Brushes.Black;
                boton4_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/list.png", UriKind.RelativeOrAbsolute));
                boton4_Sistemat.Foreground = Brushes.Black;
                boton5_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton5_Sistemat.Foreground = Brushes.Black;

                boton6_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                boton6_Sistemat.Foreground = Brushes.Black;
                boton7_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton7_Sistemat.Foreground = Brushes.Black;
                boton8_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/folderclick.png", UriKind.RelativeOrAbsolute));
                boton8_Sistemat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                boton9_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton9_Sistemat.Foreground = Brushes.Black;
                boton10_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/box.png", UriKind.RelativeOrAbsolute));
                boton10_Sistemat.Foreground = Brushes.Black;

                boton11_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton11_Sistemat.Foreground = Brushes.Black;

                boton11_Sistema.Background = Brushes.Transparent;
                boton11_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                boton8_Sistema.BorderThickness = new Thickness(1);
                boton12_Sistema.Background = Brushes.Transparent;
                boton12_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                boton12_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton12_Sistemat.Foreground = Brushes.Black;
                ComprobarRoles();
            }
        }

        private void boton9_Sistema_Click(object sender, RoutedEventArgs e)
        {
            if (safe)
            {
                MessageBoxResult result = MessageBox.Show("Hay cambios realizado en la pestaña ¿Desea continuar?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                if (result == MessageBoxResult.OK)
                {
                    safe = false;
                    clearSistema_Click(clearSistema, RoutedEventArgs);
                    clearSistema_Click(clearSistema, RoutedEventArgs);
                    usuarios_menu.SelectedIndex = 9;

                    boton1_Sistema.Background = Brushes.Transparent;
                    boton1_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton2_Sistema.Background = Brushes.Transparent;
                    boton2_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton3_Sistema.Background = Brushes.Transparent;
                    boton3_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton4_Sistema.Background = Brushes.Transparent;
                    boton4_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton5_Sistema.Background = Brushes.Transparent;
                    boton5_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton6_Sistema.Background = Brushes.Transparent;
                    boton6_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton7_Sistema.Background = Brushes.Transparent;
                    boton7_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton8_Sistema.Background = Brushes.Transparent;
                    boton8_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton9_Sistema.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                    boton9_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                    boton10_Sistema.Background = Brushes.Transparent;
                    boton10_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton1_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                    boton1_Sistemat.Foreground = Brushes.Black;
                    boton2_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton2_Sistemat.Foreground = Brushes.Black;
                    boton3_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                    boton3_Sistemat.Foreground = Brushes.Black;
                    boton4_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/list.png", UriKind.RelativeOrAbsolute));
                    boton4_Sistemat.Foreground = Brushes.Black;
                    boton5_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton5_Sistemat.Foreground = Brushes.Black;


                    boton6_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                    boton6_Sistemat.Foreground = Brushes.Black;
                    boton7_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton7_Sistemat.Foreground = Brushes.Black;
                    boton8_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/folder.png", UriKind.RelativeOrAbsolute));
                    boton9_Sistemat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                    boton9_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/articleclick.png", UriKind.RelativeOrAbsolute));
                    boton8_Sistemat.Foreground = Brushes.Black;
                    boton10_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/box.png", UriKind.RelativeOrAbsolute));
                    boton10_Sistemat.Foreground = Brushes.Black;

                    boton11_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton11_Sistemat.Foreground = Brushes.Black;

                    boton11_Sistema.Background = Brushes.Transparent;
                    boton11_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                    boton9_Sistema.BorderThickness = new Thickness(1);
                    boton12_Sistema.Background = Brushes.Transparent;
                    boton12_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                    boton12_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton12_Sistemat.Foreground = Brushes.Black;
                    ComprobarRoles();
                }
            }
            else
            {
                usuarios_menu.SelectedIndex = 9;

                boton1_Sistema.Background = Brushes.Transparent;
                boton1_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton2_Sistema.Background = Brushes.Transparent;
                boton2_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton3_Sistema.Background = Brushes.Transparent;
                boton3_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton4_Sistema.Background = Brushes.Transparent;
                boton4_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton5_Sistema.Background = Brushes.Transparent;
                boton5_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton6_Sistema.Background = Brushes.Transparent;
                boton6_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton7_Sistema.Background = Brushes.Transparent;
                boton7_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton8_Sistema.Background = Brushes.Transparent;
                boton8_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton9_Sistema.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                boton9_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                boton10_Sistema.Background = Brushes.Transparent;
                boton10_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton1_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                boton1_Sistemat.Foreground = Brushes.Black;
                boton2_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton2_Sistemat.Foreground = Brushes.Black;
                boton3_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                boton3_Sistemat.Foreground = Brushes.Black;
                boton4_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/list.png", UriKind.RelativeOrAbsolute));
                boton4_Sistemat.Foreground = Brushes.Black;
                boton5_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton5_Sistemat.Foreground = Brushes.Black;


                boton6_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                boton6_Sistemat.Foreground = Brushes.Black;
                boton7_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton7_Sistemat.Foreground = Brushes.Black;
                boton8_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/folder.png", UriKind.RelativeOrAbsolute));
                boton9_Sistemat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                boton9_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/articleclick.png", UriKind.RelativeOrAbsolute));
                boton8_Sistemat.Foreground = Brushes.Black;
                boton10_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/box.png", UriKind.RelativeOrAbsolute));
                boton10_Sistemat.Foreground = Brushes.Black;

                boton11_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton11_Sistemat.Foreground = Brushes.Black;

                boton11_Sistema.Background = Brushes.Transparent;
                boton11_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                boton9_Sistema.BorderThickness = new Thickness(1);
                boton12_Sistema.Background = Brushes.Transparent;
                boton12_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                boton12_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton12_Sistemat.Foreground = Brushes.Black;
                ComprobarRoles();
            }
        }

        private void boton10_Sistema_Click(object sender, RoutedEventArgs e)
        {
            if (safe)
            {
                MessageBoxResult result = MessageBox.Show("Hay cambios realizado en la pestaña ¿Desea continuar?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                if (result == MessageBoxResult.OK)
                {
                    safe = false;
                    clearSistema_Click(clearSistema, RoutedEventArgs);
                    usuarios_menu.SelectedIndex = 10;

                    boton1_Sistema.Background = Brushes.Transparent;
                    boton1_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton2_Sistema.Background = Brushes.Transparent;
                    boton2_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton3_Sistema.Background = Brushes.Transparent;
                    boton3_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton4_Sistema.Background = Brushes.Transparent;
                    boton4_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton5_Sistema.Background = Brushes.Transparent;
                    boton5_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton6_Sistema.Background = Brushes.Transparent;
                    boton6_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton7_Sistema.Background = Brushes.Transparent;
                    boton7_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton8_Sistema.Background = Brushes.Transparent;
                    boton8_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton10_Sistema.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                    boton10_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                    boton9_Sistema.Background = Brushes.Transparent;
                    boton9_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton1_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                    boton1_Sistemat.Foreground = Brushes.Black;
                    boton2_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton2_Sistemat.Foreground = Brushes.Black;
                    boton3_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                    boton3_Sistemat.Foreground = Brushes.Black;
                    boton4_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/list.png", UriKind.RelativeOrAbsolute));
                    boton4_Sistemat.Foreground = Brushes.Black;
                    boton5_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton5_Sistemat.Foreground = Brushes.Black;


                    boton6_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                    boton6_Sistemat.Foreground = Brushes.Black;
                    boton7_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton7_Sistemat.Foreground = Brushes.Black;
                    boton8_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/folder.png", UriKind.RelativeOrAbsolute));
                    boton10_Sistemat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                    boton9_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton8_Sistemat.Foreground = Brushes.Black;
                    boton10_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/boxclick.png", UriKind.RelativeOrAbsolute));
                    boton9_Sistemat.Foreground = Brushes.Black;

                    boton11_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton11_Sistemat.Foreground = Brushes.Black;

                    boton11_Sistema.Background = Brushes.Transparent;
                    boton11_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                    boton10_Sistema.BorderThickness = new Thickness(1);
                    boton12_Sistema.Background = Brushes.Transparent;
                    boton12_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                    boton12_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton12_Sistemat.Foreground = Brushes.Black;
                    change_Sistema.IsEnabled = false;

                    AddnewSistema.Visibility = Visibility.Collapsed;
                    deleteSistema.Visibility = Visibility.Collapsed;
                }
            }
            else
            {
                usuarios_menu.SelectedIndex = 10;

                boton1_Sistema.Background = Brushes.Transparent;
                boton1_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton2_Sistema.Background = Brushes.Transparent;
                boton2_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton3_Sistema.Background = Brushes.Transparent;
                boton3_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton4_Sistema.Background = Brushes.Transparent;
                boton4_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton5_Sistema.Background = Brushes.Transparent;
                boton5_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton6_Sistema.Background = Brushes.Transparent;
                boton6_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton7_Sistema.Background = Brushes.Transparent;
                boton7_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton8_Sistema.Background = Brushes.Transparent;
                boton8_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton10_Sistema.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                boton10_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                boton9_Sistema.Background = Brushes.Transparent;
                boton9_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton1_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                boton1_Sistemat.Foreground = Brushes.Black;
                boton2_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton2_Sistemat.Foreground = Brushes.Black;
                boton3_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                boton3_Sistemat.Foreground = Brushes.Black;
                boton4_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/list.png", UriKind.RelativeOrAbsolute));
                boton4_Sistemat.Foreground = Brushes.Black;
                boton5_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton5_Sistemat.Foreground = Brushes.Black;


                boton6_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                boton6_Sistemat.Foreground = Brushes.Black;
                boton7_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton7_Sistemat.Foreground = Brushes.Black;
                boton8_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/folder.png", UriKind.RelativeOrAbsolute));
                boton10_Sistemat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                boton9_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton8_Sistemat.Foreground = Brushes.Black;
                boton10_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/boxclick.png", UriKind.RelativeOrAbsolute));
                boton9_Sistemat.Foreground = Brushes.Black;

                boton11_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton11_Sistemat.Foreground = Brushes.Black;

                boton11_Sistema.Background = Brushes.Transparent;
                boton11_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                boton10_Sistema.BorderThickness = new Thickness(1);
                boton12_Sistema.Background = Brushes.Transparent;
                boton12_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                boton12_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton12_Sistemat.Foreground = Brushes.Black;
                change_Sistema.IsEnabled = false;

                AddnewSistema.Visibility = Visibility.Collapsed;
                deleteSistema.Visibility = Visibility.Collapsed;
            }
        }

        private void boton12_Sistema_Click(object sender, RoutedEventArgs e)
        {
            if (safe)
            {
                MessageBoxResult result = MessageBox.Show("Hay cambios realizado en la pestaña ¿Desea continuar?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                if (result == MessageBoxResult.OK)
                {
                    safe = false;
                    clearSistema_Click(clearSistema, RoutedEventArgs);
                    usuarios_menu.SelectedIndex = 11;

                    boton1_Sistema.Background = Brushes.Transparent;
                    boton1_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton2_Sistema.Background = Brushes.Transparent;
                    boton2_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton3_Sistema.Background = Brushes.Transparent;
                    boton3_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton4_Sistema.Background = Brushes.Transparent;
                    boton4_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton5_Sistema.Background = Brushes.Transparent;
                    boton5_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton6_Sistema.Background = Brushes.Transparent;
                    boton6_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton7_Sistema.Background = Brushes.Transparent;
                    boton7_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton8_Sistema.Background = Brushes.Transparent;
                    boton8_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");


                    boton10_Sistema.Background = Brushes.Transparent;
                    boton10_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton12_Sistema.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                    boton12_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                    boton9_Sistema.Background = Brushes.Transparent;
                    boton9_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton1_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                    boton1_Sistemat.Foreground = Brushes.Black;
                    boton2_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton2_Sistemat.Foreground = Brushes.Black;
                    boton3_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                    boton3_Sistemat.Foreground = Brushes.Black;
                    boton4_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/list.png", UriKind.RelativeOrAbsolute));
                    boton4_Sistemat.Foreground = Brushes.Black;
                    boton5_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton5_Sistemat.Foreground = Brushes.Black;


                    boton6_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                    boton6_Sistemat.Foreground = Brushes.Black;
                    boton7_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton7_Sistemat.Foreground = Brushes.Black;
                    boton8_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/folder.png", UriKind.RelativeOrAbsolute));

                    boton9_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton8_Sistemat.Foreground = Brushes.Black;
                    boton10_Sistemat.Foreground = Brushes.Black;
                    boton12_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/articleclick.png", UriKind.RelativeOrAbsolute));
                    boton12_Sistemat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                    boton10_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/box.png", UriKind.RelativeOrAbsolute));
                    boton9_Sistemat.Foreground = Brushes.Black;

                    boton11_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton11_Sistemat.Foreground = Brushes.Black;

                    boton11_Sistema.Background = Brushes.Transparent;
                    boton11_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                    boton12_Sistema.BorderThickness = new Thickness(1);

                    change_Sistema.IsEnabled = false;

                    AddnewSistema.Visibility = Visibility.Collapsed;
                    deleteSistema.Visibility = Visibility.Collapsed;
                }
            }
            else
            {
                usuarios_menu.SelectedIndex = 11;

                boton1_Sistema.Background = Brushes.Transparent;
                boton1_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton2_Sistema.Background = Brushes.Transparent;
                boton2_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton3_Sistema.Background = Brushes.Transparent;
                boton3_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton4_Sistema.Background = Brushes.Transparent;
                boton4_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton5_Sistema.Background = Brushes.Transparent;
                boton5_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton6_Sistema.Background = Brushes.Transparent;
                boton6_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton7_Sistema.Background = Brushes.Transparent;
                boton7_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton8_Sistema.Background = Brushes.Transparent;
                boton8_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                boton10_Sistema.Background = Brushes.Transparent;
                boton10_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton12_Sistema.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                boton12_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                boton10_Sistema.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                boton10_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                boton9_Sistema.Background = Brushes.Transparent;
                boton9_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton1_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                boton1_Sistemat.Foreground = Brushes.Black;
                boton2_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton2_Sistemat.Foreground = Brushes.Black;
                boton3_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                boton3_Sistemat.Foreground = Brushes.Black;
                boton4_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/list.png", UriKind.RelativeOrAbsolute));
                boton4_Sistemat.Foreground = Brushes.Black;
                boton5_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton5_Sistemat.Foreground = Brushes.Black;


                boton6_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/library.png", UriKind.RelativeOrAbsolute));
                boton6_Sistemat.Foreground = Brushes.Black;
                boton7_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton7_Sistemat.Foreground = Brushes.Black;
                boton8_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/folder.png", UriKind.RelativeOrAbsolute));
                boton10_Sistemat.Foreground = Brushes.Black;
                boton12_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/articleclick.png", UriKind.RelativeOrAbsolute));
                boton12_Sistemat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                boton10_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/box.png", UriKind.RelativeOrAbsolute));
                boton9_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton8_Sistemat.Foreground = Brushes.Black;

                boton9_Sistemat.Foreground = Brushes.Black;

                boton11_Sistemai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton11_Sistemat.Foreground = Brushes.Black;

                boton11_Sistema.Background = Brushes.Transparent;
                boton11_Sistema.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                boton12_Sistema.BorderThickness = new Thickness(1);

                change_Sistema.IsEnabled = false;

                AddnewSistema.Visibility = Visibility.Collapsed;
                deleteSistema.Visibility = Visibility.Collapsed;
            }
        }
        //BOTONES HERRAMIENTAS

        private void deleteSistema_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (usuarios_menu.SelectedIndex == 0)
                {
                    if (Usuarios.SelectedItem != null)
                    {
                        MessageBoxResult result = MessageBox.Show("¿Desea borrar el usuario seleccionado?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                        if (result == MessageBoxResult.OK)
                        {
                            Usuarios u = Usuarios.SelectedItem as Usuarios;
                            string cn_String = conexiondb;
                            Consulta consulta = new Consulta("Usuario", null, "Id:" + u.Id, "DELETE");
                            SQLiteConnection cn = new SQLiteConnection(cn_String);
                            if (cn.State != ConnectionState.Open) cn.Open();
                            SQLiteCommand sql_cmd = new SQLiteCommand("DELETE FROM Usuario WHERE Id=" + u.Id, cn);
                            while (observartodotoken)
                            {

                            }
                            sql_cmd.ExecuteNonQuery();

                            Lista_consultas.Add(consulta);
                            cn.Close();
                            CargarUsuarios();
                            boton2_Sistema.Visibility = Visibility.Collapsed;
                        }
                    }
                }
                else if (usuarios_menu.SelectedIndex == 2)
                {
                    if (Roles.SelectedItem != null)
                    {
                        MessageBoxResult result = MessageBox.Show("¿Desea borrar el rol seleccionado?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                        if (result == MessageBoxResult.OK)
                        {
                            Roles u = Roles.SelectedItem as Roles;
                            string cn_String = conexiondb;
                            Consulta consulta = new Consulta("Rol", null, "Id:" + u.Id, "DELETE");
                            SQLiteConnection cn = new SQLiteConnection(cn_String);
                            if (cn.State != ConnectionState.Open) cn.Open();
                            SQLiteCommand sql_cmd = new SQLiteCommand("DELETE FROM Rol WHERE Id=" + u.Id, cn);
                            while (observartodotoken)
                            {

                            }
                            sql_cmd.ExecuteNonQuery();

                            Lista_consultas.Add(consulta);
                            cn.Close();
                            CargarRoles();
                            clearrol();
                            boton4_Sistema.Visibility = Visibility.Collapsed;
                        }
                    }
                }
                else if (usuarios_menu.SelectedIndex == 4)
                {
                    if (lista_iva.SelectedItem != null)
                    {
                        MessageBoxResult result = MessageBox.Show("¿Desea borrar el IVA seleccionado?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                        if (result == MessageBoxResult.OK)
                        {
                            IVAs u = lista_iva.SelectedItem as IVAs;
                            string cn_String = conexiondb;
                            Consulta consulta = new Consulta("IVA", null, "Id:" + u.Id, "DELETE");
                            SQLiteConnection cn = new SQLiteConnection(cn_String);
                            if (cn.State != ConnectionState.Open) cn.Open();
                            SQLiteCommand sql_cmd = new SQLiteCommand("DELETE FROM IVA WHERE Id=" + u.Id, cn);
                            while (observartodotoken)
                            {

                            }
                            sql_cmd.ExecuteNonQuery();
                            Lista_consultas.Add(consulta);
                            cn.Close();
                            CargarIva();
                            limpiar_iva();
                            boton6_Sistema.Visibility = Visibility.Collapsed;
                        }
                    }
                }
                else if (usuarios_menu.SelectedIndex == 6)
                {
                    if (Iluminacion_Potencia.SelectedItem != null)
                    {
                        MessageBoxResult result = MessageBox.Show("¿Desea borrar el Contrato seleccionado?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                        if (result == MessageBoxResult.OK)
                        {
                            Potencia p = Iluminacion_Potencia.SelectedItem as Potencia;
                            cargarClientes();

                            string cn_String = conexiondb;
                            Consulta consulta = new Consulta("Contratos", null, "Id:" + p.Id, "DELETE");
                            SQLiteConnection cn = new SQLiteConnection(cn_String);
                            if (cn.State != ConnectionState.Open) cn.Open();
                            SQLiteCommand sql_cmd = new SQLiteCommand("DELETE FROM Contratos WHERE Id=" + p.Id, cn);
                            while (observartodotoken)
                            {

                            }
                            sql_cmd.ExecuteNonQuery();

                            Lista_consultas.Add(consulta);

                            List<Clientes> lista = lcln.Select(x => x).Where(x => x.Potencia == p.Id).ToList();

                            foreach (Clientes c in lista)
                            {
                                sql_cmd = new SQLiteCommand("UPDATE Cliente SET Potencia=" + 0 + " WHERE Id=" + c.id, cn);
                                sql_cmd.ExecuteNonQuery();
                                List<string> ls = new List<string>();
                                ls.Add("Potencia:0");
                                consulta = new Consulta("Cliente", ls, "Id:" + c.id, "UPDATE");
                                while (observartodotoken)
                                {

                                }
                                Lista_consultas.Add(consulta);
                            }
                            foreach (Alarma a in p.Lista_Alarmas)
                            {
                                cn_String = conexiondb;
                                consulta = new Consulta("Alarmas", null, "Id:" + a.Id, "DELETE");
                                cn = new SQLiteConnection(cn_String);
                                if (cn.State != ConnectionState.Open) cn.Open();
                                sql_cmd = new SQLiteCommand("DELETE FROM Alarmas WHERE Id=" + a.Id, cn);
                                while (observartodotoken)
                                {

                                }

                                sql_cmd.ExecuteNonQuery();

                                Lista_consultas.Add(consulta);

                            }
                            cn.Close();
                            Iluminacion_Potencia.SelectedItem = null;
                            CargarContratos();
                        }
                    }

                }
                else if (usuarios_menu.SelectedIndex == 7)
                {
                    if (Vehiculos.SelectedItem != null)
                    {
                        MessageBoxResult result = MessageBox.Show("¿Desea borrar el Contrato seleccionado?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                        if (result == MessageBoxResult.OK)
                        {
                            Vehiculos p = Vehiculos.SelectedItem as Vehiculos;
                            CargarVehiculos();

                            string cn_String = conexiondb;
                            Consulta consulta = new Consulta("Vehiculos", null, "Id:" + p.Id, "DELETE");
                            SQLiteConnection cn = new SQLiteConnection(cn_String);
                            if (cn.State != ConnectionState.Open) cn.Open();
                            SQLiteCommand sql_cmd = new SQLiteCommand("DELETE FROM Vehiculos WHERE Id=" + p.Id, cn);
                            while (observartodotoken)
                            {

                            }
                            sql_cmd.ExecuteNonQuery();

                            Lista_consultas.Add(consulta);

                          

                          
                            cn.Close();
                            Vehiculos.SelectedItem = null;
                            CargarVehiculos();
                        }
                    }

                }
            }
            catch(Exception ee)
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                Peta(ee, line + "");
            }
        }
        private void AddnewSistema_Click(object sender, RoutedEventArgs e)
        {
            if (usuarios_menu.SelectedIndex < 2)
            {
                vu.Close();
                CargarRoles();
                CargarUsuarios();
                vu = new VentanaUsuario(lrol, lusr);
                vu.Show();
            }
            else if (usuarios_menu.SelectedIndex < 4)
            {
                vrol.Close();
                vrol = new VentanaRol();
                vrol.Show();
            }
            else if (usuarios_menu.SelectedIndex < 6)
            {
                vi.Close();
                vi = new VentanaIVA();
                vi.Show();
            }
            else if (usuarios_menu.SelectedIndex == 6)
            {
                vcnt.Close();
                vcnt = new VentanaContrato();
                vcnt.Show();
            }else if (usuarios_menu.SelectedIndex == 7)
            {
                vvhc.Close();
                vvhc = new VentanaVehiculo(null);
                vvhc.Show();
            }

        }
        private async void change_Sistema_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (usuarios_menu.SelectedIndex == 1)
                {
                    try
                    {
                        Usuarios u = Usuarios.SelectedItem as Usuarios;
                        string uri = string.Format("http://app.adex-integracio.com/sgc/index2.php");
                        //SGC.Clases.Version v = new Version();
                        //Debug.WriteLine("Hola ");
                        //byteArray = Encoding.UTF8.GetBytes("tabla = Version");
                        //Uri = new Uri(uri);
                       
                                    //console.writeline(mycontent);
                                    //v = new Version(mycontent);
                                    //Debug.WriteLine("IsSuccessStatusCode");

                                    List<Clientes> lst = new List<Clientes>();
                            


                                    //lst.Remove(lst[0]);

                                    
                                        List<string> l = new List<string>();
                                         u = Usuarios.SelectedItem as Usuarios;
                                        string sql_query = "UPDATE Usuario SET ";
                                        bool a = false;
                                        bool b = false;
                                        bool c = false;
                                        if (!(Dni_usuario.Text.Equals(u.Dni_Trabajador)))
                                        {
                                            a = true;
                                            l.Add("DNI_trabajador:" + Dni_usuario.Text);
                                            sql_query += "DNI_trabajador='" + Dni_usuario.Text + "', ";

                                        }
                                        if (!(Nombre_Trabajador.Text.Equals(u.Nombre)))
                                        {
                                            a = true;
                                            l.Add("Nombre_trabajador:" + Nombre_Trabajador.Text);
                                            sql_query += "Nombre_trabajador='" + Nombre_Trabajador.Text + "', ";



                                        }
                                        if (!(Apellido1_Trabajador.Text.Equals(u.Apellido1)))
                                        {
                                            a = true;
                                            l.Add("Apellido1:" + Apellido1_Trabajador.Text);
                                            sql_query += "Apellido1='" + Apellido1_Trabajador.Text + "', ";



                                        }
                                        if (!(Apellido2_Trabajador.Text.Equals(u.Apellido2)))
                                        {
                                            a = true;
                                            l.Add("Apellido2:" + Apellido1_Trabajador.Text);
                                            sql_query += "Apellido2='" + Apellido1_Trabajador.Text + "', ";


                                        }
                                        Roles rol = Rol_usuario.SelectedItem as Roles;
                                        if (!(rol.Id == u.Rol))
                                        {
                                            a = true;
                                            l.Add("Rol:" + rol.Id);
                                            sql_query += "Rol=" + rol.Id + ", ";

                                        }
                                        if (!(u.Pais.Equals(CP_trabajador.Text)))
                                        {
                                            a = true;
                                            sql_query += "Pais='" + codigo_pais_trabajador.Text + "', ";
                                            l.Add("Pais:" + codigo_pais_trabajador.Text);
                                        }
                                        if (!(u.Numero.Equals(numero_trabajador.Text)))
                                        {
                                            a = true;
                                            sql_query += "Numero='" + numero_trabajador.Text + "', ";
                                            l.Add("Numero:" + numero_trabajador.Text);
                                        }
                                        if (!(u.Piso.Equals(piso_trabajador.Text)))
                                        {
                                            a = true;
                                            sql_query += "Piso='" + piso_trabajador.Text + "', ";
                                            l.Add("Piso:" + piso_trabajador.Text);
                                        }
                                        if (!(u.Puerta.Equals(puerta_trabajador.Text)))
                                        {
                                            a = true;
                                            sql_query += "Puerta='" + puerta_trabajador.Text + "', ";
                                            l.Add("Puerta:" + puerta_trabajador.Text);
                                        }
                                        if (!(u.Provincia.Equals(codigo_poblacio_trabajador.Text)))
                                        {
                                            a = true;
                                            sql_query += "Provincia='" + codigo_pais_trabajador.Text + "', ";
                                            l.Add("Provincia:" + codigo_pais_trabajador.Text);
                                        }

                                        if (!(u.Poblacion.Equals(poblacion_trabajador.Text)))
                                        {
                                            a = true;
                                            sql_query += "Poblacion='" + poblacion_trabajador.Text + "', ";
                                            l.Add("Poblacion:" + poblacion_trabajador.Text);
                                        }

                                        if (!(u.Direccion.Equals(direccion_trabajador.Text)))
                                        {
                                            a = true;
                                            sql_query += "Direccion='" + direccion_trabajador.Text + "', ";
                                            l.Add("Direccion:" + direccion_trabajador.Text);
                                        }

                                        if (!(u.CP.Equals(CP_trabajador.Text)))
                                        {
                                            a = true;
                                            sql_query += "CP='" + CP_trabajador.Text + "', ";
                                            l.Add("CP:" + CP_trabajador.Text);
                                        }
                                        if (!(u.Telefono.Equals(Telefono.Text)))
                                        {
                                            a = true;
                                            sql_query += "Telefono1='" + Telefono.Text + "', ";
                                            l.Add("Telefono1:" + Telefono.Text);
                                        }
                                        if (!(u.Mail.Equals(Mail.Text)))
                                        {
                                            a = true;
                                            sql_query += "Mail1='" + Mail.Text + "', ";
                                            l.Add("Mail1:" + Mail.Text);
                                        }
                                        if (!(u.Nota.Equals(Nota.Text)))
                                        {
                                            a = true;
                                            sql_query += "Nota='" + Nota.Text + "', ";
                                            l.Add("Nota:" + Nota.Text);
                                        }


                                        MessageBoxResult result = System.Windows.MessageBox.Show("¿Quieres guardar los cambios?", "¡Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                                        if (result == MessageBoxResult.OK)
                                        {
                                            if (a)
                                            {


                                                Consulta consulta;
                                                sql_query = sql_query.Remove(sql_query.Length - 2); sql_query += " WHERE Id='" + u.Id + "'";
                                                SQLiteConnection cn = new SQLiteConnection(conexiondb);

                                                if (cn.State != ConnectionState.Open) cn.Open();

                                                SQLiteCommand sql_cmd = new SQLiteCommand(sql_query, cn);

                                                sql_cmd.ExecuteNonQuery();


                                                clearusuario();
                                                boton1_Sistema_Click(boton1_Sistema, RoutedEventArgs);
                                                while (observartodotoken)
                                                {

                                                }
                                                consulta = new Consulta("Usuario", l, "Id:" + u.Id, "UPDATE");
                                                Lista_consultas.Add(consulta);
                                                string cn_string = conexiondb;
                                                cn = new SQLiteConnection(cn_string);
                                                if (cn.State != ConnectionState.Open) cn.Open();
                                                string sql_Text = "UPDATE Version SET configurationcol=GETDATE()";
                                                SQLiteCommand sql_cmd2 = new SQLiteCommand(sql_Text, cn);

                                                //sql_cmd2.ExecuteNonQuery(); 
                                                cn.Close();
                                            }
                                        }
                                        else
                                        {
                                            Usuarios.SelectedItem = null;
                                            Usuarios.SelectedItem = u;
                                        }
                                    
                                    CargarUsuarios();
                             





                    }
                    catch { };
                   
                }
                else if (usuarios_menu.SelectedIndex == 3)
                {
                    Roles rol = Roles.SelectedItem as Roles;
                    try
                    {
                        string uri = string.Format("http://app.adex-integracio.com/sgc/index2.php");
                        //SGC.Clases.Version v = new Version();
                        //Debug.WriteLine("Hola ");
                        //byteArray = Encoding.UTF8.GetBytes("tabla = Version");
                        List<KeyValuePair<string, string>> queries = new List<KeyValuePair<string, string>>()
                                {
                                    new KeyValuePair<string, string>("tabla", "Rol"),
                                    new KeyValuePair<string, string>("action", "SelectOne"),
                                    new KeyValuePair<string, string>("parametros", rol.Id+"")
                                };
                        //Uri = new Uri(uri);
                        
                                   
                                    //console.writeline(mycontent);
                                    //v = new Version(mycontent);
                                    //Debug.WriteLine("IsSuccessStatusCode");

                                    List<Clientes> lst = new List<Clientes>();
                                   

                                    //lst.Remove(lst[0]);

                                  
                                        List<string> l = new List<string>();
                                        Boolean a = false;
                                        Boolean b = false;
                                        string sql_query = "UPDATE Rol SET ";
                                        char[] bin = rol.Permisos_bin.ToArray();
                                        if (!Nombre_Rol.Text.Equals(rol.Nom))
                                        {
                                            a = true;
                                            l.Add("Nom_Rol:" + Nombre_Rol.Text);
                                            sql_query += "Nom_Rol='" + Nombre_Rol.Text + "', ";
                                        }



                                        if (upd_Agenda.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[0].ToString())))
                                        {
                                            b = true;
                                            if (Convert.ToBoolean(upd_Agenda.IsChecked))
                                            {
                                                bin[0] = '1';
                                            }
                                            else
                                            {
                                                bin[0] = '0';
                                            }

                                        }
                                        if (dlt_Agenda.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[1].ToString())))
                                        {
                                            b = true;
                                            if (Convert.ToBoolean(dlt_Agenda.IsChecked))
                                            {
                                                bin[1] = '1';
                                            }
                                            else
                                            {
                                                bin[1] = '0';

                                            }

                                        }
                                        if (ins_Agenda.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[2].ToString())))
                                        {
                                            b = true;
                                            if (Convert.ToBoolean(ins_Agenda.IsChecked))
                                            {
                                                bin[2] = '1';
                                            }
                                            else
                                            {
                                                bin[2] = '0';
                                            }
                                        }

                                        if (upd_Sistema.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[3].ToString())))
                                        {
                                            b = true;
                                            if (Convert.ToBoolean(upd_Sistema.IsChecked))
                                            {
                                                bin[3] = '1';
                                            }
                                            else
                                            {
                                                bin[3] = '0';
                                            }
                                        }
                                        if (dlt_Sistema.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[4].ToString())))
                                        {
                                            b = true;

                                            if (Convert.ToBoolean(dlt_Sistema.IsChecked))
                                            {
                                                bin[4] = '1';
                                            }
                                            else
                                            {
                                                bin[4] = '0';

                                            }

                                        }
                                        if (ins_Sistema.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[5].ToString())))
                                        {
                                            b = true;
                                            if (Convert.ToBoolean(ins_Sistema.IsChecked))
                                            {
                                                bin[5] = '1';
                                            }
                                            else
                                            {
                                                bin[5] = '0';
                                            }
                                        }

                                        if (upd_Clientes.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[6].ToString())))
                                        {
                                            b = true;
                                            if (Convert.ToBoolean(upd_Clientes.IsChecked))
                                            {
                                                bin[6] = '1';
                                            }
                                            else
                                            {
                                                bin[6] = '0';
                                            }

                                        }
                                        if (dlt_Clientes.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[7].ToString())))
                                        {
                                            b = true;
                                            if (Convert.ToBoolean(dlt_Clientes.IsChecked))
                                            {
                                                bin[7] = '1';
                                            }
                                            else
                                            {
                                                bin[7] = '0';

                                            }

                                        }
                                        if (ins_Clientes.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[8].ToString())))
                                        {
                                            b = true;
                                            if (Convert.ToBoolean(ins_Clientes.IsChecked))
                                            {
                                                bin[8] = '1';
                                            }
                                            else
                                            {
                                                bin[8] = '0';
                                            }

                                        }

                                        if (upd_Mapa.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[9].ToString())))
                                        {
                                            b = true;
                                            if (Convert.ToBoolean(upd_Mapa.IsChecked))
                                            {
                                                bin[9] = '1';
                                            }
                                            else
                                            {
                                                bin[9] = '0';
                                            }


                                        }
                                        if (dlt_Mapa.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[10].ToString())))
                                        {
                                            b = true;
                                            if (Convert.ToBoolean(dlt_Mapa.IsChecked))
                                            {
                                                bin[10] = '1';
                                            }
                                            else
                                            {
                                                bin[10] = '0';

                                            }


                                        }
                                        if (ins_Mapa.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[11].ToString())))
                                        {
                                            b = true;
                                            if (Convert.ToBoolean(ins_Mapa.IsChecked))
                                            {
                                                bin[11] = '1';
                                            }
                                            else
                                            {
                                                bin[11] = '0';
                                            }
                                        }

                                        if (upd_Factura.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[12].ToString())))
                                        {
                                            b = true;
                                            if (Convert.ToBoolean(upd_Factura.IsChecked))
                                            {
                                                bin[12] = '1';
                                            }
                                            else
                                            {
                                                bin[12] = '0';
                                            }

                                        }
                                        if (dlt_Factura.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[13].ToString())))
                                        {
                                            b = true;
                                            if (Convert.ToBoolean(dlt_Factura.IsChecked))
                                            {
                                                bin[13] = '1';
                                            }
                                            else
                                            {
                                                bin[13] = '0';

                                            }


                                        }
                                        if (ins_Factura.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[14].ToString())))
                                        {
                                            b = true;
                                            if (Convert.ToBoolean(ins_Factura.IsChecked))
                                            {
                                                bin[14] = '1';
                                            }
                                            else
                                            {
                                                bin[14] = '0';
                                            }
                                        }

                                        if (upd_Camara.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[15].ToString())))
                                        {
                                            b = true;
                                            if (Convert.ToBoolean(upd_Camara.IsChecked))
                                            {
                                                bin[15] = '1';
                                            }
                                            else
                                            {
                                                bin[15] = '0';
                                            }

                                        }
                                        if (dlt_Camara.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[16].ToString())))
                                        {
                                            b = true;
                                            if (Convert.ToBoolean(dlt_Camara.IsChecked))
                                            {
                                                bin[16] = '1';
                                            }
                                            else
                                            {
                                                bin[16] = '0';

                                            }

                                        }
                                        if (ins_Camara.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[17].ToString())))
                                        {
                                            b = true;
                                            if (Convert.ToBoolean(ins_Camara.IsChecked))
                                            {
                                                bin[17] = '1';
                                            }
                                            else
                                            {
                                                bin[17] = '0';
                                            }
                                        }

                                        if (Agn.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[18].ToString())))
                                        {
                                            b = true;
                                            if (Convert.ToBoolean(Agn.IsChecked))
                                            {
                                                bin[18] = '1';
                                            }
                                            else
                                            {
                                                bin[18] = '0';
                                            }
                                        }

                                        if (Sst.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[19].ToString())))
                                        {
                                            b = true;
                                            if (Convert.ToBoolean(Sst.IsChecked))
                                            {
                                                bin[19] = '1';
                                            }
                                            else
                                            {
                                                bin[19] = '0';
                                            }
                                        }

                                        if (Cln.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[20].ToString())))
                                        {
                                            b = true;
                                            if (Convert.ToBoolean(Cln.IsChecked))
                                            {
                                                bin[20] = '1';
                                            }
                                            else
                                            {
                                                bin[20] = '0';
                                            }
                                        }

                                        if (Map.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[21].ToString())))
                                        {
                                            b = true;
                                            if (Convert.ToBoolean(Map.IsChecked))
                                            {
                                                bin[21] = '1';
                                            }
                                            else
                                            {
                                                bin[21] = '0';
                                            }
                                        }

                                        if (Fct.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[22].ToString())))
                                        {
                                            b = true;
                                            if (Convert.ToBoolean(Fct.IsChecked))
                                            {
                                                bin[22] = '1';
                                            }
                                            else
                                            {
                                                bin[22] = '0';
                                            }
                                        }

                                        if (Cmr.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[23].ToString())))
                                        {
                                            b = true;
                                            if (Convert.ToBoolean(Cmr.IsChecked))
                                            {
                                                bin[23] = '1';
                                            }
                                            else
                                            {
                                                bin[23] = '0';
                                            }
                                        }
                                        if (pestana_cliente1.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[24].ToString())))
                                        {
                                            b = true;
                                            if (Convert.ToBoolean(pestana_cliente1.IsChecked))
                                            {
                                                bin[24] = '1';
                                            }
                                            else
                                            {
                                                bin[24] = '0';
                                            }
                                        }

                                        if (pestana_cliente2.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[25].ToString())))
                                        {
                                            b = true;
                                            if (Convert.ToBoolean(pestana_cliente2.IsChecked))
                                            {
                                                bin[25] = '1';
                                            }
                                            else
                                            {
                                                bin[25] = '0';
                                            }
                                        }

                                        if (pestana_cliente3.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[26].ToString())))
                                        {
                                            b = true;
                                            if (Convert.ToBoolean(pestana_cliente3.IsChecked))
                                            {
                                                bin[26] = '1';
                                            }
                                            else
                                            {
                                                bin[26] = '0';
                                            }
                                        }

                                        if (pestana_cliente4.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[27].ToString())))
                                        {
                                            b = true;
                                            if (Convert.ToBoolean(pestana_cliente4.IsChecked))
                                            {
                                                bin[27] = '1';
                                            }
                                            else
                                            {
                                                bin[27] = '0';
                                            }
                                        }

                                        if (pestana_cliente5.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[28].ToString())))
                                        {
                                            b = true;
                                            if (Convert.ToBoolean(pestana_cliente5.IsChecked))
                                            {
                                                bin[28] = '1';
                                            }
                                            else
                                            {
                                                bin[28] = '0';
                                            }
                                        }
                                        if (b)
                                        {
                                            a = true;
                                            string bintot = new string(bin);

                                            int num = Convert.ToInt32(bintot, 2);
                                            l.Add("Permisos:" + num);
                                            sql_query += "Permisos=" + num+", ";
                                        }
                                        MessageBoxResult result = System.Windows.MessageBox.Show("¿Quieres guardar los cambios?", "¡Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                                        if (result == MessageBoxResult.OK)
                                        {
                                            if (a)
                                            {
                                                Consulta consulta;

                                                SQLiteConnection cn = new SQLiteConnection(conexiondb);

                                                if (cn.State != ConnectionState.Open) cn.Open();
                                                sql_query = sql_query.Remove(sql_query.Length - 2);
                                                sql_query += " WHERE Id=" + rol.Id;

                                                SQLiteCommand sql_cmd = new SQLiteCommand(sql_query, cn);

                                                sql_cmd.ExecuteNonQuery();
                                                CargarRoles();
                                                clearrol();
                                                while (observartodotoken)
                                                {

                                                }
                                                consulta = new Consulta("Rol", l, "Id:" + rol.Id, "UPDATE");
                                                Lista_consultas.Add(consulta);
                                                string cn_string = conexiondb;
                                                cn = new SQLiteConnection(cn_string);
                                                if (cn.State != ConnectionState.Open) cn.Open();
                                                string sql_Text = "UPDATE Version SET configurationcol=GETDATE()";
                                                SQLiteCommand sql_cmd2 = new SQLiteCommand(sql_Text, cn);

                                                //sql_cmd2.ExecuteNonQuery(); 
                                                cn.Close();

                                            }
                                        }
                                        else
                                        {
                                            Roles.SelectedItem = null;
                                            Roles.SelectedItem = rol;
                                        }
                                    
                                    CargarRoles();
                              





                    }
                    catch { };
                    
                }
                else if (usuarios_menu.SelectedIndex == 5)
                {
                    try
                    {
                        Potencia p = Iluminacion_Potencia.SelectedItem as Potencia;
                        string uri = string.Format("http://app.adex-integracio.com/sgc/index2.php");
                        //SGC.Clases.Version v = new Version();
                        //Debug.WriteLine("Hola ");
                        //byteArray = Encoding.UTF8.GetBytes("tabla = Version");
                        IVAs i = lista_iva.SelectedItem as IVAs;
                        List<KeyValuePair<string, string>> queries = new List<KeyValuePair<string, string>>()
                                {
                                    new KeyValuePair<string, string>("tabla", "IVA"),
                                    new KeyValuePair<string, string>("action", "SelectOne"),
                                    new KeyValuePair<string, string>("parametros", i.Id+"")
                                };
                        //Uri = new Uri(uri);
                        
                                    
                                    
                                        Consulta con;
                                        string sql_query = "UPDATE IVA SET ";
                                        List<string> l = new List<string>();
                                        if (lista_iva.SelectedItem != null)
                                        {
                                            //IVAs ii = lista_iva.SelectedItem as IVAs;
                                            Boolean a = false;

                                            if (!tipo_iva.Text.Equals(i.Tipo))
                                            {
                                                a = true;

                                                sql_query += "Tipo='" + tipo_iva.Text + "', ";
                                                l.Add("Tipo:" + tipo_iva.Text);
                                            }
                                            if (!porcentaje_iva.Text.Equals(i.Porcentaje.ToString()))
                                            {
                                                a = true;

                                                sql_query += "Porcentaje='" + porcentaje_iva.Text + "', ";
                                                l.Add("Porcentaje:" + porcentaje_iva.Text);
                                            }
                                            MessageBoxResult result = System.Windows.MessageBox.Show("¿Quieres guardar los cambios?", "¡Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                                            if (result == MessageBoxResult.OK)
                                            {
                                                if (a)
                                                {
                                                    sql_query = sql_query.Remove(sql_query.Length - 2); sql_query += " WHERE Id=" + i.Id;
                                                    string sql_connection = conexiondb;
                                                    SQLiteConnection cn = new SQLiteConnection(sql_connection);
                                                    if (cn.State != ConnectionState.Open) cn.Open();

                                                    SQLiteCommand sql_cmd = new SQLiteCommand(sql_query, cn);
                                                    while (observartodotoken)
                                                    {

                                                    }
                                                    sql_cmd.ExecuteNonQuery();
                                                    Consulta consulta = new Consulta("IVA", l, "Id:" + i.Id, "UPDATE");
                                                    Lista_consultas.Add(consulta);
                                                    CargarIva();


                                                    
                                                    cn.Close();
                                                }
                                            }
                                            else
                                            {
                                                lista_iva.SelectedItem = null;
                                                lista_iva.SelectedItem = i;
                                            }
                                        }

                                    
                                    CargarIva();
                                    limpiar_iva();
                              
                    }
                    catch { };
                   
                }
                else if (usuarios_menu.SelectedIndex == 6)
                {
                    try
                    {
                        Potencia p = Iluminacion_Potencia.SelectedItem as Potencia;
                        string uri = string.Format("http://app.adex-integracio.com/sgc/index2.php");
                        //SGC.Clases.Version v = new Version();
                        //Debug.WriteLine("Hola ");
                        //byteArray = Encoding.UTF8.GetBytes("tabla = Version");
                        List<KeyValuePair<string, string>> queries = new List<KeyValuePair<string, string>>()
                                {
                                    new KeyValuePair<string, string>("tabla", "Contratos"),
                                    new KeyValuePair<string, string>("action", "SelectOne"),
                                    new KeyValuePair<string, string>("parametros", p.Id+"")
                                };
                        //Uri = new Uri(uri);
                      
                                    
                                        Consulta con;
                                        string sql_query = "UPDATE Contratos SET ";
                                        List<string> l = new List<string>();

                                        if (Iluminacion_Potencia.SelectedItem != null)
                                        {
                                            //Potencia p = Iluminacion_Potencia.SelectedItem as Potencia;
                                            if (!p.Nombre.Equals(Potencia_Nombre.Text))
                                            {
                                                sql_query += "Nombre='" + Potencia_Nombre.Text + "', ";
                                                l.Add("Nombre:" + Potencia_Nombre.Text);
                                            }
                                            ComboBoxItem p2 = Potencia_Iluminacion.SelectedItem as ComboBoxItem;
                                            //console.writeline(p2.Content);
                                            if (!p2.Content.Equals(p.Amperios + ""))
                                            {
                                                sql_query += "Amperios=" + p2.Content + ", ";
                                                l.Add("Amperios:" + p2.Content);
                                            }

                                            if (!Potencia_Maxima.Text.Equals(p.Amperios_Max + ""))
                                            {
                                                sql_query += "Amperios_Max=" + Potencia_Maxima.Text + ", ";
                                                l.Add("Amperios_Max:" + Potencia_Maxima.Text);
                                            }

                                            MessageBoxResult result = System.Windows.MessageBox.Show("¿Quieres guardar los cambios?", "¡Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                                            if (result == MessageBoxResult.OK)
                                            {
                                                sql_query = sql_query.Remove(sql_query.Length - 2); sql_query += " WHERE Id=" + p.Id;
                                                string sql_connection = conexiondb;
                                                SQLiteConnection cn = new SQLiteConnection(sql_connection);
                                                if (cn.State != ConnectionState.Open) cn.Open();

                                                SQLiteCommand sql_cmd = new SQLiteCommand(sql_query, cn);
                                                while (observartodotoken)
                                                {

                                                }
                                                sql_cmd.ExecuteNonQuery();
                                                Consulta consulta = new Consulta("Contratos", l, "Id:" + p.Id, "UPDATE");
                                                Lista_consultas.Add(consulta);

                                                CargarContratos();

                                                cn.Close();
                                            }


                                        }
                                    
                                    CargarContratos();
                               





                    }
                    catch { };
                    

                }
                else if (usuarios_menu.SelectedIndex == 10)
                {
                    Consulta con;
                    string sql_query = "UPDATE Camping SET ";
                    List<string> l = new List<string>();



                    if (!Empresadatos[0].Equals(empresa.Text))
                    {
                        sql_query += "Empresa='" + empresa.Text + "', ";
                        l.Add("Empresa:" + empresa.Text);
                    }

                    if (!Empresadatos[1].Equals(dir.Text))
                    {
                        sql_query += "Direccion='" + dir.Text + "', ";
                        l.Add("Direccion:" + dir.Text);
                    }

                    if (!Empresadatos[2].Equals(pob.Text))
                    {
                        sql_query += "Poblacion='" + pob.Text + "', ";

                        l.Add("Poblacion:" + pob.Text);
                    }

                    if (!Empresadatos[3].Equals(cp.Text))
                    {
                        sql_query += "CP='" + cp.Text + "', ";
                        l.Add("CP:" + cp.Text);
                    }

                    if (!Empresadatos[4].Equals(prov.Text))
                    {
                        sql_query += "Provincia='" + prov.Text + "', ";
                        l.Add("Provincia:" + prov.Text);
                    }

                    if (!Empresadatos[5].Equals(paiss.Text))
                    {
                        sql_query += "Pais='" + paiss.Text + "', ";
                        l.Add("Pais:" + paiss.Text);
                    }

                    if (!Empresadatos[6].Equals(telefono.Text))
                    {
                        sql_query += "Telefono='" + telefono.Text + "', ";
                        l.Add("Telefono:" + telefono.Text);
                    }

                    if (!Empresadatos[7].Equals(serie.Text))
                    {
                        sql_query += "Serie='" + serie.Text + "', ";
                        l.Add("Serie:" + serie.Text);
                    }
                    if (!Empresadatos[8].Equals(numero_serie.Text))
                    {
                        sql_query += "Numero='" + numero_serie.Text + "', ";
                        l.Add("Numero:" + numero_serie.Text);
                    }
                    if (!Empresadatos[9].Equals(cif.Text))
                    {
                        sql_query += "CIF='" + cif.Text + "', ";
                        l.Add("CIF:" + cif.Text);
                    }
                    if (!Properties.Settings.Default.IP.Equals(Ip_dir.Text))
                    {
                        //sql_query += "Ip='" + cif.Text + "', ";
                        //l.Add("CIF:" + cif.Text);

                        Properties.Settings.Default.IP = Ip_dir.Text;
                        Properties.Settings.Default.Save();
                    }
                    if (!Properties.Settings.Default.Host.Equals(host.Text))
                    {
                        //sql_query += "Ip='" + cif.Text + "', ";
                        //l.Add("CIF:" + cif.Text);

                        Properties.Settings.Default.Host = host.Text;
                        Properties.Settings.Default.Save();
                    }
                    if (!Properties.Settings.Default.Puerto.Equals(puerto.Text))
                    {
                        //sql_query += "Ip='" + cif.Text + "', ";
                        //l.Add("CIF:" + cif.Text);

                        Properties.Settings.Default.Puerto = puerto.Text;
                        Properties.Settings.Default.Save();
                    }
                    if (!Properties.Settings.Default.Mail.Equals(maill.Text))
                    {
                        //sql_query += "Ip='" + cif.Text + "', ";
                        //l.Add("CIF:" + cif.Text);

                        Properties.Settings.Default.Mail = maill.Text;
                        Properties.Settings.Default.Save();
                    }
                    if (!Properties.Settings.Default.pssw.Equals(contraseña.Password))
                    {
                        //sql_query += "Ip='" + cif.Text + "', ";
                        //l.Add("CIF:" + cif.Text);

                        Properties.Settings.Default.pssw = contraseña.Password;
                        Properties.Settings.Default.Save();
                    }
                    if (!Properties.Settings.Default.Asunto.Equals(asunto.Text))
                    {
                        //sql_query += "Ip='" + cif.Text + "', ";
                        //l.Add("CIF:" + cif.Text);

                        Properties.Settings.Default.Asunto = asunto.Text;
                        Properties.Settings.Default.Save();
                    }
                    if (!Properties.Settings.Default.Cuerpo.Equals(cuerpo.Text))
                    {
                        //sql_query += "Ip='" + cif.Text + "', ";
                        //l.Add("CIF:" + cif.Text);

                        Properties.Settings.Default.Cuerpo = cuerpo.Text;
                        Properties.Settings.Default.Save();
                    }
                    MessageBoxResult result = System.Windows.MessageBox.Show("¿Quieres guardar los cambios?", "¡Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                    if (result == MessageBoxResult.OK)
                    {
                        sql_query = sql_query.Remove(sql_query.Length - 2); sql_query += " WHERE Id=1";
                        string sql_connection = conexiondb;
                        try
                        {
                            string uri = string.Format("http://app.adex-integracio.com/sgc/index2.php");
                            //SGC.Clases.Version v = new Version();
                            //Debug.WriteLine("Hola ");
                            //byteArray = Encoding.UTF8.GetBytes("tabla = Version");
                            List<KeyValuePair<string, string>> queries = new List<KeyValuePair<string, string>>()
                                {
                                    new KeyValuePair<string, string>("tabla", "Camping"),
                                    new KeyValuePair<string, string>("action", "SelectOne"),
                                    new KeyValuePair<string, string>("parametros", "1")
                                };
                            //Uri = new Uri(uri);
                            HttpContent h = new FormUrlEncodedContent(queries);
                            using (HttpClient client2 = new HttpClient())
                            {
                                using (HttpResponseMessage resp2 = await client2.PostAsync(uri, h))
                                {
                                    using (HttpContent content22 = resp2.Content)
                                    {
                                        string mycontent = await content22.ReadAsStringAsync();
                                        HttpContentHeaders hch = content22.Headers;
                                        //console.writeline(mycontent);
                                        //v = new Version(mycontent);
                                        //Debug.WriteLine("IsSuccessStatusCode");

                                        List<Clientes> lst = new List<Clientes>();
                                        JObject jay = JObject.Parse(mycontent);

                                        DateTime dt = (DateTime)jay["Time"];

                                        //lst.Remove(lst[0]);

                                        if (dt.AddMinutes(3) > DateTime.Now)
                                        {
                                            MessageBoxResult result2 = MessageBox.Show("El registro se modifico recienteminete, ¿Seguro que quieres cambiarlo?", "Atención!", MessageBoxButton.YesNo, MessageBoxImage.Exclamation);
                                            if (result2 == MessageBoxResult.Yes)
                                            {
                                                SQLiteConnection cn = new SQLiteConnection(sql_connection);
                                                if (cn.State != ConnectionState.Open) cn.Open();

                                                SQLiteCommand sql_cmd = new SQLiteCommand(sql_query, cn);
                                                while (observartodotoken)
                                                {

                                                }
                                                sql_cmd.ExecuteNonQuery();
                                                Consulta consulta = new Consulta("Camping", l, "Id:" + "1", "UPDATE");
                                                Lista_consultas.Add(consulta);

                                                cn.Close();
                                            }
                                        }
                                        else
                                        {
                                            SQLiteConnection cn = new SQLiteConnection(sql_connection);
                                            if (cn.State != ConnectionState.Open) cn.Open();

                                            SQLiteCommand sql_cmd = new SQLiteCommand(sql_query, cn);
                                            while (observartodotoken)
                                            {

                                            }
                                            sql_cmd.ExecuteNonQuery();
                                            Consulta consulta = new Consulta("Camping", l, "Id:" + "1", "UPDATE");
                                            Lista_consultas.Add(consulta);

                                            cn.Close();
                                        }
                                        CargarEmpresa();
                                    }
                                }
                            }





                        }
                        catch { };
                        

                        CargarEmpresa();

                        change_Sistema.IsEnabled = false;
                    }




                }
            }catch(Exception ee)
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                Peta(ee, line + "");
            }
        }

        private void limpiar_iva()
        {
            tipo_iva.Text = "";
            porcentaje_iva.Text = "";
            boton5_Sistema_Click(boton5_Sistema, RoutedEventArgs);

        }

        private void clearrol()
        {
            Nombre_Rol.Text = "";
            /*upd.IsChecked = false;
            dlt.IsChecked = false;
            ins.IsChecked = false;*/
            boton3_Sistema_Click(boton3_Sistema, RoutedEventArgs);
        }

        private void clearusuario()
        {
            Nombre_Trabajador.Text = "";
            Apellido1_Trabajador.Text = "";
            Apellido2_Trabajador.Text = "";
            Dni_usuario.Text = "";
            Telefono.Text = "";
            Mail.Text = "";
            direccion_trabajador.Text = "";
            numero.Text = "";
            piso.Text = "";
            puerta.Text = "";
            CP.Text = "";
            codigo_poblacio_trabajador.Text = "";
            codigo_pais_trabajador.Text = "";
            Rol_usuario.SelectedIndex = -1;
            Nota.Text = "";
        }

        //FUNCIONES
        private void mirarIva(object sender, TextChangedEventArgs e)
        {
            if (lista_iva.SelectedItem != null)
            {
                IVAs i = lista_iva.SelectedItem as IVAs;
                if (tipo_iva.Text.Equals(i.Tipo) && porcentaje_iva.Text.Equals(i.Porcentaje.ToString()))
                {
                    change_Sistema.IsEnabled = false;
                    safe = false;
                }
                else
                {
                    change_Sistema.IsEnabled = true;
                    safe = true;
                }
            }
        }

        private void Border_MouseLeftButtonDown_5(object sender, MouseButtonEventArgs e)
        {
            if (e.ClickCount == 2)
            {
                usuarios_menu.SelectedIndex = 5;
                boton6_Sistema_Click(boton6_Sistema, RoutedEventArgs);
            }
        }

        private void mirarRol2(object sender, RoutedEventArgs e)
        {
            Roles r = Roles.SelectedItem as Roles;
            char[] c = r.Permisos_bin.ToArray<char>();

            /*if (Nombre_Rol.Text.Equals(r.Nom) && upd.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[0])) && dlt.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[1].ToString())) && ins.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[2].ToString())))
            {
                change_Sistema.IsEnabled = false;
            }
            else
            {
                change_Sistema.IsEnabled = true;
            }*/
        }

        private void mirarRol(object sender, TextChangedEventArgs e)
        {
            if (Roles.SelectedItem != null)
            {
                Roles r = Roles.SelectedItem as Roles;
                char[] c = r.Permisos_bin.ToArray<char>();

                char[] bin = r.Permisos_bin.ToArray();

                if (rol_log != r)
                    if (Nombre_Rol.Text.Equals(r.Nom) && upd_Agenda.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[0])) && dlt_Agenda.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[1].ToString())) && ins_Agenda.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[2].ToString())) && upd_Sistema.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[3].ToString())) && dlt_Sistema.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[4].ToString())) && ins_Sistema.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[5].ToString())) && upd_Clientes.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[6].ToString())) && dlt_Clientes.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[7].ToString())) && ins_Clientes.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[8])) && upd_Mapa.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[9].ToString())) && dlt_Mapa.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[10].ToString())) && ins_Mapa.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[11].ToString())) && upd_Factura.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[12].ToString())) && dlt_Factura.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[13].ToString())) && ins_Factura.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[14].ToString())) && upd_Camara.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[15].ToString())) && dlt_Camara.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[16].ToString())) && ins_Camara.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[17].ToString())) && Agn.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[18].ToString())) && Sst.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[19].ToString())) && Cln.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[20].ToString())) && Map.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[21].ToString())) && Fct.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[22].ToString())) && Cmr.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[23].ToString())))
                    {
                        change_Sistema.IsEnabled = false;
                        safe = false;
                    }
                    else
                    {
                        change_Sistema.IsEnabled = true;
                        safe = true;
                    }

                if (!Nombre_Rol.Text.Equals(r.Nom))
                {
                    Nombre_Rol.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Nombre_Rol.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }



                if (upd_Agenda.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[0].ToString())))
                {
                    upd_Agenda.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    upd_Agenda.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (dlt_Agenda.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[1].ToString())))
                {
                    dlt_Agenda.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    dlt_Agenda.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (ins_Agenda.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[2].ToString())))
                {
                    ins_Agenda.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    ins_Agenda.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (upd_Sistema.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[3].ToString())))
                {
                    upd_Sistema.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    upd_Sistema.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (dlt_Sistema.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[4].ToString())))
                {
                    dlt_Sistema.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    dlt_Sistema.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (ins_Sistema.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[5].ToString())))
                {
                    ins_Sistema.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    ins_Sistema.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (upd_Clientes.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[6].ToString())))
                {
                    upd_Clientes.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    upd_Clientes.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (dlt_Clientes.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[7].ToString())))
                {
                    dlt_Clientes.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    dlt_Clientes.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (ins_Clientes.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[8].ToString())))
                {
                    ins_Clientes.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    ins_Clientes.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (upd_Mapa.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[9].ToString())))
                {
                    upd_Mapa.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    upd_Mapa.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (dlt_Mapa.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[10].ToString())))
                {
                    dlt_Mapa.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    dlt_Mapa.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (ins_Mapa.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[11].ToString())))
                {
                    ins_Mapa.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    ins_Mapa.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (upd_Factura.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[12].ToString())))
                {
                    upd_Factura.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    upd_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (dlt_Factura.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[13].ToString())))
                {
                    dlt_Factura.BorderBrush = Brushes.Red;


                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    dlt_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (ins_Factura.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[14].ToString())))
                {
                    ins_Factura.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    ins_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (upd_Camara.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[15].ToString())))
                {
                    upd_Camara.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    upd_Camara.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (dlt_Camara.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[16].ToString())))
                {
                    dlt_Camara.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    dlt_Camara.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (ins_Camara.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[17].ToString())))
                {
                    ins_Camara.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    ins_Camara.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (Agn.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[18].ToString())))
                {
                    Agn.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Agn.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (Sst.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[19].ToString())))
                {
                    Sst.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Sst.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (Cln.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[20].ToString())))
                {
                    Cln.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Cln.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (Map.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[21].ToString())))
                {
                    Map.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Map.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (Fct.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[22].ToString())))
                {
                    Fct.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Fct.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (Cmr.IsChecked.Value != Convert.ToBoolean(int.Parse(bin[23].ToString())))
                {
                    Cmr.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Cmr.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }


            }
        }

        private void Border_MouseLeftButtonDown_4(object sender, MouseButtonEventArgs e)
        {
            if (e.ClickCount == 2)
            {
                usuarios_menu.SelectedIndex = 3;
               
                boton4_Sistema_Click(boton4_Sistema, RoutedEventArgs);
            } boton4_Sistema.Visibility = Visibility.Visible;
        }

        private void miraruser(object sender, TextChangedEventArgs e)
        {
            if (Rol_usuario.SelectedItem != null)
            {
                Usuarios u = Usuarios.SelectedItem as Usuarios;
                Roles r = Rol_usuario.SelectedItem as Roles;


                if (u != null)
                {
                    if ((Nombre_Trabajador.Text.Equals(u.Nombre) || Nombre_Trabajador.Text.Length == 0) && (Apellido1_Trabajador.Text.Equals(u.Apellido1) || Apellido1_Trabajador.Text.Length == 0) && ((Apellido2_Trabajador.Text.Equals(u.Apellido2) || Apellido2_Trabajador.Text.Length == 0)) && (Dni_usuario.Text.Equals(u.Dni_Trabajador) || Dni_usuario.Text.Length == 0) && (Telefono.Text.Equals(u.Telefono) || Telefono.Text.Length == 0) && (Mail.Text.Equals(u.Mail) || Mail.Text.Length == 0) && (direccion_trabajador.Text.Equals(u.Direccion) || direccion_trabajador.Text.Length == 0) && (numero_trabajador.Text.Equals(u.Numero) || numero_trabajador.Text.Length == 0) && (piso_trabajador.Text.Equals(u.Piso) || piso_trabajador.Text.Length == 0) && (puerta_trabajador.Text.Equals(u.Puerta) || puerta.Text.Length == 0) && (CP_trabajador.Text.Equals(u.CP) || CP_trabajador.Text.Length == 0) && (poblacion_trabajador.Text.Equals(u.Poblacion) || poblacion_trabajador.Text.Length == 0) && (codigo_poblacio_trabajador.Text.Equals(u.Provincia) || codigo_poblacio_trabajador.Text.Length == 0) && (codigo_pais_trabajador.Text.Equals(u.Pais) || codigo_pais_trabajador.Text.Length == 0) && (Nota.Text.Equals(u.Nota)) && r.Id == u.Rol)
                    {
                        change_Sistema.IsEnabled = false;
                        safe = false;
                    }
                    else
                    {
                        change_Sistema.IsEnabled = true;
                        safe = true;
                    }

                    if (!(Dni_usuario.Text.Equals(u.Dni_Trabajador)))
                    {
                        Dni_usuario.BorderBrush = Brushes.Red;


                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Dni_usuario.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }

                    if (!(Nombre_Trabajador.Text.Equals(u.Nombre)))
                    {

                        Nombre_Trabajador.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Nombre_Trabajador.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }


                    if (!(Apellido1_Trabajador.Text.Equals(u.Apellido1)))
                    {

                        Apellido1_Trabajador.BorderBrush = Brushes.Red;


                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Apellido1_Trabajador.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }

                    if (!(Apellido2_Trabajador.Text.Equals(u.Apellido2)))
                    {

                        Apellido2_Trabajador.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Apellido2_Trabajador.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }

                    Roles rol = Rol_usuario.SelectedItem as Roles;
                    if (!(rol.Nom.Equals(u.Rol)))
                    {
                        Rol_usuario.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Rol_usuario.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }

                    if (!(u.Pais.Equals(codigo_pais_trabajador.Text)))
                    {
                        codigo_pais_trabajador.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        codigo_pais_trabajador.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }

                    if (!(u.Numero.Equals(numero_trabajador.Text)))
                    {
                        numero_trabajador.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        numero_trabajador.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }

                    if (!(u.Piso.Equals(piso_trabajador.Text)))
                    {
                        piso_trabajador.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        piso_trabajador.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }

                    if (!(u.Puerta.Equals(puerta_trabajador.Text)))
                    {
                        puerta_trabajador.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        puerta_trabajador.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }

                    if (!(u.Provincia.Equals(codigo_poblacio_trabajador.Text)))
                    {
                        codigo_poblacio_trabajador.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        codigo_poblacio_trabajador.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }

                    if (!(u.Poblacion.Equals(poblacion_trabajador.Text)))
                    {
                        poblacion_trabajador.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        poblacion_trabajador.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }

                    if (!(u.Direccion.Equals(direccion_trabajador.Text)))
                    {

                        direccion_trabajador.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        direccion_trabajador.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }

                    if (!(u.CP.Equals(CP_trabajador.Text)))
                    {
                        CP_trabajador.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        CP_trabajador.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }

                    if (!(u.Telefono.Equals(Telefono.Text)))
                    {
                        Telefono.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Telefono.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }

                    if (!(u.Mail.Equals(Mail.Text)))
                    {
                        Mail.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Mail.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }

                    if (!(u.Nota.Equals(Nota.Text)))
                    {
                        Nota.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Nota.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }
                }
            }
            else
            {
                change_Sistema.IsEnabled = false;
                safe = false;
            }
        }

        private void Border_MouseLeftButtonDown_3(object sender, MouseButtonEventArgs e)
        {
            if (e.ClickCount == 2)
            {
                usuarios_menu.SelectedIndex = 1;
                boton2_Sistema_Click(boton2_Sistema, RoutedEventArgs);
            }
        }





        //////////////////////////////////////////////////////////////////////////////////

        /*++++++++++  FUNCIONES Y BOTONES MAPA&  ++++++++++*/
        //BOTONES SUBMENU
        private void boton1_Mapa_Click(object sender, RoutedEventArgs e)
        {
            DateTime dtt = DateTime.Now;
            Console.WriteLine("Empezamos ahora " + dtt.ToString());
            if (safe)
            {
                MessageBoxResult result = MessageBox.Show("No se han guardado los datos ¿Desea continuar?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                if (result == MessageBoxResult.OK)
                {
                    Parcelas par = lista_parcelas.SelectedItem as Parcelas;
                    mapa_menu.SelectedIndex = 0;
                    boton1_Mapa.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground); ;
                    boton1_Mapa.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                    boton2_Mapa.Background = Brushes.Transparent;
                    boton2_Mapa.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton1_Mapai.Source = new BitmapImage(new Uri(@"/iconos/userclick.png", UriKind.RelativeOrAbsolute));
                    boton1_Mapat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                    boton2_Mapai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton2_Mapat.Foreground = Brushes.Black;


                    boton1_Mapa.BorderThickness = new Thickness(1);

                    change_mapa.IsEnabled = true;
                    ok = false;
                    if (!SomeBool)
                        deletemapa.Visibility = Visibility.Collapsed;

                    if (!nuevaparcela)
                        Clear_All(clearmapa, RoutedEventArgs);
                    scrollMapa.ScrollToVerticalOffset(Properties.Settings.Default.voff);
                    scrollMapa.ScrollToHorizontalOffset(Properties.Settings.Default.hoff);
                    lista_parcelas.SelectedItem = par;
                    CargarParcela();
                    ComprobarRoles();
                }
            }
            else
            {
                mapa_menu.SelectedIndex = 0;
                boton1_Mapa.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground); ;
                boton1_Mapa.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                boton2_Mapa.Background = Brushes.Transparent;
                boton2_Mapa.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton1_Mapai.Source = new BitmapImage(new Uri(@"/iconos/userclick.png", UriKind.RelativeOrAbsolute));
                boton1_Mapat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                boton2_Mapai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton2_Mapat.Foreground = Brushes.Black;


                boton1_Mapa.BorderThickness = new Thickness(1);

                change_mapa.IsEnabled = true;
                ok = false;
                if (!SomeBool)
                    deletemapa.Visibility = Visibility.Collapsed;
                clientebool = true;
                cargarClientes();
                CargarParcela();
                if (!nuevaparcela)
                    Clear_All(clearmapa, RoutedEventArgs);
                scrollMapa.ScrollToVerticalOffset(Properties.Settings.Default.voff);
                scrollMapa.ScrollToHorizontalOffset(Properties.Settings.Default.hoff);
                ComprobarRoles();
            }
            Console.WriteLine("Acabamos ahora " + (DateTime.Now- dtt ).TotalSeconds);
        }

        private void boton2_Mapa_Click(object sender, RoutedEventArgs e)
        {
            if (safe)
            {
                MessageBoxResult result = MessageBox.Show("No se han guardado los datos ¿Desea continuar?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                if (result == MessageBoxResult.OK)
                {
                    Parcelas par = lista_parcelas.SelectedItem as Parcelas;
                    mapa_menu.SelectedIndex = 1;
                    boton1_Mapai.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                    boton1_Mapat.Foreground = Brushes.Black;
                    boton2_Mapai.Source = new BitmapImage(new Uri(@"/iconos/articleclick.png", UriKind.RelativeOrAbsolute));
                    boton2_Mapat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                    boton1_Mapa.Background = Brushes.Transparent;
                    boton1_Mapa.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton2_Mapa.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                    boton2_Mapa.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                    boton2_Mapa.BorderThickness = new Thickness(1);

                    Properties.Settings.Default.voff = scrollMapa.VerticalOffset;
                    Properties.Settings.Default.hoff = scrollMapa.HorizontalOffset;
                    Properties.Settings.Default.mapwidth = viewBoxCamping.ActualWidth;
                    Properties.Settings.Default.mapheight = viewBoxCamping.ActualHeight;
                    Properties.Settings.Default.Save();
                    change_mapa.IsEnabled = false;
                    if (rol_log.Nom.Equals("admin"))
                        deletemapa.Visibility = Visibility.Visible;
                    if (lista_parcelas2.Items.Count > 0)
                    {
                        Datos_Parcela2.IsEnabled = true;
                        Datos_Parcela.IsEnabled = true;
                    }
                    else
                    {
                        Datos_Parcela2.IsEnabled = false;
                        Datos_Parcela.IsEnabled = false;
                    }
                    ComprobarRoles();
                    lista_parcelas.SelectedItem = par;
                }
            }
            else
            {
                mapa_menu.SelectedIndex = 1;
                boton1_Mapai.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                boton1_Mapat.Foreground = Brushes.Black;
                boton2_Mapai.Source = new BitmapImage(new Uri(@"/iconos/articleclick.png", UriKind.RelativeOrAbsolute));
                boton2_Mapat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                boton1_Mapa.Background = Brushes.Transparent;
                boton1_Mapa.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton2_Mapa.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                boton2_Mapa.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                boton2_Mapa.BorderThickness = new Thickness(1);

                Properties.Settings.Default.voff = scrollMapa.VerticalOffset;
                Properties.Settings.Default.hoff = scrollMapa.HorizontalOffset;
                Properties.Settings.Default.mapwidth = viewBoxCamping.ActualWidth;
                Properties.Settings.Default.mapheight = viewBoxCamping.ActualHeight;
                Properties.Settings.Default.Save();
                change_mapa.IsEnabled = false;
                if (rol_log.Nom.Equals("admin"))
                    deletemapa.Visibility = Visibility.Visible;
                if (lista_parcelas2.Items.Count > 0)
                {
                    Datos_Parcela2.IsEnabled = true;
                    Datos_Parcela.IsEnabled = true;
                }
                else
                {
                    Datos_Parcela2.IsEnabled = false;
                    Datos_Parcela.IsEnabled = false;
                }
                ComprobarRoles();
            }
        }
        //BOTONES HERRAMIENTAS
        //FUNCIONES

        private void IniciarGridMapa()
        {
            string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
            //Log oLog = new Log(path2);
            //oLog.Add("Mapa");
            for (int i = 0; i < 180; i++)
            {

                camping.RowDefinitions.Add(new RowDefinition());
            }
            for (int j = 0; j < 220; j++)
            {
                camping.ColumnDefinitions.Add(new ColumnDefinition());
            }
            camping.MouseMove += viewBoxCamping_MouseMove;

            for (int j = 0; j < 180; j++)
            {
                for (int x = 0; x < 220; x++)
                {
                    //string pos=asignarletra(j);
                    Border Box = new Border();
                    Box.Tag = j.ToString("X") + ":" + x.ToString("X");

                    Box.MouseLeftButtonDown += clickParcela;
                    Box.MouseEnter += clickParcelaPreview;
                    Box.MouseLeave += clickParcelaExit;
                    //Box.Margin = new Thickness(0);
                    Box.BorderBrush = Brushes.Gray;
                    Box.BorderThickness = new Thickness(0.2f);
                    Box.Background = Brushes.Transparent;
                    Box.HorizontalAlignment = HorizontalAlignment.Stretch;
                    Box.VerticalAlignment = VerticalAlignment.Stretch;
                    camping.Children.Add(Box);
                    Grid.SetRow(Box, j);
                    Grid.SetColumn(Box, x);
                    botonesMapa.Add(Box);

                }

            }
            //oLog.Add("Fin Mapa");
        }
        private void clickParcelaExit(object sender, MouseEventArgs e)
        {
            if (!ok)
            {
                Border b = sender as Border;
               
                if (b.Background.ToString().Equals(SGC.Properties.Settings.Default.colorocupado) || b.Background.ToString().Equals(SGC.Properties.Settings.Default.colorselec) || b.Background == Brushes.Blue || b.Background.ToString().Equals(SGC.Properties.Settings.Default.colorlibre))
                {

                }
                else
                {
                    b.Background = Brushes.Transparent;
                }
            }

        }

        private void clickParcelaPreview(object sender, MouseEventArgs e)
        {
            if (!ok)
            {


                Border b = sender as Border;
           

                if (b.Background.ToString().Equals(SGC.Properties.Settings.Default.colorocupado) || b.Background.ToString().Equals(SGC.Properties.Settings.Default.colorlibre) || b.Background.ToString().Equals(SGC.Properties.Settings.Default.colorselec) || b.Background == Brushes.Blue)
                {

                }
                else
                {
                    b.Background = Brushes.LightBlue;
                }

            }
        }

        private void clickParcela(object sender, MouseButtonEventArgs e)
        {
            if (sender != null)
            {
                Border botonMapa = sender as Border;
                if (editarMapa)
                {
                    if (permisos[9] == '1')
                    {
                        if (botonMapa.Background == Brushes.LightBlue)
                        {
                            cargarDirecciones();
                            editar = false;
                            botonMapa.Background = Brushes.Blue;
                            botonMapa.Opacity = new Double();
                            botonMapa.Opacity = 0.65;
                            lbtn.Add(botonMapa);


                            mover = false;
                            Direccion_Parcela.SelectedIndex = -1;
                            Meidas_Parcela.Text = "";
                            lista_parcelas.SelectedItem = null;
                            Nombre_Parcela.Text = "";
                            //Cliente_Parcela.SelectedItem = null;
                            Distrito.Text = "";
                            Orientación.Text = "";
                            Descripción.Text = "";
                            Nota_Parcela.Text = "";

                            lista_parcelas.SelectedItem = null;

                            lista_mapa.Visibility = Visibility.Visible; listadeparcelas.Visibility = Visibility.Collapsed;

                        }
                        else if (botonMapa.Background.ToString().Equals(SGC.Properties.Settings.Default.colorocupado) ||botonMapa.Background.ToString().Equals(SGC.Properties.Settings.Default.colorlibre))
                        {
                            if (lbtn.Count > 0)
                            {

                                foreach (Border b in lbtn)
                                {
                                    b.Background = Brushes.Transparent;


                                }
                                lbtn.Clear();
                            }
                            editar = true;
                            MirarclickParcela(botonMapa);

                            Nombre_Parcela.Background = Brushes.Transparent;
                            lista_mapa.Visibility = Visibility.Visible; listadeparcelas.Visibility = Visibility.Collapsed;
                            mover = true;

                        }
                        else if (botonMapa.Background.ToString().Equals(SGC.Properties.Settings.Default.colorselec))
                        {
                            editar = true;
                            lista_mapa.Visibility = Visibility.Visible; listadeparcelas.Visibility = Visibility.Collapsed;
                            mover = true;
                        }
                        else
                        {
                            botonMapa.Background = Brushes.Transparent;
                            lbtn.Remove(botonMapa);
                            lista_parcelas.SelectedItem = null;
                            lista_mapa.Visibility = Visibility.Visible; listadeparcelas.Visibility = Visibility.Collapsed;

                            if (lbtn.Count > 0)
                            {
                                mover = false;
                            }
                            else
                            {
                                mover = true;
                            }
                        }
                    }
                }
                else
                {

                    

                    if (botonMapa.Background == Brushes.Transparent)
                    {




                    }
                    else if (botonMapa.Background.ToString().Equals(SGC.Properties.Settings.Default.colorocupado) ||botonMapa.Background.ToString().Equals(SGC.Properties.Settings.Default.colorlibre))
                    {
                        if (lbtn.Count > 0)
                        {

                            foreach (Border b in lbtn)
                            {
                                b.Background = Brushes.Transparent;


                            }
                            lbtn.Clear();
                        }
                        editmapa.Visibility = Visibility.Visible;
                        lista_mapa.Visibility = Visibility.Collapsed; listadeparcelas.Visibility = Visibility.Visible;

                        MirarclickParcela(botonMapa); Addnewmapa.Visibility = Visibility.Collapsed;
                    }
                    else
                    {
                        if(lista_parcelas.SelectedItem==null)
                        Addnewmapa.Visibility = Visibility.Visible;


                    }
                    if (e.ClickCount > 1)
                    {
                        if (botonMapa.Background.ToString().Equals(SGC.Properties.Settings.Default.colorselec))
                        {
                            Console.WriteLine(botonMapa.Background.ToString() + " dentro");
                            ok = true;
                            MouseButtonEventArgs doubleClickEvent = new MouseButtonEventArgs(Mouse.PrimaryDevice, (int)DateTime.Now.Ticks, MouseButton.Left);
                            doubleClickEvent.RoutedEvent = Control.MouseDoubleClickEvent;
                            doubleClickEvent.Source = lista_parcelas.SelectedItem;
                            RaiseEvent(doubleClickEvent);
                        }

                    }
                    Console.WriteLine(botonMapa.Background.ToString() +" "+ e.ClickCount);
                }
            }
        }

        private void MirarclickParcela(Border botonMapa)
        {
            if (!ok)
            {
                foreach (Parcelas p in lprc)
                {
                    if (p.botones.Contains(botonMapa))
                    {

                        
                        Direccion_Parcela.Items.Clear();
                        string cn_String = conexiondb;

                        SQLiteConnection cn = new SQLiteConnection(cn_String);

                        if (cn.State != ConnectionState.Open) cn.Open();
                        DataTable tb = new DataTable();
                        Direccion_Parcela.Items.Clear();
                        string sql_Text = "SELECT * FROM Direcciones";
                        SQLiteCommand cmd = new SQLiteCommand(sql_Text, cn);
                        SQLiteDataReader rdr = cmd.ExecuteReader();
                        Direcciones d = new Direcciones("", "", 0);
                        Direccion_Parcela.Items.Add(d);
                        d = ldrc2.Find(x => x.Id == p.Direccion);
                        Direccion_Parcela.Items.Add(d);
                        while (rdr.Read())
                        {
                            d = new Direcciones(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2), rdr.GetInt32(3), rdr.GetInt32(4));
                            if (d.Nombre.Contains("On/Off"))
                            {
                                ldrc2.Add(d);

                                if (d.Nombre.Contains("Vial."))
                                {
                                    
                                }
                                else
                                {
                                    
                                    if (d.Asignada == 0)
                                    Direccion_Parcela.Items.Add(d); 
                                }
                            }
                            
                          
                        }
                        foreach(Parcelas pp in lista_parcelas.Items)
                        {
                            if(pp.id==p.id)
                                lista_parcelas.SelectedItem = pp;
                        }
                        foreach (Parcelas pp in lista_parcelas2.Items)
                        {
                            if (pp.id == p.id)
                                lista_parcelas2.SelectedItem = pp;
                        }
                       

                        foreach (Border b in p.botones)
                        {
                            b.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.colorselec);
                        }

                        Nombre_Parcela.Text = p.nom;
                        //Cliente_Parcela.SelectedItem = lcln.Find(x => x.id == p.n_cliente);
                        Distrito.Text = p.Distrito + "";
                        Orientación.Text = p.Orientacion;
                        Descripción.Text = p.Descripción;
                        Nota_Parcela.Text = p.Nota;
                        Direcciones dd = ldrc2.Find(x => x.Id == p.Direccion);
                        Direccion_Parcela.SelectedIndex = 1;
                        Meidas_Parcela.Text = p.Medidas;

                        if (p.ocupada == 0)
                        {
                            deletemapa.Visibility = Visibility.Visible;
                        }
                        else
                        {
                            deletemapa.Visibility = Visibility.Collapsed;
                        }

                        change_mapa.IsEnabled = false;




                        break;


                    }
                }
            }
        }

        private void viewBoxCamping_MouseMove(object sender, MouseEventArgs e)
        {
            if (!ok)
            {
                if (!move)
                {
                    p = e.GetPosition(camping);
                }


                if (e.RightButton == MouseButtonState.Pressed)
                {

                    e.GetPosition(camping);
                    double x = e.GetPosition(camping).X;
                    double y = e.GetPosition(camping).Y;

                    if (x - p.X < 0)
                    {

                        scrollMapa.ScrollToHorizontalOffset(scrollMapa.HorizontalOffset - 0.5);
                        p.X = e.GetPosition(camping).X;
                        //console.writeline("x-10");
                    }
                    else if (x - p.X > 0)
                    {
                        scrollMapa.ScrollToHorizontalOffset(scrollMapa.HorizontalOffset + 0.5);
                        p.X = e.GetPosition(camping).X;
                        ////console.writeline("x+10");
                    }

                    if (y - p.Y < 0)
                    {
                        scrollMapa.ScrollToVerticalOffset(scrollMapa.VerticalOffset - 0.5);
                        p.Y = e.GetPosition(camping).Y;
                        //console.writeline("y-10");
                    }
                    else if (y - p.Y > 0)
                    {
                        scrollMapa.ScrollToVerticalOffset(scrollMapa.VerticalOffset + 0.5);
                        p.Y = e.GetPosition(camping).Y;
                        //console.writeline("y+10");
                    }




                    move = true;
                }
                else
                {
                    move = false;
                }
            }
        }
        private void Switch_FocusableChanged(object sender, DependencyPropertyChangedEventArgs e)
        {
            Clientes cc = Clientes.SelectedItem as Clientes;
            if (!(cc is null))
            {
                int pot = 0;
                if (Potencia.SelectedItem != null)
                {
                    Potencia pp = Potencia.SelectedItem as Potencia;
                    pot = pp.Id;
                }
                int b = 0;
                if (Switch.IsChecked.Value)
                {
                    b = 1;
                }
                Parcelas p = numero_plaza.SelectedItem as Parcelas;

                if (p == null)
                    p = new Parcelas();
                //console.writeline(numero_secreto.Text.Equals(cc.numero_secreto.ToString()) + " " + caducidad.Text.Equals(cc.caducidad.Split('/')[0]) + " " + caducidad1.Text.Equals(cc.caducidad.Split('/')[1]) + " " + titular_tarjeta.Text.Equals(cc.titular) + " " + numero_tarjeta.Text.Equals(cc.n_tarjeta.ToString()) + " " + mail_cliente.Text.Equals(cc.mail) + " " + telefonos_cliente2.Text.Equals(cc.telefon2) + " " + telefonos_cliente.Text.Equals(cc.telefon1));
                //console.writeline(pais.Text.Equals(cc.Pais) + " " + provincia.Text.Equals(cc.Provincia) + " " + poblacion_cliente.Text.Equals(cc.poblacio) + " " + CP.Text.Equals(cc.codigo_postal) + " " + puerta.Text.Equals(cc.Puerta) + " " + piso.Text.Equals(cc.Piso) + " " + numero.Text.Equals(cc.Numero) + " " + direccion_cliente.Text.Equals(cc.direccion) + " " + dni.Text.Equals(cc.dni) + " " + apellidos_cliente.Text.Equals(cc.apellidos_cliente) + " " + nombre_cliente.Text.Equals(cc.nombre_cliente));
                //console.writeline(numero_cliente.Text.Equals(cc.n_cliemte) + " " + Clientes_FechaEntrada.SelectedDate.Equals(cc.Fecha_In) + " " + Clientes_FechaSalida.SelectedDate.Equals(cc.Fecha_Out) + " " + vehiculo1.Text.Equals(cc.Vehiculo1) + " " + matricula1.Text.Equals(cc.matricula1) + " " + numero_bastidor.Text.Equals(cc.Numero_Bastidor1) + " " + vehiculo2.Text.Equals(cc.Vehiculo2) + " " + matricula2.Text.Equals(cc.matricula2) + " " + numero_bastidor2.Text.Equals(cc.Numero_Bastidor2) + " " + nota1.Text.Equals(cc.Nota1) + " " + Clientes_HoraEntrada.Text.Equals(cc.Hora_entrada) + " " + Clientes_HoraSalida.Text.Equals(cc.Hora_salida));
                //console.writeline((b == cc.Switch) + " " + (p.id == int.Parse(cc.n_plaza)) + " " + (pot == cc.Potencia));

                if (p.id == null)
                    p.id = 0;

                //console.writeline(p.id + " " + cc.n_plaza);
                if (numero_secreto.Text.Equals(cc.numero_secreto.ToString()) && caducidad.Text.Equals(cc.caducidad.Split('/')[0]) && caducidad1.Text.Equals(cc.caducidad.Split('/')[1]) && titular_tarjeta.Text.Equals(cc.titular) && numero_tarjeta.Text.Equals(cc.n_tarjeta.ToString()) && mail_cliente.Text.Equals(cc.mail) && telefonos_cliente2.Text.Equals(cc.telefon2) && telefonos_cliente.Text.Equals(cc.telefon1) && pais.Text.Equals(cc.Pais) && provincia.Text.Equals(cc.Provincia) && poblacion_cliente.Text.Equals(cc.poblacio) && CP.Text.Equals(cc.codigo_postal) && puerta.Text.Equals(cc.Puerta) && piso.Text.Equals(cc.Piso) && numero.Text.Equals(cc.Numero) && direccion_cliente.Text.Equals(cc.direccion) && dni.Text.Equals(cc.dni) && apellidos_cliente.Text.Equals(cc.apellidos_cliente) && nombre_cliente.Text.Equals(cc.nombre_cliente) && numero_cliente.Text.Equals(cc.n_cliemte) && Clientes_FechaEntrada.SelectedDate.Equals(cc.Fecha_In) && Clientes_FechaSalida.SelectedDate.Equals(cc.Fecha_Out) && vehiculo1.Text.Equals(cc.Vehiculo1) && matricula1.Text.Equals(cc.matricula1) && vehiculo2.Text.Equals(cc.Vehiculo2) && matricula2.Text.Equals(cc.matricula2) && pot == cc.Potencia && nota1.Text.Equals(cc.Nota1) && p.id == int.Parse(cc.n_plaza) && Clientes_HoraEntrada.Text.Equals(cc.Hora_entrada) && Clientes_HoraSalida.Text.Equals(cc.Hora_salida))
                {
                    Console.WriteLine("17680");
                    change_client.IsEnabled = false;

                    change_client.IsEnabled = false;
                    safe = false;
                    //añadir_evento.IsEnabled = false;
                }
                else
                {
                    Console.WriteLine("!17680");
                    change_client.IsEnabled = true;

                    change_client.IsEnabled = true;
                    safe = true;
                    //añadir_evento.IsEnabled = true;
                }
            }
        }

        private void Potencia_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                Clientes cc = Clientes.SelectedItem as Clientes;
                if (!(cc is null))
                {
                    int pot = 0;
                    if (Potencia.SelectedItem != null)
                    {
                        Potencia pp = Potencia.SelectedItem as Potencia;
                        pot = pp.Id;
                    }
                    int b = 0;
                    if (Switch.IsChecked.Value)
                    {
                        b = 1;
                    }
                    Parcelas p = numero_plaza.SelectedItem as Parcelas;

                    if (p == null)
                        p = new Parcelas();


                    if (p.id == null)
                        p.id = 0;
                    string cd = "";
                    string cd2 = "";
                    if (cc.caducidad.Contains("/"))
                    {
                        cd = cc.caducidad.Split('/')[0];
                        cd2 = cc.caducidad.Split('/')[1];
                    }
                    bool pos = false;
                    if (bdr2.HorizontalAlignment == HorizontalAlignment.Left)
                        pos = true;

                    //console.writeline(p.id + " " + cc.n_plaza);
                    if (numero_secreto.Text.Equals(cc.numero_secreto.ToString()) && caducidad.Text.Equals(cd) && caducidad1.Text.Equals(cd2) && titular_tarjeta.Text.Equals(cc.titular) && numero_tarjeta.Text.Equals(cc.n_tarjeta.ToString()) && mail_cliente.Text.Equals(cc.mail) && telefonos_cliente2.Text.Equals(cc.telefon2) && telefonos_cliente.Text.Equals(cc.telefon1) && pais.Text.Equals(cc.Pais) && provincia.Text.Equals(cc.Provincia) && poblacion_cliente.Text.Equals(cc.poblacio) && CP.Text.Equals(cc.codigo_postal) && puerta.Text.Equals(cc.Puerta) && piso.Text.Equals(cc.Piso) && numero.Text.Equals(cc.Numero) && direccion_cliente.Text.Equals(cc.direccion) && dni.Text.Equals(cc.dni) && apellidos_cliente.Text.Equals(cc.apellidos_cliente) && nombre_cliente.Text.Equals(cc.nombre_cliente) && numero_cliente.Text.Equals(cc.n_cliemte + "") && Clientes_FechaEntrada.SelectedDate == cc.Fecha_In && Clientes_FechaSalida.SelectedDate == cc.Fecha_Out && vehiculo1.Text.Equals(cc.Vehiculo1) && matricula1.Text.Equals(cc.matricula1) && vehiculo2.Text.Equals(cc.Vehiculo2) && matricula2.Text.Equals(cc.matricula2) && vehiculo3.Text.Equals(cc.Vehiculo3) && matricula3.Text.Equals(cc.matricula3) && vehiculo4.Text.Equals(cc.Vehiculo4) && matricula2.Text.Equals(cc.matricula2) && pot == cc.Potencia && nota1.Text.Equals(cc.Nota1) && p.id == int.Parse(cc.n_plaza) && Clientes_HoraEntrada.Text.Equals(cc.Hora_entrada) && Clientes_HoraSalida.Text.Equals(cc.Hora_salida) && Iban.Text.Equals(cc.iban) && Swift.Text.Equals(cc.swift) && entidad_bancaria.Text.Equals(cc.entidad_bacnaria) && Iban2.Text.Equals(cc.iban2) && Swift2.Text.Equals(cc.swift2) && entidad_bancaria2.Text.Equals(cc.entidad_bacnaria2) && mail_cliente2.Text.Equals(cc.mail2) && pos == cc.DeBaja && Fecha_Entrada_Estado.SelectedDate == cc.fecha_entrada_estado && Fecha_Contrato.SelectedDate == cc.fecha_contrato && Fecha_Pago.SelectedDate == cc.fecha_pago && medidas_vehiculo1.Text.Equals(cc.Medidas_Vehiculo1))
                    {
                        Console.WriteLine("17224");
                        change_client.IsEnabled = false;

                        change_client.IsEnabled = false;
                        safe = false;
                        //añadir_evento.IsEnabled = false;
                    }
                    else
                    {
                        Console.WriteLine("!17224");
                        change_client.IsEnabled = true;

                        change_client.IsEnabled = true;
                        safe = true;
                        //añadir_evento.IsEnabled = true;
                    }


                }
            }
            catch (Exception ee)
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                Peta(ee, line + "");
            }
        }

        private void parcela_sel2(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                if (clienteBuscado != null)
                {
                    //Cliente_Parcela2.Items.Remove(clienteBuscado);
                    clienteBuscado = new Clientes();
                }
                if (lista_parcelas2.SelectedItem != null)
                {//aqui
                    Datos_Parcela.IsEnabled = true;
                    Datos_Parcela2.IsEnabled = true;
                    Parcelas p = lista_parcelas2.SelectedItem as Parcelas;


                    /* N_parcela.Text = p.n_parcela;
                     nombre.Text = p.nom;
                     if (p.potencia == 6)
                     {
                         Potencia.SelectedIndex =0;

                     }else if (p.potencia == 10)
                     {
                         Potencia.SelectedIndex = 1;
                     }
                     else if(p.potencia==12)
                     {
                         Potencia.SelectedIndex = 2;
                     }
                     else
                     {
                         Potencia.SelectedIndex = -1;
                     }

                     Switch.IsChecked = Convert.ToBoolean(p.check);
                     Suministros.Visibility = Visibility.Visible;
                    CAMBIAR&
                     */
                    Nombre_Parcela2.Text = p.nom;
                    foreach (Clientes cc in lcln)
                    {
                        if (cc.asignado.Equals("0"))
                        {
                            //Cliente_Parcela2.Items.Add(p);
                        }
                        else
                        {
                            if (cc.Lista_Parcelas.Contains(p))
                            {
                                //Cliente_Parcela2.Items.Add(p);
                            }
                        }
                    }
                    //Cliente_Parcela2.SelectedItem = lcln.Find(x => x.id == p.n_cliente);
                    Distrito2.Text = p.Distrito + "";
                   
                    Descripción2.Text = p.Descripción;
                    Nota_Parcela2.Text = p.Nota;
                    Medidas2.Text = p.Medidas;
                    if (lcln == null)
                        cargarClientes();
                    Clientes c= lcln.Find(x => x.n_plaza.Equals(p.id + ""));
                    clienteBuscado = c;
                    Clientes_Parcela.Items.Clear();
                    if (p.ocupada == 1)
                    {
                        Clientes_Parcela.Items.Add(lcln.Find(x => x.id == p.n_cliente));

                    }

                    foreach (Clientes cc in lcln.Select(x => x).Where(x => x.asignado == false && !x.DeBaja).ToList())
                    {
                        Clientes_Parcela.Items.Add(cc);
                    }
                    
                    Clientes_Parcela.SelectedItem = lcln.Find(x => x.id == p.n_cliente);

                    if (c != null)
                    {
                        lista_potencia_parcelas.SelectedItem = lcnt.Find(x => x.Id == c.Potencia);
                    }
                    else
                    {
                        lista_potencia_parcelas.SelectedItem = null;
                    }
                    if(Clientes_Parcela.SelectedItem!=null)
                        boton_ficha.Visibility = Visibility.Visible;
                    else
                        boton_ficha.Visibility = Visibility.Collapsed;

                    if (Clientes_Parcela.SelectedItem != null)
                    {
                        if (permisos[20] == '1')
                        {
                            boton_ficha.Visibility = Visibility.Visible;
                        }
                        else
                        {
                            boton_ficha.Visibility = Visibility.Collapsed;
                        }
                    }

                }
                else
                {
                    Datos_Parcela.IsEnabled = false;
                    Datos_Parcela2.IsEnabled = false;
                }
                ComprobarRoles();
                if (rol_log.Nom.Equals("admin"))
                {
                    deletemapa.Visibility = Visibility.Visible;
                }
                else
                {
                    deletemapa.Visibility = Visibility.Collapsed;
                }
                //Cliente_Parcela2.Items.Add(clienteBuscado);
            }
            catch (Exception ee)
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                Peta(ee, line + "");
            }
        }

        private void parcela_sel(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                if (lista_parcelas.SelectedItem != null)
                {
                    if (ultParc != null)
                    {
                        ultParc.ParcelaIsSelected = false;
                        ultParc = lista_parcelas.SelectedItem as Parcelas;
                        ultParc.ParcelaIsSelected = true;
                        editmapa.Visibility = Visibility.Visible;
                    }
                    else
                    {
                        ultParc = lista_parcelas.SelectedItem as Parcelas;
                        ultParc.ParcelaIsSelected = true;
                        editmapa.Visibility = Visibility.Visible;
                    }

                }
                if (clienteBuscado != null)
                {
                    //Cliente_Parcela.Items.Remove(clienteBuscado);
                    clienteBuscado = new Clientes();
                }
                if (parcela_seleccionada != null)
                {
                    if (parcela_seleccionada.botones != null)
                        foreach (Border b in parcela_seleccionada.botones)
                        {
                            if (parcela_seleccionada.ocupada == 1)
                                b.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.colorocupado);
                            else

                                b.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.colorlibre);
                        }
                    parcela_seleccionada = lista_parcelas.SelectedItem as Parcelas;
                    if (parcela_seleccionada != null)
                        clienteBuscado = lcln.Find(x => x.n_plaza.Equals(parcela_seleccionada.id + ""));
                    lista_parcelas2.SelectedItem = parcela_seleccionada;

                    if (parcela_seleccionada != null)
                        foreach (Border b in parcela_seleccionada.botones)
                        {
                            b.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.colorselec);
                        }
                    lista_parcelas.Visibility = Visibility.Visible; lista_mapa.Visibility = Visibility.Collapsed;

                }
                else
                {
                    parcela_seleccionada = lista_parcelas.SelectedItem as Parcelas;
                    if (parcela_seleccionada != null)
                        foreach (Border b in parcela_seleccionada.botones)
                        {
                            b.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.colorselec);
                        }
                    lista_parcelas.Visibility = Visibility.Visible; lista_mapa.Visibility = Visibility.Collapsed;
                    if (parcela_seleccionada != null)
                        clienteBuscado = lcln.Find(x => x.n_plaza.Equals(parcela_seleccionada.id + ""));
                }
                //if(clienteBuscado!=null)
                //Cliente_Parcela.Items.Add(clienteBuscado);ComprobarRoles();
                ComprobarRoles();
            }
            catch (Exception ee)
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                Peta(ee, line + "");
            }

            Selector selector = sender as Selector; 
            if (selector is ListView) { (selector as ListView).ScrollIntoView(selector.SelectedItem); }
        }

        //////////////////////////////////////////////////////////////////////////////////

        /*++++++++++  FUNCIONES Y BOTONES FACTURAS&  ++++++++++*/
        //BOTONES SUBMENU
        private void boton1_Factura_Click(object sender, RoutedEventArgs e)
        {
            if (safe)
            {
                safe = false;
                MessageBoxResult result = MessageBox.Show("Hay cambios realizado en la pestaña ¿Desea continuar?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                if (result == MessageBoxResult.OK)
                {
                    clearFactura_Click(clearFactura, RoutedEventArgs);
                    if (Facturas.SelectedItem != null)
                        Save.Visibility = Visibility.Visible;
                    else
                        Save.Visibility = Visibility.Collapsed;

                    factura_menu.SelectedIndex = 0;

                    boton1_Factura.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground); ;
                    boton1_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                    boton2_Factura.Background = Brushes.Transparent;
                    boton2_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton1_Facturai.Source = new BitmapImage(new Uri(@"/iconos/userclick.png", UriKind.RelativeOrAbsolute));
                    boton1_Facturat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                    boton2_Facturai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton2_Facturat.Foreground = Brushes.Black;
                    boton3_Facturai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                    boton3_Facturat.Foreground = Brushes.Black;
                    boton4_Facturai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                    boton4_Facturat.Foreground = Brushes.Black;
                    boton5_Facturai.Source = new BitmapImage(new Uri(@"/iconos/box.png", UriKind.RelativeOrAbsolute));
                    boton5_Facturat.Foreground = Brushes.Black;



                    boton1_Factura.BorderThickness = new Thickness(1);

                    boton3_Factura.Background = Brushes.Transparent;
                    boton3_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton4_Factura.Background = Brushes.Transparent;
                    boton4_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                    boton5_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                    boton5_Factura.Background = Brushes.Transparent;
                    boton5_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                    if (Facturas.SelectedItem != null)
                    {
                        Save.Visibility = Visibility.Visible;
                    }
                    else
                    {
                        Save.Visibility = Visibility.Collapsed;
                    }


                    AddnewFactura.ToolTip = "Añadir nueva factura";
                    editFactura.ToolTip = "Editar factura";
                    deleteFactura.ToolTip = "Borrar factura seleccionado";


                    Save.ToolTip = "Guardar Pdf de la/s factura/s seleccionada/s";
                    CargarFacturas();
                    ComprobarRoles();
                }
            }
            else
            {
                if (Facturas.SelectedItem != null)
                    Save.Visibility = Visibility.Visible;
                else
                    Save.Visibility = Visibility.Collapsed;

                factura_menu.SelectedIndex = 0;

                boton1_Factura.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground); ;
                boton1_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);

                boton2_Factura.Background = Brushes.Transparent;
                boton2_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton1_Facturai.Source = new BitmapImage(new Uri(@"/iconos/userclick.png", UriKind.RelativeOrAbsolute));
                boton1_Facturat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                boton2_Facturai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton2_Facturat.Foreground = Brushes.Black;
                boton3_Facturai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                boton3_Facturat.Foreground = Brushes.Black;
                boton4_Facturai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                boton4_Facturat.Foreground = Brushes.Black;
                boton5_Facturai.Source = new BitmapImage(new Uri(@"/iconos/box.png", UriKind.RelativeOrAbsolute));
                boton5_Facturat.Foreground = Brushes.Black;



                boton1_Factura.BorderThickness = new Thickness(1);

                boton3_Factura.Background = Brushes.Transparent;
                boton3_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton4_Factura.Background = Brushes.Transparent;
                boton4_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                boton5_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                boton5_Factura.Background = Brushes.Transparent;
                boton5_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                if (Facturas.SelectedItem != null)
                {
                    Save.Visibility = Visibility.Visible;
                }
                else
                {
                    Save.Visibility = Visibility.Collapsed;
                }


                AddnewFactura.ToolTip = "Añadir nueva factura";
                editFactura.ToolTip = "Editar factura";
                deleteFactura.ToolTip = "Borrar factura seleccionado";


                Save.ToolTip = "Guardar Pdf de la/s factura/s seleccionada/s";
                CargarFacturas();
                ComprobarRoles();
            }
        }

        private void boton2_Factura_Click(object sender, RoutedEventArgs e)
        {
            if (safe)
            {
                safe = false;
                MessageBoxResult result = MessageBox.Show("Hay cambios realizado en la pestaña ¿Desea continuar?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                if (result == MessageBoxResult.OK)
                {
                    clearFactura_Click(clearFactura, RoutedEventArgs);
                    factura_menu.SelectedIndex = 1;
                    boton1_Facturai.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                    boton1_Facturat.Foreground = Brushes.Black;
                    boton2_Facturai.Source = new BitmapImage(new Uri(@"/iconos/articleclick.png", UriKind.RelativeOrAbsolute));
                    boton2_Facturat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                    boton3_Facturai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                    boton3_Facturat.Foreground = Brushes.Black;
                    boton4_Facturai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                    boton4_Facturat.Foreground = Brushes.Black;
                    boton5_Facturai.Source = new BitmapImage(new Uri(@"/iconos/box.png", UriKind.RelativeOrAbsolute));
                    boton5_Facturat.Foreground = Brushes.Black;


                    boton1_Factura.Background = Brushes.Transparent;
                    boton1_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton2_Factura.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                    boton2_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                    boton2_Factura.BorderThickness = new Thickness(1);

                    boton3_Factura.Background = Brushes.Transparent;
                    boton3_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton4_Factura.Background = Brushes.Transparent;
                    boton4_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                    boton5_Factura.Background = Brushes.Transparent;
                    boton5_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    AddnewFactura.ToolTip = "Añadir nueva factura";
                    editFactura.ToolTip = "Editar factura";
                    deleteFactura.ToolTip = "Borrar factura seleccionado";

                    Save.ToolTip = "Guardar Pdf de la/s factura/s seleccionada/s";
                    ComprobarRoles();
                }
            }
            else
            {
                factura_menu.SelectedIndex = 1;
                boton1_Facturai.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                boton1_Facturat.Foreground = Brushes.Black;
                boton2_Facturai.Source = new BitmapImage(new Uri(@"/iconos/articleclick.png", UriKind.RelativeOrAbsolute));
                boton2_Facturat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                boton3_Facturai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                boton3_Facturat.Foreground = Brushes.Black;
                boton4_Facturai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                boton4_Facturat.Foreground = Brushes.Black;
                boton5_Facturai.Source = new BitmapImage(new Uri(@"/iconos/box.png", UriKind.RelativeOrAbsolute));
                boton5_Facturat.Foreground = Brushes.Black;


                boton1_Factura.Background = Brushes.Transparent;
                boton1_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton2_Factura.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                boton2_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                boton2_Factura.BorderThickness = new Thickness(1);

                boton3_Factura.Background = Brushes.Transparent;
                boton3_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton4_Factura.Background = Brushes.Transparent;
                boton4_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");
                boton5_Factura.Background = Brushes.Transparent;
                boton5_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                AddnewFactura.ToolTip = "Añadir nueva factura";
                editFactura.ToolTip = "Editar factura";
                deleteFactura.ToolTip = "Borrar factura seleccionado";

                Save.ToolTip = "Guardar Pdf de la/s factura/s seleccionada/s";
                ComprobarRoles();
            }
        }

        private void boton3_Factura_Click(object sender, RoutedEventArgs e)
        {
            
            if (safe)
            {
                safe = false;
                MessageBoxResult result = MessageBox.Show("Hay cambios realizado en la pestaña ¿Desea continuar?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                if (result == MessageBoxResult.OK)
                {
                    clearFactura_Click(clearFactura, RoutedEventArgs);
                    if (Recibos.SelectedItem != null)
                        Save.Visibility = Visibility.Visible;
                    else
                        Save.Visibility = Visibility.Collapsed;
                    factura_menu.SelectedIndex = 2;
                    boton1_Facturai.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                    boton1_Facturat.Foreground = Brushes.Black;
                    boton2_Facturai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton2_Facturat.Foreground = Brushes.Black;
                    boton3_Facturai.Source = new BitmapImage(new Uri(@"/iconos/cardclick.png", UriKind.RelativeOrAbsolute));
                    boton3_Facturat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                    boton4_Facturai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                    boton4_Facturat.Foreground = Brushes.Black;
                    boton5_Facturai.Source = new BitmapImage(new Uri(@"/iconos/box.png", UriKind.RelativeOrAbsolute));
                    boton5_Facturat.Foreground = Brushes.Black;
                    Sent.Visibility = Visibility.Collapsed;
                    boton1_Factura.Background = Brushes.Transparent;
                    boton1_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton2_Factura.Background = Brushes.Transparent;
                    boton2_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton3_Factura.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                    boton3_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                    boton3_Factura.BorderThickness = new Thickness(1);

                    boton4_Factura.Background = Brushes.Transparent;
                    boton4_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton5_Factura.Background = Brushes.Transparent;
                    boton5_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    AddnewFactura.ToolTip = "Añadir nuevo recibo";
                    editFactura.ToolTip = "Editar recibo";
                    deleteFactura.ToolTip = "Borrar recibo seleccionado";

                    Save.ToolTip = "Guardar Pdf del/de los recibo/s seleccionado/s";
                    CargarRecibos();
                    ComprobarRoles();
                }
            }
            else
            {
                if (Recibos.SelectedItem != null)
                    Save.Visibility = Visibility.Visible;
                else
                    Save.Visibility = Visibility.Collapsed;
                factura_menu.SelectedIndex = 2;
                boton1_Facturai.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                boton1_Facturat.Foreground = Brushes.Black;
                boton2_Facturai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton2_Facturat.Foreground = Brushes.Black;
                boton3_Facturai.Source = new BitmapImage(new Uri(@"/iconos/cardclick.png", UriKind.RelativeOrAbsolute));
                boton3_Facturat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                boton4_Facturai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                boton4_Facturat.Foreground = Brushes.Black;
                boton5_Facturai.Source = new BitmapImage(new Uri(@"/iconos/box.png", UriKind.RelativeOrAbsolute));
                boton5_Facturat.Foreground = Brushes.Black;

                boton1_Factura.Background = Brushes.Transparent;
                boton1_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton2_Factura.Background = Brushes.Transparent;
                boton2_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton3_Factura.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                boton3_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                boton3_Factura.BorderThickness = new Thickness(1);

                boton4_Factura.Background = Brushes.Transparent;
                boton4_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton5_Factura.Background = Brushes.Transparent;
                boton5_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                AddnewFactura.ToolTip = "Añadir nuevo recibo";
                editFactura.ToolTip = "Editar recibo";
                deleteFactura.ToolTip = "Borrar recibo seleccionado";

                Sent.Visibility = Visibility.Collapsed;
                Save.ToolTip = "Guardar Pdf del/de los recibo/s seleccionado/s";
                CargarRecibos();
                ComprobarRoles();
            }
        }

        private void boton4_Factura_Click(object sender, RoutedEventArgs e)
        {
            if (safe)
            {
                safe = false;
                MessageBoxResult result = MessageBox.Show("Hay cambios realizado en la pestaña ¿Desea continuar?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                if (result == MessageBoxResult.OK)
                {
                    //clearFactura_Click(clearFactura, RoutedEventArgs);
                    Save.Visibility = Visibility.Visible;
                    factura_menu.SelectedIndex = 3;
                    boton1_Facturai.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                    boton1_Facturat.Foreground = Brushes.Black;
                    boton2_Facturai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton2_Facturat.Foreground = Brushes.Black;
                    boton3_Facturai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                    boton3_Facturat.Foreground = boton2_Facturat.Foreground = Brushes.Black;
                    boton4_Facturai.Source = new BitmapImage(new Uri(@"/iconos/cardclick.png", UriKind.RelativeOrAbsolute));
                    boton4_Facturat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                    boton5_Facturai.Source = new BitmapImage(new Uri(@"/iconos/box.png", UriKind.RelativeOrAbsolute));
                    boton5_Facturat.Foreground = Brushes.Black;
                    //boton4_Facturai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                    //boton4_Facturat.Foreground = boton2_Facturat.Foreground = Brushes.Black;


                    boton1_Factura.Background = Brushes.Transparent;
                    boton1_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton2_Factura.Background = Brushes.Transparent;
                    boton2_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    Sent.Visibility = Visibility.Collapsed;
                    boton3_Factura.Background = Brushes.Transparent;
                    boton3_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton4_Factura.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                    boton4_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                    boton4_Factura.BorderThickness = new Thickness(1);

                    boton5_Factura.Background = Brushes.Transparent;
                    boton5_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    Save.ToolTip = "Guardar Pdf del/de los recibo/s seleccionado/s";
                    AddnewFactura.ToolTip = "Añadir nuevo recibo";
                    editFactura.ToolTip = "Editar recibo";
                    deleteFactura.ToolTip = "Borrar recibo seleccionado";

                    ComprobarRoles();
                }
            }
            else
            {
                Save.Visibility = Visibility.Visible;
                factura_menu.SelectedIndex = 3;
                boton1_Facturai.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                boton1_Facturat.Foreground = Brushes.Black;
                boton2_Facturai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton2_Facturat.Foreground = Brushes.Black;
                boton3_Facturai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                boton3_Facturat.Foreground = boton2_Facturat.Foreground = Brushes.Black;
                boton4_Facturai.Source = new BitmapImage(new Uri(@"/iconos/cardclick.png", UriKind.RelativeOrAbsolute));
                boton4_Facturat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                boton5_Facturai.Source = new BitmapImage(new Uri(@"/iconos/box.png", UriKind.RelativeOrAbsolute));
                boton5_Facturat.Foreground = Brushes.Black;
                //boton4_Facturai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                //boton4_Facturat.Foreground = boton2_Facturat.Foreground = Brushes.Black;

                Sent.Visibility = Visibility.Collapsed;

                boton1_Factura.Background = Brushes.Transparent;
                boton1_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton2_Factura.Background = Brushes.Transparent;
                boton2_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton3_Factura.Background = Brushes.Transparent;
                boton3_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton4_Factura.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                boton4_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                boton4_Factura.BorderThickness = new Thickness(1);

                boton5_Factura.Background = Brushes.Transparent;
                boton5_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                Save.ToolTip = "Guardar Pdf del/de los recibo/s seleccionado/s";
                AddnewFactura.ToolTip = "Añadir nuevo recibo";
                editFactura.ToolTip = "Editar recibo";
                deleteFactura.ToolTip = "Borrar recibo seleccionado";

                ComprobarRoles();

            }
        }

        private void boton5_Factura_Click(object sender, RoutedEventArgs e)
        {
            if (safe)
            {
                safe = false;
                MessageBoxResult result = MessageBox.Show("Hay cambios realizado en la pestaña ¿Desea continuar?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                if (result == MessageBoxResult.OK)
                {
                    clearFactura_Click(clearFactura, RoutedEventArgs);
                    Save.Visibility = Visibility.Collapsed;
                    factura_menu.SelectedIndex = 4;
                    boton1_Facturai.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                    boton1_Facturat.Foreground = Brushes.Black;
                    boton2_Facturai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                    boton2_Facturat.Foreground = Brushes.Black;
                    boton3_Facturai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                    boton3_Facturat.Foreground = boton2_Facturat.Foreground = Brushes.Black;
                    boton4_Facturai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                    boton4_Facturat.Foreground = Brushes.Black;
                    boton5_Facturai.Source = new BitmapImage(new Uri(@"/iconos/boxclick.png", UriKind.RelativeOrAbsolute));
                    boton5_Facturat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                    //boton4_Facturai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                    //boton4_Facturat.Foreground = boton2_Facturat.Foreground = Brushes.Black;


                    Sent.Visibility = Visibility.Collapsed;
                    boton1_Factura.Background = Brushes.Transparent;
                    boton1_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton2_Factura.Background = Brushes.Transparent;
                    boton2_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton3_Factura.Background = Brushes.Transparent;
                    boton3_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                    boton5_Factura.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                    boton5_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                    boton5_Factura.BorderThickness = new Thickness(1);
                    boton4_Factura.Background = Brushes.Transparent;
                    boton4_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");


                    AddnewFactura.ToolTip = "Añadir nuevo producto";
                    editFactura.ToolTip = "Editar producto";
                    deleteFactura.ToolTip = "Borrar producto seleccionado";

                    cargarProductosNuevos();
                    ComprobarRoles();
                }
            }
            else
            {
                Save.Visibility = Visibility.Collapsed;
                factura_menu.SelectedIndex = 4;
                boton1_Facturai.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                boton1_Facturat.Foreground = Brushes.Black;
                boton2_Facturai.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton2_Facturat.Foreground = Brushes.Black;
                boton3_Facturai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                boton3_Facturat.Foreground = boton2_Facturat.Foreground = Brushes.Black;
                boton4_Facturai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                boton4_Facturat.Foreground = Brushes.Black;
                boton5_Facturai.Source = new BitmapImage(new Uri(@"/iconos/boxclick.png", UriKind.RelativeOrAbsolute));
                boton5_Facturat.Foreground = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                //boton4_Facturai.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                //boton4_Facturat.Foreground = boton2_Facturat.Foreground = Brushes.Black;

                Sent.Visibility = Visibility.Collapsed;

                boton1_Factura.Background = Brushes.Transparent;
                boton1_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton2_Factura.Background = Brushes.Transparent;
                boton2_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton3_Factura.Background = Brushes.Transparent;
                boton3_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");

                boton5_Factura.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBackground);
                boton5_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.ButtonBorder);
                boton5_Factura.BorderThickness = new Thickness(1);
                boton4_Factura.Background = Brushes.Transparent;
                boton4_Factura.BorderBrush = (Brush)new BrushConverter().ConvertFrom("#343434");


                AddnewFactura.ToolTip = "Añadir nuevo producto";
                editFactura.ToolTip = "Editar producto";
                deleteFactura.ToolTip = "Borrar producto seleccionado";

                cargarProductosNuevos();
                ComprobarRoles();

            }
        }

        //BOTONES HERRAMIENTAS

        private void gridNoGrid_Click(object sender, RoutedEventArgs e)
        {


            foreach (Border b in camping.Children)
            {
                if (b.BorderBrush == Brushes.Transparent)
                    b.BorderBrush = Brushes.Gray;
                else
                    b.BorderBrush = Brushes.Transparent;

            }

        }
        //FUNCIONES
        private void mirarFactura(object sender, TextChangedEventArgs e)
        {
            if (Facturas.SelectedItem != null)
            {
                Facturas f = Facturas.SelectedItem as Facturas;

                bool a = false;
                if (!Nombre_Cliente_Factura.Text.Equals(f.Nombre_Cliente))
                {
                    a = true;
                    Nombre_Cliente_Factura.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Nombre_Cliente_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                Console.WriteLine("1 "+ a);

                if (!DNI_Cliente_Factura.Text.Equals(f.DNI_CIF))
                {
                    a = true;
                    DNI_Cliente_Factura.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    DNI_Cliente_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                Console.WriteLine("2 " + a);
                if (!Direccion_Camping_Factura.Text.Equals(f.Direccion_Facturacion))
                {
                    a = true;
                    Direccion_Camping_Factura.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Direccion_Camping_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                Console.WriteLine("3 " + a);
                if (!Poblacion_Camping_Factura.Text.Equals(f.Poblecion_Facturacion))
                {
                    a = true;
                    Poblacion_Camping_Factura.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Poblacion_Camping_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                Console.WriteLine("4 " + a);

                if (!Codigo_Postal_Camping_Factura.Text.Equals(f.CP_Facturacion.ToString()))
                {
                    Codigo_Postal_Camping_Factura.BorderBrush = Brushes.Red;
                    a = true;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Codigo_Postal_Camping_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                Console.WriteLine("5 " + a);
                if (!Provincia_Camping_Factura.Text.Equals(f.Provincia_Facturacion))

                {
                    a = true;
                    Provincia_Camping_Factura.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Provincia_Camping_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                Console.WriteLine("6 " + a);
                if (!Fecha_Factura.SelectedDate.Equals(f.fecha))
                {
                    a = true;
                    Fecha_Factura.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Fecha_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                Console.WriteLine("7 " + a);
                if (!Fecha_Factura_ven.SelectedDate.Equals(f.fecha_ven))
                {
                    a = true;
                    Fecha_Factura_ven.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Fecha_Factura_ven.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                Console.WriteLine("8 " + a);
                if (!Importe_Factura.Text.Equals(f.Importe.ToString("0.00") + " €"))
                {
                    a = true;
                    Base_Imponible.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Base_Imponible.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                Console.WriteLine("9 " + a);

                if (!Direccion_Cliente_Factura.Text.Equals(f.Direccion_Cliente))
                {
                    a = true;
                    Direccion_Cliente_Factura.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Direccion_Cliente_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                Console.WriteLine("10 " + a);
                if (!Poblacion_Cliente_Factura.Text.Equals(f.Poblacio_Cliente))
                {
                    a = true;
                    Poblacion_Cliente_Factura.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Poblacion_Cliente_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                Console.WriteLine("11 " + a);
                if (!Codigo_Postal_Cliente_Facturacion.Text.Equals(f.CP_Cliente.ToString()))
                {
                    a = true;
                    Codigo_Postal_Cliente_Facturacion.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Codigo_Postal_Cliente_Facturacion.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                Console.WriteLine("12 " + a);
                if (!Provincia_Cliente_Factura.Text.Equals(f.Provincia_Cliente))
                {
                    a = true;
                    Provincia_Cliente_Factura.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Provincia_Cliente_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                Console.WriteLine("13 " + a);



                if (!Pais_Cliente_Factura.Text.Equals(f.Pais_Cliente))
                {
                    a = true;
                    Pais_Camping_Factura.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Pais_Cliente_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                Console.WriteLine("14 " + a);

                if (!Pais_Camping_Factura.Text.Equals(f.Pais_Facturacion))
                {
                    a = true;
                    Pais_Camping_Factura.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Pais_Camping_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                Console.WriteLine("15 " + a);

                if (!Empresa.Text.Equals(f.Empresa))
                {
                    a = true;
                    Empresa.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Empresa.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                Console.WriteLine("16 " + a);


                if (!Telefono_cliente.Text.Equals(f.Telefono))
                {
                    a = true;
                    Metodo_Pago.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Telefono_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                Console.WriteLine("17 " + a);
                if (!Telefono_Camping_Factura.Text.Equals(f.Telefono_Camping))
                {
                    a = true;
                    Telefono_Camping_Factura.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Telefono_Camping_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                Console.WriteLine("18 " + a);

                if (Metodo_Pago.SelectedIndex != f.Metodo_Pago)
                {
                    a = true;
                    Metodo_Pago.Foreground = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Metodo_Pago.Foreground = Brushes.Black;
                }
                Console.WriteLine("19 " + a);
                if (!Descuento.Text.Equals(f.Descuento))
                {
                    a = true;
                    Descuento.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Descuento.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                Console.WriteLine("20 " + a);
                int[] pr = new int[f.Lista_productos.Count()];
                for (int i = 0; i < pr.Count(); i++)
                {
                    pr[i] = -1;
                }

                if (f.Lista_productos.Count == Productos.Items.Count)
                {
                    
                    foreach (Producto p in Productos.Items)
                    {
                        for(int i = 0; i < f.Lista_productos.Count(); i++)
                        {   if(pr[i]!=1)
                            if (f.Lista_productos[i].Nombre_Producto.Equals(p.Nombre_Producto))
                            {
                                    pr[i] = 1;
                                    
                                    break;
                            }else if(pr[i] != 1) pr[i] = 0;

                        }
                        

                    }
                }
                else
                    a = true;

                foreach (int i in pr)
                    Console.WriteLine(i + " ");
                if (pr.Contains(0))
                {
                    a = true;
                    Productos.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Productos.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                Console.WriteLine("21 " + a);

                if (a)
                {
                    change_Factura.IsEnabled = true;
                    safe = true;

                }
                else
                {
                    change_Factura.IsEnabled = false;
                    safe = false;
                }

            }
        }
        private void mirarFactura3(object sender, SelectionChangedEventArgs e)
        {
            if (Recibos.SelectedItem != null)
            {
                Recibos f = Recibos.SelectedItem as Recibos;
                bool a = false;
                if (!Nombre_Cliente_Factura2.Text.Equals(f.Nombre_Cliente))
                {
                    a = true;
                    Nombre_Cliente_Factura2.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Nombre_Cliente_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (!DNI_Cliente_Factura2.Text.Equals(f.DNI_CIF))
                {
                    a = true;
                    DNI_Cliente_Factura2.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    DNI_Cliente_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (!Direccion_Camping_Factura2.Text.Equals(f.Direccion_Facturacion))
                {
                    a = true;
                    Direccion_Camping_Factura2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Direccion_Camping_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (!Poblacion_Camping_Factura2.Text.Equals(f.Poblecion_Facturacion))
                {
                    a = true;
                    Poblacion_Camping_Factura2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Poblacion_Camping_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (!Codigo_Postal_Camping_Factura2.Text.Equals(f.CP_Facturacion.ToString()))
                {
                    Codigo_Postal_Camping_Factura2.BorderBrush = Brushes.Red;
                    a = true;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Codigo_Postal_Camping_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (!Provincia_Camping_Factura2.Text.Equals(f.Provincia_Facturacion))

                {
                    a = true;
                    Provincia_Camping_Factura2.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Provincia_Camping_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (!Fecha_Factura2.SelectedDate.Equals(f.fecha))
                {
                    a = true;
                    Fecha_Factura2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Fecha_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (!Fecha_Factura_ven2.SelectedDate.Equals(f.fecha_ven))
                {
                    a = true;
                    Fecha_Factura_ven2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Fecha_Factura_ven2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (!Importe_Factura2.Text.Equals(f.Importe.ToString("0.00") + " €"))
                {
                    a = true;
                    Base_Imponible2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Base_Imponible2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }





                if (!Direccion_Cliente_Factura2.Text.Equals(f.Direccion_Cliente))
                {
                    a = true;
                    Direccion_Cliente_Factura2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Direccion_Cliente_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (!Descuento2.Text.Equals(f.Descuento))
                {
                    a = true;
                    Descuento2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Descuento2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (!Poblacion_Cliente_Factura2.Text.Equals(f.Poblacio_Cliente))
                {
                    a = true;
                    Poblacion_Cliente_Factura2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Poblacion_Cliente_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (!Codigo_Postal_Cliente_Facturacion2.Text.Equals(f.CP_Cliente.ToString()))
                {
                    a = true;
                    Codigo_Postal_Cliente_Facturacion2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Codigo_Postal_Cliente_Facturacion2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (!Provincia_Cliente_Factura2.Text.Equals(f.Provincia_Cliente))
                {
                    a = true;
                    Provincia_Cliente_Factura2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Provincia_Cliente_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }



                if (!Pais_Cliente_Factura2.Text.Equals(f.Pais_Cliente))
                {
                    a = true;
                    Pais_Camping_Factura2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Pais_Cliente_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (!Pais_Camping_Factura2.Text.Equals(f.Pais_Facturacion))
                {
                    a = true;
                    Pais_Camping_Factura2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Pais_Camping_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (!Empresa2.Text.Equals(f.Empresa))
                {
                    a = true;
                    Empresa2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Empresa2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }


                if (!Telefono_cliente2.Text.Equals(f.Telefono))
                {
                    a = true;
                    Metodo_Pago2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Telefono_cliente2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (!Telefono_Camping_Factura2.Text.Equals(f.Telefono_Camping))
                {
                    a = true;
                    Telefono_Camping_Factura2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Telefono_Camping_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (!Mail_cliente2.Text.Equals(f.Mail))
                {
                    a = true;
                    Mail_cliente2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Mail_cliente2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (Metodo_Pago2.SelectedIndex != f.Metodo_Pago)
                {
                    a = true;
                    Metodo_Pago2.Foreground = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Metodo_Pago2.Foreground = Brushes.Black;
                }

                int[] pr = new int[f.Lista_productos.Count()];
                for (int i = 0; i < pr.Count(); i++)
                {
                    pr[i] = -1;
                }

                if (f.Lista_productos.Count == Productos2.Items.Count)
                {

                    foreach (Producto p in Productos2.Items)
                    {
                        for (int i = 0; i < f.Lista_productos.Count(); i++)
                        {
                            if (pr[i] != 1)
                                if (f.Lista_productos[i].Nombre_Producto.Equals(p.Nombre_Producto))
                                {
                                    pr[i] = 1;

                                    break;
                                }
                                else if (pr[i] != 1) pr[i] = 0;

                        }


                    }
                }
                else
                    a = true;

                foreach (int i in pr)
                    Console.WriteLine(i + " ");
                if (pr.Contains(0))
                {
                    a = true;
                    Productos2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Productos2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                Console.WriteLine("21 " + a);

                if (a)
                {
                    change_Factura.IsEnabled = true;
                    safe = true;

                }
                else
                {
                    change_Factura.IsEnabled = false;
                    safe = false;
                }

            }




        }

        
        private void Border_MouseLeftButtonDown_6(object sender, MouseButtonEventArgs e)
        {
            if (e.ClickCount == 2)
                boton2_Factura_Click(boton2_Factura, RoutedEventArgs);


        }



        //////////////////////////////////////////////////////////////////////////////////

        /*++++++++++  OTRAS FUNCIONES PRINCIPALES  ++++++++++*/
        //FUNCIONES


        private void AddnewFactura_Click(object sender, RoutedEventArgs e)
        {
            if (factura_menu.SelectedIndex == 0 || factura_menu.SelectedIndex == 1)
            {
                if (Empresadatos[8].Equals("1000"))
                {
                    MessageBoxResult result = MessageBox.Show("Numero maximo de facturas alcanzado, cambia la serie", "Alerta!", MessageBoxButton.OK, MessageBoxImage.Exclamation);
                    if (result == MessageBoxResult.OK)
                    {
                        Trabajadores(Trabajadoresbutton, RoutedEventArgs);
                        boton10_Sistema_Click(boton10_Sistema, RoutedEventArgs);
                    }
                }else
                if (!cliente)
                {
                    cargarClientes();
                    vf.Close();
                    CargarIva();
                    cargarProductosNuevos();
                    //Clientes c = Clientes.SelectedItem as Clientes;
                    vf = new VentanaFactura(lcln, liva, Empresadatos, lpdrr);
                    vf.Show();
                }
                else
                {
                    Clientes c = Clientes.SelectedItem as Clientes;
                    cargarClientes();
                    vf.Close();
                    CargarIva();
                    cargarProductosNuevos();
                    //Clientes c = Clientes.SelectedItem as Clientes;
                    vf = new VentanaFactura(lcln, liva, Empresadatos, lpdrr, c.nombre_completo);
                    vf.Show();
                }

            }
            else if (factura_menu.SelectedIndex == 2 || factura_menu.SelectedIndex == 3)
            {
                if (!cliente)
                {
                    cargarClientes();
                    vf.Close();
                    CargarIva();
                    cargarProductosNuevos();
                    //Clientes c = Clientes.SelectedItem as Clientes;
                    vf = new VentanaFactura(lcln, liva, Empresadatos, lpdrr, 1);
                    vf.Show();
                }
                else
                {
                    Clientes c = Clientes.SelectedItem as Clientes;
                    cargarClientes();
                    vf.Close();
                    CargarIva();
                    cargarProductosNuevos();
                    //Clientes c = Clientes.SelectedItem as Clientes;
                    vf = new VentanaFactura(lcln, liva, Empresadatos, lpdrr, c.nombre_completo,1);
                    vf.Show();
                }
            }
            else
            {
                CargarIva();
                vprdn.Close();
                vprdn = new VentanaProductoNuevo(liva, null);
                vprdn.Show();
            }

        }

        private void GoToUser(object sender, RoutedEventArgs e)
        {

            Trabajadores(Trabajadoresbutton, RoutedEventArgs);
            boton2_Sistema_Click(boton2_Sistema, RoutedEventArgs);
            Rol_usuario.SelectedItem = rol_log;
            Nombre_Trabajador.Text = user_log.Nombre;
            Apellido1_Trabajador.Text = user_log.Apellido1;
            Apellido2_Trabajador.Text = user_log.Apellido2;
            Dni_usuario.Text = user_log.Dni_Trabajador;
            Telefono.Text = user_log.Telefono;
            Mail.Text = user_log.Mail;
            direccion_trabajador.Text = user_log.Direccion;
            numero_trabajador.Text = user_log.Numero;
            piso_trabajador.Text = user_log.Piso;
            puerta_trabajador.Text = user_log.Puerta;
            CP_trabajador.Text = user_log.CP;
            poblacion_trabajador.Text = user_log.Poblacion;
            codigo_poblacio_trabajador.Text = user_log.Provincia;
            codigo_pais_trabajador.Text = user_log.Pais;
            Nota.Text = user_log.Nota;


        }

        private void Grid_MouseWheel(object sender, MouseWheelEventArgs e)
        {
            if (e.Delta > 0)
            {

                if (zoom < 0)
                    zoom = 0;
                zoom += 5;
            }
            else if (e.Delta < 0)
            {
                if (zoom > 0)
                    zoom = 0;


                zoom -= 5;
            }
            if (viewBoxCamping.ActualWidth + zoom > 0 && viewBoxCamping.ActualHeight + zoom > 0)
            {
                viewBoxCamping.Width = viewBoxCamping.ActualWidth + zoom;
                viewBoxCamping.Height = viewBoxCamping.ActualHeight + zoom;
            }
        }

        private void buscadorClientes_TextChanged(object sender, TextChangedEventArgs e)
        {

            /*
            if (buscadorClientes.Text.Equals("Buscar..."))
            {
                cliente_menu.SelectedIndex = 1;
                if (lcln != null)
                    foreach (Clientes cl in lcln)
                    {
                        Usuarios.Items.Add(cl);
                    }
            }
            else
            {
                boton1_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
                boton1_Cientest.Foreground = Brushes.Black;
                boton2_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
                boton2_Cientest.Foreground = Brushes.Black;
                boton3_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/box.png", UriKind.RelativeOrAbsolute));
                boton3_Cientest.Foreground = Brushes.Black;
                boton4_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
                boton4_Cientest.Foreground = Brushes.Black;

                boton1_Cientes.Background = Brushes.Transparent;
                boton1_Cientes.BorderBrush = Brushes.Transparent;

                boton2_Cientes.Background = Brushes.Transparent;
                boton2_Cientes.BorderBrush = Brushes.Transparent;

                boton3_Cientes.Background = Brushes.Transparent;
                boton3_Cientes.BorderBrush = Brushes.Transparent;

                boton4_Cientes.Background = Brushes.Transparent;
                boton4_Cientes.BorderBrush = Brushes.Transparent;

                boton5_Cientes.Background = Brushes.Transparent;
                boton5_Cientes.BorderBrush = Brushes.Transparent;

                boton6_Cientes.Background = Brushes.Transparent;
                boton6_Cientes.BorderBrush = Brushes.Transparent;
               // cliente_menu.SelectedIndex = 0;
                buscadorClientes.Text = buscadorClientes.Text.Replace("Buscar...", "");

                switch (filtrar_cliente.SelectedIndex)
                {
                    case 0:
                        {
                            List<Clientes> lc = new List<Clientes>();
                            string[] c = buscadorClientes.Text.Split(' ');
                            if (c.Length > 1)
                            {
                                lc = lcln.Select(sublist => sublist).Where(item => item.nombre_cliente.ToLower().Contains(c[0].ToLower()) && item.apellidos_cliente.ToLower().Contains(c[1].ToLower())).ToList();
                            }
                            else
                            {
                                lc = lcln.Select(sublist => sublist).Where(item => item.nombre_cliente.ToLower().Contains(c[0].ToLower()) || item.apellidos_cliente.ToLower().Contains(c[0].ToLower())).ToList();
                            }




                            Clientes.Items.Clear();
                            foreach (Clientes cl in lc)
                            {
                                Clientes.Items.Add(cl);
                            }
                        }
                        break;
                    case 1:
                        {

                            List<Clientes> lc = new List<Clientes>();

                            lc = lcln.Select(sublist => sublist).Where(item => item.dni.Contains(buscadorClientes.Text)).ToList();





                            Clientes.Items.Clear();
                            foreach (Clientes cl in lc)
                            {
                                Clientes.Items.Add(cl);
                            }
                        }
                        break;

                    case 2:
                        {
                            List<Clientes> lc = new List<Clientes>();

                            lc = lcln.Select(sublist => sublist).Where(item => item.Numero.ToLower().Contains(buscadorClientes.Text.ToLower())).ToList();





                            Clientes.Items.Clear();
                            foreach (Clientes cl in lc)
                            {
                                Clientes.Items.Add(cl);
                            }
                        }
                        break;
                    case 3:
                        {
                            List<Clientes> lc = new List<Clientes>();

                            lc = lcln.Select(sublist => sublist).Where(item => item.direccion.ToLower().Contains(buscadorClientes.Text.ToLower())).ToList();





                            Clientes.Items.Clear();
                            foreach (Clientes cl in lc)
                            {
                                Clientes.Items.Add(cl);
                            }
                        }
                        break;
                    case 4:
                        {
                            List<Clientes> lc = new List<Clientes>();

                            lc = lcln.Select(sublist => sublist).Where(item => item.poblacio.ToLower().Contains(buscadorClientes.Text.ToLower())).ToList();





                            Clientes.Items.Clear();
                            foreach (Clientes cl in lc)
                            {
                                Clientes.Items.Add(cl);
                            }
                        }
                        break;
                    case 5:
                        {
                            List<Clientes> lc = new List<Clientes>();

                            lc = lcln.Select(sublist => sublist).Where(item => item.telefon1.ToLower().Contains(buscadorClientes.Text.ToLower()) || item.telefon2.ToLower().Contains(buscadorClientes.Text.ToLower())).ToList();





                            Clientes.Items.Clear();
                            foreach (Clientes cl in lc)
                            {
                                Clientes.Items.Add(cl);
                            }
                        }
                        break;
                    case 6:
                        {
                            List<Clientes> lc = new List<Clientes>();

                            lc = lcln.Select(sublist => sublist).Where(item => item.codigo_postal.ToLower().Contains(buscadorClientes.Text.ToLower())).ToList();





                            Clientes.Items.Clear();
                            foreach (Clientes cl in lc)
                            {
                                Clientes.Items.Add(cl);
                            }
                        }
                        break;
                    case 7:
                        {
                            List<Clientes> lc = new List<Clientes>();

                            lc = lcln.Select(sublist => sublist).Where(item => item.mail.ToLower().Contains(buscadorClientes.Text.ToLower()) || item.mail2.ToLower().Contains(buscadorClientes.Text.ToLower())).ToList();





                            Clientes.Items.Clear();
                            foreach (Clientes cl in lc)
                            {
                                Clientes.Items.Add(cl);
                            }
                        }
                        break;
                    case 8:
                        {
                            List<Clientes> lc = new List<Clientes>();

                            lc = lcln.Select(sublist => sublist).Where(item => item.Pais.ToLower().Contains(buscadorClientes.Text.ToLower())).ToList();





                            Clientes.Items.Clear();
                            foreach (Clientes cl in lc)
                            {
                                Clientes.Items.Add(cl);
                            }
                        }
                        break;
                    case 9:
                        {
                            List<Clientes> lc = new List<Clientes>();

                            lc = lcln.Select(sublist => sublist).Where(item => item.Provincia.ToLower().Contains(buscadorClientes.Text.ToLower())).ToList();





                            Clientes.Items.Clear();
                            foreach (Clientes cl in lc)
                            {
                                Clientes.Items.Add(cl);
                            }
                        }
                        break;
                    case 10:
                        {
                            List<Clientes> lc = new List<Clientes>();

                            lc = lcln.Select(sublist => sublist).Where(item => item.Vehiculo1.ToLower().Contains(buscadorClientes.Text.ToLower()) || item.Vehiculo2.ToLower().Contains(buscadorClientes.Text.ToLower())).ToList();





                            Clientes.Items.Clear();
                            foreach (Clientes cl in lc)
                            {
                                Clientes.Items.Add(cl);
                            }
                        }
                        break;
                    case 11:
                        {
                            List<Clientes> lc = new List<Clientes>();

                            lc = lcln.Select(sublist => sublist).Where(item => item.Numero_Bastidor1.ToLower().Contains(buscadorClientes.Text.ToLower()) || item.Numero_Bastidor2.ToLower().Contains(buscadorClientes.Text.ToLower())).ToList();





                            Clientes.Items.Clear();
                            foreach (Clientes cl in lc)
                            {
                                Clientes.Items.Add(cl);
                            }
                        }
                        break;


                }
            }
            */

        }

        private void Button_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {

            if (vd != null)
            {
                vd.Close();
                vd = new VentanaDia(dia, mes, año, levn.Select(sublist => sublist).Where(x => x.dia.Equals(dia) && x.mes.Equals(mes) && x.año.Equals(año)).ToList(), permisos);
                vd.Show();
                calendario.IsEnabled = false;

            }
            else
            {
                vd = new VentanaDia(dia, mes, año, levn.Select(sublist => sublist).Where(x => x.dia.Equals(dia) && x.mes.Equals(mes) && x.año.Equals(año)).ToList(), permisos);
                vd.Show();
                calendario.IsEnabled = false;
            }

        }



        private void Button_Click(object sender, RoutedEventArgs e)
        {

            if (bloqueo.Visibility == Visibility.Collapsed)
            {
                bloqueo.Visibility = Visibility.Visible;

                lockb.Background = Brushes.LightBlue;
                logout.Visibility = Visibility.Collapsed;
            }
            else
            {
                bloqueo.Visibility = Visibility.Collapsed;
                lockb.Background = Brushes.Gray;

                logout.Visibility = Visibility.Visible;

            }
            inactividad.Change(
            Timeout.Infinite,
            Timeout.Infinite);
            inactividad = new System.Threading.Timer(ObservarTodo, null, timer, timer);

        }


        /*Base de Datos*/

        //Eventos
        private async void cargarEventos()
        {
            string sql_query = "";

            levn = new List<Eventos>();
            //eventos_todos = new List<Eventos>();
            Grid g2 = null;
            Border b = null;
            ScrollViewer sv = null;
            ListView lv = new ListView();

            string uri = string.Format("http://app.adex-integracio.com/sgc/index2.php");
            SGC.Clases.Version v = new Version();
               

            try
            {
                SQLiteConnection cn2 = new SQLiteConnection(conexiondb);

                bool actualizar = true;

                DateTime time = lista_tiempos[3];
                //DateTime.TryParse(mycontent, out time);
                string sql_Text2 = "SELECT * FROM Evento_v";
                cn2.Open();
                SQLiteCommand cmd2 = new SQLiteCommand(sql_Text2, cn2);
                SQLiteDataReader rdr2 = cmd2.ExecuteReader();
                List<string> ImportedFiles2 = new List<string>();

                DateTime? b2 = null;
                while (rdr2.Read())
                {
                    b2 = rdr2.GetDateTime(1);
                }
                rdr2.Close();
                if (b2 != null)
                {
                    if (DateTime.Compare((DateTime)b2, time) == -1)
                    {
                        try
                        {
                            uri = string.Format("http://app.adex-integracio.com/sgc/index2.php");
                            //SGC.Clases.Version v = new Version();
                            //Debug.WriteLine("Hola ");
                            //byteArray = Encoding.UTF8.GetBytes("tabla = Version");
                            List<KeyValuePair<string, string>> queries = new List<KeyValuePair<string, string>>()
                                {
                                    new KeyValuePair<string, string>("tabla", "Evento"),
                                    new KeyValuePair<string, string>("action", "Select")
                                };
                            //Uri = new Uri(uri);
                            FormUrlEncodedContent h = new FormUrlEncodedContent(queries);
                            using (HttpClient client2 = new HttpClient())
                            {
                                using (HttpResponseMessage resp2 = await client2.PostAsync(uri, h))
                                {
                                    using (HttpContent content22 = resp2.Content)
                                    {
                                        string mycontent = await content22.ReadAsStringAsync();
                                        //hch = content2.Headers;
                                        //console.writeline(mycontent);
                                        //v = new Version(mycontent);
                                        //Debug.WriteLine("IsSuccessStatusCode");
                                        JArray jay = new JArray();
                                        try
                                        {
                                            jay = JArray.Parse(mycontent);
                                        }
                                        catch { }
                                        List<Clientes> lst = new List<Clientes>();
                                        try
                                        {
                                            jay = JArray.Parse(mycontent);
                                        }
                                        catch { }
                                        cn2.Close();
                                        if (cn2.State != ConnectionState.Open) cn2.Open();
                                        //DataTable tb = new DataTable();
                                        string sql_Text3 = "DELETE FROM Evento";

                                        SQLiteCommand cmd3 = new SQLiteCommand(sql_Text3, cn2);
                                        cmd3.ExecuteNonQuery();
                                        //lst.Remove(lst[0]);
                                        foreach (JObject s in jay)
                                        {


                                            Eventos c = new Clases.Eventos(s);

                                            string sql_query3 = "INSERT INTO Evento(Id,dia,mes,year,evento) VALUES(" + c.id + ", '" + c.dia + "', '" + c.mes + "','" + c.año + "','" + c.evento + "')";

                                            cmd3 = new SQLiteCommand(sql_query3, cn2);
                                            cmd3.ExecuteNonQuery();

                                        }

                                        string sql_query4 = "UPDATE Evento_v SET TIME=(CURRENT_TIMESTAMP) WHERE Id=1";

                                        cmd3 = new SQLiteCommand(sql_query4, cn2);
                                        cmd3.ExecuteNonQuery();
                                        //cmd3.Close();
                                    }
                                }
                            }





                        }
                        catch(Exception ee) {
                            var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                            Peta(ee, line + "");
                        };
                    }
                }
            }
            catch
            {

            }
            

            if (dia_actual != null)
            {
                if (dia_actual.Child is Border)
                {
                    b = dia_actual.Child as Border; g2 = b.Child as Grid;
                }
                else
                    g2 = dia_actual.Child as Grid;


                sv = (ScrollViewer)g2.Children[1];
                Grid gg = sv.Content as Grid;
                lv = gg.Children[0] as ListView;

                lv.Items.Clear();

            }

            SQLiteConnection cn = new SQLiteConnection(conexiondb);
            cn.Open();
            if (dia_actual is null)
            {
                sql_query = "SELECT * FROM Evento";
            }
            else
            {
                if (dia_actual.Child is Border)
                {
                    b = dia_actual.Child as Border; g2 = b.Child as Grid;
                }
                else
                    g2 = dia_actual.Child as Grid;


                Button label = g2.Children[0] as Button;
                sql_query = "SELECT * FROM Evento";

            }
            SQLiteCommand cmd = new SQLiteCommand(sql_query, cn);

            SQLiteDataReader adapter = cmd.ExecuteReader();


            while (adapter.Read())
            {
                Eventos e = new Eventos(adapter.GetInt32(0), adapter.GetString(1), adapter.GetString(2), adapter.GetString(3), adapter.GetString(4));
                levn.Add(e);
            }

            mirarEventos();
        }

        private void mirarEventos()
        {
            //dias_con_evento = new List<string>();
            //dias_azules = new List<string>();
            //todosEvenetos();


            numero_eventos.Text = levn.Count+"";
            foreach (var b in calendario.Children)
            {
                if (b is Border)
                {

                    Border br = b as Border;
                    if (br.Child is System.Windows.Controls.Border)
                    {
                        Border but = (Border)br.Child;
                        Grid g = but.Child as Grid;
                        Button l = g.Children[0] as Button;

                        ScrollViewer sc = g.Children[1] as ScrollViewer;
                        Grid gg = sc.Content as Grid;
                        ListView lv = (ListView)gg.Children[0];
                        lv.Items.Clear();
                        List<Eventos> ev = levn.Select(sublist => sublist).Where(item => item.dia.Equals(l.Content) && item.mes.Equals(mes) && item.año.Equals(año))
                      .ToList();
                        List<Eventos> levv = new List<Eventos>();
                        foreach (Eventos ee in ev)
                        {
                            //console.writeline(levv.Contains(ee, new EventosComparer()));

                            if (!levv.Contains(ee, new EventosComparer()))
                            {
                                levv.Add(ee);
                                lv.Items.Add(ee);
                            }
                        }


                    }
                }
            }
        }

        private void InsertEvento(Eventos e, bool v)
        {
            try
            {
                Consulta consulta;
                List<string> parametros = new List<string>();
                Border b = null;
                Grid g = null;
                if (dia_actual.Child is Border)
                {
                    b = dia_actual.Child as Border;
                    g = b.Child as Grid;
                }
                else
                {
                    g = dia_actual.Child as Grid;
                }

                Button ll = g.Children[0] as Button;

                Eventos eventos = new Eventos(ll.Content.ToString(), mes, año, e.evento);
                //eventoss.Add(eventos);
                //listaitems.Items.Add()
                SQLiteConnection cn = new SQLiteConnection(conexiondb);
                cn.Open();
                string sql_query = "INSERT INTO Evento([dia],[mes],[year],[evento]) VALUES('" + eventos.dia + "','" + eventos.mes + "','" + eventos.año + "','" + eventos.evento + "')";
                parametros.Add("dia:" + eventos.dia);
                parametros.Add("mes:" + eventos.mes);
                parametros.Add("year:" + eventos.año);
                parametros.Add("evento:" + eventos.evento);
                SQLiteCommand sql_cmd = new SQLiteCommand(sql_query, cn);

                sql_cmd.ExecuteNonQuery();

                string sql_Text = "UPDATE Version SET configurationcol=GETDATE()";
                SQLiteCommand sql_cmd2 = new SQLiteCommand(sql_Text, cn);

                //sql_cmd2.ExecuteNonQuery(); 
                cn.Close();
                while (observartodotoken)
                {

                }
                consulta = new Consulta("Evento", parametros, "", "INSERT");
                Lista_consultas.Add(consulta);
                cn.Close();

                ve.Close();
                if (v)
                {
                    vd.Close();

                    vd = new VentanaDia(dia, mes, año, levn.Select(sublist => sublist).Where(x => x.dia.Equals(dia) && x.mes.Equals(mes) && x.año.Equals(año)).ToList(), permisos);
                    vd.Show();
                }
                calendario.IsEnabled = true;
            }
            catch (Exception ee)
            {
                var st = new StackTrace(ee, true);
                var frame = st.GetFrame(0);
                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                Peta(ee, line + "");
                
            }
        }

        private async void UpdateEvento(Eventos ev, bool v)
        {
            try
            {
                if (permisos[0] == '1')
                {
                    Consulta consulta;
                    List<string> parametros = new List<string>();
                    Eventos eventos = new Eventos();
                    Border b = dia_actual.Child as Border;
                    Grid g = b.Child as Grid;
                    ScrollViewer sv = g.Children[1] as ScrollViewer;
                    ListView lv = sv.Content as ListView;
                    if (lv != null)
                        lv.Items.Clear();

                    try
                    {
                       string uri = string.Format("http://app.adex-integracio.com/sgc/index2.php");
                        //SGC.Clases.Version v = new Version();
                        //Debug.WriteLine("Hola ");
                        //Uri = new Uri(uri);
                        
                                            SQLiteConnection cn = new SQLiteConnection(conexiondb);
                                            cn.Open();

                                            parametros.Add("evento:" + ev.evento);

                                            string sql_query = "UPDATE Evento SET evento='" + ev.evento + "' WHERE Id=" + ev.id;
                                            SQLiteCommand sql_cmd = new SQLiteCommand(sql_query, cn);
                                            while (observartodotoken)
                                            {

                                            }
                                            consulta = new Consulta("Evento", parametros, "Id:" + ev.id, "UPDATE");
                                            Lista_consultas.Add(consulta);
                                            sql_cmd.ExecuteNonQuery();
                                            cn.Close();
                                        
                                    cargarEventos();
                    
                    }
                    catch { };
                




                //eventoss.Add(eventos);
                //listaitems.Items.Add()

                
                }

                cambio = false;
                ve.Close();
                if (v)
                {
                    vd.Close();

                    vd = new VentanaDia(dia, mes, año, levn.Select(sublist => sublist).Where(x => x.dia.Equals(dia) && x.mes.Equals(mes) && x.año.Equals(año)).ToList(), permisos);
                    vd.Show();
                }
                calendario.IsEnabled = true;
            }
            catch (Exception ee)
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                Peta(ee, line + "");
            }
        }

        private void DeleteEvento(Eventos e, bool v)
        {
            try
            {
                MessageBoxResult result = MessageBox.Show("¿Desea borrar el evento seleccionado?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                if (result == MessageBoxResult.OK)
                {
                    List<string> parametros = new List<string>();
                    Consulta consulta;
                    SQLiteConnection cn = new SQLiteConnection(conexiondb);
                    cn.Open();
                    string sql_query = "DELETE FROM Evento WHERE Id=" + e.id;
                    SQLiteCommand sql_cmd = new SQLiteCommand(sql_query, cn);
                    consulta = new Consulta("Evento", parametros, "Id:" + e.id, "DELETE");
                    while (observartodotoken)
                    {

                    }
                    Lista_consultas.Add(consulta);
                    cambio = true;
                    lvw = null;
                    cambio = false;
                    sql_cmd.ExecuteNonQuery();
                    cn.Close();
                    cargarEventos();

                    mirar_dia_rojo();
                    dia_actual.Background = Brushes.Transparent;

                    if (v)
                    {
                        vd.Close();

                        vd = new VentanaDia(dia, mes, año, levn.Select(sublist => sublist).Where(x => x.dia.Equals(dia) && x.mes.Equals(mes) && x.año.Equals(año)).ToList(), permisos);
                        vd.Show();
                    }
                }


            }
            catch (Exception ee)
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                Peta(ee, line + "");
            }


        }

        private void ClearCalendario()
        {
            mirar_dia_rojo();
            numero_eventos.Text = levn.Count+"";
            //console.writeline(dia_actual.BorderBrush);
            if (dia_actual.Child is Border)
            {
                Border d = dia_actual.Child as Border;

                dia_actual.BorderBrush = Brushes.Red;
                dia_actual.BorderThickness = new Thickness(2);
                //console.writeline(d.BorderBrush);
            }

        }

        //Sistema

        //Usuarios

        private async void CargarUsuarios()
        {
            //Log oLog = new Log(path2);
            //oLog.Add("Usu");
            lusr = new List<Usuarios>();
            CargarRoles();
            SQLiteDataReader rdr = s.CargarUsuario();
            while (rdr.Read())
            {
                Usuarios u = new Usuarios(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2), rdr.GetString(3), rdr.GetString(4), rdr.GetInt32(5), rdr.GetString(6), rdr.GetString(7), rdr.GetString(8), rdr.GetString(9), rdr.GetString(10), rdr.GetString(11), rdr.GetString(12), rdr.GetString(13), rdr.GetString(14), rdr.GetString(15), rdr.GetString(16), rdr.GetString(17), rdr.GetString(18));
                Roles rol = lrol.Find(x => x.Id == u.Rol);
                if (rol != null)
                    u.Nombre_Rol = rol.Nom;
                if (lusr.Find(x => x.Id == rdr.GetInt32(0)) == null)
                {
                    lusr.Add(u);

                }
            }
            Usuarios.ItemsSource = lusr;
        }
        private void InsertUsuario(Usuarios e)
        {

        }

        private void UpdateUsuario(string sqlquery)
        {

        }

        private void DeleteUsuario(Usuarios e)
        {

        }

        //Roles

        private async void CargarRoles()
        {
            if (rol_carga.AddSeconds(1) < DateTime.Now)
            {
                rol_carga = DateTime.Now;
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                //Log oLog = new Log(path2);
                //oLog.Add("Rol");
                try
                {
                    SQLiteConnection cn2 = new SQLiteConnection(conexiondb);

                    bool actualizar = true;

                    DateTime time = lista_tiempos[7];
                    //DateTime.TryParse(mycontent, out time);
                    string sql_Text2 = "SELECT * FROM Rol_v";
                    cn2.Open();
                    SQLiteCommand cmd2 = new SQLiteCommand(sql_Text2, cn2);
                    SQLiteDataReader rdr2 = cmd2.ExecuteReader();
                    List<string> ImportedFiles2 = new List<string>();

                    DateTime? b = null;
                    while (rdr2.Read())
                    {
                        Console.WriteLine("Rol");
                        Console.WriteLine(rdr2.GetString(1));
                        DateTime d = DateTime.Parse(rdr2.GetString(1));
                        b = d;
                    }
                    rdr2.Close();
                    if (b != null)
                    {
                        if (DateTime.Compare((DateTime)b, time) == -1)
                        {
                            try
                            {
                                string uri = string.Format("http://app.adex-integracio.com/sgc/index2.php");
                                //SGC.Clases.Version v = new Version();
                                //Debug.WriteLine("Hola ");
                                //byteArray = Encoding.UTF8.GetBytes("tabla = Version");
                                IEnumerable<KeyValuePair<string, string>> queries = new List<KeyValuePair<string, string>>()
                                {
                                    new KeyValuePair<string, string>("tabla", "Rol"),
                                    new KeyValuePair<string, string>("action", "Select")
                                };
                                //Uri = new Uri(uri);
                                HttpContent h = new FormUrlEncodedContent(queries);
                                using (HttpClient client2 = new HttpClient())
                                {
                                    using (HttpResponseMessage resp2 = await client2.PostAsync(uri, h))
                                    {
                                        using (HttpContent content22 = resp2.Content)
                                        {
                                            string mycontent = await content22.ReadAsStringAsync();
                                            HttpContentHeaders hch = content22.Headers;
                                            Console.WriteLine(mycontent);
                                            //v = new Version(mycontent);
                                            //Debug.WriteLine("IsSuccessStatusCode");

                                            List<Clientes> lst = new List<Clientes>();
                                            JArray jay = new JArray();
                                            try
                                            {
                                                jay = JArray.Parse(mycontent);
                                            }
                                            catch { }
                                            if (cn2.State != ConnectionState.Open) cn2.Open();
                                            //DataTable tb = new DataTable();
                                            string sql_Text3 = "DELETE FROM Rol";

                                            SQLiteCommand cmd3 = new SQLiteCommand(sql_Text3, cn2);
                                            cmd3.ExecuteNonQuery();
                                            //lst.Remove(lst[0]);
                                            foreach (JObject s in jay)
                                            {


                                                Roles c = new Clases.Roles(s);

                                                string sql_query3 = "INSERT INTO Rol([Id],[Nom_Rol], [Permisos]) Values (" + c.Id + ",'" + c.Nom + "'," + c.Permisos + ")";


                                                cmd3 = new SQLiteCommand(sql_query3, cn2);
                                                cmd3.ExecuteNonQuery();

                                            }

                                            string sql_query4 = "UPDATE Rol_v SET TIME='" + DateTime.Now + "' WHERE Id=1";

                                            cmd3 = new SQLiteCommand(sql_query4, cn2);
                                            cmd3.ExecuteNonQuery();
                                        }
                                    }
                                }





                            }
                            catch(Exception ee) {
                                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                                Peta(ee, line + "");
                            };
                        }
                    }
                }
                catch
                {

                }
                try
                {


                    lrol = new List<Roles>();
                    Roles.Items.Clear();
                    Rol_usuario.Items.Clear();
                    string cn_String = conexiondb;

                    SQLiteConnection cn = new SQLiteConnection(cn_String);

                    if (cn.State != ConnectionState.Open) cn.Open();
                    DataTable tb = new DataTable();

                    string sql_Text = "SELECT * FROM Rol";
                    SQLiteCommand cmd = new SQLiteCommand(sql_Text, cn);
                    SQLiteDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Roles rol = new Roles(rdr.GetInt32(0), rdr.GetString(1), rdr.GetInt32(2));
                        Roles.Items.Add(rol);
                        lrol.Add(rol);
                        Rol_usuario.Items.Add(rol);
                    }
                }
                catch (Exception ee)
                {
                    //oLog.Add("Linia 6686");
                    var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                    Peta(ee, line + "");
                }
                //oLog.Add("Fin Rol");
            }
        }

        private void InsertRol(Roles e)
        {

        }

        private void UpdateRol(string sqlquery)
        {

        }

        private void DeleteRol(Roles e)
        {

        }

        //IVA

        private async void CargarIva()
        {
            liva = new List<IVAs>();
            SQLiteDataReader rdr = s.CargarIVA();
            while (rdr.Read())
            {

                IVAs iva = new IVAs(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2));

                if (liva.Find(x => x.Id == rdr.GetInt32(0)) == null)
                {

                    liva.Add(iva);
                }
            }
            lista_iva.ItemsSource = liva;

        }

        private void InsertIVA(IVAs e)
        {

        }

        private void UpdateIVA(string sqlquery)
        {

        }

        private void DeleteIVA(IVAs e)
        {

        }

        //Clientes
        private async void cargarAcompañantes()
        {
            lacmp = new List<Acompañantes>();
            SQLiteDataReader rdr = s.CargarAcompañante();
            while (rdr.Read())
            {
                lacmp.Add(new Acompañantes(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2), rdr.GetString(3), rdr.GetInt32(4), rdr.GetString(5), rdr.GetString(6), rdr.GetInt32(7), rdr.GetString(8), rdr.GetString(9), rdr.GetInt32(10)));
            }


        }
        private async void cargarClientes()
        {
            try
            {
                if (clientebool)
                {
                    int cc = -1;
                    int poss = -1;
                    if (Clientes.SelectedIndex != -1)
                    {
                         cc= Clientes.SelectedIndex;
                        poss = posicion;
                    }
                    lcln = new List<Clientes>();
                    lista_clientes_ficha = new List<Clientes>();
                    clienteapli.Items.Clear();
                    CargarContratos();
                    cargarAcompañantes();
                    int pos = 0;
                    if (Clientes.SelectedItem != null)
                    {
                        cli = Clientes.SelectedItem as Clientes;
                        pos = posicion;
                    }
                    Clientes c = new Clientes();
                    SQLiteDataReader rdr = s.CargarCliente();
                    while (rdr.Read())
                    {
                        bool b = rdr.GetBoolean(13);
                        bool b2 = rdr.GetBoolean(25);
                        int ii = rdr.GetInt32(28);

                        DateTime? dd = null;
                        DateTime? dd2 = null;
                        try
                        {
                            string aa = rdr.GetString(26);
                            dd = DateTime.Parse(aa);
                        }
                        catch
                        {
                            dd = null;
                        }
                        try
                        {
                            string aa = rdr.GetString(27);
                            dd2 = DateTime.Parse(aa);
                        }
                        catch
                        {
                            dd2 = null;
                        }

                        DateTime? dd3 = null;
                        DateTime? dd4 = null;
                        DateTime? dd5 = null;

                        try
                        {
                            string aa = rdr.GetString(43);
                            dd3 = DateTime.Parse(aa);
                        }
                        catch
                        {
                            dd3 = null;
                        }
                        try
                        {
                            string aa = rdr.GetString(44);
                            dd4 = DateTime.Parse(aa);
                        }
                        catch
                        {
                            dd4 = null;
                        }
                        try
                        {
                            string aa = rdr.GetString(45);
                            dd5 = DateTime.Parse(aa);
                        }
                        catch
                        {
                            dd5 = null;
                        }



                        c = new Clientes(rdr.GetInt32(0), rdr.GetInt32(1), rdr.GetString(2), rdr.GetString(3), rdr.GetString(4), rdr.GetString(5), rdr.GetString(6), rdr.GetString(7), rdr.GetString(8), rdr.GetString(9), rdr.GetString(10), rdr.GetString(11), rdr.GetString(12), rdr.GetBoolean(13), rdr.GetString(14), rdr.GetString(15), rdr.GetString(16), rdr.GetString(17), rdr.GetString(18), rdr.GetString(19), rdr.GetString(20), rdr.GetString(21), rdr.GetString(22), rdr.GetString(23), rdr.GetString(24), rdr.GetBoolean(25), dd, dd2, rdr.GetInt32(28), rdr.GetInt32(29), rdr.GetString(30), rdr.GetString(31), rdr.GetString(32), rdr.GetString(33), rdr.GetValue(34).ToString(), rdr.GetValue(35).ToString(), rdr.GetValue(36).ToString(), "00:00", "00:00", rdr.GetString(39), rdr.GetString(40), rdr.GetString(41), rdr.GetString(42), dd3, dd4, dd5, rdr.GetString(46), rdr.GetString(47), rdr.GetString(50), rdr.GetString(51), rdr.GetString(52), rdr.GetString(53), rdr.GetString(49), rdr.GetString(54), rdr.GetString(55), rdr.GetString(56), rdr.GetString(57), rdr.GetString(58));

                        if (rdr.GetValue(38).ToString().Length > 0)
                        {
                            c = new Clientes(rdr.GetInt32(0), rdr.GetInt32(1), rdr.GetString(2), rdr.GetString(3), rdr.GetString(4), rdr.GetString(5), rdr.GetString(6), rdr.GetString(7), rdr.GetString(8), rdr.GetString(9), rdr.GetString(10), rdr.GetString(11), rdr.GetString(12), rdr.GetBoolean(13), rdr.GetString(14), rdr.GetString(15), rdr.GetString(16), rdr.GetString(17), rdr.GetString(18), rdr.GetString(19), rdr.GetString(20), rdr.GetString(21), rdr.GetString(22), rdr.GetString(23), rdr.GetString(24), rdr.GetBoolean(25), dd, dd2, rdr.GetInt32(28), rdr.GetInt32(29), rdr.GetString(30), rdr.GetString(31), rdr.GetString(32), rdr.GetString(33), rdr.GetString(34), rdr.GetString(35), rdr.GetString(36), rdr.GetString(37), rdr.GetString(38), rdr.GetString(39), rdr.GetString(40), rdr.GetString(41), rdr.GetString(42), dd3, dd4, dd5, rdr.GetString(46), rdr.GetString(47), rdr.GetString(50), rdr.GetString(51), rdr.GetString(52), rdr.GetString(53), rdr.GetString(49), rdr.GetString(54), rdr.GetString(55), rdr.GetString(56), rdr.GetString(57), rdr.GetString(58));

                        }
                        c.lista_acompañantes = new Acompañantes[6];
                        int iacm = 0;
                        foreach (Acompañantes acp in lacmp.Select(x => x).Where(x => x.Clienteid == c.id))
                        {
                            if (iacm < 6)
                            {
                                c.lista_acompañantes[iacm] = acp;
                                iacm++;
                            }
                        }
                        Facturas f = new Facturas();

                        c.importe = rdr.GetString(48) + " €";

                        clienteapli.Items.Add(c);
                        lista_clientes_ficha.Add(c);
                        lcln.Add(c);
                        if (c.asignado == false)
                        {
                            //Cliente_Parcela.Items.Add(c);
                            //Cliente_Parcela2.Items.Add(c);
                        }
                        if (lprc == null)
                        {
                            CargarParcela();
                        }

                        c.nplaza = "";
                        if (!c.n_plaza.Equals("0"))
                            if (!c.n_plaza.Equals(""))
                                foreach (String s in c.n_plaza.Split('*').ToList())
                                {
                                    Parcelas p = lprc.Find(x => x.id == int.Parse(s));
                                    c.Lista_Parcelas.Add(p);
                                    c.nplaza = p.id+"";
                                }






                    }
                    if (lcln.Count == 0)
                    {
                        grid1.IsEnabled = false;
                        grid2.IsEnabled = false;
                        grid3.IsEnabled = false;

                    }
                    else
                    {
                        grid1.IsEnabled = true;
                        grid2.IsEnabled = true;
                        grid3.IsEnabled = true;

                    }
                    Clientes.ItemsSource = lcln;
                    MirarFicha();
                    if (lista_clientes_ficha.Count() - 1 >= poss)
                        if (cli != null)
                    {
                        Clientes.SelectedItem = cli;
                        posicion = pos;
                    }
                    mirar2 = true;
                    safe = false;

                    ultimoSeleccionado = c;
                    clientebool = false;
                    if (lista_clientes_ficha.Count() - 1 >= poss)
                        if (cc !=-1)
                    {
                        Clientes.SelectedIndex = cc;
                    }

                    matricula1.Focus();

                    vehiculo1.IsDropDownOpen = false;

                }
            }catch(Exception e)
            {
                
            }
        }

        private void InsertCliente(Clientes e)
        {

        }

        private void UpdateCliente(string sqlquery, List<string> parametros, Consulta consulta)
        {
            try
            {
                if (permisos[11] == '1')
                {
                    MessageBoxResult result = System.Windows.MessageBox.Show("¿Quieres guardar los cambios?", "¡Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                    if (result == MessageBoxResult.OK)
                    {
                        string cn_String = conexiondb;
                        SQLiteConnection cn = new SQLiteConnection(cn_String);
                        if (cn.State != ConnectionState.Open) cn.Open();
                        Parcelas p = numero_plaza.SelectedItem as Parcelas;
                        Parcelas p2 = numero_plaza.SelectedItem as Parcelas;

                        Clientes c = Clientes.SelectedItem as Clientes;
                        int b = 0;
                        if (Switch.IsChecked.Value)
                        {
                            b = 1;
                        }

                        
                        if (b != c.Switch)
                        {


                            if (c.Lista_Parcelas.Count > 0)
                            {


                                Direcciones d = ldrc2.Find(x => x.Id == p.Direccion);

                                /*_connection.Connect();
                                Thread.Sleep(1000);
                                if (KnxConnectionTunneling.ChannelId != 0)
                                {
                                    if (b == 0)
                                        _connection.Action(d.Descripcion, false);
                                    else
                                        _connection.Action(d.Descripcion, true);


                                    Thread.Sleep(1000);
                                    _connection.Disconnect();
                                }*/
                            }
                        }
                        SQLiteCommand sql_cmd;
                        if (p != null)
                        {

                            p2 = lprc.Find(x => x.id == int.Parse(c.n_plaza));
                            if (p2 != null)
                            {


                                String query2 = "UPDATE Parcelas SET asignada=0, N_Cliente=" + 0 + " WHERE Id=" + p2.id;
                                sql_cmd = new SQLiteCommand(query2, cn);
                                sql_cmd.ExecuteNonQuery();

                                String query4 = "UPDATE Cliente SET Asignado=0 WHERE Id=" + c.id;

                                sql_cmd = new SQLiteCommand(query4, cn);
                                sql_cmd.ExecuteNonQuery();
                            }

                            String query = "UPDATE Parcelas SET asignada=1, N_Cliente=" + c.id + " WHERE Id=" + p.id;

                            sql_cmd = new SQLiteCommand(query, cn);
                            sql_cmd.ExecuteNonQuery();

                            String query3 = "UPDATE Cliente SET Asignado=1 WHERE Id=" + c.id;

                            sql_cmd = new SQLiteCommand(query3, cn);
                            sql_cmd.ExecuteNonQuery();
                            //HOLAA


                        }
                        else
                        {
                            p2 = lprc.Find(x => x.id == int.Parse(c.n_plaza));
                            if (p2 != null)
                            {


                                String query2 = "UPDATE Parcelas SET asignada=0, N_Cliente=" + 0 + " WHERE Id=" + p2.id;
                                sql_cmd = new SQLiteCommand(query2, cn);
                                sql_cmd.ExecuteNonQuery();

                                String query4 = "UPDATE Cliente SET Asignado=0 WHERE Id=" + c.id;

                                sql_cmd = new SQLiteCommand(query4, cn);
                                sql_cmd.ExecuteNonQuery();
                            }
                        }





                        sql_cmd = new SQLiteCommand(sqlquery, cn);

                        sql_cmd.ExecuteNonQuery();



                        int i = 0;
                        if (contador.Text.Length > 0)
                            i = int.Parse(contador.Text) - 1;

                        cn.Close();


                        //CargarRegistros();
                        clearall();

                        Clientes.SelectedItem = null;
                        Registros.SelectedItem = null;
                        while (observartodotoken)
                        {

                        }
                        Lista_consultas.Add(consulta);

                        string cn_string = conexiondb;
                        cn = new SQLiteConnection(cn_string);
                        if (cn.State != ConnectionState.Open) cn.Open();
                        string sql_Text = "UPDATE Version SET configurationcol=GETDATE()";
                        SQLiteCommand sql_cmd2 = new SQLiteCommand(sql_Text, cn);
                        if (lista_clientes_ficha.Count > 0)
                            Clientes.SelectedItem = lista_clientes_ficha[i];

                        clientebool = true;
                        CargarParcela();
                        cargarClientes();
                        //sql_cmd2.ExecuteNonQuery();
                    }
                    else
                    {
                        Clientes c = Clientes.SelectedItem as Clientes;
                        Clientes.SelectedItem = null;
                        Clientes.SelectedItem = c;

                    }
                }
                else
                {
                    CargarParcela();
                    cargarClientes();

                    //CargarRegistros();
                    clearall();
                    Clientes c = Clientes.SelectedItem as Clientes;
                    Clientes.SelectedItem = null;
                    Clientes.SelectedItem = c;
                }
            }
            catch (Exception ee)
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                Peta(ee, line + "");
            }
        }

        private void DeleteCliente(Clientes e)
        {

        }

        private void cargarRegistros()
        {
            /*Clientes c = Clientes.SelectedItem as Clientes;
            if (c == null&&ultimoSeleccionado!=null)
            {
                c = ultimoSeleccionado;
                Clientes.SelectedItem = c;
            }
            lrgt = new List<Registros>();
            string cn_String = conexiondb;
            Registros.Items.Clear();

            SQLiteConnection cn = new SQLiteConnection(cn_String);
            string sql_Text = "SELECT * FROM Registro";
            if (cn.State != ConnectionState.Open) cn.Open();
            DataTable tb = new DataTable();
            if(c!=null)
                sql_Text = "SELECT * FROM Registro WHERE N_cliente=" + c.n_cliemte; 
            

            SqlDataAdapter adapter = new SqlDataAdapter(sql_Text, cn_String);
            DataSet ds = new DataSet();
            adapter.Fill(ds);

            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                DataRow dr = ds.Tables[0].Rows[i];
                try
                {
                    Registros r = new Registros(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2), rdr.GetString(3), rdr.GetString(4), rdr.GetString(5));
                    lrgt.Add(r);
                    Registros.Items.Add(r);
                }
                catch { }
            }*/

            //lract = new List<Registros>();

            //lract = lrgt.Select(subitem => subitem).Where(x => DateTime.Parse(x.Fecha_In) <= DateTime.Now && DateTime.Parse(x.Fecha_Out) >= DateTime.Now).ToList();

        }
        private void InsertRegistro(Registros r)
        {

        }

        private void DelteRegistro(Registros r)
        {
            try
            {
                string cn_String = conexiondb;
                Consulta consulta = new Consulta("Registro", null, "Id:" + r.Id, "DELETE");
                SQLiteConnection cn = new SQLiteConnection(cn_String);
                if (cn.State != ConnectionState.Open) cn.Open();
                SQLiteCommand sql_cmd = new SQLiteCommand("DELETE FROM Registro WHERE Id=" + r.Id, cn);
                sql_cmd.ExecuteNonQuery();
                cn.Close();
                cargarClientes();
                cargarRegistros();
            }
            catch (Exception ee)
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                Peta(ee, line + "");
            }


        }

        //Parcelas
        private async void CargarParcela()
        {

            if (parcela_carga.AddSeconds(1) < DateTime.Now)
            {
                DateTime dtt = DateTime.Now;
                int par = lista_parcelas.SelectedIndex;
                editando_parcela = true;
                Console.WriteLine(parcela_carga.AddSeconds(1)+" - "+ DateTime.Now);
                if(!editando_cliente)
               
                parcela_carga = DateTime.Now;
                bool f = false;
                /*try
                {
                    SQLiteConnection cn2 = new SQLiteConnection(conexiondb);

                    bool actualizar = true;

                    DateTime time = lista_tiempos[11];
                    //DateTime.TryParse(mycontent, out time);
                    string sql_Text2 = "SELECT * FROM Parcelas_v";
                    cn2.Open();
                    SQLiteCommand cmd2 = new SQLiteCommand(sql_Text2, cn2);
                    SQLiteDataReader rdr2 = cmd2.ExecuteReader();
                    List<string> ImportedFiles2 = new List<string>();

                    DateTime? b = null;
                    while (rdr2.Read())
                    {
                        Console.WriteLine("Parcelas");
                        Console.WriteLine(rdr2.GetString(1));
                        DateTime d = DateTime.Parse(rdr2.GetString(1));
                        b = d;
                    }
                    rdr2.Close();
                    if (b != null)
                    {
                        if (DateTime.Compare((DateTime)b, time) == -1)
                        {
                            try
                            {
                                string uri = string.Format("http://app.adex-integracio.com/sgc/index2.php");
                                //SGC.Clases.Version v = new Version();
                                //Debug.WriteLine("Hola ");
                                //byteArray = Encoding.UTF8.GetBytes("tabla = Version");
                                IEnumerable<KeyValuePair<string, string>> queries = new List<KeyValuePair<string, string>>()
                                {
                                    new KeyValuePair<string, string>("tabla", "Parcelas"),
                                    new KeyValuePair<string, string>("action", "Select")
                                };
                                //Uri = new Uri(uri);
                                HttpContent h = new FormUrlEncodedContent(queries);
                                BackgroundWorker bw = new BackgroundWorker();
                                 //Muestras tu imagen de cargando, por ejemplo, una rueda girando.

                                var result = Task.Run(async () => { return await Cargar(uri, h, "Parcelas"); }).Result;
                                while (!result)
                                {
                                     queries = new List<KeyValuePair<string, string>>()
                                {
                                    new KeyValuePair<string, string>("tabla", "Parcelas"),
                                    new KeyValuePair<string, string>("action", "Select")
                                };
                                    //Uri = new Uri(uri);
                                     h = new FormUrlEncodedContent(queries);
                                    result = Task.Run(async () => { return await Cargar(uri, h, "Parcelas"); }).Result;
                                }
                                    //Realizamos una accion aqui
                                    //Aqui colocas todo el codigo que necesitas que se procesa mientras se muestra el "cargando"
                               

                               
                     

                               







                            }
                            catch (Exception e)
                            {
                                Console.WriteLine(e.Message);
                            };
                        }
                    }
                }
                catch
                {

                }*/
                if (lista_parcelas != null)
                {
                    lista_parcelas.Items.Clear();
                    lista_parcelas2.Items.Clear(); lnprc = new List<Parcelas>();
                    numero_plaza_alta.Items.Clear();
                    //Nombre_Parcela.Items.Clear();
                    ListBox lb = new ListBox();
                    //lb =(ListBox)lista_mapa.Children[1];
                    lprc = new List<Parcelas>();
                    lnprc = new List<Parcelas>();
                    Console.WriteLine((DateTime.Now - dtt).TotalSeconds + "." + (DateTime.Now - dtt).Milliseconds);
                    lb.Items.Clear();
                    foreach (Border b in botonesMapa.Select(x => x).Where(x => x.Background != Brushes.Transparent))
                    {
                        b.Background = Brushes.Transparent;
                    }

                    Console.WriteLine((DateTime.Now - dtt).TotalSeconds + "." + (DateTime.Now - dtt).Milliseconds);
                    string sql_connection = conexiondb;

                    SQLiteConnection cn = new SQLiteConnection(conexiondb);

                    if (cn.State != ConnectionState.Open) cn.Open();


                    string sql_Text = "SELECT * FROM Parcelas";
                    SQLiteCommand cmd = new SQLiteCommand(sql_Text, cn);
                    SQLiteDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        //console.writeline(rdr.GetInt32(0));
                        //console.writeline(rdr.GetString(1));
                        //console.writeline(rdr.GetInt32(2));
                        //console.writeline(rdr.GetString(3));
                        //console.writeline(rdr.GetInt32(4));
                        //console.writeline(rdr.GetString(5));
                        //console.writeline(rdr.GetString(6));
                        //console.writeline(rdr.GetString(7));
                        //console.writeline(rdr.GetString(8));

                        Parcelas parcela = new Parcelas(rdr.GetInt32(0), rdr.GetString(1), rdr.GetInt32(2), rdr.GetString(3), rdr.GetInt32(4), rdr.GetString(5), rdr.GetString(6), rdr.GetString(7), rdr.GetString(8), rdr.GetInt32(9), rdr.GetString(10));
                        
                        if (ldir != null)
                        {   Direcciones d = ldir.Find(x=>x.Id==parcela.Direccion);
                            parcela.direccion = d.Descripcion;
                        }
                        lprc.Add(parcela);
                        lista_parcelas.Items.Add(parcela);

                        if (parcela.ocupada == 0)
                        {

                            //Nombre_Parcela.Items.Add(parcela);
                            lnprc.Add(parcela);
                            numero_plaza_alta.Items.Add(parcela);



                        }


                    }


                    Console.WriteLine((DateTime.Now - dtt).TotalSeconds + "." + (DateTime.Now - dtt).Milliseconds);

                    for (int x = 0; x < lprc.Count; x++)
                    {
                        if (lprc[x].ocupada == 1)
                        {
                            lb.Items.Add(lprc[x]);

                            //parcelas_ocupadas.Add(lprc[x]);
                        }
                        lista_parcelas2.Items.Add(lprc[x]);

                    }

                    Console.WriteLine((DateTime.Now - dtt).TotalSeconds + "." + (DateTime.Now - dtt).Milliseconds);
                    backgroundParcelas.RunWorkerAsync();

                    Console.WriteLine((DateTime.Now - dtt).TotalSeconds + "." + (DateTime.Now - dtt).Milliseconds);
                    if (lprc.Capacity > 0 && !editarMapa && !editando)
                    {
                        editarMapa = false;
                        SomeBool = editarMapa;

                    }
                    else
                    {   /*if(admin1.Visibility==Visibility.Visible)
                    if (!editando)
                    {
                        
                        MouseButtonEventArgs m = new MouseButtonEventArgs(Mouse.PrimaryDevice, 0, MouseButton.Left);

                        Border_MouseLeftButtonDown_9(checpoint, m);
                        editarMapa = true;
                        SomeBool = editarMapa;
                        editando = true;

                    }*/
                    }

                    /*foreach (Parcelas p in lprc)
                    {
                        if (p.parcelas != null)
                        {
                            string[] casillas = p.parcelas.Split('*');

                            for (int i = 0; i < casillas.Length; i++)
                            {
                                Console.WriteLine(casillas[i]);
                                foreach (Object o in camping.Children)
                                {
                                    if (o is Button)
                                    {
                                        if (p.ocupada == 1)
                                        {
                                            Button b = (Button)o;

                                            if (b.Tag.Equals(casillas[i]))
                                            {
                                                b.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.colorocupado);
                                                b.Opacity = new Double();
                                                b.Opacity = 0.65;

                                                p.botones.Add(b);
                                            }

                                        }
                                    }

                                }
                            }
                        }
                    }*/

                }

                Console.WriteLine((DateTime.Now - dtt).TotalSeconds + "." + (DateTime.Now - dtt).Milliseconds);
                limpiarParcela();

                Console.WriteLine((DateTime.Now - dtt).TotalSeconds + "." + (DateTime.Now - dtt).Milliseconds);
                lista_parcelas.SelectedIndex = par;

                Console.WriteLine((DateTime.Now - dtt).TotalSeconds + "." + (DateTime.Now - dtt).Milliseconds);
                editando_parcela = false;
                Console.WriteLine("FIN");
            }

        }
        private void Parcelascarga(object sender, DoWorkEventArgs e)
        {
            foreach (Parcelas p in lprc)
            {

               

                string[] casillas = p.parcelas.Split('*');

                foreach (string s in casillas)
                {
                    Dispatcher.InvokeAsync(() =>
                    {
                        Border b = botonesMapa.Find(x => x.Tag.Equals(s));
                  
                    if (b != null)
                    {
                        if (p.ocupada == 1)
                            b.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.colorocupado);
                        else
                            b.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.colorlibre);


                        b.Opacity = new Double();
                        b.Opacity = 0.65;

                        p.botones.Add(b);
                    }
                    });
                }

            }
        }
        private async Task<bool> Cargar(string uri, HttpContent h, string tabla)
        { bool f = false;
            /*try
            {
               

                HttpClient client2 = new HttpClient(); SQLiteConnection cn2 = new SQLiteConnection(conexiondb);
                switch (tabla)
                {
                    case "Parcelas":
                        using (HttpResponseMessage resp2 = await client2.PostAsync(uri, h))
                        {
                            using (HttpContent content22 = resp2.Content)
                            {

                                f = true;
                                string mycontent = await content22.ReadAsStringAsync();
                                HttpContentHeaders hch = content22.Headers;
                                //console.writeline(mycontent);
                                //v = new Version(mycontent);
                                //Debug.WriteLine("IsSuccessStatusCode");

                                List<Clientes> lst = new List<Clientes>();
                                JArray jay = new JArray();
                                try
                                {
                                    jay = JArray.Parse(mycontent);
                                }
                                catch { }
                                if (cn2.State != ConnectionState.Open) cn2.Open();
                                //DataTable tb = new DataTable();
                                string sql_Text3 = "DELETE FROM Parcelas";

                                SQLiteCommand cmd3 = new SQLiteCommand(sql_Text3, cn2);
                                cmd3.ExecuteNonQuery();
                                //lst.Remove(lst[0]);
                                foreach (JObject s in jay)
                                {


                                    Parcelas c = new Clases.Parcelas(s);

                                    String sql_query3 = "INSERT INTO Parcelas([Id],[Nombre],[asignada],[Parcelas],[N_Cliente],[Descripción], [Distrito], [Orientación], [Nota],[Direccion],[Medidas]) VALUES(" + c.id + ",'" + c.nom + "', " + c.ocupada + ", '" + c.parcelas + "', " + c.n_cliente + ",'" + c.Descripción + "','" + c.Distrito + "','" + c.Orientacion + "','" + c.Nota + "', " + c.Direccion + ", '" + c.Medidas + "')";


                                    cmd3 = new SQLiteCommand(sql_query3, cn2);
                                    cmd3.ExecuteNonQuery();

                                }

                                string sql_query4 = "UPDATE Parcelas_v SET TIME='" + DateTime.Now + "' WHERE Id=1";

                                cmd3 = new SQLiteCommand(sql_query4, cn2);
                                cmd3.ExecuteNonQuery();
                            }
                            f = true;
                        }
                        break;

                    case "Cliente":
                        using (HttpResponseMessage resp2 = await client2.PostAsync(uri, h))
                        {
                            using (HttpContent content22 = resp2.Content)
                            {
                                string mycontent = await content22.ReadAsStringAsync();
                                HttpContentHeaders hch = content22.Headers;
                                //console.writeline(mycontent);
                                //v = new Version(mycontent);
                                //Debug.WriteLine("IsSuccessStatusCode");

                                List<Clientes> lst = new List<Clientes>();
                                JArray jay = new JArray();
                                try
                                {
                                    jay = JArray.Parse(mycontent);
                                }
                                catch { }
                                if (cn2.State != ConnectionState.Open) cn2.Open();
                                //DataTable tb = new DataTable();
                                string sql_Text3 = "DELETE FROM CLIENTE";

                                SQLiteCommand cmd3 = new SQLiteCommand(sql_Text3, cn2);
                                cmd3.ExecuteNonQuery();
                                //lst.Remove(lst[0]);
                                foreach (JObject s in jay)
                                {
                                    Console.WriteLine(s);
                                    Clientes c = new Clases.Clientes(s);
                                    DateTime dt = new DateTime();
                                    string dtt = "";
                                    DateTime dt2 = new DateTime();
                                    string dtt2 = "";
                                    //string sql_query = "";
                                    DateTime dd;
                                    string dtt3 = "";
                                    string dtt4 = "";
                                    DateTime dd2;
                                    DateTime dd3;
                                    DateTime dd4;
                                    try
                                    {
                                        dd = (DateTime)c.Fecha_In;
                                        dtt = dd.ToString("dd/MM/yyyy");

                                    }
                                    catch
                                    {

                                    }
                                    try
                                    {
                                        dd2 = (DateTime)c.Fecha_Out;
                                        dtt2 = dd2.ToString("dd/MM/yyyy");
                                    }
                                    catch
                                    {

                                    }
                                    try
                                    {
                                        Console.WriteLine(c.fecha_pago);
                                        dd3 = (DateTime)c.fecha_entrada_estado;
                                        dtt3 = dd3.ToString("dd/MM/yyyy");

                                    }
                                    catch
                                    {

                                    }
                                    try
                                    {
                                        Console.WriteLine(c.fecha_pago);
                                        dd4 = (DateTime)c.fecha_pago;
                                        dtt4 = dd4.ToString("dd/MM/yyyy");
                                        
                                    }
                                    catch
                                    {

                                    }
                                    string sql_query3 = "INSERT INTO Cliente(Id,N_Cliente,Nombre,Apellidos,DNI,direccion,poblacion,Telefono1,Telefono2,CP,Mail1,Pais,Provincia,DeBaja,Fecha_In,Fecha_Out,Potencia,Switch,Vehiculo1,Marticula1,Vehiculo2,Marticula2,Nota1,Hora_entrada,Hora_salida,Mail2,Fecha_Entrada,Fecha_Pega,Medidas_Vehiculo1, Importe, Vehiculo3, Matricula3, Vehiculo4, Matricula4, Nota2,N_Plaza,Asignado, N_tarjeta, Titular_Tarjeta, caducidad, N_secreto, Entidad_Bancaria, Iban, Swift, Numero, Piso, Puerta, Entidad_Bancaria2, Iban2, Swift2) VALUES (" + c.id + "," + c.n_cliemte + ",'" + c.nombre_cliente + "','" + c.apellidos_cliente + "','" + c.dni + "','" + c.direccion + "','" + c.poblacio + "','" + c.telefon1 + "','" + c.telefon2 + "','" + c.codigo_postal + "','" + c.mail + "','" + c.Pais + "','" + c.Provincia + "'," + Convert.ToInt32(c.DeBaja) + ",'" + dtt + "','" + dtt2 + "'," + c.Potencia + "," + Convert.ToInt32(c.Switch) + ",'" + c.Vehiculo1 + "','" + c.matricula1 + "','" + c.Vehiculo2 + "','" + c.matricula2 + "','" + c.Nota1 + "','" + c.Hora_entrada + "','" + c.Hora_salida + "','" + c.mail2 + "','" + dtt3 + "','" + dtt4 + "','" + c.Medidas_Vehiculo1 + "','" + c.importe + "','" + c.Vehiculo3 + "','" + c.matricula3 + "','" + c.Vehiculo4 + "','" + c.matricula4 + "','" + c.Nota2 + "','" + c.n_plaza + "'," + Convert.ToInt32(c.asignado) + ",'" + c.n_tarjeta + "','" + c.titular + "','" + c.caducidad + "','" + c.numero_secreto + "','" + c.entidad_bacnaria + "','" + c.iban + "','" + c.swift + "','" + c.Numero + "','" + c.Piso + "','" + c.Puerta + "','" + c.entidad_bacnaria2 + "','" + c.iban2 + "','" + c.swift2 + "')";

                                    cmd3 = new SQLiteCommand(sql_query3, cn2);
                                    cmd3.ExecuteNonQuery();

                                }

                                string sql_query4 = "UPDATE Cliente_v SET TIME='" + DateTime.Now + "' WHERE Id=1";

                                cmd3 = new SQLiteCommand(sql_query4, cn2);
                                cmd3.ExecuteNonQuery();
                                f = true;
                            }
                        }

                        break;
                }
            }
            catch (Exception e){ Console.WriteLine(e.Message); }*/
            
            //escondes la pantalla de cargando, tu imagen o barra de progreso.
            return f;

        }

        
        private void InsertParcela(Parcelas e)
        {

        }

        private void UpdateParcela(string sqlquery)
        {

        }

        private void DeleteParcela(Parcelas e)
        {

        }

        //Facturas
        private async void CargarFacturas()
        {

            lpc.Clear();

            cargarProductos();
            lfct = new List<Facturas>();

            //SQLiteDataReader rdr = s.CargarFactura();
            SQLiteDataReader rdr = s.CargarFactura();
            while (rdr.Read())
            {
                string aa = rdr.GetString(8);


                DateTime dt = DateTime.ParseExact(aa, "dd/MM/yyyy",
                                   CultureInfo.InvariantCulture);

                string aa2 = rdr.GetString(22);


                DateTime dt2 = DateTime.ParseExact(aa2, "dd/MM/yyyy",
                                   CultureInfo.InvariantCulture);


                List<Producto> lp = new List<Producto>(); try
                {
                    lp = lpdr.Select(X => X).Where(X => X.Id_Factura == rdr.GetInt32(0)).ToList();
                }
                catch { }
                Facturas a = new Facturas(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2), rdr.GetString(3), rdr.GetString(4), rdr.GetString(5), rdr.GetString(6), rdr.GetString(7), dt, float.Parse(rdr.GetString(9)), float.Parse(rdr.GetString(10)), float.Parse(rdr.GetString(11)), rdr.GetString(12), rdr.GetString(13), rdr.GetString(14), rdr.GetString(15), rdr.GetString(16), rdr.GetString(17), rdr.GetString(18), rdr.GetString(19), rdr.GetInt32(20), rdr.GetString(21), dt2, lp, rdr.GetString(23),rdr.GetString(24), rdr.GetString(25), rdr.GetString(26), rdr.GetString(27));



                lfct.Add(a);


            }

            lfct = lfct.OrderByDescending(x => x.Numero_Factura).ToList();
            Facturas.ItemsSource = lfct;
        }
      
        private async void cargarProductos()
        {
            CargarIva();
            Productos.Items.Clear();
            Productos2.Items.Clear();
            lpdr = new List<Producto>();
            lpdr2 = new List<Producto>();
            SQLiteDataReader rdr = s.CargarProducto();

            while (rdr.Read())
            {

                IVAs i = liva.Find(x => x.Id == rdr.GetInt32(4)) as IVAs;
                Producto p = new Producto(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2), rdr.GetString(3) + " €", rdr.GetInt32(4) + "", rdr.GetString(5) + " €", rdr.GetString(6) + " €", rdr.GetInt32(7), i.Tipo, rdr.GetString(8));
                Console.WriteLine(p.Id + " " + p.Descuento);
                lpdr.Add(p);
                Productos.Items.Add(p);
                
            }
            rdr = s.CargarProducto2();
            while (rdr.Read())
            {

                IVAs i = liva.Find(x => x.Id == rdr.GetInt32(4)) as IVAs;
                Producto p = new Producto(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2), rdr.GetString(3) + " €", rdr.GetInt32(4) + "", rdr.GetString(5) + " €", rdr.GetString(6) + " €", rdr.GetInt32(7), i.Tipo, rdr.GetString(8));
                lpdr2.Add(p);
                Productos2.Items.Add(p);

            }
           
        }

        private void InsertFactura(Facturas e)
        {

        }

        private void UpdateFactura(string sqlquery)
        {

        }

        private void DeleteFactura(Facturas e)
        {

        }


        private async void CargarRecibos()
        {
            lrcb = new List<Recibos>();
            cargarProductos();
            

            //SQLiteDataReader rdr = s.CargarFactura();
            SQLiteDataReader rdr = s.CargarRecibo();
            while (rdr.Read())
            {
                string aa = rdr.GetString(8);
                DateTime dt = DateTime.ParseExact(aa, "dd/MM/yyyy",
                                   CultureInfo.InvariantCulture);

                string aa2 = rdr.GetString(22);


                DateTime dt2 = DateTime.ParseExact(aa2, "dd/MM/yyyy",
                                   CultureInfo.InvariantCulture);


                List<Producto> lp = new List<Producto>(); 
                try
                {
                    lp = lpdr2.Select(X => X).Where(X => X.Id_Factura == rdr.GetInt32(0)).ToList();
                }
                catch { }
                Recibos a = new Recibos(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2), rdr.GetString(3), rdr.GetString(4), rdr.GetString(5), rdr.GetString(6), rdr.GetString(7), dt, float.Parse(rdr.GetString(9)), float.Parse(rdr.GetString(10)), float.Parse(rdr.GetString(11)), rdr.GetString(12), rdr.GetString(13), rdr.GetString(14), rdr.GetString(15), rdr.GetString(16), rdr.GetString(17), rdr.GetString(18), rdr.GetString(19), rdr.GetInt32(20), rdr.GetString(21), dt2, lp, rdr.GetString(23), rdr.GetString(24), rdr.GetString(25), rdr.GetString(26), rdr.GetString(27));



                lrcb.Add(a);


            }
            Recibos.ItemsSource = lrcb;
        }

        //Contratos
        private async void CargarContratos()
        {

            lcnt = new List<Potencia>();
            SQLiteDataReader rdr = s.CargarPotencia();
            CargarAlarmas();
            while (rdr.Read())
            {
                Potencia p = new Potencia(rdr.GetInt32(0), rdr.GetString(1), rdr.GetInt32(2), rdr.GetInt32(3), lalr.Select(x => x).Where(x => x.Potencia == rdr.GetInt32(0)).ToList());
                if (lcnt.Find(x => x.Id == rdr.GetInt32(0)) == null)
                {
                    lcnt.Add(p);

                    //Iluminacion_Potencia.Items.Add(p);
                    //Potencia.Items.Add(p);
                    //Potencia_alta.Items.Add(p);
                }
            }
            if (lcnt != null)
                if (lcnt.Count == 0)
                {
                    grid4.IsEnabled = false;
                }
                else
                {
                    grid4.IsEnabled = true;
                }
            Iluminacion_Potencia.ItemsSource = lcnt;
            Potencia.ItemsSource = lcnt;
            Potencia_alta.ItemsSource = lcnt;
            lista_potencia_parcelas.ItemsSource = lcnt;
        }

        //Alarmas
        private async void CargarAlarmas()
        {
            lalr = new List<Alarma>();
            SQLiteDataReader rdr = s.CargarAlarma();
            while (rdr.Read())
            {

                Alarma p = new Alarma(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2), rdr.GetInt32(3), rdr.GetInt32(4));
                if (lalr.Find(x => x.Id == rdr.GetInt32(0)) == null)
                {
                    lalr.Add(p);
                }
            }
        }


        //Conexion
        private void BuscarDB()
        {

            conexiondb = Directory.GetCurrentDirectory();

            System.IO.FileInfo sf = null;
            string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
            //Log oLog = new Log(path2);
            System.IO.DirectoryInfo dir = new System.IO.DirectoryInfo(conexiondb);

            // This method assumes that the application has discovery permissions  
            // for all folders under the specified path.  
            IEnumerable<System.IO.FileInfo> fileList = dir.GetFiles("*.*", System.IO.SearchOption.TopDirectoryOnly);

            //Create the query  
            IEnumerable<System.IO.FileInfo> fileQuery =
                from file in fileList
                where file.Name == "DbCamping4.db"
                orderby file.Name
                select file;

            //Execute the query. This might write out a lot of files!  
            foreach (System.IO.FileInfo fi in fileQuery)
            {
                //console.writeline(fi.FullName);
                sf = fi;
                conexiondb = sf.FullName;
            }

            // Create and execute a new query by using the previous
            // query as a starting point. fileQuery is not
            // executed again until the call to Last()  




            string path = conexiondb;
            try
            {
                //oLog.Add("1");


                Uri u = new Uri(conexiondb + "\\test.db");
                //oLog.Add("2");
                conexiondb = "Data Source=" + conexiondb;
                SQLiteConnection con = new SQLiteConnection("Data Source=" + sf.FullName);
                //oLog.Add("3");
                con.Open();




                //oLog.Add("4");
                con.Close();
            }
            catch
            {
                //oLog.Add("no existe");
            }
        }



        private void Actualizar_Pantalla(object sender, RoutedEventArgs e)
        {
            String c = "";
            VentanaEvento.le.refresh += new VentanaEvento.Mensaje(RefreshEvento);
            VentanaCliente.le.refresh += new VentanaCliente.UsuarioNuevo(RefreshCliente);
            VentanaRegistro.le.refresh += new VentanaRegistro.UpdateReg(RefreshRegistro);
            VentanaUsuario.le.refresh += new VentanaUsuario.UsuarioNuevo(RefreshUsuario);
            VentanaRol.le.refresh += new VentanaRol.RolNuevo(RefreshRol);
            VentanaIVA.le.refresh += new VentanaIVA.IVANuevo(RefreshIVA);
            VentanaFactura.le.refresh += new VentanaFactura.FacturaNueva(RefreshFactura);
            VentanaDia.le.refresh += new VentanaDia.EventosDel(RefreshDia);
            VentanaDia.le.refresh2 += new VentanaDia.EventosClose(RefreshDia2);
            VentanaContrato.le.refresh += new VentanaContrato.ContratoNuevo(RefreshContrato);
            VentanaAlarmas.le.refresh += new VentanaAlarmas.AlarmaNuevo(RefreshAlarmas);
            VentanaRecibo.le.refresh += new VentanaRecibo.NuevoRecibo(RefreshRecibo);
            VentanaEvento.le.refresh2 += new VentanaEvento.Mensaje2(Enable);
            VentanaDia.le.refresh3 += new VentanaDia.Mensaje2(Enable);
            Browser.le.refresh += new Browser.GenPdf(Gen);
            Browser2.le.refresh += new Browser2.GenPdf(Gen2);
            VentanaProducto.le.refresh += new VentanaProducto.NuevoProducto(RefreshProducto);
            VentanaProductoNuevo.le.refresh += new VentanaProductoNuevo.NuevoProducto(RefreshProductoNuevo);
            BusquedaCliente.le.refresh += new BusquedaCliente.Eventos(refreshbuscar);
            VentanaDirecciones.le.refresh += new VentanaDirecciones.NuevaDireccion(refreshdir);
            VentanaVehiculo.le.refresh += new VentanaVehiculo.Vehiculoschange(refreshvec);
            VentanaAcompañante.le.refresh += new VentanaAcompañante.NuevoAcompañante(refreshacomp);

        }

        private void Gen2(string path)
        {
            PDF pdf = new PDF("Facturas_plantilla.pdf");
            if (tabcontrol.SelectedIndex == 1)
            {
                if (cliente_menu.SelectedIndex == 5)
                {
                    Generar_Pdf4(clienteapli.SelectedItem as Clientes, path, pdf);
                }
                else
                    Generar_Pdf3(Clientes.SelectedItem as Clientes, path, pdf);
            }
            else
            {
                if (Facturas.SelectedItem != null)
                {
                    Generar_Pdf(Facturas.SelectedItems.Cast<Facturas>().ToList(), path, 0, pdf);
                }
            }
        
        }

        private async void refreshacomp(Acompañantes d, int a, int t)
        {
            Clientes c = Clientes.SelectedItem as Clientes;
            if (t == 0)
            {
                
                for(int ii =0; ii<6; ii++)
                    if (c.lista_acompañantes[ii] == null)
                    {
                        c.lista_acompañantes[ii] = d;
                        a = ii;
                        break;
                    }
                lacmp.Add(d);

                //c.OrdenarAcompañantes();
                switch (a)
                {
                    case 0:
                        nombreacompañante1_alta.Text = d.ToString();
                        nombreacompañante1.Text = d.ToString();
                        break;
                    case 1:
                        nombreacompañante2_alta.Text = d.ToString();
                        nombreacompañante2.Text = d.ToString();
                        break;
                    case 2:
                        nombreacompañante3_alta.Text = d.ToString();
                        nombreacompañante3.Text = d.ToString();
                        break;
                    case 3:
                        nombreacompañante4_alta.Text = d.ToString();
                        nombreacompañante4.Text = d.ToString();
                        break;
                    case 4:
                        nombreacompañante5_alta.Text = d.ToString();
                        nombreacompañante5.Text = d.ToString();
                        break;
                    case 5:
                        nombreacompañante6_alta.Text = d.ToString();
                        nombreacompañante6.Text = d.ToString();
                        break;

                }

            }
            else
            {
               Acompañantes ac= s.CargarUltimoAcompañante();
                
                c.lista_acompañantes[a] = d;
                Acompañantes cp = lacmp.Where(x => x.Id == d.Id).First();
                cp = d;
                switch (a)
                {
                    case 0:
                        nombreacompañante1_alta.Text = d.ToString();
                        nombreacompañante1.Text = d.ToString();
                        break;
                    case 1:
                        nombreacompañante2_alta.Text = d.ToString();
                        nombreacompañante2.Text = d.ToString();
                        break;
                    case 2:
                        nombreacompañante3_alta.Text = d.ToString();
                        nombreacompañante3.Text = d.ToString();
                        break;
                    case 3:
                        nombreacompañante4_alta.Text = d.ToString();
                        nombreacompañante4.Text = d.ToString();
                        break;
                    case 4:
                        nombreacompañante5_alta.Text = d.ToString();
                        nombreacompañante5.Text = d.ToString();
                        break;
                    case 5:
                        nombreacompañante6_alta.Text = d.ToString();
                        nombreacompañante6.Text = d.ToString();
                        break;

                }

            }

            change_client.IsEnabled = false;

        }
        private async void refreshvec(Vehiculos d, int i)
        {

            if (i == 0)
            {
                try
                {
                    Consulta consulta;
                    List<string> parametros = new List<string>();
                 
                    
                    //eventoss.Add(eventos);
                    //listaitems.Items.Add()
                    SQLiteConnection cn = new SQLiteConnection(conexiondb);
                    cn.Open();
                    string sql_query = "INSERT INTO Vehiculos([TipoVehiculo],[Descripcion]) VALUES('" + d.Tipo + "','" + d.Descripcion + "')";
                    parametros.Add("TipoVehiculo:" + d.Tipo);
                    parametros.Add("Descripcion:" + d.Descripcion);
                  
                    SQLiteCommand sql_cmd = new SQLiteCommand(sql_query, cn);

                    sql_cmd.ExecuteNonQuery();

                    string sql_Text = "UPDATE Version SET configurationcol=GETDATE()";
                    SQLiteCommand sql_cmd2 = new SQLiteCommand(sql_Text, cn);

                    //sql_cmd2.ExecuteNonQuery(); 
                    cn.Close(); 
                    while (observartodotoken)
                    {

                    }

                    consulta = new Consulta("Vehiculos", parametros, "", "INSERT");
                    Lista_consultas.Add(consulta);
                    cn.Close();
                    CargarVehiculos();


                }
                catch (Exception ee)
                {
                    var st = new StackTrace(ee, true); // Get the top stack frame var frame = st.GetFrame(0); // Get the line number from the stack frame   var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                    var frame = st.GetFrame(0);
                    var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                    Console.WriteLine(line + ": " + ee.Message);
                    string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                    

                    Peta(ee, line + "");
                }
            }
            else
            {
                try
                {
                    string uri = string.Format("http://app.adex-integracio.com/sgc/index2.php");
                    //SGC.Clases.Version v = new Version();
                    //Debug.WriteLine("Hola ");
                    //byteArray = Encoding.UTF8.GetBytes("tabla = Version");
                    List<KeyValuePair<string, string>> queries = new List<KeyValuePair<string, string>>()
                                {
                                    new KeyValuePair<string, string>("tabla", "Vehiculos"),
                                    new KeyValuePair<string, string>("action", "SelectOne"),
                                    new KeyValuePair<string, string>("parametros", "1")
                                };
                    //Uri = new Uri(uri);
                    HttpContent h = new FormUrlEncodedContent(queries);
                    using (HttpClient client2 = new HttpClient())
                    {
                        using (HttpResponseMessage resp2 = await client2.PostAsync(uri, h))
                        {
                            using (HttpContent content22 = resp2.Content)
                            {
                                string mycontent = await content22.ReadAsStringAsync();
                                HttpContentHeaders hch = content22.Headers;
                                //console.writeline(mycontent);
                                //v = new Version(mycontent);
                                //Debug.WriteLine("IsSuccessStatusCode");

                                List<Clientes> lst = new List<Clientes>();
                                JObject jay = JObject.Parse(mycontent);

                                DateTime dt = (DateTime)jay["Time"];

                                //lst.Remove(lst[0]);

                                if (dt.AddMinutes(3) > DateTime.Now)
                                {
                                    MessageBoxResult result2 = MessageBox.Show("El registro se modifico recienteminete, ¿Seguro que quieres cambiarlo?", "Atención!", MessageBoxButton.YesNo, MessageBoxImage.Exclamation);
                                    if (result2 == MessageBoxResult.Yes)
                                    {
                                        try
                                        {
                                            Consulta con;
                                            string sql_query = "UPDATE Vehiculos SET ";
                                            List<string> l = new List<string>();
                                            //Factura factura = new Factura();
                                            Facturas f = Facturas.SelectedItem as Facturas;
                                            Boolean a = false;
                                            Vehiculos vhc = Vehiculos.SelectedItem as Vehiculos;


                                            if (!vhc.Tipo.Equals(d.Tipo))
                                            {
                                                a = true;

                                                sql_query += "TipoVehiculo='" + d.Tipo + "', ";
                                                l.Add("TipoVehiculo:" + d.Tipo);
                                            }
                                            if (!vhc.Descripcion.Equals(d.Descripcion))
                                            {
                                                a = true;
                                                sql_query += "Descripcion='" + d.Descripcion + "', ";
                                                l.Add("Descripcion:" + d.Descripcion);

                                            }

                                            MessageBoxResult result = System.Windows.MessageBox.Show("¿Quieres guardar los cambios?", "¡Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                                            if (result == MessageBoxResult.OK)
                                            {
                                                if (a)
                                                {
                                                    sql_query = sql_query.Remove(sql_query.Length - 2); sql_query += " WHERE Id=" + d.Id;
                                                    string sql_connection = conexiondb;
                                                    SQLiteConnection cn = new SQLiteConnection(sql_connection);
                                                    if (cn.State != ConnectionState.Open) cn.Open();

                                                    SQLiteCommand sql_cmd = new SQLiteCommand(sql_query, cn);
                                                    while (observartodotoken)
                                                    {

                                                    }
                                                    sql_cmd.ExecuteNonQuery();
                                                    Consulta consulta = new Consulta("Vehiculos", l, "Id:" + d.Id, "UPDATE");
                                                    Lista_consultas.Add(consulta);


                                                    CargarVehiculos();




                                                    string sql_Text = "UPDATE Version SET configurationcol=GETDATE()";
                                                    SQLiteCommand sql_cmd2 = new SQLiteCommand(sql_Text, cn);

                                                    //sql_cmd2.ExecuteNonQuery(); 

                                                    cn.Close();
                                                }
                                            }

                                        }
                                        catch (Exception ee)
                                        {
                                            string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                                            
                                            var st = new StackTrace(ee, true); // Get the top stack frame var frame = st.GetFrame(0); // Get the line number from the stack frame   var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                                            var frame = st.GetFrame(0);
                                            var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                                            Console.WriteLine(line + ": " + ee.Message); 
                                            Peta(ee, line + "");
                                        }
                                    }
                                }
                                else
                                {
                                    try
                                    {
                                        Consulta con;
                                        string sql_query = "UPDATE Vehiculos SET ";
                                        List<string> l = new List<string>();
                                        //Factura factura = new Factura();
                                        Facturas f = Facturas.SelectedItem as Facturas;
                                        Boolean a = false;
                                        Vehiculos vhc = Vehiculos.SelectedItem as Vehiculos;


                                        if (!vhc.Tipo.Equals(d.Tipo))
                                        {
                                            a = true;

                                            sql_query += "TipoVehiculo='" + d.Tipo + "', ";
                                            l.Add("TipoVehiculo:" + d.Tipo);
                                        }
                                        if (!vhc.Descripcion.Equals(d.Descripcion))
                                        {
                                            a = true;
                                            sql_query += "Descripcion='" + d.Descripcion + "', ";
                                            l.Add("Descripcion:" + d.Descripcion);

                                        }

                                        MessageBoxResult result = System.Windows.MessageBox.Show("¿Quieres guardar los cambios?", "¡Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                                        if (result == MessageBoxResult.OK)
                                        {
                                            if (a)
                                            {
                                                sql_query = sql_query.Remove(sql_query.Length - 2); sql_query += " WHERE Id=" + d.Id;
                                                string sql_connection = conexiondb;
                                                SQLiteConnection cn = new SQLiteConnection(sql_connection);
                                                if (cn.State != ConnectionState.Open) cn.Open();

                                                SQLiteCommand sql_cmd = new SQLiteCommand(sql_query, cn);
                                                while (observartodotoken)
                                                {

                                                }
                                                sql_cmd.ExecuteNonQuery();
                                                Consulta consulta = new Consulta("Vehiculos", l, "Id:" + d.Id, "UPDATE");
                                                Lista_consultas.Add(consulta);


                                                CargarVehiculos();




                                                string sql_Text = "UPDATE Version SET configurationcol=GETDATE()";
                                                SQLiteCommand sql_cmd2 = new SQLiteCommand(sql_Text, cn);

                                                //sql_cmd2.ExecuteNonQuery(); 

                                                cn.Close();
                                            }
                                        }

                                    }
                                    catch (Exception ee)
                                    {
                                        string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                                       
                                        var st = new StackTrace(ee, true); // Get the top stack frame var frame = st.GetFrame(0); // Get the line number from the stack frame   var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                                        var frame = st.GetFrame(0);
                                        var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                                        Console.WriteLine(line + ": " + ee.Message); 
                                        Peta(ee, line + "");
                                    }
                                }
                                CargarVehiculos();
                            }
                        }
                    }





                }
                catch { };
                
            }
        }
            private void refreshdir(Direcciones d)
        {
            try
            {
                Consulta consulta;
                List<string> parametros = new List<string>();



                //eventoss.Add(eventos);
                //listaitems.Items.Add()
                SQLiteConnection cn = new SQLiteConnection(conexiondb);
                cn.Open();


                /*
                SQLiteCommand sql_cmd = new SQLiteCommand(sql_query, cn);

                sql_cmd.ExecuteNonQuery();

                consulta = new Consulta("Productos_Registro", parametros, "", "INSERT");
                */

                string sql_query = "INSERT INTO Direcciones([Descripcion],[Nombre],[Longitud],[Asignada]) VALUES('" + d.Descripcion + "','" + d.Nombre + "'," + d.Longitud + "," + d.Asignada + ")";
                parametros.Add("Descripcion:" + d.Descripcion);
                parametros.Add("Nombre:" + d.Nombre);
                parametros.Add("Longitud:" + d.Longitud);
                parametros.Add("Asignada:" + d.Asignada);

                SQLiteCommand sql_cmd = new SQLiteCommand(sql_query, cn);
                sql_cmd.ExecuteNonQuery();
                string sql_Text = "UPDATE Version SET configurationcol=GETDATE()";
                SQLiteCommand sql_cmd2 = new SQLiteCommand(sql_Text, cn);
                while (observartodotoken)
                {

                }
                //sql_cmd2.ExecuteNonQuery(); 
                cn.Close();
                consulta = new Consulta("Direcciones", parametros, "", "INSERT");
                Lista_consultas.Add(consulta);
                cn.Close();
                cargarDirecciones();
            }
            catch (Exception ee)
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                
                var st = new StackTrace(ee, true); // Get the top stack frame var frame = st.GetFrame(0); // Get the line number from the stack frame   var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                var frame = st.GetFrame(0);
                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                Console.WriteLine(line + ": " + ee.Message); 
                Peta(ee, line + "");
            }
        }

        private void refreshbuscar(Clientes c)
        {
            
            buscarcliente = true;
            lcln.Add(c);
            Clientes.SelectedItem = c;

            /* if (c.DeBaja)
             {
                 if (alta_baja_buscar.HorizontalAlignment == HorizontalAlignment.Left)
                 { MouseButtonEventArgs me = new MouseButtonEventArgs(Mouse.PrimaryDevice, 0, MouseButton.Left);
                     CambiarFiltro(buscar_alta, me);
                     Clientes.SelectedItem = c;
                 }
                 else
                 {
                     Clientes.SelectedItem = c;
                 }
             }
             else
             {
                 if (alta_baja_buscar.HorizontalAlignment == HorizontalAlignment.Left)
                 {
                     Clientes.SelectedItem = c;
                 }
                 else
                 {
                     MouseButtonEventArgs me = new MouseButtonEventArgs(Mouse.PrimaryDevice, 0, MouseButton.Left);
                     CambiarFiltro(buscar_alta, me);
                     Clientes.SelectedItem = c;
                 }
             }*/




        }

        private async void RefreshProductoNuevo(ProductosRegistrados p, int i)
        {
            try
            {
                if (i == 0)
                {
                    Consulta consulta;
                    List<string> parametros = new List<string>();
                    Border b = null;
                    Grid g = null;

                    //eventoss.Add(eventos);
                    //listaitems.Items.Add()
                    SQLiteConnection cn = new SQLiteConnection(conexiondb);
                    cn.Open();
                    p.Precio = p.Precio.Replace(" ", "");
                    p.Precio = p.Precio.Replace("€", "");

                    /*
                    SQLiteCommand sql_cmd = new SQLiteCommand(sql_query, cn);

                    sql_cmd.ExecuteNonQuery();

                    consulta = new Consulta("Productos_Registro", parametros, "", "INSERT");
                    */

                    string sql_query = "INSERT INTO Productos_Registrados([Nombre],[Referencia],[Precio],[IVA],[Descuento],[Descripcion]) VALUES('" + p.Nombre + "','" + p.Referencia + "','" + Math.Round(float.Parse(p.Precio),2).ToString("0.00") + "'," + p.IVA + ",'" + p.Descuento + "','" + p.Descripcion + "')";
                    parametros.Add("Nombre:" + p.Nombre);
                    parametros.Add("Referencia:" + p.Referencia);
                    parametros.Add("Precio:" + float.Parse(p.Precio).ToString("0.00"));
                    parametros.Add("IVA:" + p.IVA);
                    parametros.Add("Descuento:" + p.Descuento);
                    parametros.Add("Descripcion:" + p.Descripcion);

                    SQLiteCommand sql_cmd = new SQLiteCommand(sql_query, cn);
                    sql_cmd.ExecuteNonQuery();
                    string sql_Text = "UPDATE Version SET configurationcol=GETDATE()";
                    SQLiteCommand sql_cmd2 = new SQLiteCommand(sql_Text, cn);
                    while (observartodotoken)
                    {

                    }
                    //sql_cmd2.ExecuteNonQuery(); 
                    cn.Close();
                    consulta = new Consulta("Productos_Registrados", parametros, "", "INSERT");
                    Lista_consultas.Add(consulta);
                    cn.Close();
                }
                else
                {
                    try
                    {
                        //Potencia p = Iluminacion_Potencia.SelectedItem as Potencia;
                        string uri = string.Format("http://app.adex-integracio.com/sgc/index2.php");
                        //SGC.Clases.Version v = new Version();
                        //Debug.WriteLine("Hola ");
                        //byteArray = Encoding.UTF8.GetBytes("tabla = Version");
                        //IVAs i = lista_iva.SelectedItem as IVAs;

                        ProductosRegistrados pr = lista_productos.SelectedItem as ProductosRegistrados;
                        List<KeyValuePair<string, string>> queries = new List<KeyValuePair<string, string>>()
                                {
                                    new KeyValuePair<string, string>("tabla", "Productos_registrados"),
                                    new KeyValuePair<string, string>("action", "SelectOne"),
                                    new KeyValuePair<string, string>("parametros", pr.Id+"")
                                };
                        //Uri = new Uri(uri);
                        HttpContent h = new FormUrlEncodedContent(queries);
                        using (HttpClient client2 = new HttpClient())
                        {
                            using (HttpResponseMessage resp2 = await client2.PostAsync(uri, h))
                            {
                                using (HttpContent content22 = resp2.Content)
                                {
                                    string mycontent = await content22.ReadAsStringAsync();
                                    HttpContentHeaders hch = content22.Headers;
                                    //console.writeline(mycontent);
                                    //v = new Version(mycontent);
                                    //Debug.WriteLine("IsSuccessStatusCode");

                                    List<Clientes> lst = new List<Clientes>();
                                    //JObject jay = JObject.Parse(mycontent);

                                    //DateTime dt = (DateTime)jay["Time"];

                                    //lst.Remove(lst[0]);

                                    /*if (dt.AddMinutes(3) > DateTime.Now)
                                    {
                                        MessageBoxResult result = MessageBox.Show("El registro se modifico recienteminete, ¿Seguro que quieres cambiarlo?", "Atención!", MessageBoxButton.YesNo, MessageBoxImage.Exclamation);
                                        if (result == MessageBoxResult.Yes)
                                        {
                                            Consulta consulta;
                                            SQLiteConnection cn = new SQLiteConnection(conexiondb);
                                            cn.Open();
                                            List<string> parametros = new List<string>();
                                            
                                            bool a = false;
                                            string sql_query = "UPDATE Productos_Registrados SET ";
                                            if (!pr.Nombre.Equals(p.Nombre))
                                            {
                                                a = true;
                                                parametros.Add("Nombre:" + p.Nombre);

                                                sql_query += "Nombre='" + p.Nombre + "', ";

                                            }

                                            if (!pr.Referencia.Equals(p.Referencia))
                                            {
                                                a = true;
                                                parametros.Add("Referencia:" + p.Referencia);
                                                sql_query += "Referencia='" + p.Referencia + "', ";
                                            }

                                            if (!pr.Precio.Equals(float.Parse(p.Precio).ToString("0.00")))
                                            {
                                                a = true;
                                                parametros.Add("Precio:" + float.Parse(p.Precio).ToString("0.00"));
                                                sql_query += "Precio='" + float.Parse(p.Precio).ToString("0.00") + "', ";
                                            }

                                            if (!pr.IVA.Equals(p.IVA))
                                            {
                                                a = true;
                                                parametros.Add("IVA:" + p.IVA);

                                                sql_query += "IVA=" + p.IVA + ", ";
                                            }

                                            if (!pr.Descuento.Equals(p.Descuento))
                                            {
                                                a = true;
                                                parametros.Add("Descuento:" + p.Descuento);

                                                sql_query += "Descuento='" + p.Descuento + "', ";
                                            }

                                            if (!pr.Descripcion.Equals(p.Descripcion))
                                            {
                                                a = true;
                                                parametros.Add("Descripcion:" + p.Descripcion);


                                                sql_query += "Descripcion='" + p.Descripcion + "', ";
                                            }

                                            if (a)
                                            {
                                                MessageBoxResult result2 = System.Windows.MessageBox.Show("¿Quieres guardar los cambios?", "¡Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                                                if (result2 == MessageBoxResult.OK)
                                                {
                                                    sql_query = sql_query.Remove(sql_query.Length - 2); sql_query += " WHERE Id=" + p.Id;
                                                    SQLiteCommand sql_cmd = new SQLiteCommand(sql_query, cn);
                                                    while (observartodotoken)
                                                    {

                                                    }
                                                    sql_cmd.ExecuteNonQuery();
                                                    cn.Close();
                                                    consulta = new Consulta("Productos_Registrados", parametros, "Id:" + p.Id, "UPDATE");
                                                    Lista_consultas.Add(consulta);
                                                }

                                            }
                                        }
                                    }
                                    else
                                    {*/
                                        Consulta consulta;
                                        SQLiteConnection cn = new SQLiteConnection(conexiondb);
                                        cn.Open();
                                        List<string> parametros = new List<string>();
                                        //ProductosRegistrados pr = lista_productos.SelectedItem as ProductosRegistrados;
                                        bool a = false;
                                        string sql_query = "UPDATE Productos_Registrados SET ";
                                        if (!pr.Nombre.Equals(p.Nombre))
                                        {
                                            a = true;
                                            parametros.Add("Nombre:" + p.Nombre);

                                            sql_query += "Nombre='" + p.Nombre + "', ";

                                        }

                                        if (!pr.Referencia.Equals(p.Referencia))
                                        {
                                            a = true;
                                            parametros.Add("Referencia:" + p.Referencia);
                                            sql_query += "Referencia='" + p.Referencia + "', ";
                                        }

                                        if (!pr.Precio.Equals(float.Parse(p.Precio).ToString("0.00")))
                                        {
                                            a = true;
                                            parametros.Add("Precio:" + Math.Round(float.Parse(p.Precio),2).ToString("0.00"));
                                            sql_query += "Precio='" + Math.Round(float.Parse(p.Precio),2).ToString("0.00") + "', ";
                                        }

                                        if (!pr.IVA.Equals(p.IVA))
                                        {
                                            a = true;
                                            parametros.Add("IVA:" + p.IVA);

                                            sql_query += "IVA=" + p.IVA + ", ";
                                        }

                                        if (!pr.Descuento.Equals(p.Descuento))
                                        {
                                            a = true;
                                            parametros.Add("Descuento:" + p.Descuento);

                                            sql_query += "Descuento='" + p.Descuento + "', ";
                                        }

                                        if (!pr.Descripcion.Equals(p.Descripcion))
                                        {
                                            a = true;
                                            parametros.Add("Descripcion:" + p.Descripcion);


                                            sql_query += "Descripcion='" + p.Descripcion + "', ";
                                        }

                                        if (a)
                                        {
                                            MessageBoxResult result = System.Windows.MessageBox.Show("¿Quieres guardar los cambios?", "¡Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                                            if (result == MessageBoxResult.OK)
                                            {
                                                sql_query = sql_query.Remove(sql_query.Length - 2); sql_query += " WHERE Id=" + p.Id;
                                                SQLiteCommand sql_cmd = new SQLiteCommand(sql_query, cn);
                                                while (observartodotoken)
                                                {

                                                }
                                                sql_cmd.ExecuteNonQuery();
                                                cn.Close();
                                                consulta = new Consulta("Productos_Registrados", parametros, "Id:" + p.Id, "UPDATE");
                                                Lista_consultas.Add(consulta);
                                            }

                                        }

                                    //}
                                    CargarIva();
                                    limpiar_iva();
                                }
                            }
                        }
                    }
                    catch (Exception ee) {
                        var st = new StackTrace(ee, true);
                        var frame = st.GetFrame(0);
                        var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                        Peta(ee, line + "");
                    };
                    
                }

                cargarProductosNuevos();
            }
            catch (Exception ee)
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                
                var st = new StackTrace(ee, true); // Get the top stack frame var frame = st.GetFrame(0); // Get the line number from the stack frame   var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                var frame = st.GetFrame(0);
                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                Peta(ee, line + "");
                Console.WriteLine(line + ": " + ee.Message);
            }
        }

        private async void cargarProductosNuevos()
        {
            CargarIva();
            lpdrr = new List<ProductosRegistrados>();
            SQLiteDataReader rdr = s.CargarRegistrado();
            while (rdr.Read())
            {
                IVAs i = liva.Find(x => x.Id == rdr.GetInt32(4)) as IVAs;
                if (i == null)
                {
                    i = new IVAs();
                    i.Id = 0;
                }
                ProductosRegistrados p = new ProductosRegistrados(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2), rdr.GetString(3), rdr.GetInt32(4), rdr.GetString(5), rdr.GetString(6), i.Tipo);
                lpdrr.Add(p);

            }
            lista_productos.ItemsSource = lpdrr;
        }

        private void RefreshProducto(Producto p)
        {
            if (factura_menu.SelectedIndex == 1)
            {
                try
                {
                    Consulta consulta;
                    List<string> parametros = new List<string>();
                    Border b = null;
                    Grid g = null;
                    //eventoss.Add(eventos);
                    //listaitems.Items.Add()
                    SQLiteConnection cn = new SQLiteConnection(conexiondb);
                    cn.Open();
                    p.Descuento = float.Parse(p.Descuento)+ "";
                    p.Precio = p.Precio.Replace(" ", "");
                    p.Precio = p.Precio.Replace("€", "");
                    p.Impuesto = p.Impuesto.Replace(" ", "");
                    p.Impuesto = p.Impuesto.Replace("€", "");
                    p.Total = p.Total.Replace(" ", "");
                    p.Total = p.Total.Replace("€", "");
                    /*
                    SQLiteCommand sql_cmd = new SQLiteCommand(sql_query, cn);

                    sql_cmd.ExecuteNonQuery();

                    consulta = new Consulta("Productos_Registro", parametros, "", "INSERT");
                    */

                    string sql_query = "INSERT INTO Productos_Registro([Nombre],[Cantidad],[Precio],[IVA],[Impuesto],[Total],[Id_Factura],[Descuento]) VALUES('" + p.Nombre_Producto + "','" + p.Cantidad + "','" + Math.Round(float.Parse(p.Precio), 2).ToString("0.00") + "','" + p.IVA + "','" + Math.Round(float.Parse(p.Impuesto), 2).ToString("0.00") + "','" + Math.Round(float.Parse(p.Total), 2).ToString("0.00") + "'," + p.Id_Factura + ",'" + p.Descuento + "')";
                    parametros.Add("Nombre:" + p.Nombre_Producto);
                    parametros.Add("Cantidad:" + p.Cantidad);
                    parametros.Add("Precio:" + float.Parse(p.Precio).ToString("0.00"));
                    parametros.Add("IVA:" + p.IVA);
                    parametros.Add("Impuesto:" + p.Impuesto);
                    parametros.Add("Total:" + p.Total);
                    parametros.Add("Id_Factura:" + p.Id_Factura);

                    ProductosConsulta pc = new ProductosConsulta(parametros, sql_query);

                    lpc.Add(pc);


                    p.Precio += " €";
                    p.Impuesto += " €";
                    p.Total += " €";
                    p.Descuento += " €";


                    Productos.Items.Add(p);

                    if (Productos.Items.Count > 17)
                    {
                        AddnewProduct.IsEnabled = false;
                    }
                    else
                    {

                        AddnewProduct.IsEnabled = true;
                    }

                    if (Facturas.SelectedItem != null)
                    {
                        Facturas f = Facturas.SelectedItem as Facturas;
                        bool a = false;
                       
                        tasa = 0;
                        

                        if (Productos.Items.Count > 0)
                        {
                            float precio = 0;
                            float impuesto = 0;
                            float total = 0;
                            tasa = 0;
                            float descuento = 0;
                            foreach (Producto p2 in Productos.Items)
                            {
                                if (p2.Nombre_Producto.ToLower().Contains("tasa turistica"))
                                {
                                    float ff = float.Parse(p2.Precio.Replace(" €", "")) * float.Parse(p2.Cantidad);
                                    tasa += (float)Math.Round(ff, 2);
                                    float fff = float.Parse(liva.Find(x => x.Id == int.Parse(p2.IVA)).Porcentaje) / 100;
                                    float imp = (float)ff * (fff);
                                    impuesto += (float)ff * (fff);
                                    total += (float)ff + imp;
                                }
                                else
                                {
                                    for (int i = 0; i < int.Parse(p2.Cantidad); i++)
                                    {
                                        p2.Precio = p2.Precio.Replace(" €", "");
                                        p2.Impuesto = p2.Impuesto.Replace(" €", "");
                                        float ff = float.Parse(p2.Descuento.Replace(" €", "")) / 100;
                                        float pc2 = (float)float.Parse(p2.Precio) * (1 - ff);
                                        precio += pc2;
                                        float fff = float.Parse(liva.Find(x => x.Id == int.Parse(p2.IVA)).Porcentaje) / 100;
                                        float imp = (float)pc2 * (fff);
                                        impuesto += (float)pc2 * (fff);
                                        total += (float)pc2 + imp;
                                    }


                                }

                            }
                            string d = "0";
                            if (Descuento.Text.Length != 0)
                            {
                                d = Descuento.Text;
                            }
                            float dd = float.Parse(d) / 100;
                            total = total * (1 - dd);
                            string a2 = Math.Round(precio, 2).ToString("0.00") + " €";
                            Console.WriteLine(a2);
                            Base_Imponible.Text = a2;
                            Cuota_IVA.Text = Math.Round(impuesto, 2).ToString("0.00") + " €";
                            Importe_Factura.Text = Math.Round(total, 2).ToString("0.00") + " €";
                        }
                        else
                        {
                            Base_Imponible.Text = (0).ToString("0.00");
                            Cuota_IVA.Text = (0).ToString("0.00");
                            Importe_Factura.Text = (0).ToString("0.00");
                        }
                        
                            if (!Nombre_Cliente_Factura.Text.Equals(f.Nombre_Cliente))
                            {
                                a = true;
                                Nombre_Cliente_Factura.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Nombre_Cliente_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                            }
                            Console.WriteLine("1 " + a);

                            if (!DNI_Cliente_Factura.Text.Equals(f.DNI_CIF))
                            {
                                a = true;
                                DNI_Cliente_Factura.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                DNI_Cliente_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                            }
                            Console.WriteLine("2 " + a);
                            if (!Direccion_Camping_Factura.Text.Equals(f.Direccion_Facturacion))
                            {
                                a = true;
                                Direccion_Camping_Factura.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Direccion_Camping_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                            }
                            Console.WriteLine("3 " + a);
                            if (!Poblacion_Camping_Factura.Text.Equals(f.Poblecion_Facturacion))
                            {
                                a = true;
                                Poblacion_Camping_Factura.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Poblacion_Camping_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                            }
                            Console.WriteLine("4 " + a);

                            if (!Codigo_Postal_Camping_Factura.Text.Equals(f.CP_Facturacion.ToString()))
                            {
                                Codigo_Postal_Camping_Factura.BorderBrush = Brushes.Red;
                                a = true;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Codigo_Postal_Camping_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                            }
                            Console.WriteLine("5 " + a);
                            if (!Provincia_Camping_Factura.Text.Equals(f.Provincia_Facturacion))

                            {
                                a = true;
                                Provincia_Camping_Factura.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Provincia_Camping_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                            }

                            Console.WriteLine("6 " + a);
                            if (!Fecha_Factura.SelectedDate.Equals(f.fecha))
                            {
                                a = true;
                                Fecha_Factura.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Fecha_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                            }
                            Console.WriteLine("7 " + a);
                            if (!Fecha_Factura_ven.SelectedDate.Equals(f.fecha_ven))
                            {
                                a = true;
                                Fecha_Factura_ven.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Fecha_Factura_ven.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                            }
                            Console.WriteLine("8 " + a);
                            if (!Importe_Factura.Text.Equals(f.Importe.ToString("0.00") + " €"))
                            {
                                a = true;
                                Base_Imponible.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Base_Imponible.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                            }
                            Console.WriteLine("9 " + a);

                            if (!Direccion_Cliente_Factura.Text.Equals(f.Direccion_Cliente))
                            {
                                a = true;
                                Direccion_Cliente_Factura.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Direccion_Cliente_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                            }
                            Console.WriteLine("10 " + a);
                            if (!Poblacion_Cliente_Factura.Text.Equals(f.Poblacio_Cliente))
                            {
                                a = true;
                                Poblacion_Cliente_Factura.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Poblacion_Cliente_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                            }
                            Console.WriteLine("11 " + a);
                            if (!Codigo_Postal_Cliente_Facturacion.Text.Equals(f.CP_Cliente.ToString()))
                            {
                                a = true;
                                Codigo_Postal_Cliente_Facturacion.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Codigo_Postal_Cliente_Facturacion.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                            }
                            Console.WriteLine("12 " + a);
                            if (!Provincia_Cliente_Factura.Text.Equals(f.Provincia_Cliente))
                            {
                                a = true;
                                Provincia_Cliente_Factura.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Provincia_Cliente_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                            }
                            Console.WriteLine("13 " + a);



                            if (!Pais_Cliente_Factura.Text.Equals(f.Pais_Cliente))
                            {
                                a = true;
                                Pais_Camping_Factura.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Pais_Cliente_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                            }
                            Console.WriteLine("14 " + a);

                            if (!Pais_Camping_Factura.Text.Equals(f.Pais_Facturacion))
                            {
                                a = true;
                                Pais_Camping_Factura.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Pais_Camping_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                            }
                            Console.WriteLine("15 " + a);

                            if (!Empresa.Text.Equals(f.Empresa))
                            {
                                a = true;
                                Empresa.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Empresa.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                            }
                            Console.WriteLine("16 " + a);


                            if (!Telefono_cliente.Text.Equals(f.Telefono))
                            {
                                a = true;
                                Metodo_Pago.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Telefono_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                            }
                            Console.WriteLine("17 " + a);
                            if (!Telefono_Camping_Factura.Text.Equals(f.Telefono_Camping))
                            {
                                a = true;
                                Telefono_Camping_Factura.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Telefono_Camping_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                            }
                            Console.WriteLine("18 " + a);

                            if (Metodo_Pago.SelectedIndex != f.Metodo_Pago)
                            {
                                a = true;
                                Metodo_Pago.Foreground = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Metodo_Pago.Foreground = Brushes.Black;
                            }
                            Console.WriteLine("19 " + a);
                            if (!Descuento.Text.Equals(f.Descuento))
                            {
                                a = true;
                                Descuento.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Descuento.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                            }
                            Console.WriteLine("20 " + a);
                            int[] pr = new int[f.Lista_productos.Count()];
                            for (int i = 0; i < pr.Count(); i++)
                            {
                                pr[i] = -1;
                            }

                            if (f.Lista_productos.Count == Productos.Items.Count)
                            {

                                foreach (Producto p2 in Productos.Items)
                                {
                                    for (int i = 0; i < f.Lista_productos.Count(); i++)
                                    {
                                        if (pr[i] != 1)
                                            if (f.Lista_productos[i].Nombre_Producto.Equals(p2.Nombre_Producto))
                                            {
                                                pr[i] = 1;

                                                break;
                                            }
                                            else if (pr[i] != 1) pr[i] = 0;

                                    }


                                }
                            }
                            else
                                a = true;

                            foreach (int i in pr)
                                Console.WriteLine(i + " ");
                            if (pr.Contains(0))
                            {
                                a = true;
                                Productos.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Productos.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                            }
                            Console.WriteLine("21 " + a);

                            if (a)
                            {
                                change_Factura.IsEnabled = true;
                                safe = true;

                            }
                            else
                            {
                                change_Factura.IsEnabled = false;
                                safe = false;
                            }

                        

                    }

                    cn.Close();

                    ve.Close();
                }
                catch (Exception ee)
                {
                    string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                    
                    var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                    Peta(ee, line + "");
                }
            }
            else
            {
                try
                {
                    Consulta consulta;
                    List<string> parametros = new List<string>();
                    Border b = null;
                    Grid g = null;

                    //eventoss.Add(eventos);
                    //listaitems.Items.Add()
                    SQLiteConnection cn = new SQLiteConnection(conexiondb);
                    cn.Open();
                    p.Descuento =(float.Parse(p.Descuento)) + "";
                    p.Precio = p.Precio.Replace(" ", "");
                    p.Precio = p.Precio.Replace("€", "");
                    p.Impuesto = p.Impuesto.Replace(" ", "");
                    p.Impuesto = p.Impuesto.Replace("€", "");
                    p.Total = p.Total.Replace(" ", "");
                    p.Total = p.Total.Replace("€", "");
                    /*
                    SQLiteCommand sql_cmd = new SQLiteCommand(sql_query, cn);

                    sql_cmd.ExecuteNonQuery();

                    consulta = new Consulta("Productos_Registro", parametros, "", "INSERT");
                    */

                    string sql_query = "INSERT INTO Productos_Registro2([Nombre],[Cantidad],[Precio],[IVA],[Impuesto],[Total],[Id_Recibo],[Descuento]) VALUES('" + p.Nombre_Producto + "','" + p.Cantidad + "','" + float.Parse(p.Precio).ToString("0.00") + "','" + p.IVA + "','" + float.Parse(p.Impuesto).ToString("0.00") + "','" + float.Parse(p.Total).ToString("0.00") + "'," + p.Id_Factura + ",'" + p.Descuento + "')";
                    parametros.Add("Nombre:" + p.Nombre_Producto);
                    parametros.Add("Cantidad:" + p.Cantidad);
                    parametros.Add("Precio:" + float.Parse(p.Precio).ToString("0.00"));
                    parametros.Add("IVA:" + p.IVA);
                    parametros.Add("Impuesto:" + p.Impuesto);
                    parametros.Add("Total:" + p.Total);
                    parametros.Add("Id_Factura:" + p.Id_Factura);

                    ProductosConsulta pc = new ProductosConsulta(parametros, sql_query);

                    lpc.Add(pc);


                    p.Precio += " €";
                    p.Impuesto += " €";
                    p.Total += " €";
                    p.Descuento += " €";


                    Productos2.Items.Add(p);

                    if (Productos2.Items.Count > 17)
                    {
                        AddnewProduct.IsEnabled = false;
                    }
                    else
                    {

                        AddnewProduct.IsEnabled = true;
                    }

                    if (Recibos.SelectedItem != null)
                    {
                        Recibos f = Recibos.SelectedItem as Recibos;
                        bool a = false;
                        if (Productos2.Items.Count > 0)
                        {
                            float precio = 0;
                            float impuesto = 0;
                            float total = 0;
                            tasa = 0;
                            float descuento = 0;
                            foreach (Producto p2 in Productos2.Items)
                            {
                                if (p2.Nombre_Producto.ToLower().Contains("tasa turistica"))
                                {
                                    float ff = float.Parse(p2.Precio.Replace(" €", "")) * float.Parse(p2.Cantidad);
                                    tasa += (float)Math.Round(ff, 2);
                                    float fff = float.Parse(liva.Find(x => x.Id == int.Parse(p2.IVA)).Porcentaje) / 100;
                                    float imp = (float)ff * (fff);
                                    impuesto += (float)ff * (fff);
                                    total += ff + imp;
                                }
                                else
                                {
                                    for (int i = 0; i < int.Parse(p2.Cantidad); i++)
                                    {
                                        p2.Precio = p2.Precio.Replace(" €", "");
                                        p2.Impuesto = p2.Impuesto.Replace(" €", "");
                                        float ff = float.Parse(p2.Descuento.Replace(" €", "")) / 100;
                                        float pc2 = (float)float.Parse(p2.Precio) * (1 - ff);
                                        precio += pc2;
                                        float fff = float.Parse(liva.Find(x => x.Id == int.Parse(p2.IVA)).Porcentaje) / 100;
                                        float imp = (float)pc2 * (fff);
                                        impuesto += (float)pc2 * (fff);
                                        total += (float)pc2 + imp;
                                    }

                                }

                            }
                            string d = "0";
                            if (Descuento.Text.Length != 0)
                            {
                                d = Descuento.Text;
                            }
                            float dd = float.Parse(d) / 100;
                            total = total * (1 - dd);
                            string a2 = Math.Round(precio, 2).ToString("0.00") + " €";
                            Console.WriteLine(a2);
                            Base_Imponible2.Text = a2;
                            Cuota_IVA2.Text = Math.Round(impuesto, 2).ToString("0.00") + " €";
                            Importe_Factura2.Text = Math.Round(total, 2).ToString("0.00") + " €";
                        }
                        else
                        {
                            Base_Imponible2.Text = (0).ToString("0.00");
                            Cuota_IVA2.Text = (0).ToString("0.00");
                            Importe_Factura2.Text = (0).ToString("0.00");
                        }

                        if (!Nombre_Cliente_Factura2.Text.Equals(f.Nombre_Cliente))
                        {
                            a = true;
                            Nombre_Cliente_Factura2.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Nombre_Cliente_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        }
                        Console.WriteLine("1 " + a);

                        if (!DNI_Cliente_Factura2.Text.Equals(f.DNI_CIF))
                        {
                            a = true;
                            DNI_Cliente_Factura2.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            DNI_Cliente_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        }
                        Console.WriteLine("2 " + a);
                        if (!Direccion_Camping_Factura2.Text.Equals(f.Direccion_Facturacion))
                        {
                            a = true;
                            Direccion_Camping_Factura2.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Direccion_Camping_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        }
                        Console.WriteLine("3 " + a);
                        if (!Poblacion_Camping_Factura2.Text.Equals(f.Poblecion_Facturacion))
                        {
                            a = true;
                            Poblacion_Camping_Factura2.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Poblacion_Camping_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        }
                        Console.WriteLine("4 " + a);

                        if (!Codigo_Postal_Camping_Factura2.Text.Equals(f.CP_Facturacion.ToString()))
                        {
                            Codigo_Postal_Camping_Factura2.BorderBrush = Brushes.Red;
                            a = true;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Codigo_Postal_Camping_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        }
                        Console.WriteLine("5 " + a);
                        if (!Provincia_Camping_Factura2.Text.Equals(f.Provincia_Facturacion))

                        {
                            a = true;
                            Provincia_Camping_Factura2.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Provincia_Camping_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        }

                        Console.WriteLine("6 " + a);
                        if (!Fecha_Factura2.SelectedDate.Equals(f.fecha))
                        {
                            a = true;
                            Fecha_Factura2.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Fecha_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        }
                        Console.WriteLine("7 " + a);
                        if (!Fecha_Factura_ven2.SelectedDate.Equals(f.fecha_ven))
                        {
                            a = true;
                            Fecha_Factura_ven2.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Fecha_Factura_ven2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        }
                        Console.WriteLine("8 " + a);
                        if (!Importe_Factura2.Text.Equals(f.Importe.ToString("0.00") + " €"))
                        {
                            a = true;
                            Base_Imponible2.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Base_Imponible2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        }
                        Console.WriteLine("9 " + a);

                        if (!Direccion_Cliente_Factura2.Text.Equals(f.Direccion_Cliente))
                        {
                            a = true;
                            Direccion_Cliente_Factura2.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Direccion_Cliente_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        }
                        Console.WriteLine("10 " + a);
                        if (!Poblacion_Cliente_Factura2.Text.Equals(f.Poblacio_Cliente))
                        {
                            a = true;
                            Poblacion_Cliente_Factura2.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Poblacion_Cliente_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        }
                        Console.WriteLine("11 " + a);
                        if (!Codigo_Postal_Cliente_Facturacion2.Text.Equals(f.CP_Cliente.ToString()))
                        {
                            a = true;
                            Codigo_Postal_Cliente_Facturacion2.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Codigo_Postal_Cliente_Facturacion2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        }
                        Console.WriteLine("12 " + a);
                        if (!Provincia_Cliente_Factura2.Text.Equals(f.Provincia_Cliente))
                        {
                            a = true;
                            Provincia_Cliente_Factura2.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Provincia_Cliente_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        }
                        Console.WriteLine("13 " + a);



                        if (!Pais_Cliente_Factura2.Text.Equals(f.Pais_Cliente))
                        {
                            a = true;
                            Pais_Camping_Factura2.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Pais_Cliente_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        }
                        Console.WriteLine("14 " + a);

                        if (!Pais_Camping_Factura2.Text.Equals(f.Pais_Facturacion))
                        {
                            a = true;
                            Pais_Camping_Factura2.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Pais_Camping_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        }
                        Console.WriteLine("15 " + a);

                        if (!Empresa2.Text.Equals(f.Empresa))
                        {
                            a = true;
                            Empresa2.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Empresa2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        }
                        Console.WriteLine("16 " + a);


                        if (!Telefono_cliente2.Text.Equals(f.Telefono))
                        {
                            a = true;
                            Metodo_Pago2.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Telefono_cliente2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        }
                        Console.WriteLine("17 " + a);
                        if (!Telefono_Camping_Factura2.Text.Equals(f.Telefono_Camping))
                        {
                            a = true;
                            Telefono_Camping_Factura2.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Telefono_Camping_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        }
                        Console.WriteLine("18 " + a);

                        if (Metodo_Pago2.SelectedIndex != f.Metodo_Pago)
                        {
                            a = true;
                            Metodo_Pago2.Foreground = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Metodo_Pago2.Foreground = Brushes.Black;
                        }
                        Console.WriteLine("19 " + a);
                        if (!Descuento2.Text.Equals(f.Descuento))
                        {
                            a = true;
                            Descuento2.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Descuento2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        }
                        Console.WriteLine("20 " + a);
                        int[] pr = new int[f.Lista_productos.Count()];
                        for (int i = 0; i < pr.Count(); i++)
                        {
                            pr[i] = -1;
                        }

                        if (f.Lista_productos.Count == Productos2.Items.Count)
                        {

                            foreach (Producto p2 in Productos2.Items)
                            {
                                for (int i = 0; i < f.Lista_productos.Count(); i++)
                                {
                                    if (pr[i] != 1)
                                        if (f.Lista_productos[i].Nombre_Producto.Equals(p2.Nombre_Producto))
                                        {
                                            pr[i] = 1;

                                            break;
                                        }
                                        else if (pr[i] != 1) pr[i] = 0;

                                }


                            }
                        }
                        else
                            a = true;

                        foreach (int i in pr)
                            Console.WriteLine(i + " ");
                        if (pr.Contains(0))
                        {
                            a = true;
                            Productos2.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Productos2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        }
                        Console.WriteLine("21 " + a);

                        if (a)
                        {
                            change_Factura.IsEnabled = true;
                            safe = true;

                        }
                        else
                        {
                            change_Factura.IsEnabled = false;
                            safe = false;
                        }


                        if (a)
                        {
                            change_Factura.IsEnabled = true;
                            safe = true;

                        }
                        else
                        {
                            change_Factura.IsEnabled = false;
                            safe = false;
                        }

                    }

                    cn.Close();

                    ve.Close();
                }
                catch (Exception ee)
                {
                    string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                    var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                    Peta(ee, line + "");
                }
            }

        }

        private void Gen(string path, int tipo, PDF pdf, int p)
        {
            if (p == 0)
            {

            }
            else if (tabcontrol.SelectedIndex == 1)
            {
                Buscar_imagen(path);
            }
            else
            if (factura_menu.SelectedIndex == 0 || factura_menu.SelectedIndex == 1)
            {
               
            }
            else if (factura_menu.SelectedIndex == 2 || factura_menu.SelectedIndex == 3)
            {
                if (Recibos.SelectedItem != null)
                {

                    Generar_Pdf2(Recibos.SelectedItems.Cast<Recibos>().ToList(), path, tipo, pdf);
                }
            }
            
        }

        private void Generar_Pdf3(Clientes c, string path, PDF pdf)
        {
            
                string pathPDF = pdf.Path;
                string pdfname = c.n_cliemte+ "_" + DateTime.Now.Day.ToString() + "_" + DateTime.Now.Month.ToString() + "_" + DateTime.Now.Year.ToString() + ".pdf";
                pdfname.Trim();
                pdfname = @"\" + pdfname;
                string filename = path + pdfname;


                string pathPDF2 = filename;

                //Objeto para leer el pdf original
                iTextSharp.text.pdf.PdfReader oReader = new iTextSharp.text.pdf.PdfReader(pathPDF);
                //Objeto que tiene el tamaño de nuestro documento
                iTextSharp.text.Rectangle oSize = oReader.GetPageSizeWithRotation(1);
                //documento de itextsharp para realizar el trabajo asignandole el tamaño del original
                Document oDocument = new Document(oSize);

                // Creamos el objeto en el cual haremos la inserción
                FileStream oFS = new FileStream(pathPDF2, FileMode.Create, FileAccess.Write);
                PdfWriter oWriter = PdfWriter.GetInstance(oDocument, oFS);
                oDocument.Open();


                //El contenido del pdf, aqui se hace la escritura del contenido
                PdfContentByte oPDF = oWriter.DirectContent;

                //Propiedades de nuestra fuente a insertar
                BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA_BOLD, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                oPDF.SetColorFill(BaseColor.BLACK);
                oPDF.SetFontAndSize(bf, 14);
            oDocument.Open();
            PdfContentByte pcb = oWriter.DirectContent;



            //Objeto para leer el pdf original


            //Propiedades de nuestra fuente a insertar
            

            

            //oLog.Add("PASO 4");
            oPDF.BeginText();
            //asignamos el texto
            string text = "Numero Cliente: "+c.n_cliemte;
            // Le damos posición y rotación al texto
            // la posición de Y es al revés de como estamos acostumbrados
            //830 max y 600 max x

            oPDF.ShowTextAligned(0, text, 100, 750, 0);
            oPDF.EndText();
            oPDF.BeginText();
            //asignamos el texto
             text = "Parcela: " + c.n_plaza;
            // Le damos posición y rotación al texto
            // la posición de Y es al revés de como estamos acostumbrados
            //830 max y 600 max x

            oPDF.ShowTextAligned(0, text, 100, 730, 0);
            oPDF.EndText();
            oPDF.BeginText();
            //asignamos el texto
             text = "Nombre Cliente: " + c.nombre_completo;
            // Le damos posición y rotación al texto
            // la posición de Y es al revés de como estamos acostumbrados
            //830 max y 600 max x

            oPDF.ShowTextAligned(0, text, 100, 710, 0);
            oPDF.EndText();
            oPDF.BeginText();
            //asignamos el texto
             text = "DNI Cliente: " + c.dni;
            // Le damos posición y rotación al texto
            // la posición de Y es al revés de como estamos acostumbrados
            //830 max y 600 max x

            oPDF.ShowTextAligned(0, text, 100, 690, 0);
            oPDF.EndText();
            oPDF.BeginText();
            //asignamos el texto
             text = "Direccion: " + c.direccion;
            // Le damos posición y rotación al texto
            // la posición de Y es al revés de como estamos acostumbrados
            //830 max y 600 max x

            oPDF.ShowTextAligned(0, text, 100, 670, 0);
            oPDF.EndText();
            oPDF.BeginText();
            //asignamos el texto
            text = "Codigo postal: " + c.codigo_postal;
            // Le damos posición y rotación al texto
            // la posición de Y es al revés de como estamos acostumbrados
            //830 max y 600 max x

            oPDF.ShowTextAligned(0, text, 100, 650, 0);
            oPDF.EndText();
           
            oPDF.BeginText();
            //asignamos el texto
            text = "Polacion: " + c.poblacio;
            // Le damos posición y rotación al texto
            // la posición de Y es al revés de como estamos acostumbrados
            //830 max y 600 max x

            oPDF.ShowTextAligned(0, text, 100, 630, 0);
            oPDF.EndText();
          
            oPDF.BeginText();
            //asignamos el texto
            text = "Provincia: " + c.Provincia;
            // Le damos posición y rotación al texto
            // la posición de Y es al revés de como estamos acostumbrados
            //830 max y 600 max x

            oPDF.ShowTextAligned(0, text, 100, 610, 0);
            oPDF.EndText();
           
            oPDF.BeginText();
            //asignamos el texto
            text = "Pais: " + c.Pais;
            // Le damos posición y rotación al texto
            // la posición de Y es al revés de como estamos acostumbrados
            //830 max y 600 max x

            oPDF.ShowTextAligned(0, text, 100, 590, 0);
            oPDF.EndText();

            oPDF.BeginText();
            //asignamos el texto
            text = "Fecha entrada: " + c.Fecha_In;
            // Le damos posición y rotación al texto
            // la posición de Y es al revés de como estamos acostumbrados
            //830 max y 600 max x

           
            oPDF.ShowTextAligned(0, text, 100, 570, 0);
            oPDF.EndText();
            oPDF.BeginText();
            //asignamos el texto
            text = "hora entrada: " + c.Hora_entrada;
            // Le damos posición y rotación al texto
            // la posición de Y es al revés de como estamos acostumbrados
            //830 max y 600 max x

            oPDF.ShowTextAligned(0, text, 100, 550, 0);
            oPDF.EndText();
            oPDF.BeginText();
            //asignamos el texto
            text = "fecha salida: " + c.Fecha_Out;
            // Le damos posición y rotación al texto
            // la posición de Y es al revés de como estamos acostumbrados
            //830 max y 600 max x

            oPDF.ShowTextAligned(0, text, 100, 530, 0);
            oPDF.EndText();
            oPDF.BeginText();
            //asignamos el texto
            text = "fecha pago: " + c.fecha_pago;
            // Le damos posición y rotación al texto
            // la posición de Y es al revés de como estamos acostumbrados
            //830 max y 600 max x

            oPDF.ShowTextAligned(0, text, 100, 510, 0);
            oPDF.EndText();
            oPDF.BeginText();
            //asignamos el texto
            text = "fecha periodo: " + c.fecha_entrada_estado;

            // Le damos posición y rotación al texto
            // la posición de Y es al revés de como estamos acostumbrados
            //830 max y 600 max x

            oPDF.ShowTextAligned(0, text, 100, 490, 0);
            oPDF.EndText();
            oPDF.BeginText();
            //asignamos el texto
            text = "hora : " + c.Hora_salida;
            // Le damos posición y rotación al texto
            // la posición de Y es al revés de como estamos acostumbrados
            //830 max y 600 max x

            oPDF.ShowTextAligned(0, text, 100, 470, 0);
            oPDF.EndText();
            oPDF.BeginText();
            //asignamos el texto
            text = "Importe: " + c.importe;
            // Le damos posición y rotación al texto
            // la posición de Y es al revés de como estamos acostumbrados
            //830 max y 600 max x


            oPDF.ShowTextAligned(0, text, 100, 450, 0);
            oPDF.EndText();
            oPDF.BeginText();
            //asignamos el texto
            text = "telefono: " + c.telefon1;
            // Le damos posición y rotación al texto
            // la posición de Y es al revés de como estamos acostumbrados
            //830 max y 600 max x

            oPDF.ShowTextAligned(0, text, 100, 430, 0);
            oPDF.EndText();
            oPDF.BeginText();
            //asignamos el texto
            text = "direccion correo: " + c.mail;
            // Le damos posición y rotación al texto
            // la posición de Y es al revés de como estamos acostumbrados
            //830 max y 600 max x

            oPDF.ShowTextAligned(0, text, 100, 410, 0);
            oPDF.EndText();
            oPDF.BeginText();
            //asignamos el texto
            text = "Vehiculo: " + c.Vehiculo1;
            // Le damos posición y rotación al texto
            // la posición de Y es al revés de como estamos acostumbrados
            //830 max y 600 max x

            oPDF.ShowTextAligned(0, text, 100, 390, 0);
            oPDF.EndText();
            oPDF.BeginText();
            //asignamos el texto
            text = "matricula: " + c.matricula1;
            // Le damos posición y rotación al texto
            // la posición de Y es al revés de como estamos acostumbrados
            //830 max y 600 max x

            oPDF.ShowTextAligned(0, text, 100, 370, 0);
            oPDF.EndText();
            //crea una nueva pagina y agrega el pdf original

            // Cerramos los objetos utilizados
            oDocument.Close();
                oFS.Close();
                oWriter.Close();
                oReader.Close();


                Process.Start(filename);
            
        }
        private void Generar_Pdf4(Clientes c, string path, PDF pdf)
        {
            
                string pathPDF = pdf.Path;
                string pdfname = c.n_cliemte+ "_" + DateTime.Now.Day.ToString() + "_" + DateTime.Now.Month.ToString() + "_" + DateTime.Now.Year.ToString() + ".pdf";
                pdfname.Trim();
                pdfname = @"\" + pdfname;
                string filename = path + pdfname;


                string pathPDF2 = filename;

                //Objeto para leer el pdf original
                iTextSharp.text.pdf.PdfReader oReader = new iTextSharp.text.pdf.PdfReader(pathPDF);
                //Objeto que tiene el tamaño de nuestro documento
                iTextSharp.text.Rectangle oSize = oReader.GetPageSizeWithRotation(1);
                //documento de itextsharp para realizar el trabajo asignandole el tamaño del original
                Document oDocument = new Document(oSize,0,0,0,0);
                // Creamos el objeto en el cual haremos la inserción
                FileStream oFS = new FileStream(pathPDF2, FileMode.Create, FileAccess.Write);
                PdfWriter oWriter = PdfWriter.GetInstance(oDocument, oFS);
                oDocument.Open();


                //El contenido del pdf, aqui se hace la escritura del contenido
                PdfContentByte oPDF = oWriter.DirectContent;

                //Propiedades de nuestra fuente a insertar
                BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA_BOLD, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                oPDF.SetColorFill(BaseColor.BLACK);
                oPDF.SetFontAndSize(bf, 14);
            oDocument.Open();
            PdfContentByte pcb = oWriter.DirectContent;
            DateTime dt1=new DateTime();
            DateTime dt2= new DateTime();
            DateTime dt3= new DateTime();

            try
            {
                dt1 = (DateTime) c.Fecha_In;
            }
            catch
            {

            }
            try
            {
                dt2 = (DateTime) c.fecha_entrada_estado;
            }
            catch
            {

            }
            try
            {
                dt3 = (DateTime) c.fecha_pago;
            }
            catch
            {

            }

            //Objeto para leer el pdf original


            //Propiedades de nuestra fuente a insertar

            float size = oSize.Height / 5;
            size= (float)Math.Round(size, 0);
            switch (posicionapli)
            {
                case 0:
                    {
                        PdfPTable table = new PdfPTable(4);
                        table.WidthPercentage = 100;
                        PdfPCell cell = new PdfPCell();
                        cell.FixedHeight = size;
                        cell.HorizontalAlignment = 1;
                        cell.VerticalAlignment = 1;
                        PdfPCell cell2 = new PdfPCell();
                        cell2.FixedHeight = size;
                        cell2.HorizontalAlignment = 1;
                        cell2.VerticalAlignment = 1;
                        Font bff = FontFactory.GetFont("georgia", 8f);

                        iTextSharp.text.Paragraph docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("N.CLTE: " + c.n_cliemte.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("N.TARJ: " + c.N_tarjeta.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;
                        cell.HorizontalAlignment = 1;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 2;
                        table.AddCell(cell);

                        Parcelas pc = new Parcelas();
                        pc.nom = "";
                        if (c.Lista_Parcelas.Count > 0)
                        {
                            pc = c.Lista_Parcelas[0];
                        }
                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("N.PLAZA: " + pc.nom, bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.nombre_completo.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.dni.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.telefon1.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.Vehiculo1.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.matricula1.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.Numero_Bastidor1.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("F. ENTRADA", bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + dt1.ToString("dd/MM/yyyy"), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("F. PAGO", bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + dt3.ToString("dd/MM/yyyy"), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("F. PERIODO", bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + dt2.ToString("dd/MM/yyyy"), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 3;
                        table.AddCell(cell);
                        table.TotalWidth = oSize.Width / 2 - 40;
                        table.WriteSelectedRows(0, -1, 20, oSize.Height - oSize.Height / 5 * 0 - 30 , pcb);

                        //crea una nueva pagina y agrega el pdf original

                        // Cerramos los objetos utilizados
                        oDocument.Close();
                        oFS.Close();
                        oWriter.Close();
                        oReader.Close();

                        Process.Start(filename);
                    }
                    break;
                case 1:
                    {
                        PdfPTable table = new PdfPTable(4);
                        table.WidthPercentage = 100;
                        PdfPCell cell = new PdfPCell();
                        cell.FixedHeight = size;
                        cell.HorizontalAlignment = 1;
                        cell.VerticalAlignment = 1;
                        PdfPCell cell2 = new PdfPCell();
                        cell2.FixedHeight = size;
                        cell2.HorizontalAlignment = 1;
                        cell2.VerticalAlignment = 1;
                        Font bff = FontFactory.GetFont("georgia", 8);
                        iTextSharp.text.Paragraph docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("N.CLTE: " + c.n_cliemte.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("N.TARJ: " + c.N_tarjeta.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;
                        cell.HorizontalAlignment = 1;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 2;
                        table.AddCell(cell);

                        Parcelas pc = new Parcelas();
                        pc.nom = "";
                        if (c.Lista_Parcelas.Count > 0)
                        {
                            pc = c.Lista_Parcelas[0];
                        }
                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("N.PLAZA: " + pc.nom, bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.nombre_completo.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.dni.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.telefon1.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.Vehiculo1.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.matricula1.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.Numero_Bastidor1.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("F. ENTRADA", bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + dt1.ToString("dd/MM/yyyy"), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("F. PAGO", bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + dt3.ToString("dd/MM/yyyy"), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("F. PERIODO", bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + dt2.ToString("dd/MM/yyyy"), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 3;
                        table.AddCell(cell);
                        table.TotalWidth = oSize.Width / 2 - 40;
                        table.WriteSelectedRows(0, -1, oSize.Width / 2 + 20, oSize.Height - oSize.Height / 5 * 0 - 30, pcb);

                        oDocument.Close();
                        oFS.Close();
                        oWriter.Close();
                        oReader.Close();

                        Process.Start(filename);
                    }
                    break;
                case 2:
                    {
                        PdfPTable table = new PdfPTable(4);
                        table.WidthPercentage = 100;
                        PdfPCell cell = new PdfPCell();
                        cell.FixedHeight = size;
                        cell.HorizontalAlignment = 1;
                        cell.VerticalAlignment = 1;
                        PdfPCell cell2 = new PdfPCell();
                        cell2.FixedHeight = size;
                        cell2.HorizontalAlignment = 1;
                        cell2.VerticalAlignment = 1;
                        Font bff = FontFactory.GetFont("georgia", 8f);

                        iTextSharp.text.Paragraph docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("N.CLTE: " + c.n_cliemte.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("N.TARJ: " + c.N_tarjeta.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;
                        cell.HorizontalAlignment = 1;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 2;
                        table.AddCell(cell);

                        Parcelas pc = new Parcelas();
                        pc.nom = "";
                        if (c.Lista_Parcelas.Count > 0)
                        {
                            pc = c.Lista_Parcelas[0];
                        }
                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("N.PLAZA: " + pc.nom, bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.nombre_completo.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.dni.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.telefon1.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.Vehiculo1.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.matricula1.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.Numero_Bastidor1.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("F. ENTRADA", bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + dt1.ToString("dd/MM/yyyy"), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("F. PAGO", bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + dt3.ToString("dd/MM/yyyy"), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("F. PERIODO", bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + dt2.ToString("dd/MM/yyyy"), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 3;
                        table.AddCell(cell);
                        table.TotalWidth = oSize.Width / 2 - 40;
                        table.WriteSelectedRows(0, -1, 20, oSize.Height - oSize.Height / 5 * 1 - 30, pcb);

                        //crea una nueva pagina y agrega el pdf original

                        // Cerramos los objetos utilizados
                        oDocument.Close();
                        oFS.Close();
                        oWriter.Close();
                        oReader.Close();

                        Process.Start(filename);
                    }
                    break;
                case 3:
                    {
                        PdfPTable table = new PdfPTable(4);
                        table.WidthPercentage = 100;
                        PdfPCell cell = new PdfPCell();
                        cell.FixedHeight = size;
                        cell.HorizontalAlignment = 1;
                        cell.VerticalAlignment = 1;
                        PdfPCell cell2 = new PdfPCell();
                        cell2.FixedHeight = size;
                        cell2.HorizontalAlignment = 1;
                        cell2.VerticalAlignment = 1;
                        Font bff = FontFactory.GetFont("georgia", 8);
                        iTextSharp.text.Paragraph docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("N.CLTE: " + c.n_cliemte.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("N.TARJ: " + c.N_tarjeta.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;
                        cell.HorizontalAlignment = 1;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 2;
                        table.AddCell(cell);

                        Parcelas pc = new Parcelas();
                        pc.nom = "";
                        if (c.Lista_Parcelas.Count > 0)
                        {
                            pc = c.Lista_Parcelas[0];
                        }
                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("N.PLAZA: " + pc.nom, bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.nombre_completo.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.dni.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.telefon1.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.Vehiculo1.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.matricula1.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.Numero_Bastidor1.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("F. ENTRADA", bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + dt1.ToString("dd/MM/yyyy"), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("F. PAGO", bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + dt3.ToString("dd/MM/yyyy"), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("F. PERIODO", bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + dt2.ToString("dd/MM/yyyy"), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 3;
                        table.AddCell(cell);
                        table.TotalWidth = oSize.Width / 2 - 40;
                        table.WriteSelectedRows(0, -1, oSize.Width / 2 + 20, oSize.Height - oSize.Height / 5 * 1 - 30, pcb);

                        oDocument.Close();
                        oFS.Close();
                        oWriter.Close();
                        oReader.Close();

                        Process.Start(filename);
                    }
                    break;
                case 4:
                    {
                        PdfPTable table = new PdfPTable(4);
                        table.WidthPercentage = 100;
                        PdfPCell cell = new PdfPCell();
                        cell.FixedHeight = size;
                        cell.HorizontalAlignment = 1;
                        cell.VerticalAlignment = 1;
                        PdfPCell cell2 = new PdfPCell();
                        cell2.FixedHeight = size;
                        cell2.HorizontalAlignment = 1;
                        cell2.VerticalAlignment = 1;
                        Font bff = FontFactory.GetFont("georgia", 8f);

                        iTextSharp.text.Paragraph docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("N.CLTE: " + c.n_cliemte.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("N.TARJ: " + c.N_tarjeta.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;
                        cell.HorizontalAlignment = 1;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 2;
                        table.AddCell(cell);

                        Parcelas pc = new Parcelas();
                        pc.nom = "";
                        if (c.Lista_Parcelas.Count > 0)
                        {
                            pc = c.Lista_Parcelas[0];
                        }
                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("N.PLAZA: " + pc.nom, bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.nombre_completo.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.dni.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.telefon1.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.Vehiculo1.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.matricula1.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.Numero_Bastidor1.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("F. ENTRADA", bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + dt1.ToString("dd/MM/yyyy"), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("F. PAGO", bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + dt3.ToString("dd/MM/yyyy"), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("F. PERIODO", bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + dt2.ToString("dd/MM/yyyy"), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 3;
                        table.AddCell(cell);
                        table.TotalWidth = oSize.Width / 2 - 40;
                        table.WriteSelectedRows(0, -1, 20, oSize.Height - oSize.Height / 5 * 2 - 30, pcb);

                        //crea una nueva pagina y agrega el pdf original

                        // Cerramos los objetos utilizados
                        oDocument.Close();
                        oFS.Close();
                        oWriter.Close();
                        oReader.Close();

                        Process.Start(filename);
                    }
                    break;
                case 5:
                    {
                        PdfPTable table = new PdfPTable(4);
                        table.WidthPercentage = 100;
                        PdfPCell cell = new PdfPCell();
                        cell.FixedHeight = size;
                        cell.HorizontalAlignment = 1;
                        cell.VerticalAlignment = 1;
                        PdfPCell cell2 = new PdfPCell();
                        cell2.FixedHeight = size;
                        cell2.HorizontalAlignment = 1;
                        cell2.VerticalAlignment = 1;
                        Font bff = FontFactory.GetFont("georgia", 8);
                        iTextSharp.text.Paragraph docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("N.CLTE: " + c.n_cliemte.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("N.TARJ: " + c.N_tarjeta.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;
                        cell.HorizontalAlignment = 1;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 2;
                        table.AddCell(cell);

                        Parcelas pc = new Parcelas();
                        pc.nom = "";
                        if (c.Lista_Parcelas.Count > 0)
                        {
                            pc = c.Lista_Parcelas[0];
                        }
                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("N.PLAZA: " + pc.nom, bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.nombre_completo.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.dni.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.telefon1.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.Vehiculo1.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.matricula1.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.Numero_Bastidor1.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("F. ENTRADA", bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + dt1.ToString("dd/MM/yyyy"), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("F. PAGO", bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + dt3.ToString("dd/MM/yyyy"), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("F. PERIODO", bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + dt2.ToString("dd/MM/yyyy"), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 3;
                        table.AddCell(cell);
                        table.TotalWidth = oSize.Width / 2 - 40;
                        table.WriteSelectedRows(0, -1, oSize.Width / 2 + 20, oSize.Height - oSize.Height / 5 * 2 - 30, pcb);

                        oDocument.Close();
                        oFS.Close();
                        oWriter.Close();
                        oReader.Close();

                        Process.Start(filename);
                    }
                    break;
                case 6:
                    {
                        PdfPTable table = new PdfPTable(4);
                        table.WidthPercentage = 100;
                        PdfPCell cell = new PdfPCell();
                        cell.FixedHeight = size;
                        cell.HorizontalAlignment = 1;
                        cell.VerticalAlignment = 1;
                        PdfPCell cell2 = new PdfPCell();
                        cell2.FixedHeight = size;
                        cell2.HorizontalAlignment = 1;
                        cell2.VerticalAlignment = 1;
                        Font bff = FontFactory.GetFont("georgia", 8f);

                        iTextSharp.text.Paragraph docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("N.CLTE: " + c.n_cliemte.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("N.TARJ: " + c.N_tarjeta.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;
                        cell.HorizontalAlignment = 1;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 2;
                        table.AddCell(cell);

                        Parcelas pc = new Parcelas();
                        pc.nom = "";
                        if (c.Lista_Parcelas.Count > 0)
                        {
                            pc = c.Lista_Parcelas[0];
                        }
                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("N.PLAZA: " + pc.nom, bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.nombre_completo.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.dni.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.telefon1.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.Vehiculo1.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.matricula1.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.Numero_Bastidor1.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("F. ENTRADA", bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + dt1.ToString("dd/MM/yyyy"), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("F. PAGO", bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + dt3.ToString("dd/MM/yyyy"), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("F. PERIODO", bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + dt2.ToString("dd/MM/yyyy"), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 3;
                        table.AddCell(cell);
                        table.TotalWidth = oSize.Width / 2 - 40;
                        table.WriteSelectedRows(0, -1, 20, oSize.Height - oSize.Height / 5 * 3 - 30, pcb);

                        //crea una nueva pagina y agrega el pdf original

                        // Cerramos los objetos utilizados
                        oDocument.Close();
                        oFS.Close();
                        oWriter.Close();
                        oReader.Close();

                        Process.Start(filename);
                    }
                    break;
                case 7:
                    {
                        PdfPTable table = new PdfPTable(4);
                        table.WidthPercentage = 100;
                        PdfPCell cell = new PdfPCell();
                        cell.FixedHeight = size;
                        cell.HorizontalAlignment = 1;
                        cell.VerticalAlignment = 1;
                        PdfPCell cell2 = new PdfPCell();
                        cell2.FixedHeight = size;
                        cell2.HorizontalAlignment = 1;
                        cell2.VerticalAlignment = 1;
                        Font bff = FontFactory.GetFont("georgia", 8);
                        iTextSharp.text.Paragraph docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("N.CLTE: " + c.n_cliemte.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("N.TARJ: " + c.N_tarjeta.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;
                        cell.HorizontalAlignment = 1;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 2;
                        table.AddCell(cell);

                        Parcelas pc = new Parcelas();
                        pc.nom = "";
                        if (c.Lista_Parcelas.Count > 0)
                        {
                            pc = c.Lista_Parcelas[0];
                        }
                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("N.PLAZA: " + pc.nom, bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.nombre_completo.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.dni.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.telefon1.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.Vehiculo1.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.matricula1.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.Numero_Bastidor1.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("F. ENTRADA", bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + dt1.ToString("dd/MM/yyyy"), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("F. PAGO", bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + dt3.ToString("dd/MM/yyyy"), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("F. PERIODO", bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + dt2.ToString("dd/MM/yyyy"), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 3;
                        table.AddCell(cell);
                        table.TotalWidth = oSize.Width / 2 - 40;
                        table.WriteSelectedRows(0, -1, oSize.Width / 2 + 20, oSize.Height - oSize.Height / 5 * 3 - 30, pcb);

                        oDocument.Close();
                        oFS.Close();
                        oWriter.Close();
                        oReader.Close();

                        Process.Start(filename);
                    }
                    break;
                case 8:
                    {
                        PdfPTable table = new PdfPTable(4);
                        table.WidthPercentage = 100;
                        PdfPCell cell = new PdfPCell();
                        cell.FixedHeight = size;
                        cell.HorizontalAlignment = 1;
                        cell.VerticalAlignment = 1;
                        PdfPCell cell2 = new PdfPCell();
                        cell2.FixedHeight = size;
                        cell2.HorizontalAlignment = 1;
                        cell2.VerticalAlignment = 1;
                        Font bff = FontFactory.GetFont("georgia", 8f);

                        iTextSharp.text.Paragraph docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("N.CLTE: " + c.n_cliemte.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("N.TARJ: " + c.N_tarjeta.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;
                        cell.HorizontalAlignment = 1;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 2;
                        table.AddCell(cell);

                        Parcelas pc = new Parcelas();
                        pc.nom = "";
                        if (c.Lista_Parcelas.Count > 0)
                        {
                            pc = c.Lista_Parcelas[0];
                        }
                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("N.PLAZA: " + pc.nom, bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.nombre_completo.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.dni.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.telefon1.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.Vehiculo1.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.matricula1.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.Numero_Bastidor1.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("F. ENTRADA", bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + dt1.ToString("dd/MM/yyyy"), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("F. PAGO", bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + dt3.ToString("dd/MM/yyyy"), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("F. PERIODO", bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + dt2.ToString("dd/MM/yyyy"), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 3;
                        table.AddCell(cell);
                        table.TotalWidth = oSize.Width / 2 - 40;
                        table.WriteSelectedRows(0, -1, 20, oSize.Height - oSize.Height / 5 * 4 - 30, pcb);

                        //crea una nueva pagina y agrega el pdf original

                        // Cerramos los objetos utilizados
                        oDocument.Close();
                        oFS.Close();
                        oWriter.Close();
                        oReader.Close();

                        Process.Start(filename);
                    }
                    break;
                case 9:
                    {
                        PdfPTable table = new PdfPTable(4);
                        table.WidthPercentage = 100;
                        PdfPCell cell = new PdfPCell();
                        cell.FixedHeight = size;
                        cell.HorizontalAlignment = 1;
                        cell.VerticalAlignment = 1;
                        PdfPCell cell2 = new PdfPCell();
                        cell2.FixedHeight = size;
                        cell2.HorizontalAlignment = 1;
                        cell2.VerticalAlignment = 1;
                        Font bff = FontFactory.GetFont("georgia", 8);
                        iTextSharp.text.Paragraph docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("N.CLTE: " + c.n_cliemte.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("N.TARJ: " + c.N_tarjeta.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;
                        cell.HorizontalAlignment = 1;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 2;
                        table.AddCell(cell);

                        Parcelas pc = new Parcelas();
                        pc.nom = "";
                        if (c.Lista_Parcelas.Count > 0)
                        {
                            pc = c.Lista_Parcelas[0];
                        }
                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("N.PLAZA: " + pc.nom, bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.nombre_completo.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.dni.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.telefon1.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.Vehiculo1.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.matricula1.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + c.Numero_Bastidor1.ToString(), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 4;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("F. ENTRADA", bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + dt1.ToString("dd/MM/yyyy"), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("F. PAGO", bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + dt3.ToString("dd/MM/yyyy"), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("F. PERIODO", bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        table.AddCell(cell);

                        docTitle = new iTextSharp.text.Paragraph();
                        docTitle.Add(new Chunk("" + dt2.ToString("dd/MM/yyyy"), bff));
                        cell = new PdfPCell(docTitle);
                        cell.Border = 0;
                        cell2.Border = 0;


                        cell.HorizontalAlignment = 0;
                        cell.VerticalAlignment = 1;
                        cell.Colspan = 3;
                        table.AddCell(cell);
                        table.TotalWidth = oSize.Width / 2 - 40;
                        table.WriteSelectedRows(0, -1, oSize.Width / 2 + 20, oSize.Height - oSize.Height / 5 * 4 - 30, pcb);

                        oDocument.Close();
                        oFS.Close();
                        oWriter.Close();
                        oReader.Close();

                        Process.Start(filename);
                    }
                    break;

            }
            

            //oLog.Add("PASO 4");
            
            
        }

        private void Buscar_imagen(string path)
        {
            //console.writeline(path);
            //img.Source = new BitmapImage(path, UriKind.Relative);
        }

        private void Generar_Pdf2(List<Recibos> list, string path, int tipo, PDF pdf)
        {
            List<Recibos> l = (List<Recibos>)list;

            foreach (Recibos f in l)
            {
                float iva21 = 0;
                float iva10 = 0;
                float iva4 = 0;
                float ivaotros = 0;
                float descuento = 0;
                float totals = 0;

                string pathPDF = pdf.Path;
                string pdfname = f.Id + "_" + f.Nombre_Cliente + "_" + DateTime.Now.Day.ToString() + "_" + DateTime.Now.Month.ToString() + "_" + DateTime.Now.Year.ToString() + ".pdf";
                pdfname.Trim();
                pdfname = @"\" + pdfname;
                string filename = path + pdfname;


                string pathPDF2 = filename;

                //Objeto para leer el pdf original
                iTextSharp.text.pdf.PdfReader oReader = new iTextSharp.text.pdf.PdfReader(pathPDF);
                //Objeto que tiene el tamaño de nuestro documento
                iTextSharp.text.Rectangle oSize = oReader.GetPageSizeWithRotation(1);
                //documento de itextsharp para realizar el trabajo asignandole el tamaño del original
                Document oDocument = new Document(oSize);

                // Creamos el objeto en el cual haremos la inserción
                FileStream oFS = new FileStream(pathPDF2, FileMode.Create, FileAccess.Write);
                PdfWriter oWriter = PdfWriter.GetInstance(oDocument, oFS);
                oDocument.Open();


                PdfContentByte oPDF = oWriter.DirectContent;



                //bf = BaseFont.CreateFont("Calibri", BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                oPDF.SetColorFill(BaseColor.BLACK);
                //oPDF.SetFontAndSize(bf, 9);
                Font titleFont = FontFactory.GetFont("Calibri", 10, 1, BaseColor.BLACK);
                Font subtitleFont = FontFactory.GetFont("Calibri", 10, new BaseColor(123, 123, 122));
                Font importantNoticeFont = FontFactory.GetFont("Calibri", 10, new BaseColor(123, 123, 122));
                Font importantNoticeFont2 = FontFactory.GetFont("Calibri", 10, new BaseColor(123, 123, 122));
                iTextSharp.text.Paragraph docTitle = new iTextSharp.text.Paragraph(f.Empresa, titleFont);
                iTextSharp.text.Paragraph subTitle = new iTextSharp.text.Paragraph(f.Direccion_Facturacion, subtitleFont);
                iTextSharp.text.Paragraph importantNotice = new iTextSharp.text.Paragraph(f.CP_Facturacion + ", " + f.Poblecion_Facturacion + ", " + f.Pais_Facturacion, importantNoticeFont);
                iTextSharp.text.Paragraph importantNotice2 = new iTextSharp.text.Paragraph("Telf. " + f.Telefono_Camping, importantNoticeFont2);


                PdfPCell cell = new PdfPCell();
                PdfPCell cellCaveat = new PdfPCell();
                PdfPCell cellImportantNote = new PdfPCell();
                PdfPCell cellImportantNote2 = new PdfPCell();
                PdfPTable table;
                PdfContentByte pcb = oWriter.DirectContent;


                table = new PdfPTable(1); // the arg is the number of columns

                cell = new PdfPCell(docTitle);


                cell.Border = PdfPCell.NO_BORDER;
                cell.FixedHeight = 15f;
                cell.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(cell);
                cellCaveat = new PdfPCell(subTitle);

                cellCaveat.Border = PdfPCell.NO_BORDER;
                cellCaveat.FixedHeight = 15f;
                table.AddCell(cellCaveat);
                cellImportantNote = new PdfPCell(importantNotice);

                cellImportantNote.Border = PdfPCell.NO_BORDER;
                cellImportantNote.FixedHeight = 15f;
                table.AddCell(cellImportantNote);

                cellImportantNote2 = new PdfPCell(importantNotice2);

                cellImportantNote2.Border = PdfPCell.NO_BORDER;
                cell.FixedHeight = 15f;
                table.AddCell(cellImportantNote2);
               
                table.TotalWidth = 595f;
                table.WriteSelectedRows(0, -1, 40, 738, pcb);



                // Now we've added 2 rows: two rows will be shown:



                //////////////////////////////////////////////////////////////////////
                //////
                //Datos Cliente////////////////////////////////////////////////////////
                //////
                //////////////////////////////////////////////////////////////////////

                pcb = oWriter.DirectContent;
                table = new PdfPTable(1);
                table.TotalWidth = 595;

                // there isn't any content in the table: there's nothing to write yet

                // Inner middle row.
                titleFont = FontFactory.GetFont("Calibri", 10, 1, BaseColor.BLACK);

                docTitle = new iTextSharp.text.Paragraph("RECIBO PARA", titleFont);

                Font titleFont2 = FontFactory.GetFont("Calibri", 10, new BaseColor(123, 123, 122));
                iTextSharp.text.Paragraph docTitle2 = new iTextSharp.text.Paragraph(f.Nombre_Cliente, titleFont2);

                subtitleFont = FontFactory.GetFont("Calibri", 10, new BaseColor(123, 123, 122));
                iTextSharp.text.Paragraph docTitle7 = new iTextSharp.text.Paragraph(f.DNI_CIF, subtitleFont);
                subTitle = new iTextSharp.text.Paragraph(f.Direccion_Cliente, subtitleFont);

                importantNoticeFont = FontFactory.GetFont("Calibri", 10, new BaseColor(123, 123, 122));
                importantNotice = new iTextSharp.text.Paragraph(f.CP_Cliente + ", " + f.Poblacio_Cliente, importantNoticeFont);

                importantNoticeFont2 = FontFactory.GetFont("Calibri", 10, new BaseColor(123, 123, 122));
                importantNotice2 = new iTextSharp.text.Paragraph(f.Provincia_Cliente + ", " + f.Pais_Cliente, importantNoticeFont2);

                Font titleFont3 = FontFactory.GetFont("Calibri", 8, 1, BaseColor.BLACK);
                iTextSharp.text.Paragraph docTitle3 = new iTextSharp.text.Paragraph("Recibo:", titleFont3);

                Font titleFont4 = FontFactory.GetFont("Calibri", 8, 1, BaseColor.BLACK);
                iTextSharp.text.Paragraph docTitle4 = new iTextSharp.text.Paragraph("Fecha:", titleFont4);


                Font titleFont5 = FontFactory.GetFont("Calibri", 8, new BaseColor(123, 123, 122));
                iTextSharp.text.Paragraph docTitle5 = new iTextSharp.text.Paragraph(f.Id.ToString("000"), titleFont5);

                Font titleFont6 = FontFactory.GetFont("Calibri", 8, new BaseColor(123, 123, 122));
                iTextSharp.text.Paragraph docTitle6 = new iTextSharp.text.Paragraph(f.fecha.ToString("dd/MM/yyyy"), titleFont6);

                PdfPCell espacio2; PdfPCell espacio3;

                table = new PdfPTable(1);
                cell = new PdfPCell(docTitle2);
                cell.Border = PdfPCell.NO_BORDER;
                cell.FixedHeight = 15f;
                cell.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(cell);
                cell = new PdfPCell(docTitle7);
                cell.FixedHeight = 15f;
                cell.Border = PdfPCell.NO_BORDER;

                cell.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(cell);


                cellCaveat = new PdfPCell(subTitle);

                cellCaveat.Border = PdfPCell.NO_BORDER;
                cell.FixedHeight = 15f;
                table.AddCell(cellCaveat);
                cellImportantNote = new PdfPCell(importantNotice);

                cellImportantNote.Border = PdfPCell.NO_BORDER;
                cell.FixedHeight = 15f;
                table.AddCell(cellImportantNote);

                cellImportantNote2 = new PdfPCell(importantNotice2);

                cellImportantNote2.Border = PdfPCell.NO_BORDER;
                cell.FixedHeight = 15f;
                //table.AddCell(cellImportantNote2);




                // Now we've added 2 rows: two rows will be shown:
                table.TotalWidth = 595f;
                table.WriteSelectedRows(0, -1, 400, 738, pcb);

                if (tipo !=2)
                {

                    table = new PdfPTable(1); cell = new PdfPCell(docTitle3);
                    cell.Border = PdfPCell.NO_BORDER;

                    cell.HorizontalAlignment = Element.ALIGN_LEFT;
                    table.AddCell(cell);
                    table.TotalWidth = 595f;
                    table.WriteSelectedRows(0, -1, 400, 665, pcb);

                    table = new PdfPTable(1); cell = new PdfPCell(docTitle5);
                    cell.Border = PdfPCell.NO_BORDER;

                    cell.HorizontalAlignment = Element.ALIGN_LEFT;
                    table.AddCell(cell);

                    table.TotalWidth = 595f;
                    table.WriteSelectedRows(0, -1, 470, 665, pcb);
                }

                //////////////////////////////////////////////////////////////////////
                //////
                //Tabla Pedido////////////////////////////////////////////////////////
                //////
                //////////////////////////////////////////////////////////////////////
                ///
                table = new PdfPTable(6);
                float[] anchoDeColumnas = new float[] { 5f, 10f, 10f, 10f, 10f, 10f };
                table.SetWidthPercentage(anchoDeColumnas, oDocument.PageSize);
                //table.DefaultCell.Border = PdfPCell.BOTTOM_BORDER;
                table.DefaultCell.BorderWidthBottom = 5;

                table.DefaultCell.BorderColorBottom = new BaseColor(12, 105, 66);
                titleFont = FontFactory.GetFont("Calibri", 9, 1, new BaseColor(12, 105, 66));
                docTitle = new iTextSharp.text.Paragraph("NUM", titleFont);
                if (tipo == 3)
                    docTitle = new iTextSharp.text.Paragraph("", titleFont);
                titleFont3 = FontFactory.GetFont("Calibri", 9, 1, new BaseColor(123, 123, 122));
                docTitle3 = new iTextSharp.text.Paragraph(Math.Round(f.Importe, 2).ToString("0.00") + " €", titleFont3);
                docTitle3.Alignment = Element.ALIGN_LEFT;
                docTitle4 = new iTextSharp.text.Paragraph(" ", titleFont);
                titleFont2 = FontFactory.GetFont("Calibri", 9, 1, new BaseColor(12, 105, 66));
                docTitle2 = new iTextSharp.text.Paragraph("FECHA.", titleFont2);
                docTitle2.Alignment = Element.ALIGN_LEFT;
                subtitleFont = FontFactory.GetFont("Calibri", 9, 1, new BaseColor(12, 105, 66));
                subTitle = new iTextSharp.text.Paragraph("IMPORTE TOTAL", subtitleFont);

                cell = new PdfPCell();
                if (tipo == 2)
                    docTitle = new iTextSharp.text.Paragraph("", titleFont3);
                cell.AddElement(docTitle);

                cell.PaddingTop = -0;
                cell.FixedHeight = 20;
                cell.BorderColor = new BaseColor(12, 105, 66);
                cell.Border = PdfPCell.BOTTOM_BORDER | PdfPCell.TOP_BORDER;
                cell.VerticalAlignment = Element.ALIGN_CENTER; ;
                table.AddCell(cell);

                cell = new PdfPCell();
                cell.PaddingTop = -0;
                iTextSharp.text.Paragraph pppp = new iTextSharp.text.Paragraph(f.Id.ToString("000"), titleFont3);
                if(tipo==2)
                    pppp = new iTextSharp.text.Paragraph("", titleFont3);
                pppp.Alignment = Element.ALIGN_LEFT;
                cell.AddElement(pppp);
                cell.FixedHeight = 20;
                cell.BorderColor = new BaseColor(12, 105, 66);
                cell.Border = PdfPCell.BOTTOM_BORDER | PdfPCell.TOP_BORDER;
                cell.VerticalAlignment = PdfPCell.ALIGN_LEFT;
                cell.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(cell);

                cellCaveat = new PdfPCell();
                pppp = new iTextSharp.text.Paragraph("FECHA.    ", titleFont2);
                if (tipo == 2)
                    pppp = new iTextSharp.text.Paragraph("", titleFont2);
                pppp.Alignment = Element.ALIGN_RIGHT;
                pppp.SpacingAfter = 50;
                cellCaveat.AddElement(pppp);
                cellCaveat.PaddingTop = -0;
                cellCaveat.Border = PdfPCell.BOTTOM_BORDER | PdfPCell.TOP_BORDER;
                cellCaveat.FixedHeight = 20;
                cellCaveat.BorderColor = new BaseColor(12, 105, 66);
                cellCaveat.VerticalAlignment = Element.ALIGN_CENTER;
                cellCaveat.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(cellCaveat);

                cell = new PdfPCell();
                pppp = new iTextSharp.text.Paragraph(f.fecha.ToString("dd/MM/yyyy"), titleFont3);
                if (tipo == 2)
                    pppp = new iTextSharp.text.Paragraph("", titleFont3);
                pppp.Alignment = Element.ALIGN_CENTER;
                cell.AddElement(pppp);
                cell.PaddingTop = -0;
                cell.PaddingLeft = 10;
                cell.FixedHeight = 20;
                cell.BorderColor = new BaseColor(12, 105, 66);
                cell.Border = PdfPCell.BOTTOM_BORDER | PdfPCell.TOP_BORDER;
                cell.VerticalAlignment = Element.ALIGN_CENTER;
                cell.HorizontalAlignment = Element.ALIGN_RIGHT;
                table.AddCell(cell);

                cellCaveat = new PdfPCell();
                PdfPCell espacio = new PdfPCell();
                espacio.AddElement(subTitle);
                espacio.PaddingTop = -0;
                espacio.VerticalAlignment = Element.ALIGN_CENTER; ;
                espacio.Border = PdfPCell.BOTTOM_BORDER | PdfPCell.TOP_BORDER;
                espacio.FixedHeight = 20;
                espacio.BorderColor = new BaseColor(12, 105, 66);

                espacio.HorizontalAlignment = Element.ALIGN_RIGHT;
                table.AddCell(espacio);

                cell = new PdfPCell();
                cell.AddElement(docTitle3);
                cell.PaddingTop = -0;
                cell.FixedHeight = 20;
                cell.BorderColor = new BaseColor(12, 105, 66);
                cell.Border = PdfPCell.BOTTOM_BORDER | PdfPCell.TOP_BORDER;
                cell.VerticalAlignment = Element.ALIGN_CENTER;
                cell.HorizontalAlignment = Element.ALIGN_RIGHT;
                table.AddCell(cell);

                table.TotalWidth = 520;
                table.WriteSelectedRows(0, -1, 40, 610, pcb);

                table = new PdfPTable(6);
                anchoDeColumnas = new float[] { 37f, 15f, 15f, 15f, 15f,15f };
                table.SetWidthPercentage(anchoDeColumnas, oDocument.PageSize);
                //table.DefaultCell.Border = PdfPCell.BOTTOM_BORDER;
                table.DefaultCell.BorderWidthBottom = 5;

                table.DefaultCell.BorderColorBottom = new BaseColor(12, 105, 66);
                titleFont = FontFactory.GetFont("Calibri", 9, 1, new BaseColor(12, 105, 66));
                docTitle = new iTextSharp.text.Paragraph("Descripción", titleFont);
                titleFont3 = FontFactory.GetFont("Calibri", 9, 1, new BaseColor(123, 123, 122));
                docTitle3 = new iTextSharp.text.Paragraph("Camping", titleFont3);


                docTitle4 = new iTextSharp.text.Paragraph(" ", titleFont);

                titleFont2 = FontFactory.GetFont("Calibri", 9, 1, new BaseColor(12, 105, 66));
                docTitle2 = new iTextSharp.text.Paragraph("CANTIDAD.", titleFont2);

                subtitleFont = FontFactory.GetFont("Calibri", 9, 1, new BaseColor(12, 105, 66));
                subTitle = new iTextSharp.text.Paragraph("Precio", subtitleFont);
                Font subtitleFont2 = FontFactory.GetFont("Calibri", 9, 1, new BaseColor(12, 105, 66));
                iTextSharp.text.Paragraph subTitle2 = new iTextSharp.text.Paragraph("Tipo IVA", subtitleFont);
                subTitle2.PaddingTop = 0;
                Font subtitleFont3 = FontFactory.GetFont("Calibri", 9, 1, new BaseColor(12, 105, 66));
                iTextSharp.text.Paragraph subTitle3 = new iTextSharp.text.Paragraph("Importe", subtitleFont);


                iTextSharp.text.Paragraph subTitle4 = new iTextSharp.text.Paragraph("Descuento", subtitleFont);

                cell = new PdfPCell();
                cell.AddElement(docTitle);
                cell.FixedHeight = 20;
                cell.PaddingTop = 0;
                cell.BorderColor = new BaseColor(12, 105, 66);
                cell.Border = PdfPCell.BOTTOM_BORDER;
                cell.VerticalAlignment = Element.ALIGN_CENTER;
                table.AddCell(cell);

                cellCaveat = new PdfPCell();

                cellCaveat.AddElement(docTitle2);

                cellCaveat.Border = PdfPCell.BOTTOM_BORDER;

                cellCaveat.PaddingTop = 0;
                cellCaveat.FixedHeight = 20;
                cellCaveat.BorderColor = new BaseColor(12, 105, 66);

                cellCaveat.VerticalAlignment = Element.ALIGN_CENTER; ;

                cellCaveat.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(cellCaveat);

                espacio = new PdfPCell();
                espacio.AddElement(subTitle);
                espacio.PaddingTop = 0;

                espacio.VerticalAlignment = Element.ALIGN_CENTER; ;
                espacio.Border = PdfPCell.BOTTOM_BORDER;
                espacio.FixedHeight = 20;
                espacio.BorderColor = new BaseColor(12, 105, 66);

                espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(espacio);

                espacio = new PdfPCell();
                espacio.AddElement(subTitle2);
                espacio.PaddingTop = 0;
                espacio.VerticalAlignment = Element.ALIGN_CENTER; ;
                espacio.Border = PdfPCell.BOTTOM_BORDER;
                espacio.FixedHeight = 20;
                espacio.BorderColor = new BaseColor(12, 105, 66);

                espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(espacio);
                espacio = new PdfPCell();
                espacio.AddElement(subTitle4);
                espacio.PaddingTop = 0;
                espacio.VerticalAlignment = Element.ALIGN_CENTER; ;
                espacio.Border = PdfPCell.BOTTOM_BORDER;
                espacio.FixedHeight = 20;
                espacio.BorderColor = new BaseColor(12, 105, 66);

                espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(espacio);

                espacio = new PdfPCell();
                espacio.AddElement(subTitle3);
                espacio.PaddingTop = 0;

                espacio.VerticalAlignment = Element.ALIGN_CENTER; ;
                espacio.Border = PdfPCell.BOTTOM_BORDER;
                espacio.FixedHeight = 20;
                espacio.BorderColor = new BaseColor(12, 105, 66);

                espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(espacio);



                table.TotalWidth = 520;
                table.WriteSelectedRows(0, -1, 40, 590, pcb);

                
                int i = 0;
                table = new PdfPTable(6);
                float tasa = 0;
                foreach (Producto s in f.Lista_productos)
                {
                    if (s.Nombre_Producto.ToLower().Contains("tasa turistica"))
                    {
                        float ff = float.Parse(s.Precio.Replace(" €", "")) * float.Parse(s.Cantidad) ;
                        tasa += (float)Math.Round(ff, 2);

                    }
                    if (liva.Find(x => x.Id == int.Parse(s.IVA)).Porcentaje.Equals("21"))
                    {
                        iva21 += float.Parse(s.Cantidad) * float.Parse(s.Precio.Replace("€", "")) * 0.21f;
                    }
                    else if (liva.Find(x => x.Id == int.Parse(s.IVA)).Porcentaje.Equals("10"))
                    {
                        iva10 += float.Parse(s.Cantidad) * float.Parse(s.Precio.Replace("€", "")) * 0.10f;
                    }
                    else
                    {
                        ivaotros += float.Parse(s.Cantidad) * float.Parse(s.Precio.Replace("€", "")) * int.Parse(liva.Find(x => x.Id == int.Parse(s.IVA)).Porcentaje) / 100;
                    }
                    totals += float.Parse(s.Descuento.Replace("€", ""));

                    anchoDeColumnas = new float[] { 40f, 15f, 15f, 15f, 15f, 15f };
                    table.SetWidthPercentage(anchoDeColumnas, oDocument.PageSize);
                    //table.DefaultCell.Border = PdfPCell.BOTTOM_BORDER;
                    table.DefaultCell.BorderWidthBottom = 5;

                    table.DefaultCell.BorderColorBottom = new BaseColor(12, 105, 66);
                    titleFont = FontFactory.GetFont("Calibri", 9, 1, new BaseColor(38, 38, 38));
                    docTitle = new iTextSharp.text.Paragraph(s.Nombre_Producto, titleFont);
                    titleFont3 = FontFactory.GetFont("Calibri", 9, 0, new BaseColor(123, 123, 122));
                    docTitle3 = new iTextSharp.text.Paragraph(s.Cantidad, titleFont3);


                    docTitle4 = new iTextSharp.text.Paragraph(" ", titleFont);

                    titleFont2 = FontFactory.GetFont("Calibri", 9, 0, new BaseColor(123, 123, 122));
                    docTitle2 = new iTextSharp.text.Paragraph(s.Cantidad, titleFont2);

                    subtitleFont = FontFactory.GetFont("Calibri", 9, 0, new BaseColor(123, 123, 122));
                    subTitle = new iTextSharp.text.Paragraph(s.Precio, subtitleFont);
                    subtitleFont2 = FontFactory.GetFont("Calibri", 9, 0, new BaseColor(123, 123, 122));
                    subTitle2 = new iTextSharp.text.Paragraph(liva.Find(x => x.Id == int.Parse(s.IVA)).Tipo, subtitleFont);
                    subtitleFont3 = FontFactory.GetFont("Calibri", 9, 0, new BaseColor(123, 123, 122));
                    subTitle3 = new iTextSharp.text.Paragraph(s.Total, subtitleFont);
                    subTitle4 = new iTextSharp.text.Paragraph(s.descu, subtitleFont);

                    if (i == f.Lista_productos.Count() - 1)
                    {
                        cell = new PdfPCell();
                        cell.AddElement(docTitle);
                        cell.FixedHeight = 20;
                        cell.BorderColor = new BaseColor(123, 123, 122);
                        cell.Border = PdfPCell.TOP_BORDER | PdfPCell.BOTTOM_BORDER;
                        cell.VerticalAlignment = Element.ALIGN_CENTER;
                        cell.PaddingTop = -0;
                        table.AddCell(cell);

                        cellCaveat = new PdfPCell();

                        cellCaveat.AddElement(docTitle2);

                        cellCaveat.PaddingLeft = 10;
                        cellCaveat.Border = PdfPCell.TOP_BORDER | PdfPCell.BOTTOM_BORDER;
                        cellCaveat.FixedHeight = 20;
                        cellCaveat.BorderColor = new BaseColor(123, 123, 122);
                        cellCaveat.PaddingTop = -0;
                        cellCaveat.VerticalAlignment = Element.ALIGN_TOP;

                        cellCaveat.HorizontalAlignment = Element.ALIGN_LEFT;
                        table.AddCell(cellCaveat);

                        espacio = new PdfPCell();
                        espacio.AddElement(subTitle);
                        espacio.VerticalAlignment = Element.ALIGN_TOP;
                        espacio.Border = PdfPCell.TOP_BORDER | PdfPCell.BOTTOM_BORDER;
                        espacio.FixedHeight = 20;
                        espacio.PaddingTop = -0;
                        espacio.BorderColor = new BaseColor(123, 123, 122);

                        espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                        table.AddCell(espacio);

                        espacio = new PdfPCell();
                        espacio.AddElement(subTitle2);

                        espacio.PaddingLeft = 10;
                        espacio.PaddingTop = -0;
                        espacio.VerticalAlignment = Element.ALIGN_TOP;
                        espacio.Border = PdfPCell.TOP_BORDER | PdfPCell.BOTTOM_BORDER;
                        espacio.FixedHeight = 20;
                        espacio.BorderColor = new BaseColor(123, 123, 122);

                        espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                        table.AddCell(espacio);

                        espacio = new PdfPCell();
                        espacio.AddElement(subTitle4);

                        espacio.PaddingLeft = 10;
                        espacio.PaddingTop = -0;
                        espacio.VerticalAlignment = Element.ALIGN_TOP;
                        espacio.Border = PdfPCell.TOP_BORDER | PdfPCell.BOTTOM_BORDER;
                        espacio.FixedHeight = 20;
                        espacio.BorderColor = new BaseColor(123, 123, 122);

                        espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                        table.AddCell(espacio);

                        espacio = new PdfPCell();
                        espacio.AddElement(subTitle3);
                        espacio.PaddingTop = -0;

                        espacio.VerticalAlignment = Element.ALIGN_TOP; ;
                        espacio.Border = PdfPCell.TOP_BORDER | PdfPCell.BOTTOM_BORDER;
                        espacio.FixedHeight = 20;
                        espacio.BorderColor = new BaseColor(123, 123, 122);

                        espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                        table.AddCell(espacio);
                    }
                    else
                    {
                        cell = new PdfPCell();
                        cell.AddElement(docTitle);
                        cell.FixedHeight = 20;
                        cell.BorderColor = new BaseColor(123, 123, 122);
                        cell.Border = PdfPCell.TOP_BORDER;
                        cell.VerticalAlignment = Element.ALIGN_CENTER;
                        cell.PaddingTop = -0;
                        table.AddCell(cell);

                        cellCaveat = new PdfPCell();

                        cellCaveat.AddElement(docTitle2);

                        cellCaveat.PaddingLeft = 10;
                        cellCaveat.Border = PdfPCell.TOP_BORDER;
                        cellCaveat.FixedHeight = 20;
                        cellCaveat.BorderColor = new BaseColor(123, 123, 122);
                        cellCaveat.PaddingTop = -0;
                        cellCaveat.VerticalAlignment = Element.ALIGN_TOP;

                        cellCaveat.HorizontalAlignment = Element.ALIGN_LEFT;
                        table.AddCell(cellCaveat);

                        espacio = new PdfPCell();
                        espacio.AddElement(subTitle);
                        espacio.VerticalAlignment = Element.ALIGN_TOP;
                        espacio.Border = PdfPCell.TOP_BORDER;
                        espacio.FixedHeight = 20;
                        espacio.PaddingTop = -0;
                        espacio.BorderColor = new BaseColor(123, 123, 122);

                        espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                        table.AddCell(espacio);

                        espacio = new PdfPCell();
                        espacio.AddElement(subTitle2);

                        espacio.PaddingLeft = 10;
                        espacio.PaddingTop = -0;
                        espacio.VerticalAlignment = Element.ALIGN_TOP;
                        espacio.Border = PdfPCell.TOP_BORDER;
                        espacio.FixedHeight = 20;
                        espacio.BorderColor = new BaseColor(123, 123, 122);

                        espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                        table.AddCell(espacio);
                        espacio = new PdfPCell();
                        espacio.AddElement(subTitle4);

                        espacio.PaddingLeft = 10;
                        espacio.PaddingTop = -0;
                        espacio.VerticalAlignment = Element.ALIGN_TOP;
                        espacio.Border = PdfPCell.TOP_BORDER;
                        espacio.FixedHeight = 20;
                        espacio.BorderColor = new BaseColor(123, 123, 122);

                        espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                        table.AddCell(espacio);

                        espacio = new PdfPCell();
                        espacio.AddElement(subTitle3);
                        espacio.PaddingTop = -0;

                        espacio.VerticalAlignment = Element.ALIGN_TOP; ;
                        espacio.Border = PdfPCell.TOP_BORDER;
                        espacio.FixedHeight = 20;
                        espacio.BorderColor = new BaseColor(123, 123, 122);

                        espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                        table.AddCell(espacio);


                    }
                    //List<String> l2 = s.Split('*').ToList();

                    i++;
                }
                table.TotalWidth = 520;
                table.WriteSelectedRows(0, -1, 40, 570, pcb);

                table = new PdfPTable(8);
                table.DefaultCell.BorderWidthBottom = 5;

                table.DefaultCell.BorderColorBottom = new BaseColor(12, 105, 66);
                titleFont = FontFactory.GetFont("Calibri", 9, 1, new BaseColor(12, 105, 66));
                docTitle = new iTextSharp.text.Paragraph("IMPORTE.", titleFont);
                titleFont3 = FontFactory.GetFont("Calibri", 9, 1, new BaseColor(123, 123, 122));


                titleFont2 = FontFactory.GetFont("Calibri", 9, 1, new BaseColor(12, 105, 66));
                docTitle2 = new iTextSharp.text.Paragraph("DESC", titleFont2);

                docTitle2.Alignment = Element.ALIGN_CENTER;
                subtitleFont = FontFactory.GetFont("Calibri", 9, 1, new BaseColor(12, 105, 66));
                subTitle = new iTextSharp.text.Paragraph("BASE IMP.", subtitleFont);
                subTitle.Alignment = Element.ALIGN_CENTER;
                subtitleFont2 = FontFactory.GetFont("Calibri", 9, 1, new BaseColor(12, 105, 66));
                subTitle2 = new iTextSharp.text.Paragraph("IMP. TUR", subtitleFont);
                subTitle2.Alignment = Element.ALIGN_CENTER;
                subtitleFont3 = FontFactory.GetFont("Calibri", 9, 1, new BaseColor(12, 105, 66));
                subTitle3 = new iTextSharp.text.Paragraph("(1) IVA 21%", subtitleFont);
                subTitle3.Alignment = Element.ALIGN_CENTER;
                subTitle4 = new iTextSharp.text.Paragraph("(2) 10%", subtitleFont);
                subTitle4.Alignment = Element.ALIGN_CENTER;
                iTextSharp.text.Paragraph subTitle5 = new iTextSharp.text.Paragraph("(3) OTROS%", subtitleFont);
                subTitle5.Alignment = Element.ALIGN_CENTER;
                iTextSharp.text.Paragraph subTitle6 = new iTextSharp.text.Paragraph("TOTAL", subtitleFont);
                subTitle6.Alignment = Element.ALIGN_RIGHT;
                cell = new PdfPCell();
                cell.AddElement(docTitle);

                cell.PaddingTop = 0;
                cell.FixedHeight = 20;
                cell.PaddingTop = 0;
                cell.BorderColor = new BaseColor(12, 105, 66);
                cell.Border = PdfPCell.BOTTOM_BORDER | PdfPCell.TOP_BORDER;
                cell.VerticalAlignment = Element.ALIGN_CENTER;
                table.AddCell(cell);

                cellCaveat = new PdfPCell();

                cellCaveat.AddElement(docTitle2);

                cellCaveat.PaddingTop = 0;
                cellCaveat.Border = PdfPCell.BOTTOM_BORDER | PdfPCell.TOP_BORDER;

                cellCaveat.PaddingTop = 0;
                cellCaveat.FixedHeight = 20;
                cellCaveat.BorderColor = new BaseColor(12, 105, 66);

                cellCaveat.VerticalAlignment = Element.ALIGN_CENTER; ;

                cellCaveat.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(cellCaveat);

                espacio = new PdfPCell();
                espacio.AddElement(subTitle);
                espacio.PaddingTop = 0;

                espacio.VerticalAlignment = Element.ALIGN_CENTER; ;
                espacio.Border = PdfPCell.BOTTOM_BORDER | PdfPCell.TOP_BORDER;
                espacio.FixedHeight = 20;
                espacio.BorderColor = new BaseColor(12, 105, 66);

                espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(espacio);

                espacio = new PdfPCell();
                espacio.AddElement(subTitle2);

                espacio.PaddingTop = 0;
                espacio.VerticalAlignment = Element.ALIGN_CENTER; ;
                espacio.Border = PdfPCell.BOTTOM_BORDER | PdfPCell.TOP_BORDER;
                espacio.FixedHeight = 20;
                espacio.BorderColor = new BaseColor(12, 105, 66);

                espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(espacio);

                espacio = new PdfPCell();
                espacio.AddElement(subTitle3);
                espacio.PaddingTop = 0;
                espacio.VerticalAlignment = Element.ALIGN_CENTER; ;
                espacio.Border = PdfPCell.BOTTOM_BORDER | PdfPCell.TOP_BORDER;
                espacio.FixedHeight = 20;
                espacio.BorderColor = new BaseColor(12, 105, 66);
                espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(espacio);
                espacio = new PdfPCell();
                espacio.AddElement(subTitle4);
                espacio.PaddingTop = 0;
                espacio.VerticalAlignment = Element.ALIGN_CENTER; ;
                espacio.Border = PdfPCell.BOTTOM_BORDER | PdfPCell.TOP_BORDER;
                espacio.FixedHeight = 20;
                espacio.BorderColor = new BaseColor(12, 105, 66);
                espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(espacio);
                espacio = new PdfPCell();
                espacio.AddElement(subTitle5);
                espacio.PaddingTop = 0;
                espacio.VerticalAlignment = Element.ALIGN_CENTER; ;
                espacio.Border = PdfPCell.BOTTOM_BORDER | PdfPCell.TOP_BORDER;
                espacio.FixedHeight = 20;
                espacio.BorderColor = new BaseColor(12, 105, 66);
                espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(espacio);
                espacio = new PdfPCell();
                espacio.AddElement(subTitle6);
                espacio.PaddingTop = 0;
                espacio.VerticalAlignment = Element.ALIGN_CENTER; ;
                espacio.Border = PdfPCell.BOTTOM_BORDER | PdfPCell.TOP_BORDER;
                espacio.FixedHeight = 20;
                espacio.BorderColor = new BaseColor(12, 105, 66);
                espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(espacio);

                table.DefaultCell.BorderColorBottom = new BaseColor(123, 123, 122);
                titleFont = FontFactory.GetFont("Calibri", 9, 0, new BaseColor(123, 123, 122));
                docTitle = new iTextSharp.text.Paragraph(f.BI.ToString("0.00") + " €", titleFont);
                titleFont3 = FontFactory.GetFont("Calibri", 9, 0, new BaseColor(123, 123, 122));

                titleFont2 = FontFactory.GetFont("Calibri", 9, 0, new BaseColor(123, 123, 122));
                docTitle2 = new iTextSharp.text.Paragraph(f.Descuento + "%", titleFont2);

                docTitle2.Alignment = Element.ALIGN_CENTER;
                float des = float.Parse(f.Descuento) / 100;
                subtitleFont = FontFactory.GetFont("Calibri", 9, 0, new BaseColor(123, 123, 122));

                subTitle = new iTextSharp.text.Paragraph(Math.Round(f.BI * (1 - des), 2).ToString("0.00") + " €", subtitleFont);
                subTitle.Alignment = Element.ALIGN_CENTER;
                subtitleFont2 = FontFactory.GetFont("Calibri", 9, 0, new BaseColor(123, 123, 122));
                subTitle2 = new iTextSharp.text.Paragraph(tasa.ToString("0.00") + " €", subtitleFont);
                iva21 = 0;
                iva10 = 0;
                ivaotros = 0;
                foreach (Producto s in f.Lista_productos)
                {

                    if (liva.Find(x => x.Id == int.Parse(s.IVA)).Porcentaje.Equals("21"))
                    {
                        float des2 = float.Parse(s.Cantidad) * float.Parse(s.Precio.Replace("€", "")) * (float.Parse(f.Descuento) / 100);
                        iva21 += (float)(Math.Round(float.Parse(s.Cantidad) * float.Parse(s.Precio.Replace("€", "")), 2) * (1 - float.Parse(s.Descuento) / 100)) * 0.21f;
                    }
                    else if (liva.Find(x => x.Id == int.Parse(s.IVA)).Porcentaje.Equals("10"))
                    {
                        float des2 = float.Parse(s.Cantidad) * float.Parse(s.Precio.Replace("€", "")) * (float.Parse(f.Descuento) / 100);
                        iva10 += (float)Math.Round(((float)(Math.Round(float.Parse(s.Cantidad) * float.Parse(s.Precio.Replace("€", "")), 2) * (1 - float.Parse(s.Descuento) / 100) * 0.10f)), 2);
                    }
                    else
                    {
                        float des2 = float.Parse(s.Cantidad) * float.Parse(s.Precio.Replace("€", "")) * (float.Parse(f.Descuento) / 100);
                        ivaotros += (float)Math.Round(float.Parse(s.Cantidad) * float.Parse(s.Precio.Replace("€", "")), 2) * (1 - float.Parse(s.Descuento) / 100) * float.Parse(liva.Find(x => x.Id == int.Parse(s.IVA)).Porcentaje) / 100;
                    }
                }
                iva21 = iva21 * (1 - float.Parse(f.Descuento) / 100);
                iva10 = iva10 * (1 - float.Parse(f.Descuento) / 100);
                ivaotros = ivaotros * (1 - float.Parse(f.Descuento) / 100);

                subTitle2.Alignment = Element.ALIGN_CENTER;
                subtitleFont3 = FontFactory.GetFont("Calibri", 9, 1, BaseColor.BLACK);
                subTitle3 = new iTextSharp.text.Paragraph(Math.Round(iva21, 2).ToString("0.00") + " €", subtitleFont);
                subTitle3.Alignment = Element.ALIGN_CENTER;
                subTitle4 = new iTextSharp.text.Paragraph(Math.Round(iva10, 2).ToString("0.00") + " €", subtitleFont);
                subTitle4.Alignment = Element.ALIGN_CENTER;
                subTitle5 = new iTextSharp.text.Paragraph(Math.Round(ivaotros, 2).ToString("0.00") + " €", subtitleFont);
                subTitle5.Alignment = Element.ALIGN_CENTER;
                float BI = (float)Math.Round(f.BI * (1 - des), 2);
                subTitle6 = new iTextSharp.text.Paragraph(Math.Round(BI + iva21 + iva10 + ivaotros + tasa, 2).ToString("0.00") + " €", subtitleFont3);
                subTitle6.Alignment = Element.ALIGN_RIGHT;
                cell = new PdfPCell();
                cell.AddElement(docTitle);

                cell.PaddingTop = 0;
                cell.FixedHeight = 20;
                cell.PaddingTop = 0;
                cell.BorderColor = new BaseColor(123, 123, 122);
                cell.Border = PdfPCell.BOTTOM_BORDER;
                cell.VerticalAlignment = Element.ALIGN_CENTER;
                table.AddCell(cell);

                cellCaveat = new PdfPCell();

                cellCaveat.AddElement(docTitle2);

                cellCaveat.PaddingTop = 0;
                cellCaveat.Border = PdfPCell.BOTTOM_BORDER;

                cellCaveat.PaddingTop = 0;
                cellCaveat.FixedHeight = 20;
                cellCaveat.BorderColor = new BaseColor(123, 123, 122);

                cellCaveat.VerticalAlignment = Element.ALIGN_CENTER; ;

                cellCaveat.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(cellCaveat);

                espacio = new PdfPCell();
                espacio.AddElement(subTitle);
                espacio.PaddingTop = 0;

                espacio.VerticalAlignment = Element.ALIGN_CENTER; ;
                espacio.Border = PdfPCell.BOTTOM_BORDER;
                espacio.FixedHeight = 20;
                espacio.BorderColor = new BaseColor(123, 123, 122);

                espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(espacio);

                espacio = new PdfPCell();
                espacio.AddElement(subTitle2);

                espacio.PaddingTop = 0;
                espacio.VerticalAlignment = Element.ALIGN_CENTER; ;
                espacio.Border = PdfPCell.BOTTOM_BORDER;
                espacio.FixedHeight = 20;
                espacio.BorderColor = new BaseColor(123, 123, 122);

                espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(espacio);

                espacio = new PdfPCell();
                espacio.AddElement(subTitle3);
                espacio.PaddingTop = 0;
                espacio.VerticalAlignment = Element.ALIGN_CENTER; ;
                espacio.Border = PdfPCell.BOTTOM_BORDER;
                espacio.FixedHeight = 20;
                espacio.BorderColor = new BaseColor(123, 123, 122);
                espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(espacio);
                espacio = new PdfPCell();
                espacio.AddElement(subTitle4);
                espacio.PaddingTop = 0;
                espacio.VerticalAlignment = Element.ALIGN_CENTER; ;
                espacio.Border = PdfPCell.BOTTOM_BORDER;
                espacio.FixedHeight = 20;
                espacio.BorderColor = new BaseColor(123, 123, 122);
                espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(espacio);
                espacio = new PdfPCell();
                espacio.AddElement(subTitle5);
                espacio.PaddingTop = 0;
                espacio.VerticalAlignment = Element.ALIGN_CENTER; ;
                espacio.Border = PdfPCell.BOTTOM_BORDER;
                espacio.FixedHeight = 20;
                espacio.BorderColor = new BaseColor(123, 123, 122);
                espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(espacio);
                espacio = new PdfPCell();
                espacio.AddElement(subTitle6);
                espacio.PaddingTop = 0;
                espacio.VerticalAlignment = Element.ALIGN_CENTER; ;
                espacio.Border = PdfPCell.BOTTOM_BORDER;
                espacio.FixedHeight = 20;
                espacio.BorderColor = new BaseColor(123, 123, 122);
                espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(espacio);



                table.TotalWidth = 520;
                table.WriteSelectedRows(0, -1, 40, 150, pcb);
                if (f.Metodo_Pago != 0)
                {
                    table = new PdfPTable(4);
                anchoDeColumnas = new float[] { 10f, 40f, 10f, 40f };
                table.SetWidthPercentage(anchoDeColumnas, oDocument.PageSize);
                //table.DefaultCell.Border = PdfPCell.BOTTOM_BORDER;
                table.DefaultCell.BorderWidthBottom = 5;

                table.DefaultCell.BorderColorBottom = new BaseColor(12, 105, 66);
                
                    titleFont = FontFactory.GetFont("Calibri", 9, 1, new BaseColor(12, 105, 66));
                    docTitle = new iTextSharp.text.Paragraph("METODO PAGO", titleFont);
                    titleFont3 = FontFactory.GetFont("Calibri", 9, 0, new BaseColor(123, 123, 122));
                    string ss = "Tarjeta";
                    subtitleFont = FontFactory.GetFont("Calibri", 9, 1, new BaseColor(12, 105, 66));
                    subTitle = new iTextSharp.text.Paragraph("", subtitleFont);
                    subTitle.Alignment = Element.ALIGN_CENTER;
                    if (f.Metodo_Pago == 2)
                    {
                        ss = "Transferencia";
                        subTitle = new iTextSharp.text.Paragraph("IBAN", subtitleFont);
                    }
                    else if (f.Metodo_Pago == 3)
                    {
                        ss = "Efectivo";
                        subTitle = new iTextSharp.text.Paragraph("", subtitleFont);

                    }


                    titleFont2 = FontFactory.GetFont("Calibri", 8, 0, new BaseColor(123, 123, 122));
                    docTitle2 = new iTextSharp.text.Paragraph(ss, titleFont2);

                    docTitle2.Alignment = Element.ALIGN_LEFT;

                    subtitleFont2 = FontFactory.GetFont("Calibri", 8, 0, new BaseColor(123, 123, 122));
                    subTitle2 = new iTextSharp.text.Paragraph(f.IBAN, subtitleFont2);
                    subTitle2.Alignment = Element.ALIGN_LEFT;

                    cell = new PdfPCell();
                    cell.AddElement(docTitle);

                    cell.PaddingTop = 0;
                    cell.FixedHeight = 20;
                    cell.PaddingTop = 0;
                    cell.BorderColor = new BaseColor(12, 105, 66);
                    cell.Border = PdfPCell.BOTTOM_BORDER | PdfPCell.TOP_BORDER;
                    cell.VerticalAlignment = Element.ALIGN_CENTER;
                    table.AddCell(cell);

                    cellCaveat = new PdfPCell();

                    cellCaveat.AddElement(docTitle2);

                    cellCaveat.Border = PdfPCell.BOTTOM_BORDER | PdfPCell.TOP_BORDER;

                    cellCaveat.PaddingTop = 1;
                    cellCaveat.FixedHeight = 20;
                    cellCaveat.BorderColor = new BaseColor(12, 105, 66);

                    cellCaveat.VerticalAlignment = Element.ALIGN_CENTER; ;

                    cellCaveat.HorizontalAlignment = Element.ALIGN_LEFT;
                    table.AddCell(cellCaveat);

                    espacio = new PdfPCell();
                    espacio.AddElement(subTitle);
                    espacio.PaddingTop = 0;

                    espacio.VerticalAlignment = Element.ALIGN_CENTER; ;
                    espacio.Border = PdfPCell.BOTTOM_BORDER | PdfPCell.TOP_BORDER;
                    espacio.FixedHeight = 20;
                    espacio.BorderColor = new BaseColor(12, 105, 66);

                    espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                    table.AddCell(espacio);

                    espacio = new PdfPCell();
                    espacio.AddElement(subTitle2);

                    espacio.PaddingTop = 1;
                    espacio.VerticalAlignment = Element.ALIGN_CENTER; ;
                    espacio.Border = PdfPCell.BOTTOM_BORDER | PdfPCell.TOP_BORDER;
                    espacio.FixedHeight = 20;
                    espacio.BorderColor = new BaseColor(12, 105, 66);

                    espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                    table.AddCell(espacio);

                    table.TotalWidth = 520;
                    table.WriteSelectedRows(0, -1, 40, 70, pcb);
                }
                table = new PdfPTable(1);

                titleFont = FontFactory.GetFont("Calibri", 8, 0, new BaseColor(12, 105, 66));
                docTitle = new iTextSharp.text.Paragraph(f.Direccion_Facturacion + " | " + f.CP_Facturacion + ", " + f.Poblecion_Facturacion + " (" + f.Provincia_Facturacion + ") | Tlf." + f.Telefono_Camping + " | info@campingmontserrat.cat", titleFont);
                docTitle.Alignment = Element.ALIGN_CENTER;

                cell = new PdfPCell();
                //cell.AddElement(docTitle);

                cell.PaddingTop = 0;
                cell.FixedHeight = 20;
                cell.PaddingTop = 0;
                cell.BorderColor = new BaseColor(12, 105, 66);
                cell.Border = PdfPCell.NO_BORDER;
                cell.VerticalAlignment = Element.ALIGN_CENTER;
                //table.AddCell(cell);
                table.TotalWidth = 520;
                table.WriteSelectedRows(0, -1, 40, 25, pcb);
                //table = new PdfPTable(2);

                //crea una nueva pagina y agrega el pdf original

                // Cerramos los objetos utilizados
                if (tipo == 0 || tipo == 2)
                {
                    PdfImportedPage page = oWriter.GetImportedPage(oReader, 1);
                    oPDF.AddTemplate(page, 0, 0);
                }
                oDocument.Close();
                oFS.Close();
                oWriter.Close();
                oReader.Close();


                Process.Start(filename);
            }

        }

        private void Enable()
        {
            calendario.IsEnabled = true;
        }

        private void RefreshRecibo(Recibos c)
        {
            
        }

        private void RefreshAlarmas(Alarma a, string evento, string parametros, List<string> l)
        {
            try
            {
                string sql_connection = conexiondb;


                if (a != null)
                {
                    if (evento.Equals("Insert"))
                    {
                        SQLiteConnection cn = new SQLiteConnection(sql_connection);

                        if (cn.State != ConnectionState.Open) cn.Open();

                        string sql_query = "INSERT INTO Alarmas([Nombre], [Mensaje], [Tipo], [Potencia]) VALUES ('" + a.Nombre + "','" + a.Mensaje + "'," + a.Tipo + "," + a.Potencia + ")";
                        SQLiteCommand sql_cmd = new SQLiteCommand(sql_query, cn);

                        sql_cmd.ExecuteNonQuery();
                        string sql_Text = "UPDATE Version SET configurationcol=GETDATE()";
                        SQLiteCommand sql_cmd2 = new SQLiteCommand(sql_Text, cn);

                        //sql_cmd2.ExecuteNonQuery(); 
                        cn.Close(); while (observartodotoken)
                        {

                        }
                        Consulta consulta = new Consulta("Alarmas", l, "", "INSERT");
                        Lista_consultas.Add(consulta);
                        CargarAlarmas();
                        valr.alarmas.Add(lalr[lalr.Count - 1]);
                    }
                    else if (evento.Equals("Update"))
                    {

                        SQLiteConnection cn = new SQLiteConnection(sql_connection);

                        if (cn.State != ConnectionState.Open) cn.Open();
                        string sql_query = parametros;
                        SQLiteCommand sql_cmd = new SQLiteCommand(sql_query, cn);
                        while (observartodotoken)
                        {

                        }
                        sql_cmd.ExecuteNonQuery();
                        Consulta consulta = new Consulta("Alarmas", l, "Id:" + a.Id, "INSERT");
                        Lista_consultas.Add(consulta);
                    }
                    else
                    {
                        SQLiteConnection cn = new SQLiteConnection(sql_connection);

                        if (cn.State != ConnectionState.Open) cn.Open();
                        string sql_query = "DELETE FROM Alarmas WHERE Id=" + a.Id;
                        SQLiteCommand sql_cmd = new SQLiteCommand(sql_query, cn);
                        while (observartodotoken)
                        {

                        }
                        sql_cmd.ExecuteNonQuery();
                        Iluminacion_Alarmas.Items.Remove(a);
                        Consulta consulta = new Consulta("Alarmas", l, "Id:" + a.Id, "Delete");
                        Lista_consultas.Add(consulta);
                    }

                    CargarContratos();
                    Iluminacion_Potencia.SelectedItem = lcnt.Find(x => x.Id == a.Potencia);
                }
            }
            catch (Exception ee)
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                Peta(ee, line + "");
            }
        }

        private void RefreshContrato(Potencia c)
        {
            try
            {
                string sql_connection = conexiondb;
                List<string> l = new List<string>();
                l.Add("Nombre:" + c.Nombre);
                l.Add("Amperios:" + c.Amperios);
                l.Add("Amperios_Max:" + c.Amperios_Max);
                SQLiteConnection cn = new SQLiteConnection(sql_connection);
                if (cn.State != ConnectionState.Open) cn.Open();
                string sql_query = "INSERT INTO Contratos([Nombre], [Amperios], [Amperios_Max]) VALUES ('" + c.Nombre + "'," + c.Amperios + "," + c.Amperios_Max + ")";
                SQLiteCommand sql_cmd = new SQLiteCommand(sql_query, cn);

                sql_cmd.ExecuteNonQuery();

                string sql_Text = "UPDATE Version SET configurationcol=GETDATE()";
                SQLiteCommand sql_cmd2 = new SQLiteCommand(sql_Text, cn);
                while (observartodotoken)
                {

                }
                //sql_cmd2.ExecuteNonQuery(); 
                cn.Close();
                Consulta consulta = new Consulta("Contratos", l, "", "INSERT");
                Lista_consultas.Add(consulta);
                CargarContratos();


                //ClearFactura();
                cn.Close();
                vcnt.Close();
            }
            catch (Exception ee)
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                  var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                Peta(ee, line + "");
            }
        }

        private void RefreshDia2(Eventos e)
        {
            ve.Close();
            ve = new VentanaEvento(e, dia, mes, año, "update", true);
            ve.Show();
            ve.Show();
            ve.Show();
            vd.Close();
        }

        private void RefreshDia(Eventos c)
        {
            DeleteEvento(c, false);
        }

        private void RefreshFactura(Facturas f)
        {
            if (factura_menu.SelectedIndex >= 2)
            {
                try
                {
                    List<string> l = new List<string>();


                    l.Add("Nombre_Cliente:" + f.Nombre_Cliente);

                    l.Add("DNI_CIF:" + f.DNI_CIF);



                    l.Add("Direccion_Facturacion:" + f.Direccion_Facturacion);

                    l.Add("Poblacion_Facturacion:" + f.Poblecion_Facturacion);

                    l.Add("CP_Facturacion:" + f.CP_Facturacion);

                    l.Add("Provincia_Facturacion:" + f.Provincia_Facturacion);
                    l.Add("Pais_Facturacion:" + f.Pais_Facturacion);




                    l.Add("Fecha:" + f.fecha.ToString("yyyy/MM/dd HH:mm:ss"));

                    l.Add("Bi:" + f.BI);



                    l.Add("Cuota_IVA:" + f.Cuota_IVA);

                    l.Add("Importe:" + f.Importe);


                    l.Add("Direccion_Cliente:" + f.Direccion_Cliente);

                    l.Add("Poblacion_Cliente:" + f.Poblacio_Cliente);

                    l.Add("CP_Cliente:" + f.CP_Cliente);

                    l.Add("Provincia_Cliente:" + f.Provincia_Cliente);
                    l.Add("Pais_Cliente:" + f.Pais_Cliente);
                    l.Add("Empresa:" + f.Empresa);
                    l.Add("Telefono:" + f.Telefono);
                    l.Add("Mail:" + f.Mail);
                    l.Add("Metodo_Pago:" + f.Metodo_Pago);
                    l.Add("Telefono_Camping:" + f.Telefono_Camping);
                    l.Add("Fecha_ven:" + f.fecha_ven.ToString("yyyy/MM/dd HH:mm:ss"));
                    l.Add("Numero_Factura:" + f.Numero_Factura);


                    string sql_connection = conexiondb;
                    SQLiteConnection cn = new SQLiteConnection(sql_connection);
                    if (cn.State != ConnectionState.Open) cn.Open();
                     
                    string sql_query = "INSERT INTO Recibo([Nombre_Cliente], [DNI_CIF], [Poblacion_Cliente], [Direccion_Cliente], [CP_Cliente], [Provincia_Cliente],[Pais_Cliente], [Fecha],[Bi],[Cuota_IVA], [Importe], [Direccion_Facturacion],[Poblacion_Facturacion],[CP_Facturacion], [Provincia_Facturacion],[Pais_Facturacion],[Empresa],[Telefono],[Mail],[Metodo_Pago],[Telefono_Camping], [Fecha_ven], [Numero_Factura] ,[Vehiculo],[Matricula],[IBAN], [Descuento]) VALUES ('" + f.Nombre_Cliente + "','" + f.DNI_CIF + "','" + f.Poblacio_Cliente + "','" + f.Direccion_Cliente + "','" + f.CP_Cliente + "','" + f.Provincia_Cliente + "','" + f.Pais_Cliente + "','" + f.fecha.ToString("dd/MM/yyyy") + "','" + f.BI + "','" + f.Cuota_IVA + "','" + f.Importe + "','" + f.Direccion_Facturacion + "','" + f.Poblecion_Facturacion + "','" + f.CP_Facturacion + "','" + f.Provincia_Facturacion + "','" + f.Pais_Facturacion + "','" + f.Empresa + "','" + f.Telefono + "','" + f.Mail + "'," + f.Metodo_Pago + ",'" + f.Telefono_Camping + "','" + f.fecha.ToString("dd/MM/yyyy") + "','" + f.Numero_Factura + "','"+ f.Vehiculo + "', '" + f.Matricula + "', '" + f.IBAN + "', '" + f.Descuento+ "')"; 
                    SQLiteCommand sql_cmd = new SQLiteCommand(sql_query, cn);

                    sql_cmd.ExecuteNonQuery();

                    CargarRecibos();

                    sql_query = "SELECT Id FROM Recibo ORDER BY Id desc LIMIT 1";
                    sql_cmd = new SQLiteCommand(sql_query, cn);
                    SQLiteDataReader rdr = sql_cmd.ExecuteReader();
                    int id = 0;
                    while (rdr.Read())
                    {
                        id = rdr.GetInt32(0);
                    }
                    while (observartodotoken)
                    {

                    }
                    Consulta consulta = new Consulta("Recibo", l, "", "INSERT");
                    Lista_consultas.Add(consulta);
                    foreach (Producto p in f.Lista_productos)
                    {
                        l = new List<string>();
                        p.Precio = p.Precio.Replace(" ", "");
                        p.Precio = p.Precio.Replace("€", "");
                        p.Impuesto = p.Impuesto.Replace(" ", "");
                        p.Impuesto = p.Impuesto.Replace("€", "");
                        p.Total = p.Total.Replace(" ", "");
                        p.Total = p.Total.Replace("€", "");
                        p.Id_Factura = id;
                        /*
                        SQLiteCommand sql_cmd = new SQLiteCommand(sql_query, cn);

                        sql_cmd.ExecuteNonQuery();

                        consulta = new Consulta("Productos_Registro", parametros, "", "INSERT");
                        */

                        cn = new SQLiteConnection(sql_connection);
                        if (cn.State != ConnectionState.Open) cn.Open();
                         sql_query = "INSERT INTO Productos_Registro2([Nombre],[Cantidad],[Precio],[IVA],[Impuesto],[Total],[Id_Recibo],[Descuento]) VALUES('" + p.Nombre_Producto + "','" + p.Cantidad + "','" + float.Parse(p.Precio).ToString("0.00") + "','" + p.IVA + "','" + float.Parse(p.Impuesto).ToString("0.00") + "','" + float.Parse(p.Total).ToString("0.00") + "'," + p.Id_Factura + ",'" + p.Descuento + "')";
                        l.Add("Nombre:" + p.Nombre_Producto);
                        l.Add("Cantidad:" + p.Cantidad);
                        l.Add("Precio:" + float.Parse(p.Precio).ToString("0.00"));
                        l.Add("IVA:" + p.IVA);
                        l.Add("Impuesto:" + p.Impuesto);
                        l.Add("Total:" + p.Total);
                        l.Add("Id_Factura:" + p.Id_Factura);
                        sql_cmd = new SQLiteCommand(sql_query, cn);

                        sql_cmd.ExecuteNonQuery();
                        string sql_Text = "UPDATE Version SET configurationcol=GETDATE()";
                        SQLiteCommand sql_cmd2 = new SQLiteCommand(sql_Text, cn);

                        //sql_cmd2.ExecuteNonQuery(); 
                        cn.Close(); while (observartodotoken)
                        {

                        }
                        consulta = new Consulta("Productos_Registro", l, "", "INSERT");
                        Lista_consultas.Add(consulta);
                    }


                    CargarRecibos();
                    Recibos.SelectedItem = lrcb[lrcb.Count - 1];
                    Save_Click(Save, RoutedEventArgs);
                    //ClearFactura();
                    cn.Close();
                    vf.Close();
                }
                catch (Exception ee)
                {
                    string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                      var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                    Peta(ee, line + "");
                }
            }
            else
            {
                try
                {
                    List<string> l = new List<string>();


                    l.Add("Nombre_Cliente:" + f.Nombre_Cliente);

                    l.Add("DNI_CIF:" + f.DNI_CIF);



                    l.Add("Direccion_Facturacion:" + f.Direccion_Facturacion);

                    l.Add("Poblacion_Facturacion:" + f.Poblecion_Facturacion);

                    l.Add("CP_Facturacion:" + f.CP_Facturacion);

                    l.Add("Provincia_Facturacion:" + f.Provincia_Facturacion);
                    l.Add("Pais_Facturacion:" + f.Pais_Facturacion);




                    l.Add("Fecha:" + f.fecha.ToString("yyyy/MM/dd HH:mm:ss"));

                    l.Add("Bi:" + f.BI);



                    l.Add("Cuota_IVA:" + f.Cuota_IVA);

                    l.Add("Importe:" + f.Importe);


                    l.Add("Direccion_Cliente:" + f.Direccion_Cliente);

                    l.Add("Poblacion_Cliente:" + f.Poblacio_Cliente);

                    l.Add("CP_Cliente:" + f.CP_Cliente);

                    l.Add("Provincia_Cliente:" + f.Provincia_Cliente);
                    l.Add("Pais_Cliente:" + f.Pais_Cliente);
                    l.Add("Empresa:" + f.Empresa);
                    l.Add("Telefono:" + f.Telefono);
                    l.Add("Mail:" + f.Mail);
                    l.Add("Metodo_Pago:" + f.Metodo_Pago);
                    l.Add("Telefono_Camping:" + f.Telefono_Camping);
                    l.Add("Fecha_ven:" + f.fecha_ven.ToString("yyyy/MM/dd HH:mm:ss"));
                    l.Add("Numero_Factura:" + f.Numero_Factura);


                    string sql_connection = conexiondb;
                    SQLiteConnection cn = new SQLiteConnection(sql_connection);
                    if (cn.State != ConnectionState.Open) cn.Open();
                    string sql_query = "INSERT INTO Factura([Nombre_Cliente], [DNI_CIF], [Poblacion_Cliente], [Direccion_Cliente], [CP_Cliente], [Provincia_Cliente],[Pais_Cliente], [Fecha],[Bi],[Cuota_IVA], [Importe], [Direccion_Facturacion],[Poblacion_Facturacion],[CP_Facturacion], [Provincia_Facturacion],[Pais_Facturacion],[Empresa],[Telefono],[Mail],[Metodo_Pago],[Telefono_Camping], [Fecha_ven], [Numero_Factura],[Descuento],[Vehiculo],[Matricula],[IBAN]) VALUES ('" + f.Nombre_Cliente + "','" + f.DNI_CIF + "','" + f.Poblacio_Cliente + "','" + f.Direccion_Cliente + "','" + f.CP_Cliente + "','" + f.Provincia_Cliente + "','" + f.Pais_Cliente + "','" + f.fecha.ToString("dd/MM/yyyy") + "','" + f.BI + "','" + f.Cuota_IVA + "','" + f.Importe + "','" + f.Direccion_Facturacion + "','" + f.Poblecion_Facturacion + "','" + f.CP_Facturacion + "','" + f.Provincia_Facturacion + "','" + f.Pais_Facturacion + "','" + f.Empresa + "','" + f.Telefono + "','" + f.Mail + "'," + f.Metodo_Pago + ",'" + f.Telefono_Camping + "','" + f.fecha.ToString("dd/MM/yyyy") + "','" + f.Numero_Factura.Replace("__","_") + "','"+ f.Descuento+ "','" + f.Vehiculo+ "','" + f.Matricula + "','" + f.IBAN + "')";
                    SQLiteCommand sql_cmd = new SQLiteCommand(sql_query, cn);

                    sql_cmd.ExecuteNonQuery();

                    List<string> l2 = new List<string>();
                    int ii = int.Parse(numero_serie.Text) + 1;
                    sql_query = "UPDATE Camping SET Numero='" + (int.Parse(numero_serie.Text) + 1).ToString("000") + "'";
                    sql_cmd = new SQLiteCommand(sql_query, cn);

                    sql_cmd.ExecuteNonQuery();

                    Consulta consulta2 = new Consulta("Camping", l2, "Id:1", "UPDATE");
                    Lista_consultas.Add(consulta2);
                    CargarEmpresa();
                    CargarFacturas();

                    sql_query = "SELECT Id FROM Factura ORDER BY Id desc LIMIT 1";
                    sql_cmd = new SQLiteCommand(sql_query, cn);
                    SQLiteDataReader rdr = sql_cmd.ExecuteReader();
                    int id = 0;
                    while (rdr.Read())
                    {
                        id = rdr.GetInt32(0);
                    }
                    while (observartodotoken)
                    {

                    }
                    Consulta consulta = new Consulta("Factura", l, "", "INSERT");
                    Lista_consultas.Add(consulta);
                    foreach (Producto p in f.Lista_productos)
                    {
                        l = new List<string>();
                        p.Precio = p.Precio.Replace(" ", "");
                        p.Precio = p.Precio.Replace("€", "");
                        p.Impuesto = p.Impuesto.Replace(" ", "");
                        p.Impuesto = p.Impuesto.Replace("€", "");
                        p.Total = p.Total.Replace(" ", "");
                        p.Total = p.Total.Replace("€", "");
                        p.Id_Factura = id;
                        /*
                        SQLiteCommand sql_cmd = new SQLiteCommand(sql_query, cn);

                        sql_cmd.ExecuteNonQuery();

                        consulta = new Consulta("Productos_Registro", parametros, "", "INSERT");
                        */

                        cn = new SQLiteConnection(sql_connection);
                        if (cn.State != ConnectionState.Open) cn.Open();
                        sql_query = "INSERT INTO Productos_Registro([Nombre],[Cantidad],[Precio],[IVA],[Impuesto],[Total],[Id_Factura],[Descuento]) VALUES('" + p.Nombre_Producto + "','" + p.Cantidad + "','" + Math.Round(float.Parse(p.Precio),2).ToString("0.00") + "','" + p.IVA + "','" + Math.Round(float.Parse(p.Impuesto),2).ToString("0.00") + "','" + Math.Round(float.Parse(p.Total),2).ToString("0.00") + "'," + id +",'"+p.Descuento +"')";
                        l.Add("Nombre:" + p.Nombre_Producto);
                        l.Add("Cantidad:" + p.Cantidad);
                        l.Add("Precio:" + float.Parse(p.Precio).ToString("0.00"));
                        l.Add("IVA:" + p.IVA);
                        l.Add("Impuesto:" + p.Impuesto);
                        l.Add("Total:" + p.Total);
                        l.Add("Id_Factura:" + p.Id_Factura);
                        sql_cmd = new SQLiteCommand(sql_query, cn);

                        sql_cmd.ExecuteNonQuery();
                        string sql_Text = "UPDATE Version SET configurationcol=GETDATE()";
                        SQLiteCommand sql_cmd2 = new SQLiteCommand(sql_Text, cn);

                        //sql_cmd2.ExecuteNonQuery(); 
                        cn.Close(); while (observartodotoken)
                        {

                        }
                        consulta = new Consulta("Productos_Registro", l, "", "INSERT");
                        Lista_consultas.Add(consulta);
                    }


                    CargarFacturas();
                    Facturas.SelectedItem = lfct.First() as Facturas;
                    Save_Click(Save, RoutedEventArgs);
                    //ClearFactura();
                    cn.Close();
                    vf.Close();
                }
                catch (Exception ee)
                {
                    string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                      var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                    Peta(ee, line + "");
                }
            }
           
        }

        private void RefreshIVA(IVAs c)
        {
            try
            {
                List<string> l = new List<string>();

                l.Add("Tipo:" + c.Tipo);
                l.Add("Porcentaje:" + c.Porcentaje);

                Consulta consulta;

                SQLiteConnection cn = new SQLiteConnection(conexiondb);

                if (cn.State != ConnectionState.Open) cn.Open();
                string sql_query = "INSERT INTO IVA([Tipo], [Porcentaje]) Values ('" + c.Tipo + "','" + c.Porcentaje + "')";
                SQLiteCommand sql_cmd = new SQLiteCommand(sql_query, cn);

                sql_cmd.ExecuteNonQuery();
                string sql_Text = "UPDATE Version SET configurationcol=GETDATE()";
                SQLiteCommand sql_cmd2 = new SQLiteCommand(sql_Text, cn);

                //sql_cmd2.ExecuteNonQuery(); 
                cn.Close();


                CargarIva();
                //cleariva();
                consulta = new Consulta("IVA", l, "", "INSERT"); while (observartodotoken)
                {

                }
                Lista_consultas.Add(consulta);
                string cn_string = conexiondb;
                cn = new SQLiteConnection(cn_string);
                if (cn.State != ConnectionState.Open) cn.Open();
                sql_Text = "UPDATE Version SET configurationcol=GETDATE()";
                sql_cmd2 = new SQLiteCommand(sql_Text, cn);

                //sql_cmd2.ExecuteNonQuery();
                cn.Close();
                vi.Close();
            }
            catch (Exception ee)
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                  var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                Peta(ee, line + "");
            }

        }

        private void RefreshRol(Roles c)
        {
            try
            {
                List<string> l = new List<string>();

                Boolean a = false;

                l.Add("Nom_Rol:" + c.Nom);





                l.Add("Permisos:" + c.Permisos);


                Consulta consulta;

                SQLiteConnection cn = new SQLiteConnection(conexiondb);

                if (cn.State != ConnectionState.Open) cn.Open();
                string sql_query = "INSERT INTO Rol([Nom_Rol], [Permisos]) Values ('" + c.Nom + "'," + c.Permisos + ")";
                SQLiteCommand sql_cmd = new SQLiteCommand(sql_query, cn);

                sql_cmd.ExecuteNonQuery();

                string sql_Text = "UPDATE Version SET configurationcol=GETDATE()";
                SQLiteCommand sql_cmd2 = new SQLiteCommand(sql_Text, cn);

                //sql_cmd2.ExecuteNonQuery(); 
                cn.Close();


                //clearrol();
                while (observartodotoken)
                {

                }
                consulta = new Consulta("Rol", l, "", "INSERT");
                Lista_consultas.Add(consulta);
                string cn_string = conexiondb;
                cn = new SQLiteConnection(cn_string);
                if (cn.State != ConnectionState.Open) cn.Open();
                sql_Text = "UPDATE Version SET configurationcol=GETDATE()";
                sql_cmd2 = new SQLiteCommand(sql_Text, cn);

                //sql_cmd2.ExecuteNonQuery(); 
                cn.Close();

                vrol.Close();
                CargarRoles();
            }
            catch (Exception ee)
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                  var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                Peta(ee, line + "");
            }
        }

        private void RefreshUsuario(Usuarios c)
        {
            try
            {
                Consulta consulta;
                List<string> parametros = new List<string>();

                parametros.Add("Id:" + c.Id);
                parametros.Add("Nombre_Usuario:" + c.Nombre_Usuario);
                parametros.Add("DNI_trabajador:" + c.Dni_Trabajador);
                parametros.Add("Nombre_trabajador:" + c.Nombre);
                parametros.Add("Password:" + c.Pass);
                parametros.Add("Rol:" + c.Rol);
                parametros.Add("direccion:" + c.Direccion);
                parametros.Add("poblacion:" + c.Poblacion);
                parametros.Add("Telefono1:" + c.Telefono);
                parametros.Add("CP:" + c.CP);
                parametros.Add("Mail1:" + c.Mail);
                parametros.Add("Nota:" + c.Nota);
                parametros.Add("Pais:" + c.Pais);
                parametros.Add("Apellido1:" + c.Apellido1);
                parametros.Add("Apellido2:" + c.Apellido2);
                parametros.Add("Numero:" + c.Numero);
                parametros.Add("Piso:" + c.Piso);
                parametros.Add("Puerta:" + c.Puerta);
                parametros.Add("Provincia:" + c.Provincia);

                string cn_String = conexiondb;


                SQLiteConnection cn = new SQLiteConnection(cn_String);

                if (cn.State != ConnectionState.Open) cn.Open();

                string sql_query = "INSERT INTO Usuario([Nombre_Usuario],[DNI_trabajador], [Nombre_trabajador], [Password] , [Rol],[direccion], [poblacion], [Telefono1], [CP], [Mail1], [Nota],[Pais], [Apellido1], [Apellido2], [Numero], [Piso], [Puerta], [Provincia]) VALUES('" + c.Nombre_Usuario + "','" + c.Dni_Trabajador + "','" + c.Nombre + "','" + c.Pass + "'," + c.Rol + ",'" + c.Direccion + "','" + c.Poblacion + "','" + c.Telefono + "','" + c.CP + "','" + c.Mail + "','" + c.Nota + "','" + c.Pais + "','" + c.Apellido1 + "','" + c.Apellido2 + "','" + c.Numero + "','" + c.Piso + "','" + c.Puerta + "','" + c.Provincia + "')";
                SQLiteCommand sql_cmd = new SQLiteCommand(sql_query, cn);

                sql_cmd.ExecuteNonQuery();
                while (observartodotoken)
                {

                }
                consulta = new Consulta("Usuario", parametros, "", "INSERT");
                Lista_consultas.Add(consulta);

                string sql_Text = "UPDATE Version SET configurationcol=GETDATE()";
                SQLiteCommand sql_cmd2 = new SQLiteCommand(sql_Text, cn);

                //sql_cmd2.ExecuteNonQuery(); 

                CargarUsuarios();

                sql_Text = "UPDATE Version SET configurationcol=GETDATE()";
                sql_cmd2 = new SQLiteCommand(sql_Text, cn);

                //sql_cmd2.ExecuteNonQuery(); 
                cn.Close();
                cn.Close();
            }
            catch (Exception ee)
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                  var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                Peta(ee, line + "");
            }

        }

        private void RefreshRegistro(string qry, Consulta c)
        {
            try
            {
                string cn_String = conexiondb;


                SQLiteConnection cn = new SQLiteConnection(cn_String);

                if (cn.State != ConnectionState.Open) cn.Open();

                string sql_query = "";

                sql_query = qry;

                SQLiteCommand sql_cmd = new SQLiteCommand(sql_query, cn);

                sql_cmd.ExecuteNonQuery();


                cn.Close();
                while (observartodotoken)
                {

                }

                Lista_consultas.Add(c);
                clearall();
                string cn_string = conexiondb;
                cn = new SQLiteConnection(cn_string);
                if (cn.State != ConnectionState.Open) cn.Open();
                string sql_Text = "UPDATE Version SET configurationcol=GETDATE()";
                SQLiteCommand sql_cmd2 = new SQLiteCommand(sql_Text, cn);

                //sql_cmd2.ExecuteNonQuery();
                cargarClientes();
                cargarRegistros();

                cn.Close();

                vc.Close();
            }
            catch (Exception ee)
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                  var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                Peta(ee, line + "");
            }
        }

        private async void RefreshCliente(Clientes c, List<string> qury)
        {
            try
            {
                Consulta consulta;
                List<string> parametros = new List<string>();
                if (lcln.Count > 0)
                    parametros.Add("Id:" + (lcln.Select(x => x.id).Last() + 1).ToString());
                else
                    parametros.Add("Id:1");
                parametros.Add("N_Cliente:" + c.n_cliemte);

                parametros.Add("Nombre:" + c.nombre_cliente);

                parametros.Add("Apellidos:" + c.apellidos_cliente);

                parametros.Add("direccion:" + c.direccion);

                parametros.Add("DNI:" + c.dni);

                parametros.Add("poblacion:" + c.poblacio);

                parametros.Add("Telefono1:" + c.telefon1);
                parametros.Add("CP:" + c.codigo_postal);
                parametros.Add("Mail1:" + c.mail);
                parametros.Add("Titular_Tarjeta:" + c.titular);
                parametros.Add("Caducidad:" + c.caducidad);
                parametros.Add("N_secreto:" + c.numero_secreto);
                parametros.Add("N_Tarjeta:" + c.n_tarjeta);
                parametros.Add("Entidad_Bancaria:" + c.entidad_bacnaria);
                parametros.Add("IBAN:" + c.iban);
                parametros.Add("SWIFT:" + c.swift);


                parametros.Add("Pais:" + c.Pais);


                parametros.Add("Numero:" + c.Numero);

                parametros.Add("Piso:" + c.Piso);

                parametros.Add("Puerta:" + c.Puerta);

                parametros.Add("Provincia:" + c.Pais);
                if (c.Fecha_In != null)
                {
                    parametros.Add("Fecha_In:" + ((DateTime)c.Fecha_In).ToString("yyyy-MM-dd HH:mm:ss"));
                }
                else
                {

                }
                if (c.Fecha_Out != null)
                {
                    parametros.Add("Fecha_Out:" + ((DateTime)c.Fecha_Out).ToString("yyyy-MM-dd HH:mm:ss"));
                }
                else
                {


                }

                if (c.fecha_pago != null)
                {
                    parametros.Add("Fecha_Pega:" + ((DateTime)c.fecha_pago).ToString("yyyy-MM-dd HH:mm:ss"));
                }
                else
                {


                }
                if (c.fecha_contrato != null)
                {
                    parametros.Add("Fecha_Contratacion:" + ((DateTime)c.fecha_contrato).ToString("yyyy-MM-dd HH:mm:ss"));
                }
                else
                {

                }
                if (c.fecha_entrada_estado != null)
                {
                    parametros.Add("Fecha_Entrada:" + ((DateTime)c.fecha_entrada_estado).ToString("yyyy-MM-dd HH:mm:ss"));
                }
                else
                {


                }




                parametros.Add("Vehiculo1:" + c.Vehiculo1);

                parametros.Add("Marticula1:" + c.matricula1);

                parametros.Add("Numero_Bastidor1:" + c.Numero_Bastidor1);

                parametros.Add("Vehiculo2:" + c.Vehiculo2);

                parametros.Add("Marticula2:" + c.matricula2);
                parametros.Add("Vehiculo3:" + c.Vehiculo3);

                parametros.Add("Matricula3:" + c.matricula3);
                parametros.Add("Vehiculo4:" + c.Vehiculo4);

                parametros.Add("Matricula4:" + c.matricula4);

                parametros.Add("Numero_Bastidor2:" + c.Numero_Bastidor2);

                parametros.Add("Potencia:" + c.Potencia);

                parametros.Add("Switch:" + c.Switch);

                parametros.Add("Nota1:" + c.Nota1);
                parametros.Add("Nota2:" + c.Nota2);

                parametros.Add("Hora_Entrada:" + c.Hora_entrada.Replace(":", "*"));
                parametros.Add("Hora_Salida:" + c.Hora_salida.Replace(":", "*"));
                parametros.Add("Entidad_Bancaria2:" + c.entidad_bacnaria2);
                parametros.Add("Iban2:" + c.iban2);

                parametros.Add("Swift2:" + c.swift2);
                if (c.DeBaja)
                    parametros.Add("DeBaja:1");
                else
                    parametros.Add("DeBaja:0");
                if (c.n_plaza == null)
                    c.n_plaza = "0";



                parametros.Add("N_Plaza:" + c.n_plaza);
                if (c.importe.Length > 0)
                {
                    float t = float.Parse(c.importe);
                    c.importe = t.ToString("0.00");
                }

                parametros.Add("Importe:" + c.importe.Replace("€", ""));




                string cn_String = conexiondb;
                if (!consultar_cliente(c.dni, c.n_cliemte + ""))
                {

                    SQLiteConnection cn = new SQLiteConnection(cn_String);

                    if (cn.State != ConnectionState.Open) cn.Open();
                    DateTime dt = new DateTime();
                    string dtt = "";
                    DateTime dt2 = new DateTime();
                    string dtt2 = "";
                    string sql_query = "";
                    DateTime dd;
                    string dtt3 = "";
                    DateTime dd2;
                    string dtt4 = "";
                    try
                    {
                        dd = (DateTime)c.Fecha_In;
                        dtt3 = dd.ToString("dd/MM/yyyy");

                    }
                    catch
                    {

                    }
                    try
                    {
                        dd2 = (DateTime)c.Fecha_Out;
                        dtt4 = dd2.ToString("dd/MM/yyyy");
                    }
                    catch
                    {

                    }
                    sql_query = "INSERT INTO Cliente(N_Cliente,Nombre,Apellidos,DNI,direccion,poblacion,Telefono1,Telefono2,CP,Mail1,Pais,Provincia,DeBaja,Fecha_In,Fecha_Out,Potencia,Switch,Vehiculo1,Marticula1,Vehiculo2,Marticula2,Nota1,Hora_entrada,Hora_salida,Mail2,Fecha_Entrada,Fecha_Pega,Medidas_Vehiculo1, Importe, Vehiculo3, Matricula3, Vehiculo4, Matricula4, Nota2,Numero_Bastidor1,Numero_Bastidor2,Numero_Bastidor3,Numero_Bastidor4,Medidas_Vehiculo2,Medidas_Vehiculo3,Medidas_Vehiculo4,Tarjeta) VALUES (" + c.n_cliemte + ",'" + c.nombre_cliente + "','" + c.apellidos_cliente + "','" + c.dni + "','" + c.direccion + "','" + c.poblacio + "','" + c.telefon1 + "','" + c.telefon2 + "','" + c.codigo_postal + "','" + c.mail + "','" + c.Pais + "','" + c.Provincia + "'," + Convert.ToInt32(c.DeBaja) + ",'" + dtt + "','" + dtt + "'," + c.Potencia + "," + Convert.ToInt32(c.Switch) + ",'" + c.Vehiculo1 + "','" + c.matricula1 + "','" + c.Vehiculo2 + "','" + c.matricula2 + "','" + c.Nota1 + "','" + c.Hora_entrada + "','" + c.Hora_salida + "','" + c.mail2 + "','" + dtt2 + "','" + dtt2 + "','" + c.Medidas_Vehiculo1 + "','" + c.importe + "','" + c.Vehiculo3 + "','" + c.matricula3 + "','" + c.Vehiculo4 + "','" + c.matricula4 + "','" + c.Nota2 + "','" + c.Numero_Bastidor1 + "','" + c.Numero_Bastidor2 + "','" + c.Numero_Bastidor3 + "','" + c.Numero_Bastidor4 + "','" + c.Medidas_Vehiculo2 + "','" + c.Medidas_Vehiculo3 + "','" + c.Medidas_Vehiculo4 + "','" + c.N_tarjeta + "')";

                    if (c.fecha_entrada_estado != null)
                    {
                        dt = (DateTime)c.fecha_entrada_estado;
                        dtt = dt.ToString("dd/MM/yyyy");

                    }
                    if (c.fecha_pago != null)
                    {
                        dt2 = (DateTime)c.fecha_pago;

                        dtt2 = dt.ToString("dd/MM/yyyy");
                    }
                    if (c.importe.Length == 0)
                    {
                        c.importe = "0,00";
                    }

                    if (c.n_plaza.Equals("0"))
                    {
                        sql_query = "INSERT INTO Cliente(N_Cliente,Nombre,Apellidos,DNI,direccion,poblacion,Telefono1,Telefono2,CP,Mail1,Pais,Provincia,DeBaja,Fecha_In,Fecha_Out,Potencia,Switch,Vehiculo1,Marticula1,Vehiculo2,Marticula2,Nota1,Hora_entrada,Hora_salida,Mail2,Fecha_Entrada,Fecha_Pega,Medidas_Vehiculo1, Importe, Vehiculo3, Matricula3, Vehiculo4, Matricula4, Nota2,Numero_Bastidor1,Numero_Bastidor2,Numero_Bastidor3,Numero_Bastidor4,Medidas_Vehiculo2,Medidas_Vehiculo3,Medidas_Vehiculo4, Tarjeta) VALUES (" + c.n_cliemte + ",'" + c.nombre_cliente + "','" + c.apellidos_cliente + "','" + c.dni + "','" + c.direccion + "','" + c.poblacio + "','" + c.telefon1 + "','" + c.telefon2 + "','" + c.codigo_postal + "','" + c.mail + "','" + c.Pais + "','" + c.Provincia + "'," + Convert.ToInt32(c.DeBaja) + ",'" + dtt3 + "','" + dtt4 + "'," + c.Potencia + "," + Convert.ToInt32(c.Switch) + ",'" + c.Vehiculo1 + "','" + c.matricula1 + "','" + c.Vehiculo2 + "','" + c.matricula2 + "','" + c.Nota1 + "','" + c.Hora_entrada + "','" + c.Hora_salida + "','" + c.mail2 + "','" + dtt + "','" + dtt2 + "','" + c.Medidas_Vehiculo1 + "','" + c.importe + "','" + c.Vehiculo3 + "','" + c.matricula3 + "','" + c.Vehiculo4 + "','" + c.matricula4 + "','" + c.Nota2 + "','" + c.Numero_Bastidor1 + "','" + c.Numero_Bastidor2 + "','" + c.Numero_Bastidor3 + "','" + c.Numero_Bastidor4 + "','" + c.Medidas_Vehiculo2 + "','" + c.Medidas_Vehiculo3 + "','" + c.Medidas_Vehiculo4 + "','" + c.N_tarjeta + "')";


                    }
                    else
                    {
                        sql_query = "INSERT INTO Cliente(N_Cliente, N_Plaza,Nombre,Apellidos,DNI,direccion,poblacion,Telefono1,Telefono2,CP,Mail1,Pais,Provincia,DeBaja,Fecha_In,Fecha_Out,Potencia,Switch,Vehiculo1,Marticula1,Vehiculo2,Marticula2,Nota1,Hora_entrada,Hora_salida,Mail2,Fecha_Entrada,Fecha_Pega,Medidas_Vehiculo1, Asignado, Importe, Vehiculo3, Matricula3, Vehiculo4, Matricula4, Nota2,Numero_Bastidor1,Numero_Bastidor2,Numero_Bastidor3,Numero_Bastidor4,Medidas_Vehiculo2,Medidas_Vehiculo3,Medidas_Vehiculo4, Tarjeta) VALUES (" + c.n_cliemte + "," + c.n_plaza + ",'" + c.nombre_cliente + "','" + c.apellidos_cliente + "','" + c.dni + "','" + c.direccion + "','" + c.poblacio + "','" + c.telefon1 + "','" + c.telefon2 + "','" + c.codigo_postal + "','" + c.mail + "','" + c.Pais + "','" + c.Provincia + "'," + Convert.ToInt32(c.DeBaja) + ",'" + dtt3 + "','" + dtt4 + "'," + c.Potencia + ",'" + Convert.ToInt32(c.Switch) + "','" + c.Vehiculo1 + "','" + c.matricula1 + "','" + c.Vehiculo2 + "','" + c.matricula2 + "','" + c.Nota1 + "','" + c.Hora_entrada + "','" + c.Hora_salida + "','" + c.mail2 + "','" + dtt + "','" + dtt2 + "','" + c.Medidas_Vehiculo1 + "', 1,'" + c.importe + "','" + c.Vehiculo3 + "','" + c.matricula3 + "','" + c.Vehiculo4 + "','" + c.matricula4 + "','" + c.Nota2 + "','" + c.Numero_Bastidor1 + "','" + c.Numero_Bastidor2 + "','" + c.Numero_Bastidor3 + "','" + c.Numero_Bastidor4 + "','" + c.Medidas_Vehiculo2 + "','" + c.Medidas_Vehiculo3 + "','" + c.Medidas_Vehiculo4 + "','" + c.N_tarjeta + "')";

                    }


                    SQLiteCommand sql_cmd = new SQLiteCommand(sql_query, cn);

                    sql_cmd.ExecuteNonQuery();

                    int b = 0;
                    if (Switch.IsChecked.Value)
                    {
                        b = 1;
                    }



                    if (b == 1)
                    {



                        if (c.Lista_Parcelas.Count > 0)
                        {
                            Parcelas p = c.Lista_Parcelas[0];

                            Direcciones d = ldrc2.Find(x => x.Id == p.Direccion);

                            /*_connection.Connect();
                            Thread.Sleep(1000);
                            if (KnxConnectionTunneling.ChannelId != 0)
                            {
                                if (b == 0)
                                    _connection.Action(d.Descripcion, false);
                                else
                                    _connection.Action(d.Descripcion, true);


                                Thread.Sleep(1000);
                                _connection.Disconnect();
                            }*/
                        }
                    } while (observartodotoken)
                    {

                    }

                    consulta = new Consulta("Cliente", parametros, "", "INSERT");
                    Lista_consultas.Add(consulta);
                    //c = lcln.Find(x => x.n_cliemte.Equals(c.n_cliemte));
                    if (c.n_plaza != null)
                    {



                        string query = "UPDATE Parcelas SET asignada=1, N_Cliente=" + c.id + " WHERE Id=" + c.n_plaza;

                        SQLiteCommand sql_cmd3 = new SQLiteCommand(query, cn);
                        sql_cmd3.ExecuteNonQuery();
                        //HOLAA


                    }
                    cn.Close();
                    clearall();
                    string cn_string = conexiondb;
                    cn = new SQLiteConnection(cn_string);
                    if (cn.State != ConnectionState.Open) cn.Open();
                    string sql_Text = "UPDATE Version SET configurationcol=GETDATE()";
                    SQLiteCommand sql_cmd2 = new SQLiteCommand(sql_Text, cn);
                    /*
                    //sql_cmd2.ExecuteNonQuery();
                    foreach (var _property in c.GetType().GetProperties())

                    {
                        if (_property.Attributes == null)
                        {
                            if (_property.PropertyType is bool)
                            {
                                var prop = c.GetType().GetProperty(_property.Name);

                                prop.SetValue(c, false);
                            }
                            if (_property.PropertyType is string)
                            {
                                var prop = c.GetType().GetProperty(_property.Name);

                                prop.SetValue(c, "");
                            }
                            if (_property.PropertyType is int)
                            {
                                var prop = c.GetType().GetProperty(_property.Name);

                                prop.SetValue(c, -1);
                            }
                        }

                    }
                    lcln.Add(c);
                    //
                    MirarFicha();*/
                    Clientes cc = s.CargarUltimoCliente();
                    foreach (string ss in qury)
                    {
                        string ass = ss + "'," + cc.id + ")";

                        s.EjecutarQuery(ass);
                    }

                    clientebool = true;
                    cargarClientes();
                    botones_ficha.IsEnabled = true;
                    vc.Close();
                }
            }catch(Exception ee)
            {
                var st = new StackTrace(ee, true);
                var frame = st.GetFrame(0);
                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                Peta(ee, line + "");
            }
        }

        private void clearall()
        {
            nombre_cliente.Text = "";
            apellidos_cliente.Text = "";
            numero_cliente.Text = "";
            apellidos_cliente.Text = "";
            dni.Text = "";
            direccion_cliente.Text = "";
            poblacion_cliente.Text = "";
            telefonos_cliente.Text = "";
            provincia.Text = "";
            direccion_cliente.Text = "";
            numero_tarjeta.Text = "";

            direccion_cliente.Text = "";
            numero.Text = "";
            piso.Text = "";
            puerta.Text = "";
            CP.Text = "";
            poblacion_cliente.Text = "";
            provincia.Text = "";
            pais.Text = "";
            telefonos_cliente2.Text = "";
            Clientes_FechaEntrada.SelectedDate = null;
            Clientes_FechaSalida.SelectedDate = null;
            numero_plaza.Text = "";
            vehiculo1.Text = "";
            vehiculo2.Text = "";
           
            nota1.Text = "";
            Potencia.SelectedIndex = -1;
            Switch.IsChecked = false;



            mail_cliente.Text = "";
            //Metodo_pago.SelectedIndex = -1;
            titular_tarjeta.Text = "";
            caducidad.Text = "";
            caducidad1.Text = "";
            numero_secreto.Text = "";
            entidad_bancaria.Text = "";
            Iban.Text = "";
            Swift.Text = "";
            Clientes.SelectedItem = null;
            Registros.SelectedItem = null;

            nombre_cliente_alta.Text = "";
            apellido_cliente_alta.Text = "";
            numero_cliente_alta.Text = "";
            dni_cliente_alta.Text = "";
            direccion_cliente_alta.Text = "";
            poblacion_cliente_alta.Text = "";
            telefono_cliente_alta.Text = "";
            telefono2_cliente_alta.Text = "";
            pais_cliente_alta.Text = "";
            email_cliente.Text = "";
            email_cliente2.Text = "";
            numero_plaza_alta.SelectedItem = null;
            cp_cliente_alta.Text = "";
            Vehiculo1_alta.Text = "";
            Vehiculo2_alta.Text = "";
            bastidor1_alta.Text = "";
            bastidor2_alta.Text = "";
            Vehiculo3_alta.Text = "";
            Vehiculo4_alta.Text = "";
            bastidor3_alta.Text = "";
            bastidor4_alta.Text = "";
            medidas_alta.Text = "";
            provincia_cliente_alta.Text = "";

            Clientes_FechaEntrada_alta.SelectedDate = null;
            Clientes_HoraEntrada.Text = "0:00";
            Clientes_FechaSalida_alta.SelectedDate = null;
            Clientes_FechaPago_alta.SelectedDate = null;
            Clientes_FechaPeriodo_alta.SelectedDate = null;
            Clientes_HoraEntrada_alta.Text = new DateTime(1, 1, 1, 12, 0, 0).ToString("HH:mm:ss");
            Clientes_HoraPeriodo_alta.Text = new DateTime(1, 1, 1, 12, 0, 0).ToString("HH:mm:ss");


            //cliente_menu.SelectedIndex = 0;
            //buscadorClientes.Text = "";
            //comprobar_permisos();
            RoutedEventArgs re = new RoutedEventArgs();
            //boton5_Cientes_Click(boton5_Cientes, re);


        }

        private bool consultar_cliente(string dni, string n_cliemte)
        {
            bool b = lcln.Exists(x => x.dni == dni && x.n_cliemte == int.Parse(n_cliemte));
            return lcln.Exists(x => x.dni == dni && x.n_cliemte == int.Parse(n_cliemte));
        }

        private void Usuarios_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                if (Usuarios.SelectedItem != null)
                {
                    Usuarios u = Usuarios.SelectedItem as Usuarios;

                    CargarRoles();
                    Roles r = lrol.Find(x => x.Id == u.Rol);
                    Rol_usuario.SelectedItem = r;
                    Nombre_Trabajador.Text = u.Nombre;
                    Apellido1_Trabajador.Text = u.Apellido1;
                    Apellido2_Trabajador.Text = u.Apellido2;
                    Dni_usuario.Text = u.Dni_Trabajador;
                    Telefono.Text = u.Telefono;
                    Mail.Text = u.Mail;
                    direccion_trabajador.Text = u.Direccion;
                    numero_trabajador.Text = u.Numero;
                    piso_trabajador.Text = u.Piso;
                    puerta_trabajador.Text = u.Puerta;
                    CP_trabajador.Text = u.CP;
                    poblacion_trabajador.Text = u.Poblacion;
                    codigo_poblacio_trabajador.Text = u.Provincia;
                    codigo_pais_trabajador.Text = u.Pais;
                    Nota.Text = u.Nota;
                    boton2_Sistema.Visibility = Visibility.Visible;
                    editSistema.Visibility = Visibility.Visible;

                    deleteSistema.Visibility = Visibility.Visible;
                    if (user_log.Id == u.Id || u.Nombre.Equals("admin"))
                    {
                        deleteSistema.IsEnabled = false;
                        Rol_usuario.IsEnabled = false;
                    }
                    else
                    {
                        deleteSistema.IsEnabled = true;

                        Rol_usuario.IsEnabled = true;
                    }


                }
                else
                {
                    //boton2_Sistema.Visibility = Visibility.Collapsed;

                    Rol_usuario.SelectedItem = -1;
                    Nombre_Trabajador.Text = "";
                    Apellido1_Trabajador.Text = "";
                    Apellido2_Trabajador.Text = "";
                    Dni_usuario.Text = "";
                    Telefono.Text = "";
                    Mail.Text = "";
                    direccion_trabajador.Text = "";
                    numero_trabajador.Text = "";
                    piso_trabajador.Text = "";
                    puerta_trabajador.Text = "";
                    CP_trabajador.Text = "";
                    poblacion_trabajador.Text = "";
                    codigo_poblacio_trabajador.Text = "";
                    codigo_pais_trabajador.Text = "";
                    Nota.Text = "";

                    editSistema.Visibility = Visibility.Collapsed;
                    deleteSistema.Visibility = Visibility.Collapsed;

                }

                safe = false;
                ComprobarRoles();
            }
            catch (Exception ee)
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                Peta(ee, line + "");
            }
        }

        private void Roles_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                if (Roles.SelectedItem != null)
                {
                    Roles r = Roles.SelectedItem as Roles;
                    Nombre_Rol.Text = r.Nom;
                    clearRoles();
                    char[] c = r.Permisos_bin.ToArray<char>();

                    if (c[18] == '1')
                    {
                        Agn.IsChecked = true;


                    }
                    else
                    {
                        Agn.IsChecked = false;
                    }


                    if (c[19] == '1')
                    {
                        Sst.IsChecked = true;


                    }
                    else
                    {
                        Sst.IsChecked = false;
                    }
                    if (c[20] == '1')
                    {
                        Cln.IsChecked = true;


                    }
                    else
                    {
                        Cln.IsChecked = false;
                    }
                    if (c[21] == '1')
                    {
                        Map.IsChecked = true;


                    }
                    else
                    {
                        Map.IsChecked = false;
                    }
                    if (c[22] == '1')
                    {
                        Fct.IsChecked = true;


                    }
                    else
                    {
                        Fct.IsChecked = false;
                    }
                    if (c[23] == '1')
                    {
                        Cmr.IsChecked = true;


                    }
                    else
                    {
                        Cmr.IsChecked = false;
                    }
                    if (c[24] == '1')
                    {
                        pestana_cliente1.IsChecked = true;


                    }
                    else
                    {
                        pestana_cliente1.IsChecked = false;
                    }
                    if (c[25] == '1')
                    {
                        pestana_cliente2.IsChecked = true;


                    }
                    else
                    {
                        pestana_cliente2.IsChecked = false;
                    }
                    if (c[26] == '1')
                    {
                        pestana_cliente3.IsChecked = true;


                    }
                    else
                    {
                        pestana_cliente3.IsChecked = false;
                    }
                    if (c[27] == '1')
                    {
                        pestana_cliente4.IsChecked = true;


                    }
                    else
                    {
                        pestana_cliente4.IsChecked = false;
                    }
                    if (c[28] == '1')
                    {
                        pestana_cliente5.IsChecked = true;


                    }
                    else
                    {
                        pestana_cliente5.IsChecked = false;
                    }

                    if (c[0] == '1')
                    {
                        upd_Agenda.IsChecked = true;


                    }
                    else
                    {
                        upd_Agenda.IsChecked = false;
                    }

                    if (c[1] == '1')
                    {
                        dlt_Agenda.IsChecked = true;


                    }
                    else
                    {
                        dlt_Agenda.IsChecked = false;
                    }

                    if (c[2] == '1')
                    {
                        ins_Agenda.IsChecked = true;


                    }
                    else
                    {
                        ins_Agenda.IsChecked = false;
                    }



                    if (c[3] == '1')
                    {
                        upd_Sistema.IsChecked = true;


                    }
                    else
                    {
                        upd_Sistema.IsChecked = false;
                    }
                    if (c[4] == '1')
                    {
                        dlt_Sistema.IsChecked = true;


                    }
                    else
                    {
                        dlt_Sistema.IsChecked = false;
                    }
                    if (c[5] == '1')
                    {
                        ins_Sistema.IsChecked = true;


                    }
                    else
                    {
                        ins_Sistema.IsChecked = false;
                    }


                    if (c[6] == '1')
                    {
                        upd_Clientes.IsChecked = true;


                    }
                    else
                    {
                        upd_Clientes.IsChecked = false;
                    }
                    if (c[7] == '1')
                    {
                        dlt_Clientes.IsChecked = true;


                    }
                    else
                    {
                        dlt_Clientes.IsChecked = false;
                    }
                    if (c[8] == '1')
                    {
                        ins_Clientes.IsChecked = true;


                    }
                    else
                    {
                        ins_Clientes.IsChecked = false;
                    }

                    if (c[9] == '1')
                    {
                        upd_Mapa.IsChecked = true;


                    }
                    else
                    {
                        upd_Mapa.IsChecked = false;
                    }



                    if (c[10] == '1')
                    {
                        dlt_Mapa.IsChecked = true;


                    }
                    else
                    {
                        dlt_Mapa.IsChecked = false;
                    }
                    if (c[11] == '1')
                    {
                        ins_Mapa.IsChecked = true;


                    }
                    else
                    {
                        ins_Mapa.IsChecked = false;
                    }
                    if (c[12] == '1')
                    {
                        upd_Factura.IsChecked = true;


                    }
                    else
                    {
                        upd_Factura.IsChecked = false;
                    }


                    if (c[13] == '1')
                    {
                        dlt_Factura.IsChecked = true;


                    }
                    else
                    {
                        dlt_Factura.IsChecked = false;
                    }
                    if (c[14] == '1')
                    {
                        ins_Factura.IsChecked = true;


                    }
                    else
                    {
                        ins_Factura.IsChecked = false;
                    }
                    if (c[15] == '1')
                    {
                        upd_Camara.IsChecked = true;


                    }
                    else
                    {
                        upd_Camara.IsChecked = false;
                    }
                    if (c[16] == '1')
                    {
                        dlt_Camara.IsChecked = true;


                    }
                    else
                    {
                        dlt_Camara.IsChecked = false;
                    }
                    if (c[17] == '1')
                    {
                        ins_Camara.IsChecked = true;


                    }
                    else
                    {
                        ins_Camara.IsChecked = false;
                    }



                    if (c[23] == '1' && c[22] == '1' && c[21] == '1' && c[20] == '1' && c[19] == '1' && c[18] == '1' && c[17] == '1' && c[16] == '1' && c[15] == '1' && c[14] == '1' && c[13] == '1' && c[12] == '1' && c[11] == '1' && c[10] == '1' && c[9] == '1' && c[8] == '1' && c[7] == '1' && c[6] == '1' && c[5] == '1' && c[4] == '1' && c[3] == '1' && c[2] == '1' && c[1] == '1' && c[0] == '1')
                    {
                        Todos.IsChecked = true;
                    }
                    else
                    {
                        Todos.IsChecked = false;
                    }
                    if (Roles.SelectedItem != null)
                    {
                        Roles rr = Roles.SelectedItem as Roles;
                        //console.writeline(rol_log.Id + " " + rr.Id);

                        if (rol_log.Id != rr.Id)
                        {

                            boton4_Sistema.Visibility = Visibility.Visible;
                            editSistema.Visibility = Visibility.Visible;
                            deleteSistema.Visibility = Visibility.Visible;
                            Nombre_Rol.IsEnabled = true;
                            permisos_users.IsEnabled = true;

                        }
                        else
                        {
                            Nombre_Rol.IsEnabled = false;
                            permisos_users.IsEnabled = false;
                            deleteSistema.Visibility = Visibility.Collapsed;
                        }
                    }

                }
                else
                {
                    boton4_Sistema.Visibility = Visibility.Collapsed;
                    Nombre_Rol.Text = "";
                    /*upd.IsChecked = false;
                    dlt.IsChecked = false;
                    ins.IsChecked = false;*/
                    editSistema.Visibility = Visibility.Collapsed;
                    deleteSistema.Visibility = Visibility.Collapsed;

                }
                safe = false;
                ComprobarRoles();
            }
            catch (Exception ee)
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                Peta(ee, line + "");
            }

        }

        private void clearRoles()
        {
            if ((bool)Todos.IsChecked)
            {
                 Todos.IsChecked = false;
            }
            
        }

        private void lista_iva_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                if (lista_iva.SelectedItem != null)
                {

                    IVAs i = lista_iva.SelectedItem as IVAs;
                    tipo_iva.Text = i.Tipo;
                    porcentaje_iva.Text = i.Porcentaje.ToString();
                    boton6_Sistema.Visibility = Visibility.Visible;
                    editSistema.Visibility = Visibility.Visible;
                    deleteSistema.Visibility = Visibility.Visible;
                }
                else
                {
                    tipo_iva.Text = "";
                    porcentaje_iva.Text = "";

                    boton6_Sistema.Visibility = Visibility.Collapsed;
                    editSistema.Visibility = Visibility.Collapsed;
                    deleteSistema.Visibility = Visibility.Collapsed;
                }

                safe = false;
                ComprobarRoles();
            }
            catch (Exception ee)
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                Peta(ee, line + "");
            }
        }

        private void Facturas_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                if (Facturas.SelectedItem != null)
                {
                    CargarIva();
                    Sent.Visibility = Visibility.Visible;
                    Facturas f = Facturas.SelectedItem as Facturas;
                    //Productos.Items.Clear();
                    Nombre_Cliente_Factura.Text = f.Nombre_Cliente;
                    DNI_Cliente_Factura.Text = f.DNI_CIF;
                    Direccion_Cliente_Factura.Text = f.Direccion_Cliente;
                    Poblacion_Cliente_Factura.Text = f.Poblacio_Cliente;
                    Codigo_Postal_Cliente_Facturacion.Text = f.CP_Cliente;
                    Provincia_Cliente_Factura.Text = f.Provincia_Cliente;
                    Pais_Cliente_Factura.Text = f.Pais_Cliente;
                    Mail_cliente.Text = f.Mail;
                    Telefono_cliente.Text = f.Telefono;
                    Telefono_Camping_Factura.Text = f.Telefono_Camping;
                    Matricula_cliente.Text = f.Matricula;
                    Vehiculo_cliente.Text = f.Vehiculo;
                    Iban_cliente.Text = f.IBAN;
                    Direccion_Camping_Factura.Text = f.Direccion_Facturacion;
                    Poblacion_Camping_Factura.Text = f.Poblecion_Facturacion;
                    Codigo_Postal_Camping_Factura.Text = f.CP_Facturacion;
                    Provincia_Camping_Factura.Text = f.Provincia_Facturacion;
                    Numero_Factura.Text = Empresadatos[7] + "" + f.Id.ToString();
                    Empresa.Text = f.Empresa;
                    Pais_Camping_Factura.Text = f.Pais_Facturacion;

                    Metodo_Pago.SelectedIndex = f.Metodo_Pago;
                    Fecha_Factura.SelectedDate = f.fecha;
                    Descuento.Text = f.Descuento;
                    Base_Imponible.Text = f.BI.ToString("0.00") + " €";
                    Cuota_IVA.Text = f.Cuota_IVA.ToString("0.00") + " €";
                    if (f.Importe.ToString().Contains(","))
                        Importe_Factura.Text = f.Importe.ToString("0.00") + " €";
                    else
                        Importe_Factura.Text = f.Importe.ToString("0.00") + " €";
                    //console.writeline(f.fecha_ven);
                    DateTime dt = f.fecha_ven;
                    Fecha_Factura_ven.SelectedDate = dt;
                    List<Producto> lp = new List<Producto>();
                    foreach (Producto p in f.Lista_productos)
                    {
                        Console.WriteLine(p.Id + " "+p.Descuento);
                        p.des = ((float.Parse(p.Cantidad) * float.Parse(p.Precio.Replace(" €", "")) + float.Parse(p.Impuesto.Replace(" €", ""))) - float.Parse(p.Total.Replace(" €", ""))) + " €";
                        if (float.Parse(p.Descuento.Replace(" €", "")) < 0)
                        {
                            p.des = 0 + ".00 €";
                        }
                        if (float.Parse(p.Descuento.Replace(" €", "")) < 0.009f)
                        {
                            p.des = 0 + ".00 €";
                        }
                        lp.Add(p);

                    }

                    Productos.Items.Clear();
                    foreach (Producto p in lp)
                    {
                        Productos.Items.Add(p);
                    }
                    //Productos.ItemsSource=lp;
                    if (Productos.Items.Count > 17)
                    {
                        AddnewProduct.IsEnabled = false;
                    }
                    else
                    {

                        AddnewProduct.IsEnabled = true;
                    }

                    boton2_Facturab.Visibility = Visibility.Visible;
                    editFactura.Visibility = Visibility.Visible;
                    Save.Visibility = Visibility.Visible;
                    change_Factura.IsEnabled = false;
                }
                else
                {

                    Sent.Visibility = Visibility.Collapsed;
                    Nombre_Cliente_Factura.Text = "";
                    DNI_Cliente_Factura.Text = "";
                    Direccion_Cliente_Factura.Text = "";
                    Poblacion_Cliente_Factura.Text = "";
                    Codigo_Postal_Cliente_Facturacion.Text = "";
                    Provincia_Cliente_Factura.Text = "";
                    Pais_Cliente_Factura.Text = "";
                    Mail_cliente.Text = "";
                    Telefono_cliente.Text = "";
                    Descuento.Text = "";
                    Direccion_Camping_Factura.Text = "";
                    Poblacion_Camping_Factura.Text = "";
                    Codigo_Postal_Camping_Factura.Text = "";
                    Provincia_Camping_Factura.Text = "";
                    Pais_Camping_Factura.Text = "";

                    Numero_Factura.Text = "";
                    Fecha_Factura.SelectedDate = null;
                    Base_Imponible.Text = "";

                    Cuota_IVA.Text = "";
                    Importe_Factura.Text = "";
                    Metodo_Pago.SelectedIndex = -1;
                    boton2_Facturab.Visibility = Visibility.Collapsed;
                    Productos.ItemsSource=null;
                    editFactura.Visibility = Visibility.Collapsed;
                    Save.Visibility = Visibility.Collapsed;

                    change_Factura.IsEnabled = true;
                }
                safe = false;
                ComprobarRoles();
            }
            catch (Exception ee)
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                Peta(ee, line + "");
            }
        }

        private async void change_Factura_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (factura_menu.SelectedIndex == 1)
                {
                    Consulta con;
                    string sql_query = "UPDATE Factura SET ";
                    List<string> l = new List<string>();
                    //Factura factura = new Factura();
                    Facturas f = Facturas.SelectedItem as Facturas;
                    Boolean a = false;

                    if (!Nombre_Cliente_Factura.Text.Equals(f.Nombre_Cliente))
                    {
                        a = true;
                        f.Nombre_Cliente = Nombre_Cliente_Factura.Text;
                        sql_query += "Nombre_Cliente='" + f.Nombre_Cliente + "', ";
                        l.Add("Nombre_Cliente:" + f.Nombre_Cliente);
                    }
                    if (!DNI_Cliente_Factura.Text.Equals(f.DNI_CIF))
                    {
                        a = true;
                        f.DNI_CIF = DNI_Cliente_Factura.Text;
                        sql_query += "DNI_CIF='" + f.DNI_CIF + "', ";
                        l.Add("DNI/CIF:" + DNI_Cliente_Factura);

                    }
                    if (!Direccion_Camping_Factura.Text.Equals(f.Direccion_Facturacion))
                    {
                        a = true;
                        f.Direccion_Facturacion = Direccion_Cliente_Factura.Text;
                        sql_query += "Direccion_Facturacion='" + f.Direccion_Facturacion + "', ";
                        l.Add("Direccion_Facturacion:" + f.Direccion_Facturacion);
                    }
                    if (!Poblacion_Camping_Factura.Text.Equals(f.Poblecion_Facturacion))
                    {
                        a = true;
                        f.Poblecion_Facturacion = Poblacion_Camping_Factura.Text;
                        sql_query += "Poblacion_Facturacion='" + f.Poblecion_Facturacion + "', ";
                        l.Add("Poblacion_Facturacion:" + f.Poblecion_Facturacion);
                    }

                    if (!Codigo_Postal_Camping_Factura.Text.Equals(f.CP_Facturacion.ToString()))
                    {
                        a = true;
                        f.CP_Facturacion = Codigo_Postal_Camping_Factura.Text;
                        sql_query += "CP_Facturacion='" + f.CP_Facturacion + "', ";
                        l.Add("CP_Facturacion:" + f.CP_Facturacion);
                    }
                    if (!Provincia_Camping_Factura.Text.Equals(f.Provincia_Facturacion))

                    {
                        a = true;
                        f.Provincia_Facturacion = Provincia_Camping_Factura.Text;
                        sql_query += "Provincia_Facturacion='" + f.Provincia_Facturacion + "', ";
                        l.Add("Provincia_Facturacion:" + f.Provincia_Facturacion);

                    }

                    if (!Fecha_Factura.SelectedDate.Equals(f.fecha))
                    {
                        a = true;
                        f.fecha = Fecha_Factura.SelectedDate.Value;
                        sql_query += "Fecha='" + f.fecha.ToString("dd/MM/yyyy") + "', ";
                        l.Add("Fecha:" + f.fecha.ToString("dd-mm-yyyy"));
                    }

                    if (!Fecha_Factura_ven.SelectedDate.Equals(f.fecha_ven))
                    {
                        a = true;
                        f.fecha_ven = Fecha_Factura_ven.SelectedDate.Value;
                        sql_query += "Fecha_ven='" + f.fecha_ven.ToString("dd/MM/yyyy") + "', ";
                        l.Add("Fecha_ven:" + f.fecha_ven.ToString("dd-mm-yyyy"));
                    }
                    if (!Base_Imponible.Text.Equals(f.BI.ToString("0.00")))
                    {
                        a = true;
                        f.BI = float.Parse(Base_Imponible.Text.Replace(" €", ""));
                        sql_query += "Bi='" + f.BI + "', ";
                        l.Add("Bi:" + f.BI);
                    }

                    /*if (!Cuota_IVA.Text.Equals(f.Cuota_IVA.ToString()))
                    {
                        a = true;
                        f.Cuota_IVA = float.Parse(Cuota_IVA.Text);
                        sql_query += "Cuota_IVA='" + f.Cuota_IVA + "', ";
                        l.Add("Cuota_IVA:" + f.Cuota_IVA);
                    }*/
                    if (!Importe_Factura.Text.Equals(f.Importe.ToString()))
                    {
                        a = true;
                        f.Importe = float.Parse(Importe_Factura.Text.Replace(" €", ""));
                        sql_query += "Importe='" + f.Importe + "', ";
                        l.Add("Importe:" + f.Importe);

                    }

                    if (!Direccion_Cliente_Factura.Text.Equals(f.Direccion_Cliente))
                    {
                        a = true;
                        f.Direccion_Cliente = Direccion_Cliente_Factura.Text;
                        sql_query += "Direccion_Cliente='" + f.Direccion_Cliente + "', ";
                        l.Add("Direccion_Cliente:" + f.Direccion_Cliente);
                    }
                    if (!Poblacion_Cliente_Factura.Text.Equals(f.Poblacio_Cliente))
                    {
                        a = true;
                        f.Poblacio_Cliente = Poblacion_Cliente_Factura.Text;
                        sql_query += "Poblacion_Cliente='" + f.Poblacio_Cliente + "', ";
                        l.Add("Poblacion_Cliente:" + f.Poblacio_Cliente);
                    }
                    if (!Codigo_Postal_Cliente_Facturacion.Text.Equals(f.CP_Cliente.ToString()))
                    {
                        a = true;
                        f.CP_Cliente = Codigo_Postal_Cliente_Facturacion.Text;
                        sql_query += "CP_Cliente='" + f.CP_Cliente + "', ";
                        l.Add("CP_Cliente:" + f.CP_Cliente);
                    }
                    if (!Provincia_Cliente_Factura.Text.Equals(f.Provincia_Cliente))
                    {
                        a = true;
                        f.Provincia_Cliente = Provincia_Cliente_Factura.Text;
                        sql_query += "Provincia_Cliente='" + f.Provincia_Cliente + "', ";
                        l.Add("Provincia_Cliente:" + Provincia_Cliente_Factura.Text);
                    }

                    if (!Pais_Cliente_Factura.Text.Equals(f.Pais_Cliente))
                    {
                        a = true;
                        f.Pais_Cliente = Pais_Cliente_Factura.Text;
                        sql_query += "Pais_Cliente='" + f.Pais_Cliente + "', ";
                        l.Add("Pais_Cliente:" + Pais_Cliente_Factura.Text);
                    }

                    if (!Mail_cliente.Text.Equals(f.Mail))
                    {
                        a = true;
                        f.Mail = Mail_cliente.Text;
                        sql_query += "Mail='" + f.Mail + "', ";
                        l.Add("Mail:" + Mail_cliente.Text);
                    }
                    if (!Telefono_cliente.Text.Equals(f.Telefono))
                    {
                        a = true;
                        f.Telefono = Telefono_cliente.Text;
                        sql_query += "Telefono='" + f.Telefono + "', ";
                        l.Add("Telefono:" + Telefono_cliente.Text);
                    }

                    if (!Pais_Camping_Factura.Text.Equals(f.Pais_Facturacion))
                    {
                        a = true;
                        f.Pais_Facturacion = Pais_Camping_Factura.Text;
                        sql_query += "Pais_Facturacion='" + f.Pais_Facturacion + "', ";
                        l.Add("Pais_Facturacion:" + Pais_Camping_Factura.Text);
                    }
                    if (!Empresa.Text.Equals(f.Empresa))
                    {
                        a = true;
                        f.Empresa = Empresa.Text;
                        sql_query += "Empresa='" + f.Empresa + "', ";
                        l.Add("Empresa:" + Empresa.Text);
                    }
                    if (Metodo_Pago.SelectedIndex != f.Metodo_Pago)
                    {
                        a = true;
                        f.Metodo_Pago = Metodo_Pago.SelectedIndex;
                        sql_query += "Metodo_Pago=" + f.Metodo_Pago + ", ";
                        l.Add("Metodo_Pago:" + Metodo_Pago.Text);
                    }

                    if (Telefono_Camping_Factura.Text.Equals(f.Telefono_Camping))
                    {
                        a = true;
                        f.Telefono_Camping = Telefono_Camping_Factura.Text;
                        sql_query += "Telefono_Camping=" + f.Telefono_Camping + ", ";
                        l.Add("Telefono_Camping:" + f.Telefono_Camping);
                    }
                    if (!Descuento.Text.Equals(f.Descuento))
                    {
                        a = true;
                        f.Descuento = Descuento.Text;
                        sql_query += "Descuento=" + f.Descuento + ", ";
                        l.Add("Descuento:" + f.Descuento);
                    }

                    if (lpc.Count > 0)
                        a = true;


                    MessageBoxResult result = System.Windows.MessageBox.Show("¿Quieres guardar los cambios?", "¡Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                    if (result == MessageBoxResult.OK)
                    {
                        if (a)
                        {
                            sql_query = sql_query.Remove(sql_query.Length - 2); sql_query += " WHERE Id=" + f.Id;
                            string sql_connection = conexiondb;
                            SQLiteConnection cn = new SQLiteConnection(sql_connection);
                            if (cn.State != ConnectionState.Open) cn.Open();

                            SQLiteCommand sql_cmd = new SQLiteCommand(sql_query, cn);

                            sql_cmd.ExecuteNonQuery();
                            Consulta consulta = new Consulta("Facturas", l, "Id:" + f.Id, "UPDATE");
                            Lista_consultas.Add(consulta);

                            foreach (ProductosConsulta p in lpc)
                            {
                                sql_cmd = new SQLiteCommand(p.query, cn);

                                sql_cmd.ExecuteNonQuery();
                                if (p.Parametros != null)
                                    consulta = new Consulta("Productos_Registro", p.Parametros, "", "INSERT");
                                else
                                    consulta = new Consulta("Productos_Registro", null, p.filtro, "DELETE");
                                Lista_consultas.Add(consulta);
                            }

                            lpc.Clear();
                            CargarFacturas();



                            ClearFactura();
                            string sql_Text = "UPDATE Version SET configurationcol=GETDATE()";
                            SQLiteCommand sql_cmd2 = new SQLiteCommand(sql_Text, cn);

                            //sql_cmd2.ExecuteNonQuery(); 

                            cn.Close();
                        }
                    }
                    else
                    {
                        Facturas.SelectedItem = null;
                        Facturas.SelectedItem = f;
                    }
                }
                else if (factura_menu.SelectedIndex == 3)
                {
                    Consulta con;
                    string sql_query = "UPDATE Recibo SET ";
                    List<string> l = new List<string>();
                    //Factura factura = new Factura();
                    Recibos r = Recibos.SelectedItem as Recibos;
                    Boolean a = false;

                    if (!Nombre_Cliente_Factura2.Text.Equals(r.Nombre_Cliente))
                    {
                        a = true;
                        r.Nombre_Cliente = Nombre_Cliente_Factura2.Text;
                        sql_query += "Nombre_Cliente='" + r.Nombre_Cliente + "', ";
                        l.Add("Nombre_Cliente:" + r.Nombre_Cliente);
                    }
                    if (!DNI_Cliente_Factura2.Text.Equals(r.DNI_CIF))
                    {
                        a = true;
                        r.DNI_CIF = DNI_Cliente_Factura2.Text;
                        sql_query += "DNI_CIF='" + r.DNI_CIF + "', ";
                        l.Add("DNI/CIF:" + DNI_Cliente_Factura2);

                    }
                    if (!Direccion_Camping_Factura2.Text.Equals(r.Direccion_Facturacion))
                    {
                        a = true;
                        r.Direccion_Facturacion = Direccion_Cliente_Factura2.Text;
                        sql_query += "Direccion_Facturacion='" + r.Direccion_Facturacion + "', ";
                        l.Add("Direccion_Facturacion:" + r.Direccion_Facturacion);
                    }
                    if (!Poblacion_Camping_Factura2.Text.Equals(r.Poblecion_Facturacion))
                    {
                        a = true;
                        r.Poblecion_Facturacion = Poblacion_Camping_Factura2.Text;
                        sql_query += "Poblacion_Facturacion='" + r.Poblecion_Facturacion + "', ";
                        l.Add("Poblacion_Facturacion:" + r.Poblecion_Facturacion);
                    }

                    if (!Codigo_Postal_Camping_Factura2.Text.Equals(r.CP_Facturacion.ToString()))
                    {
                        a = true;
                        r.CP_Facturacion = Codigo_Postal_Camping_Factura2.Text;
                        sql_query += "CP_Facturacion='" + r.CP_Facturacion + "', ";
                        l.Add("CP_Facturacion:" + r.CP_Facturacion);
                    }
                    if (!Provincia_Camping_Factura2.Text.Equals(r.Provincia_Facturacion))

                    {
                        a = true;
                        r.Provincia_Facturacion = Provincia_Camping_Factura2.Text;
                        sql_query += "Provincia_Facturacion='" + r.Provincia_Facturacion + "', ";
                        l.Add("Provincia_Facturacion:" + r.Provincia_Facturacion);

                    }

                    if (!Fecha_Factura2.SelectedDate.Equals(r.fecha))
                    {
                        a = true;
                        r.fecha = Fecha_Factura2.SelectedDate.Value;
                        sql_query += "Fecha='" + r.fecha.ToString("dd/MM/yyyy") + "', ";
                        l.Add("Fecha:" + r.fecha.ToString("dd-mm-yyyy"));
                    }

                    if (!Fecha_Factura_ven2.SelectedDate.Equals(r.fecha_ven))
                    {
                        a = true;
                        r.fecha_ven = Fecha_Factura_ven2.SelectedDate.Value;
                        sql_query += "Fecha_ven='" + r.fecha_ven.ToString("dd/MM/yyyy") + "', ";
                        l.Add("Fecha_ven:" + r.fecha_ven.ToString("dd-mm-yyyy"));
                    }
                    if (!Base_Imponible2.Text.Equals(r.BI.ToString("0.00")))
                    {
                        a = true;
                        r.BI = float.Parse(Base_Imponible2.Text.Replace(" €", ""));
                        sql_query += "Bi='" + r.BI + "', ";
                        l.Add("Bi:" + r.BI);
                    }

                    /*if (!Cuota_IVA.Text.Equals(r.Cuota_IVA.ToString()))
                    {
                        a = true;
                        r.Cuota_IVA = float.Parse(Cuota_IVA.Text);
                        sql_query += "Cuota_IVA='" + r.Cuota_IVA + "', ";
                        l.Add("Cuota_IVA:" + r.Cuota_IVA);
                    }*/
                    if (!Importe_Factura2.Text.Equals(r.Importe.ToString()))
                    {
                        a = true;
                        r.Importe = float.Parse(Importe_Factura2.Text.Replace(" €", ""));
                        sql_query += "Importe='" + r.Importe + "', ";
                        l.Add("Importe:" + r.Importe);

                    }


                    if (!Direccion_Cliente_Factura2.Text.Equals(r.Direccion_Cliente))
                    {
                        a = true;
                        r.Direccion_Cliente = Direccion_Cliente_Factura2.Text;
                        sql_query += "Direccion_Cliente='" + r.Direccion_Cliente + "', ";
                        l.Add("Direccion_Cliente:" + r.Direccion_Cliente);
                    }
                    if (!Descuento2.Text.Equals(r.Descuento))
                    {
                        a = true;
                        r.Descuento = Descuento2.Text;
                        sql_query += "Descuento='" + r.Descuento + "', ";
                        l.Add("Descuento:" + r.Descuento);
                    }
                    if (!Poblacion_Cliente_Factura2.Text.Equals(r.Poblacio_Cliente))
                    {
                        a = true;
                        r.Poblacio_Cliente = Poblacion_Cliente_Factura2.Text;
                        sql_query += "Poblacion_Cliente='" + r.Poblacio_Cliente + "', ";
                        l.Add("Poblacion_Cliente:" + r.Poblacio_Cliente);
                    }
                    if (!Codigo_Postal_Cliente_Facturacion2.Text.Equals(r.CP_Cliente.ToString()))
                    {
                        a = true;
                        r.CP_Cliente = Codigo_Postal_Cliente_Facturacion2.Text;
                        sql_query += "CP_Cliente='" + r.CP_Cliente + "', ";
                        l.Add("CP_Cliente:" + r.CP_Cliente);
                    }
                    if (!Provincia_Cliente_Factura2.Text.Equals(r.Provincia_Cliente))
                    {
                        a = true;
                        r.Provincia_Cliente = Provincia_Cliente_Factura2.Text;
                        sql_query += "Provincia_Cliente='" + r.Provincia_Cliente + "', ";
                        l.Add("Provincia_Cliente:" + Provincia_Cliente_Factura2.Text);
                    }

                    if (!Pais_Cliente_Factura2.Text.Equals(r.Pais_Cliente))
                    {
                        a = true;
                        r.Pais_Cliente = Pais_Cliente_Factura2.Text;
                        sql_query += "Pais_Cliente='" + r.Pais_Cliente + "', ";
                        l.Add("Pais_Cliente:" + Pais_Cliente_Factura2.Text);
                    }

                    if (!Mail_cliente2.Text.Equals(r.Mail))
                    {
                        a = true;
                        r.Mail = Mail_cliente2.Text;
                        sql_query += "Mail='" + r.Mail + "', ";
                        l.Add("Mail:" + Mail_cliente2.Text);
                    }
                    if (!Telefono_cliente2.Text.Equals(r.Telefono))
                    {
                        a = true;
                        r.Telefono = Telefono_cliente2.Text;
                        sql_query += "Telefono='" + r.Telefono + "', ";
                        l.Add("Telefono:" + Telefono_cliente2.Text);
                    }

                    if (!Pais_Camping_Factura2.Text.Equals(r.Pais_Facturacion))
                    {
                        a = true;
                        r.Pais_Facturacion = Pais_Camping_Factura2.Text;
                        sql_query += "Pais_Facturacion='" + r.Pais_Facturacion + "', ";
                        l.Add("Pais_Facturacion:" + Pais_Camping_Factura2.Text);
                    }
                    if (!Empresa2.Text.Equals(r.Empresa))
                    {
                        a = true;
                        r.Empresa = Empresa2.Text;
                        sql_query += "Empresa='" + r.Empresa + "', ";
                        l.Add("Empresa:" + Empresa2.Text);
                    }
                    if (Metodo_Pago2.SelectedIndex != r.Metodo_Pago)
                    {
                        a = true;
                        r.Metodo_Pago = Metodo_Pago2.SelectedIndex;
                        sql_query += "Metodo_Pago=" + r.Metodo_Pago + ", ";
                        l.Add("Metodo_Pago:" + Metodo_Pago2.Text);
                    }

                    if (Telefono_Camping_Factura2.Text.Equals(r.Telefono_Camping))
                    {
                        a = true;
                        r.Telefono_Camping = Telefono_Camping_Factura2.Text;
                        sql_query += "Telefono_Camping=" + r.Telefono_Camping + ", ";
                        l.Add("Telefono_Camping:" + r.Telefono_Camping);
                    }




                    if (lpc.Count > 0)
                        a = true;

                    MessageBoxResult result = System.Windows.MessageBox.Show("¿Quieres guardar los cambios?", "¡Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                    if (result == MessageBoxResult.OK)
                    {
                        if (a)
                        {
                            sql_query = sql_query.Remove(sql_query.Length - 2); sql_query += " WHERE Id=" + r.Id;
                            string sql_connection = conexiondb;
                            SQLiteConnection cn = new SQLiteConnection(sql_connection);
                            if (cn.State != ConnectionState.Open) cn.Open();

                            SQLiteCommand sql_cmd = new SQLiteCommand(sql_query, cn);

                            sql_cmd.ExecuteNonQuery();
                            Consulta consulta = new Consulta("Recibo", l, "Id:" + r.Id, "UPDATE");
                            Lista_consultas.Add(consulta);
                            foreach (ProductosConsulta p in lpc)
                            {
                                sql_cmd = new SQLiteCommand(p.query, cn);

                                sql_cmd.ExecuteNonQuery();
                                if (p.Parametros != null)
                                    consulta = new Consulta("Productos_Registro2", p.Parametros, "", "INSERT");
                                else
                                    consulta = new Consulta("Productos_Registro2", null, p.filtro, "DELETE");
                                Lista_consultas.Add(consulta);
                            }

                            lpc.Clear();
                            CargarRecibos();
                            clearFactura1();
                            cn.Close();
                        }
                    }
                    else
                    {
                        Recibos.SelectedItem = null;
                        Recibos.SelectedItem = r;
                    }

                }
            }
            catch (Exception ee)
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                Peta(ee, line + "");
            }
        }

        private void ClearFactura()
        {
            Nombre_Cliente_Factura.Text = "";
            DNI_Cliente_Factura.Text = "";
            Direccion_Cliente_Factura.Text = "";
            Poblacion_Cliente_Factura.Text = "";
            Numero_Factura.Text = "";
            Fecha_Factura.SelectedDate = null;
            Base_Imponible.Text = "";

            Cuota_IVA.Text = "";
            Importe_Factura.Text = "";

            Direccion_Cliente_Factura.Text = "";
            Poblacion_Cliente_Factura.Text = "";
            Codigo_Postal_Cliente_Facturacion.Text = "";
            Provincia_Cliente_Factura.Text = "";
            Facturas.SelectedItem = null;
            Codigo_Postal_Cliente_Facturacion.Text = "";
            Provincia_Camping_Factura.Text = "";
            //comprobar_permisos();
            Facturas.SelectedItem = null;
            //add_Factura.IsEnabled = false;
            sistema_buscar.Text = "Buscar...";


            boton1_Factura_Click(boton1_Factura, RoutedEventArgs);
        }

        private void deleteFactura_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (factura_menu.SelectedIndex <= 1)
                {
                    MessageBoxResult result = MessageBox.Show("¿Desea borrar la factura seleccionada?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                    if (result == MessageBoxResult.OK)
                    {

                        if (!(Facturas.SelectedItem is null))
                        {
                            Consulta consulta;
                            List<string> l = new List<string>();
                            SQLiteConnection cn = new SQLiteConnection(conexiondb);
                            Facturas f = (Facturas)Facturas.SelectedItem;

                            if (cn.State != ConnectionState.Open) cn.Open();
                            string sql_query = "DELETE FROM Factura WHERE Id=" + f.Id;
                            SQLiteCommand sql_cmd = new SQLiteCommand(sql_query, cn);

                            sql_cmd.ExecuteNonQuery();

                            List<Producto> lp = lpdr.Select(x => x).Where(x => x.Id_Factura == f.Id).ToList();

                            foreach (Producto p in lp)
                            {
                                sql_query = "DELETE FROM Productos_Registro WHERE Id=" + p.Id;
                                sql_cmd = new SQLiteCommand(sql_query, cn);

                                sql_cmd.ExecuteNonQuery();

                            }

                            CargarFacturas();
                            ClearFactura();
                            while (observartodotoken)
                            {

                            }
                            consulta = new Consulta("Factura", l, "Id:" + f.Id, "DELETE");
                            Lista_consultas.Add(consulta);
                            string cn_string = conexiondb;
                            cn = new SQLiteConnection(cn_string);
                            if (cn.State != ConnectionState.Open) cn.Open();
                            string sql_Text = "UPDATE Version SET configurationcol=GETDATE()";
                            SQLiteCommand sql_cmd2 = new SQLiteCommand(sql_Text, cn);

                            //sql_cmd2.ExecuteNonQuery(); 
                            cn.Close();
                        }
                    }



                }
                else if (factura_menu.SelectedIndex <= 3)
                {
                    MessageBoxResult result = MessageBox.Show("¿Desea borrar el recibo seleccionado?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                    if (result == MessageBoxResult.OK)
                    {
                        if (Recibos.SelectedItem != null)
                        {
                            Consulta consulta;
                            List<string> l = new List<string>();
                            SQLiteConnection cn = new SQLiteConnection(conexiondb);
                            Recibos f = (Recibos)Recibos.SelectedItem;

                            if (cn.State != ConnectionState.Open) cn.Open();
                            string sql_query = "DELETE FROM Recibo WHERE Id=" + f.Id;
                            SQLiteCommand sql_cmd = new SQLiteCommand(sql_query, cn);

                           sql_cmd.ExecuteNonQuery();



                            CargarRecibos();
                            clearFactura1();
                            while (observartodotoken)
                            {

                            }
                            consulta = new Consulta("Recibo", l, "Id:" + f.Id, "DELETE");
                            Lista_consultas.Add(consulta);
                            string cn_string = conexiondb;
                            cn = new SQLiteConnection(cn_string);
                            if (cn.State != ConnectionState.Open) cn.Open();
                            string sql_Text = "UPDATE Version SET configurationcol=GETDATE()";
                            SQLiteCommand sql_cmd2 = new SQLiteCommand(sql_Text, cn);

                            //sql_cmd2.ExecuteNonQuery(); 
                            cn.Close();

                        }
                    }
                }
                else
                {
                    MessageBoxResult result = MessageBox.Show("¿Desea borrar el producto seleccionado?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                    if (result == MessageBoxResult.OK)
                    {
                        if (lista_productos.SelectedItem != null)
                        {
                            Consulta consulta;
                            List<string> l = new List<string>();
                            SQLiteConnection cn = new SQLiteConnection(conexiondb);
                            ProductosRegistrados f = (ProductosRegistrados)lista_productos.SelectedItem;

                            if (cn.State != ConnectionState.Open) cn.Open();
                            string sql_query = "DELETE FROM Productos_Registrados WHERE Id=" + f.Id;
                            SQLiteCommand sql_cmd = new SQLiteCommand(sql_query, cn);

                            sql_cmd.ExecuteNonQuery();



                            cargarProductosNuevos();
                            while (observartodotoken)
                            {

                            }
                            consulta = new Consulta("Productos_Registrados", l, "Id:" + f.Id, "DELETE");
                            Lista_consultas.Add(consulta);
                            string cn_string = conexiondb;
                            cn = new SQLiteConnection(cn_string);
                            if (cn.State != ConnectionState.Open) cn.Open();
                            string sql_Text = "UPDATE Version SET configurationcol=GETDATE()";
                            SQLiteCommand sql_cmd2 = new SQLiteCommand(sql_Text, cn);

                            //sql_cmd2.ExecuteNonQuery(); 
                            cn.Close();

                        }
                    }
                }
            }
            catch (Exception ee)
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                Peta(ee, line + "");
            }
        }

        private void MirarParcela(object sender, TextChangedEventArgs e)
        {/*
            if (lista_parcelas2.SelectedItem == null)
            {
                if (N_parcela.Text.Length > 0 && nombre.Text.Length > 0)
                {
                    change_mapa.IsEnabled = true;

                }
                else
                {
                    change_mapa.IsEnabled = false;
                }
            }
            else
            {
                Parcelas p = lista_parcelas2.SelectedItem as Parcelas;
                if (N_parcela.Text.Equals(p.n_parcela)&&N_parcela.Text.Length==0 || nombre.Text.Equals(p.nom)&&nombre.Text.Length==0)
                {
                    change_mapa.IsEnabled = false;
                }
                else
                {
                    change_mapa.IsEnabled = true;
                }
            }
            
          CAMBIAR&*/

        }

        private void change_mapa_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (mapa_menu.SelectedIndex == 1)
                {
                    bool a = false;
                    bool b = false;
                    String sql_connection = conexiondb;
                    SQLiteConnection cn = new SQLiteConnection(sql_connection);
                    cn.Open();
                    Parcelas p = lista_parcelas2.SelectedItem as Parcelas;
                    String query = "UPDATE Parcelas SET ";
                    List<string> parametros = new List<string>();




                    if (lista_parcelas2.SelectedItem != null)
                    {
                        
                        if (!Descripción2.Text.Equals(p.Descripción))
                        {
                            a = true;
                            query += "Descripción='" + Descripción2.Text + "', ";
                        }
                        if (!Nota_Parcela2.Text.Equals(p.Nota))
                        {
                            a = true;
                            query += "Nota='" + Nota_Parcela2.Text + "', ";
                        }

                        if (!Medidas2.Text.Equals(p.Medidas))
                        {
                            a = true;
                            query += "Medidas='" + Medidas2.Text + "', ";
                        }


                        if (!Distrito2.Text.Equals(p.Distrito))
                        {
                            a = true;
                            query += "Distrito='" + Distrito2.Text + "', ";
                        }
                        Clientes c = new Clientes();
                        if (Clientes_Parcela.SelectedItem != null)
                        {
                            c = Clientes_Parcela.SelectedItem as Clientes;
                            if (c.id != p.n_cliente)
                            {
                                b = true;
                                a = true;
                                query += "asignada=1, ";

                                query += "N_Cliente=" + c.id + ", ";
                            }
                        }
                        else
                        {
                            if (p.n_cliente != 0)
                            {
                                b = true;
                                a = true;
                                query += "asignada=0, ";

                                query += "N_Cliente=0, ";

                            }
                        }
                    }
                    MessageBoxResult result = System.Windows.MessageBox.Show("¿Quieres guardar los cambios?", "¡Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                    if (result == MessageBoxResult.OK)
                    {
                        if (a)
                        {
                            query = query.Remove(query.Length - 2);
                            query += " WHERE Id=" + p.id;
                            SQLiteCommand sql_cmd = new SQLiteCommand(query, cn);

                            sql_cmd.ExecuteNonQuery();
                            if (b)
                            {

                                if (p.n_cliente != 0)
                                {
                                    query = "UPDATE Cliente SET Asignado=0, N_Plaza=0 WHERE Id=" + p.n_cliente;
                                    sql_cmd = new SQLiteCommand(query, cn);

                                    sql_cmd.ExecuteNonQuery();
                                }
                                Clientes c = Clientes_Parcela.SelectedItem as Clientes;
                                if (c != null)
                                    query = "UPDATE Cliente SET Asignado=1, N_Plaza=" + p.id + " WHERE Id=" + c.id;
                                else
                                {
                                    query = "UPDATE Cliente SET Asignado=0, N_Plaza=0 WHERE Id=" + p.n_cliente;
                                }
                                sql_cmd = new SQLiteCommand(query, cn);

                                sql_cmd.ExecuteNonQuery();
                            }
                            cn.Close();
                            clientebool = true;
                            cargarClientes();
                            CargarParcela();
                        }
                    }

                }
                else
                {

                    if (editarMapa)
                    {
                        if (lista_parcelas.SelectedItem == null)
                        {
                            if (Nombre_Parcela.Text.Length > 0 && Distrito.Text.Length > 0 && lbtn.Count > 0)
                            {

                                if (Nombre_Parcela.Background != Brushes.Red)
                                {


                                    int i = 0;
                                    /*if (Cliente_Parcela.SelectedItem != null)
                                    {
                                        Clientes c = Cliente_Parcela.SelectedItem as Clientes;
                                        i = c.id;


                                    }*/
                                    string parcelas = "";
                                    foreach (Border b in lbtn)
                                    {
                                        b.Background = Brushes.Transparent;
                                        parcelas += b.Tag;
                                        parcelas += "*";
                                    }


                                    parcelas.Remove(parcelas.Length - 1);

                                    String sql_connection = conexiondb;
                                    SQLiteConnection cn = new SQLiteConnection(sql_connection);
                                    cn.Open();

                                    Direcciones d = new Direcciones();
                                    if (Direccion_Parcela.SelectedItem != null)
                                    {
                                        d = (Direcciones)Direccion_Parcela.SelectedItem;
                                    }
                                    else
                                    {
                                        d.Id = 0;
                                    }

                                    String query = "INSERT INTO Parcelas([Nombre],[Parcelas],[N_Cliente],[Descripción], [Distrito], [Orientación], [Nota],[Direccion],[Medidas]) VALUES('" + Nombre_Parcela.Text + "', '" + parcelas + "', " + i + ",'" + Descripción.Text + "','" + Distrito.Text + "','" + Orientación.Text + "','" + Nota_Parcela.Text + "', " + d.Id + ", '" + Meidas_Parcela.Text + "')";

                                    SQLiteCommand sql_cmd = new SQLiteCommand(query, cn);
                                    List<string> parametros = new List<string>();
                                    parametros.Add("Nombre:" + Nombre_Parcela.Text);
                                    parametros.Add("Parcelas:" + parcelas.Replace(':','#'));
                                    parametros.Add("N_Cliente:" + i);
                                    parametros.Add("Descripción:" + Descripción.Text);
                                    parametros.Add("Distrito:" + Distrito.Text);
                                    parametros.Add("Orientación:" + Orientación.Text);
                                    parametros.Add("Nota:" + Nota_Parcela.Text);
                                    parametros.Add("Direccion:" + d.Id);
                                    parametros.Add("Medidas:" + Meidas_Parcela.Text);
                                    while (observartodotoken)
                                    {

                                    }
                                    Consulta c = new Consulta("Parcelas", parametros, "", "INSERT");
                                    Lista_consultas.Add(c);
                                    sql_cmd.ExecuteNonQuery();

                                    query = "UPDATE Direcciones SET Asignada=1 WHERE Id=" + d.Id;

                                    sql_cmd = new SQLiteCommand(query, cn);

                                    List<string> pp = new List<string>();
                                    pp.Add("Asignada:1");
                                    Consulta cc = new Consulta("Direcciones", pp, "Id:"+d.Id, "UPDATE");
                                    while (observartodotoken)
                                    {

                                    }
                                    Lista_consultas.Add(cc);


                                    sql_cmd.ExecuteNonQuery();
                                    cargarDirecciones();

                                    foreach (Parcelas p in lprc)
                                    {



                                        string[] casillas = p.parcelas.Split('*');

                                        foreach (string s in casillas)
                                        {
                                            Border b = botonesMapa.Find(x => x.Tag.Equals(s));
                                            if (b != null)
                                            {
                                                if (p.ocupada == 1)
                                                    b.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.colorocupado);
                                                else
                                                    b.Background = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.colorlibre);


                                                b.Opacity = new Double();
                                                b.Opacity = 0.65;

                                                p.botones.Add(b);
                                            }
                                        }

                                    }
                                    if(lista_parcelas.Items.Count>0)
                                    lista_parcelas.SelectedItem = lista_parcelas.Items[lista_parcelas.Items.Count - 1];
                                    MouseButtonEventArgs mbea = new MouseButtonEventArgs(Mouse.PrimaryDevice, 0, MouseButton.Left);
                                    Border_MouseLeftButtonDown_9(checpoint, mbea);

                                    /*if (Cliente_Parcela.SelectedItem != null)
                                    {
                                        Parcelas p = lprc[lprc.Count - 1];


                                        Clientes c = Cliente_Parcela.SelectedItem as Clientes;


                                        String query2 = "UPDATE CLIENTE SET N_Plaza='" + p.id + "' WHERE Id=" + c.id;

                                        SQLiteCommand sql_cmd2 = new SQLiteCommand(query2, cn);

                                        sql_cmd2.ExecuteNonQuery();
                                        query2 = "UPDATE Parcelas SET asignada=" + 1 + " WHERE Id=" + p.id;

                                        sql_cmd2 = new SQLiteCommand(query2, cn);

                                        sql_cmd2.ExecuteNonQuery();
                                        cargarClientes();
                                    }*/
                                    string sql_Text = "UPDATE Version SET configurationcol=GETDATE()";
                                    SQLiteCommand sql_cmd2 = new SQLiteCommand(sql_Text, cn);

                                    //sql_cmd2.ExecuteNonQuery(); 
                                    cn.Close();

                                    editando = false;
                                    CargarParcela();
                                    lbtn.Clear();

                                    cn.Close();
                                    Clear_All(change_mapa, RoutedEventArgs);
                                }

                            }
                        }
                        else
                        {
                            Thread.Sleep(500);
                            Parcelas p = lista_parcelas.SelectedItem as Parcelas;
                            String sql_connection = conexiondb;
                            SQLiteConnection cn = new SQLiteConnection(sql_connection);
                            cn.Open();
                            Clientes c = new Clientes();
                            /* if (Cliente_Parcela.SelectedItem != null)
                                 c = Cliente_Parcela.SelectedItem as Clientes;
                                 */

                            //string sql_query = "UPDATE Parcelas SET Parcelas='" + parcelas + "', asignada=" + 1 + ", n_cliente='" + c.id + "' WHERE Id=" + p.id;
                            Direcciones d = new Direcciones();
                            d.Id = 0;

                            String query = "UPDATE Direcciones SET Asignada=0 WHERE Id=" + p.Direccion;

                            SQLiteCommand sql_cmd = new SQLiteCommand(query, cn);

                            sql_cmd.ExecuteNonQuery();
                            List<string> pp = new List<string>();
                            pp.Add("Asignada:0");
                            while (observartodotoken)
                            {

                            }
                            Consulta cc = new Consulta("Direcciones", pp, "Id:"+ p.Direccion, "UPDATE");
                            Lista_consultas.Add(cc);
                            
                            if (Direccion_Parcela.SelectedItem != null)
                            {
                                d = (Direcciones)Direccion_Parcela.SelectedItem;
                            }
                            int o = 1;
                            query = "UPDATE Parcelas SET Nombre='" + Nombre_Parcela.Text + "', N_Cliente=" + p.n_cliente + ", Descripción='" + Descripción.Text + "', Distrito='" + Distrito.Text + "', Orientación='" + Orientación.Text + "', Nota='" + Nota_Parcela.Text + "', asignada=1, Direccion=" + d.Id + " , Medidas='" + Meidas_Parcela.Text + "' WHERE Id=" + p.id;
                            if (p.n_cliente == 0)
                            {
                                o = 0;
                                query = "UPDATE Parcelas SET Nombre='" + Nombre_Parcela.Text + "', N_Cliente=0, Descripción='" + Descripción.Text + "', Distrito='" + Distrito.Text + "', Orientación='" + Orientación.Text + "', Nota='" + Nota_Parcela.Text + "', asignada=0, Direccion=" + d.Id + " , Medidas='" + Meidas_Parcela.Text + "' WHERE Id=" + p.id;

                            }
                            sql_cmd = new SQLiteCommand(query, cn);

                            List<string> pp2 = new List<string>();
                            pp2.Add("Nombre:"+ Nombre_Parcela.Text);
                            pp2.Add("N_Cliente:" + p.n_cliente);
                            pp2.Add("Descripción:" + Distrito.Text);
                            pp2.Add("Distrito:" + Distrito.Text);
                            pp2.Add("Orientación:" + Orientación.Text);
                            pp2.Add("Nota:" + Nota_Parcela.Text);
                            pp2.Add("Orientación:" + Orientación.Text);
                            pp2.Add("asignada:" + o+"");
                            pp2.Add("Direccion:" + d.Id);
                            pp2.Add("Medidas:" + Meidas_Parcela.Text);
                            while (observartodotoken)
                            {

                            }
                            Consulta cc2 = new Consulta("Parcelas", pp2, "Id:" + p.id, "UPDATE");
                            Lista_consultas.Add(cc2);

                            sql_cmd.ExecuteNonQuery();

                            query = "UPDATE Direcciones SET Asignada=1 WHERE Id=" + d.Id;

                            sql_cmd = new SQLiteCommand(query, cn);

                            sql_cmd.ExecuteNonQuery();
                            List<string> pp4 = new List<string>();
                            pp4.Add("Asignada:1");
                            while (observartodotoken)
                            {

                            }
                            Consulta cc5 = new Consulta("Direcciones", pp4, "Id:" + d.Id, "UPDATE");
                            Lista_consultas.Add(cc5);
                            /*if (p.n_cliente != 0)
                            {
                                Clientes cc4 = lcln.Find(x => x.id == p.n_cliente);

                                String sql_connection3 = conexiondb;
                                SQLiteConnection cn3 = new SQLiteConnection(sql_connection3);
                                cn3.Open();
                                String query3 = "UPDATE CLIENTE SET N_Plaza='0', Asignado=" + 0 + " WHERE Id=" + cc4.id;

                                SQLiteCommand sql_cmd3 = new SQLiteCommand(query3, cn3);

                                sql_cmd3.ExecuteNonQuery();
                            }*/
                            
                            if (p.n_cliente == 0)
                            {
                                String sql_connection2 = conexiondb;
                                SQLiteConnection cn2 = new SQLiteConnection(sql_connection2);
                                cn2.Open();
                                String query2 = "UPDATE CLIENTE SET N_Plaza='" + p.id + "', Asignado=" + 0 + " WHERE Id=" + c.id;

                                SQLiteCommand sql_cmd2 = new SQLiteCommand(query2, cn2);

                                sql_cmd2.ExecuteNonQuery();
                            }
                            else
                            {
                                String sql_connection2 = conexiondb;
                                SQLiteConnection cn2 = new SQLiteConnection(sql_connection2);
                                cn2.Open();
                                String query2 = "UPDATE CLIENTE SET N_Plaza='" + p.id + "', Asignado=" + 1 + " WHERE Id=" + c.id;

                                SQLiteCommand sql_cmd2 = new SQLiteCommand(query2, cn2);

                                sql_cmd2.ExecuteNonQuery();
                            }

                            cn.Close();
                            Thread.Sleep(1000);
                            Clear_All(change_mapa, RoutedEventArgs);
                            cargarClientes();
                            cargarDirecciones();
                            CargarParcela();
                            limpiarParcela();
                        }


                    }
                    /*if (lbtn.Count > 0 && Cliente_Parcela.SelectedItem != null)
                    {
                        string parcelas = "";
                        foreach (Border b in lbtn)
                        {
                            b.Background = Brushes.Transparent;
                            parcelas += b.Tag;
                            parcelas += "*";
                        }


                        parcelas.Remove(parcelas.Length - 1);
                        SQLiteConnection cn = new SQLiteConnection(conexiondb);
                        cn.Open();
                        //Parcelas p = Nombre_Parcela.SelectedItem as Parcelas;
                        Clientes c = Cliente_Parcela.SelectedItem as Clientes;
                        /*string sql_query = "UPDATE Parcelas SET Parcelas='" + parcelas + "', asignada=" + 1 + ", n_cliente='" + c.id + "' WHERE Id=" + p.id;
                        SQLiteCommand sql_cmd2 = new SQLiteCommand(sql_query, cn);

                        if (c.n_plaza.Length == 0)
                        {
                            sql_cmd2.ExecuteNonQuery();
                            sql_query = "UPDATE Cliente SET N_Plaza='" + p.id + "', Asignado=" + 1 + " WHERE Id=" + c.id;
                            sql_cmd2 = new SQLiteCommand(sql_query, cn);
                            sql_cmd2.ExecuteNonQuery();
                            cn.Close();
                            ClearMapa1();
                            cargarClientes();
                            CargarParcela();
                        }
                        else
                        {
                            string par = c.n_plaza+"*"+p.id;

                            sql_cmd2.ExecuteNonQuery();
                            sql_query = "UPDATE Cliente SET N_Plaza='" + par + "', Asignado=" + 1 + " WHERE Id=" + c.id;
                            sql_cmd2 = new SQLiteCommand(sql_query, cn);
                            sql_cmd2.ExecuteNonQuery();
                            cn.Close();
                            ClearMapa1();
                            cargarClientes();
                            CargarParcela();
                        }



                    }*/


                }
            }
            catch (Exception ee)
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
              
                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                Peta(ee, line + "");
            }
        }

        private void ClearMapa1()
        {
            //Nombre_Parcela.SelectedIndex = -1;
            //Cliente_Parcela.SelectedIndex = -1;
            int par = lista_parcelas2.SelectedIndex;
            lista_parcelas.SelectedItem = null; lista_mapa.Visibility = Visibility.Collapsed;
            listadeparcelas.Visibility = Visibility.Visible;
            foreach (Border b in lbtn)
            {
                b.Background = Brushes.Transparent;
            }
            lbtn.Clear();

            Datos_Parcela.Visibility = Visibility.Visible;
            Suministros.Visibility = Visibility.Visible;
            lista_parcelas.SelectedItem = null;
            Nombre_Parcela.Text = "";
            //Cliente_Parcela.SelectedItem = null;
            Distrito.Text = "";
            Orientación.Text = "";
            Descripción.Text = "";
            Nota_Parcela.Text = "";
            lista_parcelas2.SelectedItem = null;
            Nombre_Parcela2.Text = "";
            //Cliente_Parcela2.SelectedItem = null;
            Distrito2.Text = "";
            
            Descripción2.Text = "";
            Nota_Parcela2.Text = "";
            Direccion_Parcela.SelectedItem = null;
            Nombre_Parcela.Background = Brushes.Transparent;
            Clientes_Parcela.SelectedItem = null;
            mover = true;
            lista_parcelas2.SelectedIndex=par;

        }

        private void limpiarParcela()
        {
            DateTime dtt = DateTime.Now;
            try
            {
                if (lista_parcelas != null)
                {
                    lista_parcelas.SelectedItem = null;
                    
                    Nombre_Parcela.Text = "";
                    //Cliente_Parcela.SelectedItem = null;
                    Distrito.Text = "";
                    Orientación.Text = "";
                    Descripción.Text = "";
                    Nota_Parcela.Text = "";
                    //estadoParcela = "Add";
                    Suministros.Visibility = Visibility.Collapsed;

                    lista_parcelas.SelectedItem = null;
                    //delete_parcela.Visibility = Visibility.Collapsed;
                    lista_parcelas2.SelectedItem = null;
                    Nombre_Parcela2.Text = "";
                    //Cliente_Parcela2.SelectedItem = null;
                    Distrito2.Text = "";
                    Descripción2.Text = "";
                    Nota_Parcela2.Text = "";
                    Direccion_Parcela.SelectedItem = null;
                    //estadoParcela = "Add";
                    Suministros.Visibility = Visibility.Collapsed;
                    if (!editando)
                    {
                        MouseButtonEventArgs mb = new MouseButtonEventArgs(Mouse.PrimaryDevice, 0, MouseButton.Left);
                        editarMapa = false;
                        if (bdr.HorizontalAlignment != HorizontalAlignment.Left)
                            Border_MouseLeftButtonDown_9(checpoint, mb);
                    }
                    if (ultParc != null)
                        ultParc.ParcelaIsSelected = false;

                    Clientes_Parcela.SelectedItem = null;
                    Medidas2.Text = "";



                    BrushConverter bc = new BrushConverter();
                    nombre_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");


                    boton_ficha.Visibility = Visibility.Collapsed;

                    Clientes_Parcela.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");





                    Nota_Parcela2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");




                    Distrito2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");



                    Descripción2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    Medidas2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
            }
            catch { }

            Console.WriteLine((dtt - DateTime.Now).TotalSeconds + "." + (dtt - DateTime.Now).TotalMilliseconds);
        }

        private void deletemapa_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                MessageBoxResult result = MessageBox.Show("¿Desea borrar la parcela seleccionada?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                if (result == MessageBoxResult.OK)
                {
                    if (mapa_menu.SelectedIndex == 0)
                    {
                        if (editarMapa)

                            if (lista_parcelas.SelectedItem != null)
                            {
                                List<Parcelas> lista_a_borrar = new List<Parcelas>();
                                Parcelas p = lista_parcelas.SelectedItem as Parcelas;
                                Clientes c = lcln.Find(x => x.id == p.n_cliente);
                                if (c != null)
                                    for (int ii = 0; ii < c.Lista_Parcelas.Count; ii++)
                                    {
                                        if (c.Lista_Parcelas[ii].id == p.id)
                                        {
                                            lista_a_borrar.Add(c.Lista_Parcelas[ii]);
                                        }
                                    }

                                foreach (Parcelas pp2 in lista_a_borrar)
                                {
                                    c.Lista_Parcelas.Remove(pp2);
                                }
                                foreach (Border b in p.botones)
                                {
                                    b.Background = Brushes.Transparent;

                                }



                                SQLiteConnection cn = new SQLiteConnection(conexiondb);
                                cn.Open();

                                string sql_query = "DELETE FROM Parcelas WHERE Id=" + p.id;
                                SQLiteCommand sql_cmd2 = new SQLiteCommand(sql_query, cn);

                                sql_cmd2.ExecuteNonQuery();

                                List<string> pp = new List<string>();
                                while (observartodotoken)
                                {

                                }
                                Consulta cc = new Consulta("Parcelas", pp, "Id:" + p.id, "DELETE");
                                Lista_consultas.Add(cc);

                                if (c != null)
                                {
                                    string par = "0";
                                    int i = 0;

                                    foreach (Parcelas parcela in c.Lista_Parcelas)
                                    {
                                        if (i == 0)
                                        {

                                            par = parcela.id + "";
                                            i++;
                                        }
                                        else
                                        {
                                            par += "*" + parcela.id;
                                        }
                                    }
                                    if (i != 0)
                                    {
                                        sql_query = "UPDATE Cliente SET N_Plaza='" + par + "', Asignado='" + 1 + "' WHERE Id=" + p.n_cliente;
                                        sql_cmd2 = new SQLiteCommand(sql_query, cn);
                                        sql_cmd2.ExecuteNonQuery();
                                    }
                                    else
                                    {
                                        sql_query = "UPDATE Cliente SET N_Plaza='" + par + "', Asignado='" + 0 + "' WHERE Id=" + p.n_cliente;
                                        sql_cmd2 = new SQLiteCommand(sql_query, cn);
                                        sql_cmd2.ExecuteNonQuery();


                                    }
                                }
                                Direcciones d = ldrc2.Find(x => x.Id == p.Direccion);
                                if (d != null)
                                {
                                    sql_query = "UPDATE Direcciones SET Asignada=0 WHERE Id=" + d.Id;

                                    sql_cmd2 = new SQLiteCommand(sql_query, cn);

                                    sql_cmd2.ExecuteNonQuery();
                                    pp = new List<string>();
                                    pp.Add("Asignada:0");
                                    while (observartodotoken)
                                    {

                                    }
                                    cc = new Consulta("Direcciones", pp, "Id:" + d.Id, "UPDATE");
                                    Lista_consultas.Add(cc);
                                }
                                foreach (Border b in botonesMapa)
                                {
                                    b.Background = Brushes.Transparent;

                                }

                                cn.Close();
                                cn.Close();
                                ClearMapa1();
                                cargarClientes();
                                CargarParcela();
                                cargarDirecciones();

                                Clear_All(change_mapa, RoutedEventArgs);
                            }

                    }
                    else
                    {
                        if (lista_parcelas2.SelectedItem != null)
                        {
                            Parcelas p = lista_parcelas2.SelectedItem as Parcelas;
                            Clientes c = lcln.Find(x => x.id == p.n_cliente);
                            SQLiteConnection cn = new SQLiteConnection(conexiondb);
                            string sql_query = "DELETE FROM Parcelas WHERE Id=" + p.id;
                            cn.Open();
                            SQLiteCommand command = new SQLiteCommand(sql_query, cn);
                            command.ExecuteNonQuery();
                            List<string> pp = new List<string>();
                            while (observartodotoken)
                            {

                            }
                            Consulta cc = new Consulta("Parcelas", pp, "Id:" + p.id, "DELETE");
                            Lista_consultas.Add(cc);

                            string par = "";
                            int i = 0;
                            if (c != null)
                            {
                                foreach (Parcelas parcela in c.Lista_Parcelas)
                                {
                                    if (i == 0)
                                    {
                                        par += parcela.id;
                                        i++;
                                    }
                                    else
                                    {
                                        par += "*" + parcela.id;
                                    }
                                }
                                if (i != 0)
                                {
                                    sql_query = "UPDATE Cliente SET N_Plaza='" + par + "', Asignado='" + true + "' WHERE Id=" + p.n_cliente;
                                    command = new SQLiteCommand(sql_query, cn);
                                    command.ExecuteNonQuery();

                                }
                                else
                                {
                                    sql_query = "UPDATE Cliente SET N_Plaza='" + par + "', Asignado='" + false + "' WHERE Id=" + p.n_cliente;
                                    command = new SQLiteCommand(sql_query, cn);
                                    command.ExecuteNonQuery();


                                }

                            }
                            Direcciones d = ldrc2.Find(x => x.Id == p.Direccion);
                            if (d != null)
                            {
                                sql_query = "UPDATE Direcciones SET Asignada=0 WHERE Id=" + d.Id;

                                command = new SQLiteCommand(sql_query, cn);

                                command.ExecuteNonQuery();
                                List<string> pp2 = new List<string>();
                                pp2.Add("Asignada:0");
                                while (observartodotoken)
                                {

                                }
                                Consulta cc2 = new Consulta("Direcciones", pp2, "Id:" + d.Id, "UPDATE");
                                Lista_consultas.Add(cc2);
                            }

                            foreach (Border b in botonesMapa)
                            {
                                b.Background = Brushes.Transparent;

                            }

                            ClearMapa();
                            cn.Close();
                            ClearMapa1();

                            cargarClientes();
                            CargarParcela();
                            ClearMapa1();

                            cargarDirecciones();
                            cn.Close();
                        }

                    }
                }
            }
            catch (Exception ee)
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                var st = new StackTrace(ee, true);
                var frame = st.GetFrame(0);
                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                Peta(ee, line + "");
            }
        }

        private void clearSistema_Click(object sender, RoutedEventArgs e)
        {
            if (usuarios_menu.SelectedIndex == 0)
            {
                Usuarios.SelectedItem = null;
                boton1_Sistema_Click(boton1_Sistema, RoutedEventArgs);
            }
            else if (usuarios_menu.SelectedIndex == 1)
            {
                Usuarios.SelectedItem = null;
                boton1_Sistema_Click(boton1_Sistema, RoutedEventArgs);
            }
            else if (usuarios_menu.SelectedIndex == 2)
            {
                Roles.SelectedItem = null;
                boton3_Sistema_Click(boton3_Sistema, RoutedEventArgs);
            }
            else if (usuarios_menu.SelectedIndex == 3)
            {
                Roles.SelectedItem = null;
                boton3_Sistema_Click(boton3_Sistema, RoutedEventArgs);
            }
            else if (usuarios_menu.SelectedIndex == 4)
            {
                lista_iva.SelectedItem = null;
                boton5_Sistema_Click(boton5_Sistema, RoutedEventArgs);
            }
            else if (usuarios_menu.SelectedIndex == 5)
            {
                lista_iva.SelectedItem = null;
                boton5_Sistema_Click(boton5_Sistema, RoutedEventArgs);
            } else if (usuarios_menu.SelectedIndex == 7)
            {
                Vehiculos.SelectedItem = null;
                CargarVehiculos();
                //boton5_Sistema_Click(boton5_Sistema, RoutedEventArgs);
            }            
            else
            {
                Iluminacion_Potencia.SelectedItem = null;
            }


            boton2_Sistema.Visibility = Visibility.Collapsed;
            boton4_Sistema.Visibility = Visibility.Collapsed;
            boton6_Sistema.Visibility = Visibility.Collapsed;

            sistema_buscar.Text = "Buscar...";
            filtrar_Sistema.SelectedIndex = 0;
            sistema_buscar2.Text = "Buscar...";
            filtrar_Sistema2.SelectedIndex = 0;
            sistema_buscar3.Text = "Buscar...";
            filtrar_Sistema3.SelectedIndex = 0;
            sistema_buscar5.Text = "Buscar...";
            filtrar_Sistema5.SelectedIndex = 0;

            ComprobarRoles();
        }

        private void clearFactura_Click(object sender, RoutedEventArgs e)
        {
            if (factura_menu.SelectedIndex == 0 || factura_menu.SelectedIndex == 1)
            {
                ClearFactura();
                CargarFacturas();
            }
            else if (factura_menu.SelectedIndex == 2 || factura_menu.SelectedIndex == 3)
            {
                clearFactura1();
                CargarRecibos();
            }
            else
            {
                cargarProductosNuevos();
            }

            Facturas_buscar.Text = "Buscar...";
            filtrar_Factura.SelectedIndex = 0;
            Facturas_buscar2.Text = "Buscar...";
            filtrar_Factura2.SelectedIndex = 0;
            Facturas_buscar3.Text = "Buscar...";
            filtrar_Factura.SelectedIndex = 0;
        }

        private void clearFactura1()
        {
            Recibos.SelectedItem = null;
            boton3_Factura_Click(boton3_Factura, RoutedEventArgs);
        }

        private void sistema_buscar_LostFocus(object sender, RoutedEventArgs e)
        {
            if (((TextBox)sender).Text.Equals(""))
                ((TextBox)sender).Text = "Buscar...";
                    /* switch (usuarios_menu.SelectedIndex)
            {
                case 0:
                    {
                        if (sistema_buscar.Text.Equals("") || sistema_buscar.Text.Equals(" "))
                        {

                            sistema_buscar.Text = "Buscar...";

                        }
                    }
                    break;
                case 2:
                    {
                        if (sistema_buscar2.Text.Equals("") || sistema_buscar2.Text.Equals(" "))
                        {

                            sistema_buscar2.Text = "Buscar...";

                        }
                    }
                    break;
                case 4:
                    {
                        if (sistema_buscar3.Text.Equals("") || sistema_buscar3.Text.Equals(" "))
                        {

                            sistema_buscar3.Text = "Buscar...";

                        }
                    }
                    break;
                case 7:
                    {
                        if (sistema_buscar5.Text.Equals("") || sistema_buscar5.Text.Equals(" "))
                        {

                            sistema_buscar5.Text = "Buscar...";

                        }
                    }
                    break;

            }*/
        }

        private void sistema_buscar_GotFocus(object sender, RoutedEventArgs e)
        {
            TextBox t = (TextBox)sender;

            t.Text = "";
            /*switch (usuarios_menu.SelectedIndex)
            {
                case 0:
                    {
                        sistema_buscar.Text = "";
                    }
                    break;
                case 2:
                    {
                        sistema_buscar2.Text = "";
                    }
                    break;
                case 4:
                    {
                        sistema_buscar3.Text = "";
                    }
                    break;
                case 7:
                    {
                        sistema_buscar5.Text = "";
                    }
                    break;
                
            }*/
               

            
        }

        private void sistema_buscar_TextChanged(object sender, TextChangedEventArgs e)
        {

           

        }

        private void Facturas_buscar_GotFocus(object sender, RoutedEventArgs e)
        {
            //Facturas_buscar.Text = "";
        }

        private void Facturas_buscar_LostFocus(object sender, RoutedEventArgs e)
        {
           /* if (Facturas_buscar.Text.Equals("") || Facturas_buscar.Text.Equals(" "))
            {

                Facturas_buscar.Text = "Buscar...";

            }*/
        }

        private void Facturas_buscar_TextChanged(object sender, TextChangedEventArgs e)
        {
            
        }


        // THE OBSERVER& //

        private void ObserverRegistros(object state)
        {
            string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
            Log oLog = new Log(path2);
            try
            {
                oLog.Add("1:6");
                if (mirarDeNuevo)
                {

                    oLog.Add("1:7");
                    backgroundWorker1.RunWorkerAsync(0);
                }
            }catch(Exception e)
            {
                oLog.Add("28243 " + e.Message);
            }

        }

        private void ObserverConsumo(object state)
        {
            /* foreach(Parcelas p in lprc)
              {
                  if (p.check == true)
                  {
                      Console.WriteLine("Mirando Potencia de la parcela "+p.id);
                  }
              }*/
        }

        private void ListUser_Click(object sender, RoutedEventArgs e)
        {
              cliente_menu.SelectedIndex = 0;
            boton1_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/user.png", UriKind.RelativeOrAbsolute));
            boton1_Cientest.Foreground = Brushes.Black;
            boton2_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/article.png", UriKind.RelativeOrAbsolute));
            boton2_Cientest.Foreground = Brushes.Black;
            boton3_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/box.png", UriKind.RelativeOrAbsolute));
            boton3_Cientest.Foreground = Brushes.Black;
            boton4_Cientesi.Source = new BitmapImage(new Uri(@"/iconos/card.png", UriKind.RelativeOrAbsolute));
            boton4_Cientest.Foreground = Brushes.Black;

            boton1_Cientes.Background = Brushes.Transparent;
            boton1_Cientes.BorderBrush = Brushes.Transparent;

            boton2_Cientes.Background = Brushes.Transparent;
            boton2_Cientes.BorderBrush = Brushes.Transparent;

            boton3_Cientes.Background = Brushes.Transparent;
            boton3_Cientes.BorderBrush = Brushes.Transparent;

            boton4_Cientes.Background = Brushes.Transparent;
            boton4_Cientes.BorderBrush = Brushes.Transparent;

            boton5_Cientes.Background = Brushes.Transparent;
            boton5_Cientes.BorderBrush = Brushes.Transparent;

            boton6_Cientes.Background = Brushes.Transparent;
            boton6_Cientes.BorderBrush = Brushes.Transparent;
        }

        private void Switch_Checked(object sender, RoutedEventArgs e)
        {
            Clientes cc = Clientes.SelectedItem as Clientes;
            if (!(cc is null))
            {
                if (bdrpower.HorizontalAlignment != HorizontalAlignment.Right)
                {
                    MouseButtonEventArgs mb = new MouseButtonEventArgs(Mouse.PrimaryDevice, 0, MouseButton.Left);
                    power_MouseLeftButtonDown(power, mb);
                }
                int pot = 0;
                if (Potencia.SelectedItem != null)
                {
                    Potencia pp = Potencia.SelectedItem as Potencia;
                    pot = pp.Id;
                }
                int b = 0;
                if (Switch.IsChecked.Value)
                {
                    b = 1;
                }
                Parcelas p = numero_plaza.SelectedItem as Parcelas;

                if (p == null)

                    p = new Parcelas();

                if (Clientes_FechaEntrada.SelectedDate.Equals(cc.Fecha_In))
                {

                }



                if (Clientes_FechaSalida.SelectedDate.Equals(cc.Fecha_Out))
                {

                }

                if (Clientes_HoraEntrada.Text == null)
                {
                    Clientes_HoraEntrada.Text = "0:00";
                }
                if (Clientes_HoraSalida.Text == null)
                {
                    Clientes_HoraSalida.Text = "0:00";
                }

                if (Fecha_Entrada_Estado.SelectedDate.Equals(cc.fecha_entrada_estado))
                {

                }

                if (Fecha_Contrato.SelectedDate.Equals(cc.fecha_contrato))
                {

                }
                if (Fecha_Pago.SelectedDate.Equals(cc.fecha_pago))
                {

                }

                if (p.id == null)
                    p.id = 0;

                //console.writeline(p.id + " " + cc.n_plaza);
                bool pos = false;
                if (bdr2.HorizontalAlignment == HorizontalAlignment.Left)
                    pos = true;

                string cd = "";
                string cd2 = "";
                if (cc.caducidad.Contains("/"))
                {
                    cd = cc.caducidad.Split('/')[0];
                    cd2 = cc.caducidad.Split('/')[1];
                }
                //console.writeline(p.id + " " + cc.n_plaza);
                if (numero_secreto.Text.Equals(cc.numero_secreto.ToString()) && caducidad.Text.Equals(cd) && caducidad1.Text.Equals(cd2) && titular_tarjeta.Text.Equals(cc.titular) && numero_tarjeta.Text.Equals(cc.n_tarjeta.ToString()) && mail_cliente.Text.Equals(cc.mail) && telefonos_cliente2.Text.Equals(cc.telefon2) && telefonos_cliente.Text.Equals(cc.telefon1) && pais.Text.Equals(cc.Pais) && provincia.Text.Equals(cc.Provincia) && poblacion_cliente.Text.Equals(cc.poblacio) && CP.Text.Equals(cc.codigo_postal) && puerta.Text.Equals(cc.Puerta) && piso.Text.Equals(cc.Piso) && numero.Text.Equals(cc.Numero) && direccion_cliente.Text.Equals(cc.direccion) && dni.Text.Equals(cc.dni) && apellidos_cliente.Text.Equals(cc.apellidos_cliente) && nombre_cliente.Text.Equals(cc.nombre_cliente) && numero_cliente.Text.Equals(cc.n_cliemte + "") && Clientes_FechaEntrada.SelectedDate == cc.Fecha_In && Clientes_FechaSalida.SelectedDate == cc.Fecha_Out && vehiculo1.Text.Equals(cc.Vehiculo1) && matricula1.Text.Equals(cc.matricula1) && vehiculo2.Text.Equals(cc.Vehiculo2) && matricula2.Text.Equals(cc.matricula2) && vehiculo3.Text.Equals(cc.Vehiculo3) && matricula3.Text.Equals(cc.matricula3) && vehiculo4.Text.Equals(cc.Vehiculo4) && matricula2.Text.Equals(cc.matricula2) && pot == cc.Potencia && nota1.Text.Equals(cc.Nota1) && p.id == int.Parse(cc.n_plaza) && Clientes_HoraEntrada.Text.Equals(cc.Hora_entrada) && Clientes_HoraSalida.Text.Equals(cc.Hora_salida) && Iban.Text.Equals(cc.iban) && Swift.Text.Equals(cc.swift) && entidad_bancaria.Text.Equals(cc.entidad_bacnaria) && Iban2.Text.Equals(cc.iban2) && Swift2.Text.Equals(cc.swift2) && entidad_bancaria2.Text.Equals(cc.entidad_bacnaria2) && mail_cliente2.Text.Equals(cc.mail2) && pos == cc.DeBaja && Fecha_Entrada_Estado.SelectedDate == cc.fecha_entrada_estado && Fecha_Contrato.SelectedDate == cc.fecha_contrato && Fecha_Pago.SelectedDate == cc.fecha_pago && medidas_vehiculo1.Text.Equals(cc.Medidas_Vehiculo1))
                {
                    Console.WriteLine("27479");
                    change_client.IsEnabled = false;

                    change_client.IsEnabled = false;
                    safe = false;
                    //añadir_evento.IsEnabled = false;
                }
                else
                {
                    Console.WriteLine("!27479");
                    change_client.IsEnabled = true;

                    change_client.IsEnabled = true;
                    safe = true;
                    //añadir_evento.IsEnabled = true;
                }
            }
        }

        private void Clientes_FechaSalida_SelectedDateChanged(object sender, SelectionChangedEventArgs e)
        {
            Clientes cc = Clientes.SelectedItem as Clientes;
            if (!(cc is null))
            {
                if (Clientes_FechaEntrada.SelectedDate.Equals(cc.Fecha_In))
                {

                }

                if (Clientes_HoraEntrada.Text == null)
                {
                    Clientes_HoraEntrada.Text = "0:00";
                }
                if (Clientes_HoraSalida.Text == null)
                {
                    Clientes_HoraSalida.Text = "0:00";
                }

                if (Clientes_FechaSalida.SelectedDate.Equals(cc.Fecha_Out))
                {

                }



                if (Fecha_Entrada_Estado.SelectedDate.Equals(cc.fecha_entrada_estado))
                {

                }

                if (Fecha_Contrato.SelectedDate.Equals(cc.fecha_contrato))
                {

                }
                if (Fecha_Pago.SelectedDate.Equals(cc.fecha_pago))
                {

                }
                int pot = 0;
                if (Potencia.SelectedItem != null)
                {
                    Potencia ppp = Potencia.SelectedItem as Potencia;
                    pot = ppp.Id;
                }

                /*int b = 0;
                if (Switch.IsChecked.Value)
                {
                    b = 1;
                }*/

                Parcelas p = numero_plaza.SelectedItem as Parcelas;
                if (p == null)
                {
                    p = new Parcelas();
                    p.id = 0;
                }
                bool pos = false;
                if (bdr2.HorizontalAlignment == HorizontalAlignment.Left)
                    pos = true;
                //console.writeline(p.id + " " + cc.n_plaza);

                string cd = "";
                string cd2 = "";
                if (cc.caducidad.Contains("/"))
                {
                    cd = cc.caducidad.Split('/')[0];
                    cd2 = cc.caducidad.Split('/')[1];
                }
                Console.WriteLine(numero_secreto.Text.Equals(cc.numero_secreto.ToString()));
                Console.WriteLine(caducidad.Text.Equals(cd));
                Console.WriteLine(caducidad1.Text.Equals(cd2));
                Console.WriteLine(titular_tarjeta.Text.Equals(cc.titular));
                Console.WriteLine(numero_tarjeta.Text.Equals(cc.n_tarjeta.ToString()));
                Console.WriteLine(mail_cliente.Text.Equals(cc.mail));
                Console.WriteLine(telefonos_cliente2.Text.Equals(cc.telefon2));
                Console.WriteLine(telefonos_cliente.Text.Equals(cc.telefon1));
                Console.WriteLine(pais.Text.Equals(cc.Pais));
                Console.WriteLine(provincia.Text.Equals(cc.Provincia)); Console.WriteLine(poblacion_cliente.Text.Equals(cc.poblacio)); Console.WriteLine(CP.Text.Equals(cc.codigo_postal)); Console.WriteLine(puerta.Text.Equals(cc.Puerta)); Console.WriteLine(piso.Text.Equals(cc.Piso)); Console.WriteLine(numero.Text.Equals(cc.Numero)); Console.WriteLine(direccion_cliente.Text.Equals(cc.direccion)); Console.WriteLine(dni.Text.Equals(cc.dni)); Console.WriteLine(apellidos_cliente.Text.Equals(cc.apellidos_cliente)); Console.WriteLine(nombre_cliente.Text.Equals(cc.nombre_cliente)); 
                Console.WriteLine(numero_cliente.Text.Equals(cc.n_cliemte+"")); 
               //Console.WriteLine(b.Equals(cc.Switch+"")); 
                Console.WriteLine(p.id.ToString().Equals(cc.n_plaza+"")); Console.WriteLine(Clientes_HoraEntrada.Text.Equals(cc.Hora_entrada)); Console.WriteLine(Clientes_HoraSalida.Text.Equals(cc.Hora_salida)); Console.WriteLine(Iban.Text.Equals(cc.iban)); Console.WriteLine(Swift.Text.Equals(cc.swift)); Console.WriteLine(entidad_bancaria.Text.Equals(cc.entidad_bacnaria)); Console.WriteLine(Iban2.Text.Equals(cc.iban2)); Console.WriteLine(Swift2.Text.Equals(cc.swift2)); Console.WriteLine(entidad_bancaria2.Text.Equals(cc.entidad_bacnaria2)); Console.WriteLine(mail_cliente2.Text.Equals(cc.mail2)); 
                Console.WriteLine((pos == cc.DeBaja)); Console.WriteLine(Fecha_Entrada_Estado.SelectedDate==cc.fecha_entrada_estado); Console.WriteLine(Fecha_Contrato.SelectedDate==cc.fecha_contrato); Console.WriteLine(Fecha_Pago.SelectedDate==cc.fecha_pago); Console.WriteLine(medidas_vehiculo1.Text.Equals(cc.Medidas_Vehiculo1));

                if (numero_secreto.Text.Equals(cc.numero_secreto.ToString()) && caducidad.Text.Equals(cd) && caducidad1.Text.Equals(cd2) && titular_tarjeta.Text.Equals(cc.titular) && numero_tarjeta.Text.Equals(cc.n_tarjeta.ToString()) && mail_cliente.Text.Equals(cc.mail) && telefonos_cliente2.Text.Equals(cc.telefon2) && telefonos_cliente.Text.Equals(cc.telefon1) && pais.Text.Equals(cc.Pais) && provincia.Text.Equals(cc.Provincia) && poblacion_cliente.Text.Equals(cc.poblacio) && CP.Text.Equals(cc.codigo_postal) && puerta.Text.Equals(cc.Puerta) && piso.Text.Equals(cc.Piso) && numero.Text.Equals(cc.Numero) && direccion_cliente.Text.Equals(cc.direccion) && dni.Text.Equals(cc.dni) && apellidos_cliente.Text.Equals(cc.apellidos_cliente) && nombre_cliente.Text.Equals(cc.nombre_cliente) && numero_cliente.Text.Equals(cc.n_cliemte + "") && Clientes_FechaEntrada.SelectedDate == cc.Fecha_In && Clientes_FechaSalida.SelectedDate == cc.Fecha_Out && vehiculo1.Text.Equals(cc.Vehiculo1) && matricula1.Text.Equals(cc.matricula1) && vehiculo2.Text.Equals(cc.Vehiculo2) && matricula2.Text.Equals(cc.matricula2) && vehiculo3.Text.Equals(cc.Vehiculo3) && matricula3.Text.Equals(cc.matricula3) && vehiculo4.Text.Equals(cc.Vehiculo4) && matricula2.Text.Equals(cc.matricula2) && pot == cc.Potencia && nota1.Text.Equals(cc.Nota1) && p.id == int.Parse(cc.n_plaza) && Clientes_HoraEntrada.Text.Equals(cc.Hora_entrada) && Clientes_HoraSalida.Text.Equals(cc.Hora_salida) && Iban.Text.Equals(cc.iban) && Swift.Text.Equals(cc.swift) && entidad_bancaria.Text.Equals(cc.entidad_bacnaria) && Iban2.Text.Equals(cc.iban2) && Swift2.Text.Equals(cc.swift2) && entidad_bancaria2.Text.Equals(cc.entidad_bacnaria2) && mail_cliente2.Text.Equals(cc.mail2) && pos == cc.DeBaja && Fecha_Entrada_Estado.SelectedDate == cc.fecha_entrada_estado && Fecha_Contrato.SelectedDate == cc.fecha_contrato && Fecha_Pago.SelectedDate == cc.fecha_pago && medidas_vehiculo1.Text.Equals(cc.Medidas_Vehiculo1))
                {
                    Console.WriteLine("27584");
                    change_client.IsEnabled = false;

                    change_client.IsEnabled = false;
                    safe = false;
                    //añadir_evento.IsEnabled = false;
                }
                else
                {
                    Console.WriteLine("!27584");
                    change_client.IsEnabled = true;

                    change_client.IsEnabled = true;
                    safe = true;
                    //añadir_evento.IsEnabled = true;
                }
               

                if (!(numero_cliente.Text.Equals(cc.n_cliemte + "")))
                {
                    numero_cliente.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    numero_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                Parcelas pr = numero_plaza.SelectedItem as Parcelas;
                if (pr != null)
                {
                    if (cc.n_plaza != pr.id + "")
                    {

                        numero_plaza.Foreground = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        numero_plaza.Foreground = Brushes.Black;

                    }
                }
                else
                {
                    if (numero_plaza.SelectedItem != null)
                        numero_plaza.BorderBrush = Brushes.Red;
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        numero_plaza.Foreground = Brushes.Black;
                    }
                }

                Potencia pp = Potencia.SelectedItem as Potencia;
                if (pp != null)
                {
                    if (cc.Potencia != pp.Id )
                    {

                        Potencia.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Potencia.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }
                }
                else
                {
                    if (Potencia.SelectedItem != null)
                        Potencia.BorderBrush = Brushes.Red;
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Potencia.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }
                }

                if (!(cc.nombre_cliente.Equals(nombre_cliente.Text)))
                {
                    nombre_cliente.BorderBrush = Brushes.Red;


                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    nombre_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                }


                if (!(cc.apellidos_cliente.Equals(apellidos_cliente.Text)))
                {
                    apellidos_cliente.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    apellidos_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                }


                if (!(cc.dni.Equals(dni.Text)))
                {
                    dni.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    dni.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                }



                if (!(cc.direccion.Equals(direccion_cliente.Text)))
                {

                    direccion_cliente.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    direccion_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                }

                if (!(cc.poblacio.Equals(poblacion_cliente.Text)))
                {
                    poblacion_cliente.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    poblacion_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                }

                if (!(cc.telefon1.Equals(telefonos_cliente.Text)))
                {

                    telefonos_cliente.BorderBrush = Brushes.Red;


                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    telefonos_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                }

                if (!(cc.telefon2.Equals(telefonos_cliente2.Text)))
                {
                    telefonos_cliente2.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    telefonos_cliente2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                }

                if (!cc.codigo_postal.Equals(CP.Text))
                {
                    CP.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    CP.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                }
                if (!(cc.mail.Equals(mail_cliente.Text)))
                {
                    mail_cliente.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    mail_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                }
                if (!(cc.mail2.Equals(mail_cliente2.Text)))
                {
                    mail_cliente2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    mail_cliente2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                }

                /*u.Luz = "s";
                u.Nota1 = "";
                u.Nota2 = "";*/
                /*if (!(cc.Metodo_Pago.ToString().Equals(Metodo_pago.Text)))
                {
                    a = true;
                    sql_query += "Metodo_Pago=" + Metodo_pago.SelectedIndex + ", ";
                    parametros.Add("Metodo_Pago:" + Metodo_pago.SelectedIndex);
                }*/

                if (!(cc.titular.Equals(titular_tarjeta.Text)))
                {
                    titular_tarjeta.BorderBrush = Brushes.Red;


                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    titular_tarjeta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                }
                string fecha = caducidad + "/" + caducidad1;
                if (cc.caducidad.Contains("/"))
                    if (!(cc.caducidad.Equals(caducidad.Text + "/" + caducidad1.Text)))
                    {
                        caducidad.BorderBrush = Brushes.Red;
                        caducidad1.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        caducidad.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        caducidad1.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }



                if (!(cc.numero_secreto.Equals(numero_secreto.Text)))
                {
                    numero_secreto.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    numero_secreto.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                }

                if (!(cc.n_tarjeta.Equals(numero_tarjeta.Text)))
                {
                    numero_tarjeta.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    numero_tarjeta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                }

                if (!(cc.entidad_bacnaria.Equals(entidad_bancaria.Text)))
                {
                    entidad_bancaria.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    entidad_bancaria.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                }

                if (!(cc.iban.Equals(Iban.Text)))
                {
                    Iban.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Iban.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                }

                if (!(cc.swift.Equals(Swift.Text)))
                {
                    Swift.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Swift.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                }



                if (!(cc.Pais.Equals(pais.Text)))
                {
                    pais.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    pais.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                }
                if (!(cc.Numero.Equals(numero.Text)))
                {
                    numero.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    numero.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                }
                if (!(cc.Piso.Equals(piso.Text)))
                {
                    piso.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    piso.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                }
                if (!(cc.Puerta.Equals(puerta.Text)))
                {
                    puerta.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    puerta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                }
                if (!(cc.Provincia.Equals(provincia.Text)))
                {
                    provincia.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    provincia.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                }



                if (!(Clientes_FechaEntrada.SelectedDate.Equals(cc.Fecha_In)) && Clientes_FechaEntrada.SelectedDate != null)
                {
                    Clientes_FechaEntrada.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Clientes_FechaEntrada.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                }
                if (!(Clientes_FechaSalida.SelectedDate.Equals(cc.Fecha_Out)))
                {
                    Clientes_FechaSalida.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Clientes_FechaSalida.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                }

                if (!(vehiculo1.Text.Equals(cc.Vehiculo1)))
                {
                    vehiculo1.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    vehiculo1.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                }
                if (!(matricula1.Text.Equals(cc.matricula1)))
                {
                    matricula1.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    matricula1.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                }

               

                if (!(vehiculo2.Text.Equals(cc.Vehiculo2)))
                {
                    vehiculo2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    vehiculo2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                }
                if (!(matricula2.Text.Equals(cc.matricula2)))
                {
                    matricula2.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    matricula2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                }

               
                int pott = 0;
                if (Potencia.SelectedItem != null)
                {
                    Potencia poten = Potencia.SelectedItem as Potencia;
                    if (cc.Potencia != poten.Id)
                    {
                        Potencia.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Potencia.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }
                }


                int b2 = 0;
                if (Switch.IsChecked.Value)
                {
                    b2 = 1;
                }
                if (b2 != cc.Switch)
                {
                    Switch.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Switch.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                }





                if (!nota1.Text.Equals(cc.Nota1))
                {

                    nota1.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    nota1.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                }

                DateTime dt2 = (DateTime)Clientes_HoraEntrada.Value;

                if (!dt2.ToString("H:mm").Equals(cc.Hora_entrada))
                {
                    Clientes_HoraEntrada.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Clientes_HoraEntrada.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                }
                DateTime dt3 = (DateTime)Clientes_HoraSalida.Value;
                if (!dt3.ToString("H:mm").Equals(cc.Hora_salida))
                {
                    Clientes_HoraSalida.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Clientes_HoraSalida.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                }

                if (!(cc.entidad_bacnaria2.Equals(entidad_bancaria2.Text)))
                {

                    entidad_bancaria2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    entidad_bancaria2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                }

                if (!(cc.iban2.Equals(Iban2.Text)))
                {
                    Iban2.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Iban2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                }

                if (!(cc.swift2.Equals(Swift2.Text)))
                {
                    Swift2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Swift2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                }

                bool bb = false;
                if (bdr2.HorizontalAlignment == HorizontalAlignment.Left)
                    pos = true;
                /*if (!(cc.DeBaja == bb))
                {
                    numero_cliente.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    apellidos_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                }*/


                if (!Fecha_Entrada_Estado.SelectedDate.Equals(cc.fecha_entrada_estado))
                {
                    Fecha_Entrada_Estado.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Fecha_Entrada_Estado.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                }

                if (!Fecha_Contrato.SelectedDate.Equals(cc.fecha_contrato))
                {
                    Fecha_Contrato.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Fecha_Contrato.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                }

                if (!(cc.fecha_pago.Equals(Fecha_Pago.SelectedDate)))
                {
                    Fecha_Pago.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Fecha_Pago.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                }
                if (!(cc.Medidas_Vehiculo1.Equals(medidas_vehiculo1.Text)))
                {
                    medidas_vehiculo1.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    medidas_vehiculo1.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                }

            }
        }

        private void buscadorClientes_GotFocus(object sender, RoutedEventArgs e)
        {
            //buscadorClientes.Text = "";
        }

        private void buscadorClientes_LostFocus(object sender, RoutedEventArgs e)
        {
           /* if (buscadorClientes.Text.Length == 0)
                buscadorClientes.Text = "Buscar...";*/
        }

        private void mirar(object sender, SelectionChangedEventArgs e)
        {
            if (Iluminacion_Potencia.SelectedItem != null)
            {
                Potencia p = Iluminacion_Potencia.SelectedItem as Potencia;
                if ((Potencia_Nombre.Text.Equals(p.Nombre) || Potencia_Nombre.Text.Length == 0) && (Potencia_Iluminacion.SelectedItem.ToString().Equals(p.Amperios + "") || Potencia_Iluminacion.Text.Length == 0) && (Potencia_Maxima.Text.Equals(p.Amperios_Max + "") || Potencia_Maxima.Text.Length == 0))
                {
                    change_Sistema.IsEnabled = false;
                    safe = false;
                    //mirara
                }
                else
                {
                    change_Sistema.IsEnabled = true;
                    safe = true;
                }
                if (!p.Nombre.Equals(Potencia_Nombre.Text))
                {
                    Potencia_Nombre.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Potencia_Nombre.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                ComboBoxItem cbi = (ComboBoxItem)Potencia_Iluminacion.SelectedItem;

                string s = cbi.Content + "";
                if (!s.Equals(p.Amperios + ""))
                {

                    Potencia_Iluminacion.Foreground = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Potencia_Iluminacion.Foreground = Brushes.Black;
                }



                if (!Potencia_Maxima.Text.Equals(p.Amperios_Max + ""))
                {
                    Potencia_Maxima.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Potencia_Maxima.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
            }
        }

        private void Border_MouseLeftButtonDown_7(object sender, MouseButtonEventArgs e)
        {
            if (e.ClickCount == 2)
            {
                boton2_Mapa_Click(boton2_Mapa, RoutedEventArgs);
                lista_parcelas2.SelectedItem = lista_parcelas.SelectedItem;
            }
        }

        private void Descripción2_TextChanged(object sender, TextChangedEventArgs e)
        {/*
          if (!Orientación2.Text.Equals(p.Orientacion))
                    {
                        a = true;
                        query += "Orientación='" + Orientación2.Text + "',";
                    }
                    if (!Descripción2.Text.Equals(p.Descripción))
                    {
                        a = true;
                        query += "Descripción='" + Descripción2.Text + "',";
                    }
                    if (!Nota_Parcela2.Text.Equals(p.Nota))
                    {
                        a = true;
                        query += "Nota='" + Nota_Parcela2.Text + "',";
                    }
          */
            Parcelas p = lista_parcelas2.SelectedItem as Parcelas;
            if (p != null)
                if ( !Descripción2.Text.Equals(p.Descripción) && !Nota_Parcela2.Text.Equals(p.Nota))
                {
                    change_mapa.IsEnabled = false;
                }
                else
                    change_mapa.IsEnabled = true;
        }

        private void Rol_usuario_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                if (Rol_usuario.SelectedItem != null)
                {
                    Usuarios u = Usuarios.SelectedItem as Usuarios;
                    Roles r = Rol_usuario.SelectedItem as Roles;


                    if (u != null)
                        if ((Nombre_Trabajador.Text.Equals(u.Nombre) || Nombre_Trabajador.Text.Length == 0) && (Apellido1_Trabajador.Text.Equals(u.Apellido1) || Apellido1_Trabajador.Text.Length == 0) && ((Apellido2_Trabajador.Text.Equals(u.Apellido2) || Apellido2_Trabajador.Text.Length == 0)) && (Dni_usuario.Text.Equals(u.Dni_Trabajador) || Dni_usuario.Text.Length == 0) && (Telefono.Text.Equals(u.Telefono) || Telefono.Text.Length == 0) && (Mail.Text.Equals(u.Mail) || Mail.Text.Length == 0) && (direccion_trabajador.Text.Equals(u.Direccion) || direccion_trabajador.Text.Length == 0) && (numero_trabajador.Text.Equals(u.Numero) || numero_trabajador.Text.Length == 0) && (piso_trabajador.Text.Equals(u.Piso) || piso_trabajador.Text.Length == 0) && (puerta_trabajador.Text.Equals(u.Puerta) || puerta.Text.Length == 0) && (CP_trabajador.Text.Equals(u.CP) || CP_trabajador.Text.Length == 0) && (poblacion_trabajador.Text.Equals(u.Poblacion) || poblacion_trabajador.Text.Length == 0) && (codigo_poblacio_trabajador.Text.Equals(u.Provincia) || codigo_poblacio_trabajador.Text.Length == 0) && (codigo_pais_trabajador.Text.Equals(u.Pais) || codigo_pais_trabajador.Text.Length == 0) && (Nota.Text.Equals(u.Nota)) && r.Id == u.Rol)
                        {
                            change_Sistema.IsEnabled = false;
                            safe = false;
                        }
                        else
                        {
                            change_Sistema.IsEnabled = true;
                            safe = true;
                        }
                }
                else
                {
                    change_Sistema.IsEnabled = false;
                    safe = false;
                }
            }
            catch (Exception ee)
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                Peta(ee, line + "");
            }
        }

        private void Nombre_Parcela_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (!editar)
            {
                if (Nombre_Parcela.Text.Length > 0)
                {


                    Parcelas p = lprc.Find(x => x.nom.Equals(Nombre_Parcela.Text));
                    if (p != null)
                    {
                        Nombre_Parcela.Background = Brushes.Red;
                        change_mapa.IsEnabled = false;
                    }
                    else
                    {
                        Nombre_Parcela.Background = Brushes.Transparent;
                        change_mapa.IsEnabled = true;
                    }
                }
                else
                {
                    change_mapa.IsEnabled = false;
                }

                if (Distrito.Text.Length > 0 && lbtn.Count > 0)
                {
                    change_mapa.IsEnabled = true;
                }
                else
                {
                    change_mapa.IsEnabled = false;
                }




            }
            else
            {
                change_mapa.IsEnabled = true;
                if (lista_parcelas.SelectedItem != null)
                {
                    Parcelas p = lista_parcelas.SelectedItem as Parcelas;

                    if (p.nom.Equals(Nombre_Parcela.Text) && p.Distrito.Equals(Distrito.Text) && Meidas_Parcela.Text.Equals(p.Medidas) && Orientación.Text.Equals(p.Orientacion) && Descripción.Text.Equals(p.Descripción) && Nota_Parcela.Text.Equals(p.Nota))
                        change_mapa.IsEnabled = false;
                    else
                        change_mapa.IsEnabled = true;
                    if (Direccion_Parcela.SelectedItem != null)
                    {
                        Direcciones d = Direccion_Parcela.SelectedItem as Direcciones;
                        if (p.Direccion != d.Id)
                        {
                            Direccion_Parcela.Foreground = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Direccion_Parcela.Foreground = Brushes.Black;
                        }
                    }
                    if (!Nombre_Parcela.Text.Equals(p.nom))
                    {
                        Nombre_Parcela.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Nombre_Parcela.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }
                    if (!Descripción.Text.Equals(p.Descripción))
                    {

                        Descripción.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Descripción.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }
                    if (!Distrito.Text.Equals(p.Distrito))
                    {
                        Distrito.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Distrito.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }

                    if (!Orientación.Text.Equals(p.Orientacion))
                    {
                        Orientación.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Orientación.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }
                    if (!Nota_Parcela.Text.Equals(p.Nota))
                    {
                        Nota_Parcela.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Nota_Parcela.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }
                    if (!Meidas_Parcela.Text.Equals(p.Medidas))
                    {
                        Nota_Parcela.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Nota_Parcela.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }
                }

            }
        }

        private void Iluminacion_Potencia_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                if (Iluminacion_Potencia.SelectedItem != null)
                {
                    Potencia p = Iluminacion_Potencia.SelectedItem as Potencia;
                    Potencia_Nombre.Text = p.Nombre;
                    if (p.Amperios < 16)
                        if (p.Amperios < 10)
                            Potencia_Iluminacion.SelectedIndex = 0;
                        else
                            Potencia_Iluminacion.SelectedIndex = 1;
                    else
                        Potencia_Iluminacion.SelectedIndex = 2;
                    Potencia_Iluminacion.SelectedItem = p.Amperios;
                    Potencia_Maxima.Text = p.Amperios_Max + "";
                    Iluminacion_Alarmas.Items.Clear();
                    foreach (Alarma a in p.Lista_Alarmas)
                    {
                        Iluminacion_Alarmas.Items.Add(a);
                    }

                    Boton_Alarmas.IsEnabled = true;
                    Boton_Alarmas.Visibility = Visibility.Visible;
                    Potencia_Nombre.Visibility = Visibility.Visible;
                    Potencia_Iluminacion.Visibility = Visibility.Visible;
                    Potencia_Maxima.Visibility = Visibility.Visible;
                    Iluminacion_Alarmas.Visibility = Visibility.Visible;
                    editSistema.Visibility = Visibility.Visible;
                    deleteSistema.Visibility = Visibility.Visible;
                    Contenido_contrato.Visibility = Visibility.Visible;



                }
                else
                {
                    Potencia_Nombre.Text = "";
                    Potencia_Iluminacion.Text = "";
                    Potencia_Maxima.Text = "";
                    Iluminacion_Alarmas.Items.Clear();

                    Boton_Alarmas.IsEnabled = false;
                    Boton_Alarmas.Visibility = Visibility.Hidden;
                    Potencia_Nombre.Visibility = Visibility.Hidden;
                    Potencia_Iluminacion.Visibility = Visibility.Hidden;
                    Potencia_Maxima.Visibility = Visibility.Hidden;
                    Iluminacion_Alarmas.Visibility = Visibility.Hidden;
                    editSistema.Visibility = Visibility.Collapsed;
                    deleteSistema.Visibility = Visibility.Collapsed;

                    Contenido_contrato.Visibility = Visibility.Collapsed;
                }
                safe = false;
                ComprobarRoles();
            }
            catch (Exception ee)
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                Peta(ee, line + "");
            }
        }

        private void Crepusculo_Lunes_Off_TextChanged(object sender, TextChangedEventArgs e)
        {

        }

        private void Potencia_Nombre_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (Iluminacion_Potencia.SelectedItem != null&& Potencia_Iluminacion.SelectedItem!=null)
            {
                try
                {
                    Potencia p = Iluminacion_Potencia.SelectedItem as Potencia;
                    if ((Potencia_Nombre.Text.Equals(p.Nombre) || Potencia_Nombre.Text.Length == 0) && (Potencia_Iluminacion.SelectedItem.ToString().Equals(p.Amperios + "") || Potencia_Iluminacion.Text.Length == 0) && (Potencia_Maxima.Text.Equals(p.Amperios_Max + "") || Potencia_Maxima.Text.Length == 0))
                    {
                        change_Sistema.IsEnabled = false;
                        safe = false;
                        //mirara
                    }
                    else
                    {
                        change_Sistema.IsEnabled = true;
                        safe = true;
                    }

                    if (!p.Nombre.Equals(Potencia_Nombre.Text))
                    {
                        Potencia_Nombre.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Potencia_Nombre.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }



                    ComboBoxItem cbi = (ComboBoxItem)Potencia_Iluminacion.SelectedItem;

                    string s = cbi.Content + "";

                    if (!s.Equals(p.Amperios + ""))
                    {
                        Potencia_Iluminacion.Foreground = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Potencia_Iluminacion.Foreground = Brushes.Black;
                    }

                    if (!Potencia_Maxima.Text.Equals(p.Amperios_Max + ""))
                    {
                        Potencia_Maxima.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Potencia_Maxima.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }
                }
                catch (Exception ee){
                    var st = new StackTrace(ee, true); // Get the top stack frame var frame = st.GetFrame(0); // Get the line number from the stack frame   var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                    var frame = st.GetFrame(0);
                    var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                    Peta(ee, line + "");
                }
            }
        }

        private void Boton_Alarmas_Click(object sender, RoutedEventArgs e)
        {
            if (Iluminacion_Potencia.SelectedItem != null)
            {
                valr.Close();
                Potencia p = Iluminacion_Potencia.SelectedItem as Potencia;
                valr = new VentanaAlarmas(lalr.Select(x => x).Where(x => x.Potencia == p.Id).ToList(), p, Iluminacion_Alarmas.SelectedIndex, permisos);


                valr.Show();
            }

        }
        private void scrollMapa_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            if (!ok)
            {
                point = Mouse.GetPosition(scrollMapa);
            }



        }

        private void viewBoxCamping_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            if (!ok)
                point = null;
        }

        private void scrollMapa_MouseLeave(object sender, MouseEventArgs e)
        {
            if (!ok)
                point = null;
        }

        private void Switch_Unchecked(object sender, RoutedEventArgs e)
        {
            Clientes cc = Clientes.SelectedItem as Clientes;
            if (!(cc is null))
            {

                int pot = 0;
                if (Potencia.SelectedItem != null)
                {
                    Potencia pp = Potencia.SelectedItem as Potencia;
                    pot = pp.Id;
                }
                int b = 0;
                if (Switch.IsChecked.Value)
                {
                    b = 1;
                }

                if (bdrpower.HorizontalAlignment != HorizontalAlignment.Left)
                {
                    MouseButtonEventArgs mb = new MouseButtonEventArgs(Mouse.PrimaryDevice, 0, MouseButton.Left);
                    power_MouseLeftButtonDown(power, mb);
                }
                Parcelas p = numero_plaza.SelectedItem as Parcelas;

                if (p == null)
                    p = new Parcelas();

                if (Clientes_FechaEntrada.SelectedDate.Equals(cc.Fecha_In))
                {

                }



                if (Clientes_FechaSalida.SelectedDate.Equals(cc.Fecha_Out))
                {

                }

                if (Clientes_HoraEntrada.Text == null)
                {
                    Clientes_HoraEntrada.Text = "0:00";
                }
                if (Clientes_HoraSalida.Text == null)
                {
                    Clientes_HoraSalida.Text = "0:00";
                }

                if (Fecha_Entrada_Estado.SelectedDate.Equals(cc.fecha_entrada_estado))
                {

                }

                if (Fecha_Contrato.SelectedDate.Equals(cc.fecha_contrato))
                {

                }
                if (Fecha_Pago.SelectedDate.Equals(cc.fecha_pago))
                {

                }
                //Console.WriteLine(numero_secreto.Text.Equals(cc.numero_secreto.ToString()) + " " + caducidad.Text.Equals(cc.caducidad.Split('/')[0]) + " " + caducidad1.Text.Equals(cc.caducidad.Split('/')[1]) + " " + titular_tarjeta.Text.Equals(cc.titular) + " " + numero_tarjeta.Text.Equals(cc.n_tarjeta.ToString()) + " " + mail_cliente.Text.Equals(cc.mail) + " " + telefonos_cliente2.Text.Equals(cc.telefon2) + " " + telefonos_cliente.Text.Equals(cc.telefon1));

                if (p.id == null)
                    p.id = 0;
                string cd = "";
                string cd2 = "";
                if (cc.caducidad.Contains("/"))
                {
                    cd = cc.caducidad.Split('/')[0];
                    cd2 = cc.caducidad.Split('/')[1];
                }

                //console.writeline(p.id + " " + cc.n_plaza);
                bool pos = false;
                if (bdr2.HorizontalAlignment == HorizontalAlignment.Left)
                    pos = true;
                //console.writeline(p.id + " " + cc.n_plaza);
                if (numero_secreto.Text.Equals(cc.numero_secreto.ToString()) && caducidad.Text.Equals(cd) && caducidad1.Text.Equals(cd2) && titular_tarjeta.Text.Equals(cc.titular) && numero_tarjeta.Text.Equals(cc.n_tarjeta.ToString()) && mail_cliente.Text.Equals(cc.mail) && telefonos_cliente2.Text.Equals(cc.telefon2) && telefonos_cliente.Text.Equals(cc.telefon1) && pais.Text.Equals(cc.Pais) && provincia.Text.Equals(cc.Provincia) && poblacion_cliente.Text.Equals(cc.poblacio) && CP.Text.Equals(cc.codigo_postal) && puerta.Text.Equals(cc.Puerta) && piso.Text.Equals(cc.Piso) && numero.Text.Equals(cc.Numero) && direccion_cliente.Text.Equals(cc.direccion) && dni.Text.Equals(cc.dni) && apellidos_cliente.Text.Equals(cc.apellidos_cliente) && nombre_cliente.Text.Equals(cc.nombre_cliente) && numero_cliente.Text.Equals(cc.n_cliemte + "") && Clientes_FechaEntrada.SelectedDate == cc.Fecha_In && Clientes_FechaSalida.SelectedDate == cc.Fecha_Out && vehiculo1.Text.Equals(cc.Vehiculo1) && matricula1.Text.Equals(cc.matricula1) && vehiculo2.Text.Equals(cc.Vehiculo2) && matricula2.Text.Equals(cc.matricula2) && vehiculo3.Text.Equals(cc.Vehiculo3) && matricula3.Text.Equals(cc.matricula3) && vehiculo4.Text.Equals(cc.Vehiculo4) && matricula2.Text.Equals(cc.matricula2) && pot == cc.Potencia && nota1.Text.Equals(cc.Nota1) && p.id == int.Parse(cc.n_plaza) && Clientes_HoraEntrada.Text.Equals(cc.Hora_entrada) && Clientes_HoraSalida.Text.Equals(cc.Hora_salida) && Iban.Text.Equals(cc.iban) && Swift.Text.Equals(cc.swift) && entidad_bancaria.Text.Equals(cc.entidad_bacnaria) && Iban2.Text.Equals(cc.iban2) && Swift2.Text.Equals(cc.swift2) && entidad_bancaria2.Text.Equals(cc.entidad_bacnaria2) && mail_cliente2.Text.Equals(cc.mail2) && pos == cc.DeBaja && Fecha_Entrada_Estado.SelectedDate == cc.fecha_entrada_estado && Fecha_Contrato.SelectedDate == cc.fecha_contrato && Fecha_Pago.SelectedDate == cc.fecha_pago && medidas_vehiculo1.Text.Equals(cc.Medidas_Vehiculo1))
                {
                    Console.WriteLine("28681");
                    change_client.IsEnabled = false;

                    change_client.IsEnabled = false;
                    safe = false;
                    //añadir_evento.IsEnabled = false;
                }
                else
                {
                    Console.WriteLine("!28681");
                    change_client.IsEnabled = true;

                    change_client.IsEnabled = true;
                    safe = true;
                    //añadir_evento.IsEnabled = true;
                }
            }
        }

        private void ScrollViewer_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            if (lvw != null)
                lvw.SelectedItem = null;
            //console.writeline("fas");
            Grid g = sender as Grid;

            ScrollViewer sv = (ScrollViewer)g.Parent;
            Grid gr = (Grid)sv.Parent;
            Button bt = gr.Children[0] as Button;
            Border b = (Border)gr.Parent;

            diaSeleccionado(bt, RoutedEventArgs);
            if (e.ClickCount == 2)
            {
                MouseButtonEventArgs me = new MouseButtonEventArgs(Mouse.PrimaryDevice, 0, MouseButton.Left);
                Button_MouseDoubleClick(bt, me);
            }
        }

        private void Border_MouseLeftButtonDown_8(object sender, MouseButtonEventArgs e)
        {
            if (e.ClickCount == 2)
            {
                valr.Close();
                Potencia p = Iluminacion_Potencia.SelectedItem as Potencia;
                valr = new VentanaAlarmas(lalr.Select(x => x).Where(x => x.Potencia == p.Id).ToList(), p, Iluminacion_Alarmas.SelectedIndex, permisos);

                valr.Show();
            }
        }

        private void Border_MouseLeftButtonDown_9(object sender, MouseButtonEventArgs e)
        {
            ClearMapa1();
            if (ultParc != null)
                ultParc.ParcelaIsSelected = false;

            if (!SomeBool)
            {
                Border b = checpoint.Child as Border;

                checpoint.Background = Brushes.LightGreen;
                b.HorizontalAlignment = HorizontalAlignment.Right;
                lista_parcelas.SelectedItem = null;
                SomeBool = true;
                editarMapa = true;
                Parcelas pp = null;
                
                deletemapa.Visibility = Visibility.Visible;
            }
            else
            {
                Border b = checpoint.Child as Border;

                checpoint.Background = Brushes.LightGray;
                b.HorizontalAlignment = HorizontalAlignment.Left;
                SomeBool = false;
                editarMapa = false;
                deletemapa.Visibility = Visibility.Collapsed;

            }
            ComprobarRoles();

        }

        private void Addnewmapa_Click(object sender, RoutedEventArgs e)
        {
            nuevaparcela = true;
            boton1_Mapa_Click(boton1_Mapa, RoutedEventArgs);
            if (editarMapa == false)
            {
                ClearMapa1();
                if (ultParc != null)
                    ultParc.ParcelaIsSelected = false;
                editarMapa = !editarMapa;
                SomeBool = editarMapa;
                editando = !editarMapa;
                Border b = checpoint.Child as Border;

                checpoint.Background = Brushes.LightGreen;
                b.HorizontalAlignment = HorizontalAlignment.Right;
                SomeBool = true;
            }
            nuevaparcela = false;
        }

        private void editSistema_Click(object sender, RoutedEventArgs e)
        {
            if (usuarios_menu.SelectedIndex == 0)
            {
                if (Usuarios.SelectedItem != null)
                    boton2_Sistema_Click(boton2_Sistema, RoutedEventArgs);
            }
            else if (usuarios_menu.SelectedIndex == 2)
            {
                if (Roles.SelectedItem != null)
                    boton4_Sistema_Click(boton4_Sistema, RoutedEventArgs);

            }
            else if (usuarios_menu.SelectedIndex == 4)
            {
                if (lista_iva.SelectedItem != null)
                    boton6_Sistema_Click(boton6_Sistema, RoutedEventArgs);

            }

        }

        private void Nombre_Parcela2_TextChanged(object sender, TextChangedEventArgs e)
        {

        }

        private void Metodo_Pago_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                if (Facturas.SelectedItem != null)
                {
                    Facturas f = Facturas.SelectedItem as Facturas;
                    bool a = false;
                    if (!Nombre_Cliente_Factura.Text.Equals(f.Nombre_Cliente))
                    {
                        a = true;
                        Nombre_Cliente_Factura.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Nombre_Cliente_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }

                    if (!DNI_Cliente_Factura.Text.Equals(f.DNI_CIF))
                    {
                        a = true;
                        DNI_Cliente_Factura.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        DNI_Cliente_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }
                    if (!Direccion_Camping_Factura.Text.Equals(f.Direccion_Facturacion))
                    {
                        a = true;
                        Direccion_Camping_Factura.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Direccion_Camping_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }
                    if (!Poblacion_Camping_Factura.Text.Equals(f.Poblecion_Facturacion))
                    {
                        a = true;
                        Poblacion_Camping_Factura.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Poblacion_Camping_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }

                    if (!Codigo_Postal_Camping_Factura.Text.Equals(f.CP_Facturacion.ToString()))
                    {
                        Codigo_Postal_Camping_Factura.BorderBrush = Brushes.Red;
                        a = true;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Codigo_Postal_Camping_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }
                    if (!Provincia_Camping_Factura.Text.Equals(f.Provincia_Facturacion))

                    {
                        a = true;
                        Provincia_Camping_Factura.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Provincia_Camping_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }

                    if (!Fecha_Factura.SelectedDate.Equals(f.fecha))
                    {
                        a = true;
                        Fecha_Factura.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Fecha_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }
                    if (!Fecha_Factura_ven.SelectedDate.Equals(f.fecha_ven))
                    {
                        a = true;
                        Fecha_Factura_ven.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Fecha_Factura_ven.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }
                    if (!Base_Imponible.Text.Equals(f.BI.ToString("0.00") + " €"))
                    {
                        a = true;
                        Base_Imponible.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Base_Imponible.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }





                    if (!Direccion_Cliente_Factura.Text.Equals(f.Direccion_Cliente))
                    {
                        a = true;
                        Direccion_Cliente_Factura.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Direccion_Cliente_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }
                    if (!Poblacion_Cliente_Factura.Text.Equals(f.Poblacio_Cliente))
                    {
                        a = true;
                        Poblacion_Cliente_Factura.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Poblacion_Cliente_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }
                    if (!Codigo_Postal_Cliente_Facturacion.Text.Equals(f.CP_Cliente.ToString()))
                    {
                        a = true;
                        Codigo_Postal_Cliente_Facturacion.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Codigo_Postal_Cliente_Facturacion.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }
                    if (!Provincia_Cliente_Factura.Text.Equals(f.Provincia_Cliente))
                    {
                        a = true;
                        Provincia_Cliente_Factura.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Provincia_Cliente_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }



                    if (!Pais_Cliente_Factura.Text.Equals(f.Pais_Cliente))
                    {
                        a = true;
                        Pais_Camping_Factura.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Pais_Cliente_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }

                    if (!Pais_Camping_Factura.Text.Equals(f.Pais_Facturacion))
                    {
                        a = true;
                        Pais_Camping_Factura.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Pais_Camping_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }

                    if (!Empresa.Text.Equals(f.Empresa))
                    {
                        a = true;
                        Empresa.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Empresa.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }


                    if (!Telefono_cliente.Text.Equals(f.Telefono))
                    {
                        a = true;
                        Telefono_cliente.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Telefono_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }
                    if (!Telefono_Camping_Factura.Text.Equals(f.Telefono_Camping))
                    {
                        a = true;
                        Telefono_Camping_Factura.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Telefono_Camping_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }

                    if (!Mail_cliente.Text.Equals(f.Mail))
                    {
                        a = true;
                        Mail_cliente.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Mail_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }

                    if (Metodo_Pago.SelectedIndex != f.Metodo_Pago)
                    {
                        a = true;
                        Metodo_Pago.Foreground = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Metodo_Pago.Foreground = Brushes.Black;
                    }

                    if (f.Lista_productos.Count == Productos.Items.Count)
                    {

                        foreach (Producto p in Productos.Items)
                        {
                            if (!f.Lista_productos.Contains(p))
                            {
                                a = true;
                                Productos.BorderBrush = Brushes.Red;
                                break;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Productos.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                            }

                        }
                    }
                    else
                        a = true;


                    if (a)
                    {
                        change_Factura.IsEnabled = true;
                        safe = true;

                    }
                    else
                    {
                        change_Factura.IsEnabled = false;
                        safe = false;
                    }

                }
            }
            catch (Exception ee)
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                Peta(ee, line + "");
            }
        }

        private void Recibos_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                if (Recibos.SelectedItem != null)
                {
                    Recibos r = Recibos.SelectedItem as Recibos;
                    boton4_Facturab.Visibility = Visibility.Visible;
                    CargarIva();
                    //Productos.Items.Clear();
                    Nombre_Cliente_Factura2.Text = r.Nombre_Cliente;
                    DNI_Cliente_Factura2.Text = r.DNI_CIF;
                    Direccion_Cliente_Factura2.Text = r.Direccion_Cliente;
                    Poblacion_Cliente_Factura2.Text = r.Poblacio_Cliente;
                    Codigo_Postal_Cliente_Facturacion2.Text = r.CP_Cliente;
                    Provincia_Cliente_Factura2.Text = r.Provincia_Cliente;
                    Pais_Cliente_Factura2.Text = r.Pais_Cliente;
                    Mail_cliente2.Text = r.Mail;
                    Telefono_cliente2.Text = r.Telefono;
                    Telefono_Camping_Factura2.Text = r.Telefono_Camping;

                    Direccion_Camping_Factura2.Text = r.Direccion_Facturacion;
                    Poblacion_Camping_Factura2.Text = r.Poblecion_Facturacion;
                    Codigo_Postal_Camping_Factura2.Text = r.CP_Facturacion;
                    Provincia_Camping_Factura2.Text = r.Provincia_Facturacion;
                    Numero_Factura2.Text = r.Id.ToString("000");
                    Empresa2.Text = r.Empresa;
                    Pais_Camping_Factura2.Text = r.Pais_Facturacion;
                    Matricula_cliente2.Text = r.Matricula;
                    Vehiculo_cliente2.Text = r.Vehiculo;
                    Iban_cliente2.Text = r.IBAN;
                    Metodo_Pago2.SelectedIndex = r.Metodo_Pago;
                    Fecha_Factura2.SelectedDate = r.fecha;
                    Descuento2.Text = r.Descuento;
                    if (Descuento2.Text.Length == 0)
                    {
                        Descuento.Text = "0";
                    }
                    Base_Imponible2.Text = r.BI.ToString("0.00") + " €";
                    Cuota_IVA2.Text = r.Cuota_IVA.ToString("0.00") + " €";
                    
                        Importe_Factura2.Text = r.Importe.ToString("0.00") + " €";
                   
                    //console.writeline(r.fecha_ven);
                    DateTime dt = r.fecha_ven;
                    Fecha_Factura_ven2.SelectedDate = dt;
                    List<Producto> lp = new List<Producto>();
                    foreach (Producto p in r.Lista_productos)
                    {

                        p.des = ((float.Parse(p.Cantidad) * float.Parse(p.Precio.Replace(" €", "")) + float.Parse(p.Impuesto.Replace(" €", ""))) - float.Parse(p.Total.Replace(" €", ""))) + " €";
                        if (float.Parse(p.des.Replace(" €", "")) < 0)
                        {
                            p.des = 0 + ".00 €";
                        }
                        if (float.Parse(p.des.Replace(" €", "")) < 0.009f)
                        {
                            p.des = 0 + ".00 €";
                        }
                        lp.Add(p);

                    }
                    //Productos2.ItemsSource = lp;
                    Productos2.Items.Clear();
                    foreach(Producto p in lp)
                    {
                        Productos2.Items.Add(p);
                    }
                    if (Productos2.Items.Count > 17)
                    {
                        AddnewProduct.IsEnabled = false;
                    }
                    else
                    {

                        AddnewProduct.IsEnabled = true;
                    }

                    safe = false;
                    editFactura.Visibility = Visibility.Visible;
                    Save.Visibility = Visibility.Visible;
                    change_Factura.IsEnabled = false;
                    boton4_Facturab.Visibility = Visibility.Visible;
                    deleteFactura.Visibility = Visibility.Visible;
                }
                else
                {
                    Nombre_Cliente_Factura2.Text = "";
                    DNI_Cliente_Factura2.Text = "";
                    Direccion_Cliente_Factura2.Text = "";
                    Poblacion_Cliente_Factura2.Text = "";
                    Codigo_Postal_Cliente_Facturacion2.Text = "";
                    Provincia_Cliente_Factura2.Text = "";
                    Pais_Cliente_Factura2.Text = "";
                    Mail_cliente2.Text = "";
                    Telefono_cliente2.Text = "";

                    Direccion_Camping_Factura2.Text = "";
                    Poblacion_Camping_Factura2.Text = "";
                    Codigo_Postal_Camping_Factura2.Text = "";
                    Provincia_Camping_Factura2.Text = "";
                    Pais_Camping_Factura2.Text = "";

                    Numero_Factura2.Text = "";
                    Fecha_Factura2.SelectedDate = null;
                    Base_Imponible2.Text = "";

                    Cuota_IVA2.Text = "";
                    Importe_Factura2.Text = "";
                    Metodo_Pago2.SelectedIndex = -1;
                    boton4_Facturab.Visibility = Visibility.Collapsed;
                    Productos2.Items.Clear();
                    editFactura.Visibility = Visibility.Collapsed;
                    Save.Visibility = Visibility.Collapsed;
                    safe = false;
                    change_Factura.IsEnabled = true;

                    deleteFactura.Visibility = Visibility.Collapsed;

                }
                ComprobarRoles();
            }
            catch (Exception ee)
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                Peta(ee, line + "");
            }
        }

        private void Border_MouseLeftButtonDown_10(object sender, MouseButtonEventArgs e)
        {
            if (e.ClickCount == 2)
                boton4_Factura_Click(boton4_Factura, RoutedEventArgs);

        }

        private void mirarRecibo(object sender, TextChangedEventArgs e)
        {
           
        }

        private void fecha_SelectedDateChanged(object sender, SelectionChangedEventArgs e)
        {
           
        }



        private void editFactura_Click(object sender, RoutedEventArgs e)
        {
            if (factura_menu.SelectedIndex == 0)
            {
                boton2_Factura_Click(boton2_Factura, RoutedEventArgs);
            }
            if (factura_menu.SelectedIndex == 2)
            {
                boton4_Factura_Click(boton4_Factura, RoutedEventArgs);
            }
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {

            MessageBoxResult result = MessageBox.Show("¿Quieres salir de la aplicacion?", "Atención!", MessageBoxButton.YesNo, MessageBoxImage.Question);
            if (result == MessageBoxResult.No)
            {
                e.Cancel = true;
            }
            else
            {
                if (l == null)
                {
                    _connection.Disconnect();
                    backgroundWorker1.CancelAsync();
                    Environment.Exit(0);
                   
                }
            }


        }

        private void Window_Closed(object sender, EventArgs e)
        {

        }

        private void empresa_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (Empresadatos.Count > 0)
            {
                if (Properties.Settings.Default.Mail.Equals(maill.Text)&& Properties.Settings.Default.pssw.Equals(contraseña.Password)&& Properties.Settings.Default.Asunto.Equals(asunto.Text)&& Properties.Settings.Default.Cuerpo.Equals(cuerpo.Text) && empresa.Text.Equals(Empresadatos[0]) && dir.Text.Equals(Empresadatos[1]) && pob.Text.Equals(Empresadatos[2]) && cp.Text.Equals(Empresadatos[3]) && prov.Text.Equals(Empresadatos[4]) && pais.Text.Equals(Empresadatos[5]) && telefono.Text.Equals(Empresadatos[6]) && cif.Text.Equals(Empresadatos[9])&& serie.Text.Equals(Empresadatos[7])&& numero_serie.Text.Equals(Empresadatos[8]) && Properties.Settings.Default.IP.Equals(Ip_dir.Text) && Properties.Settings.Default.Host.Equals(host.Text) && Properties.Settings.Default.Puerto.Equals(puerto.Text))
                {
                    change_Sistema.IsEnabled = false;
                }
                else
                {
                    change_Sistema.IsEnabled = true;
                }
            }
            else
            {
                change_Sistema.IsEnabled = true;
            }
        }

        public void Generar_Pdf(Object list, string path, int t, PDF pdf)
        {
            
                List<Facturas> l = (List<Facturas>)list;
               
                foreach (Facturas f in l)
                {
                float iva21 = 0;
                float iva10 = 0;
                float iva4 = 0;
                float ivaotros = 0;
                float descuento = 0;
                float totals = 0;

                    string pathPDF = pdf.Path;
                    string pdfname = f.Numero_Factura.Replace(" ", "_") + "_" +f.Nombre_Cliente+ "_" +DateTime.Now.Day.ToString()+"_"+ DateTime.Now.Month.ToString() + "_" + DateTime.Now.Year.ToString() + ".pdf";
                    pdfname.Trim();
                    pdfname = @"\" + pdfname;
                    string filename = path + pdfname;


                    string pathPDF2 = filename;

                    //Objeto para leer el pdf original
                    iTextSharp.text.pdf.PdfReader oReader = new iTextSharp.text.pdf.PdfReader(pathPDF);
                    //Objeto que tiene el tamaño de nuestro documento
                    iTextSharp.text.Rectangle oSize = oReader.GetPageSizeWithRotation(1);
                    //documento de itextsharp para realizar el trabajo asignandole el tamaño del original
                    Document oDocument = new Document(oSize);

                    // Creamos el objeto en el cual haremos la inserción
                    FileStream oFS = new FileStream(pathPDF2, FileMode.Create, FileAccess.Write);
                    PdfWriter oWriter = PdfWriter.GetInstance(oDocument, oFS);
                    oDocument.Open();


                PdfContentByte oPDF = oWriter.DirectContent;



                //bf = BaseFont.CreateFont("Calibri", BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                oPDF.SetColorFill(BaseColor.BLACK);
                //oPDF.SetFontAndSize(bf, 9);
                Font titleFont = FontFactory.GetFont("Calibri", 10, 1, BaseColor.BLACK);
                Font subtitleFont = FontFactory.GetFont("Calibri", 10, new BaseColor(123, 123, 122));
                Font importantNoticeFont = FontFactory.GetFont("Calibri", 10, new BaseColor(123, 123, 122));
                Font importantNoticeFont2 = FontFactory.GetFont("Calibri", 10, new BaseColor(123, 123, 122));
                iTextSharp.text.Paragraph docTitle = new iTextSharp.text.Paragraph(f.Empresa, titleFont);
                iTextSharp.text.Paragraph subTitle = new iTextSharp.text.Paragraph(f.Direccion_Facturacion, subtitleFont);
                iTextSharp.text.Paragraph importantNotice = new iTextSharp.text.Paragraph(f.CP_Facturacion + ", " + f.Poblecion_Facturacion + ", " + f.Pais_Facturacion, importantNoticeFont);
                iTextSharp.text.Paragraph importantNotice2 = new iTextSharp.text.Paragraph("Telf. " + f.Telefono_Camping, importantNoticeFont2);


                PdfPCell cell = new PdfPCell();
                PdfPCell cellCaveat = new PdfPCell();
                PdfPCell cellImportantNote = new PdfPCell();
                PdfPCell cellImportantNote2 = new PdfPCell();
                PdfPTable table;
                PdfContentByte pcb =oWriter.DirectContent;

               
                    table = new PdfPTable(1); // the arg is the number of columns

                    cell = new PdfPCell(docTitle);


                    cell.Border = PdfPCell.NO_BORDER;
                    cell.FixedHeight = 15f;
                    cell.HorizontalAlignment = Element.ALIGN_LEFT;
                    table.AddCell(cell);
                    cellCaveat = new PdfPCell(subTitle);

                    cellCaveat.Border = PdfPCell.NO_BORDER;
                    cellCaveat.FixedHeight = 15f;
                    table.AddCell(cellCaveat);
                    cellImportantNote = new PdfPCell(importantNotice);

                    cellImportantNote.Border = PdfPCell.NO_BORDER;
                    cellImportantNote.FixedHeight = 15f;
                    table.AddCell(cellImportantNote);

                    cellImportantNote2 = new PdfPCell(importantNotice2);

                    cellImportantNote2.Border = PdfPCell.NO_BORDER;
                    cell.FixedHeight = 15f;
                    table.AddCell(cellImportantNote2);
                if (t == 0)
                {
                    iTextSharp.text.Paragraph importantNotice3 = new iTextSharp.text.Paragraph("CIF: B64787906", importantNoticeFont2);
                    cell = new PdfPCell(importantNotice3);
                    cell.Border = PdfPCell.NO_BORDER;
                    cell.FixedHeight = 15f;
                    cell.HorizontalAlignment = Element.ALIGN_LEFT;
                    table.AddCell(cell);
                }
                table.TotalWidth = 595f;
                    table.WriteSelectedRows(0, -1, 40, 738, pcb);
               


                // Now we've added 2 rows: two rows will be shown:



                //////////////////////////////////////////////////////////////////////
                //////
                //Datos Cliente////////////////////////////////////////////////////////
                //////
                //////////////////////////////////////////////////////////////////////

                pcb = oWriter.DirectContent;
                table = new PdfPTable(1);
                table.TotalWidth = 595;

                // there isn't any content in the table: there's nothing to write yet

                // Inner middle row.
                titleFont = FontFactory.GetFont("Calibri", 10, 1, BaseColor.BLACK);
                
                docTitle = new iTextSharp.text.Paragraph("FACTURA PARA", titleFont);
                foreach(Producto p in f.Lista_productos)
                Console.WriteLine(p.Id+" "+p.Descuento);
                Font titleFont2 = FontFactory.GetFont("Calibri", 10, new BaseColor(123, 123, 122));
                iTextSharp.text.Paragraph docTitle2 = new iTextSharp.text.Paragraph(f.Nombre_Cliente, titleFont2);

                subtitleFont = FontFactory.GetFont("Calibri", 10, new BaseColor(123, 123, 122));
                iTextSharp.text.Paragraph docTitle7 = new iTextSharp.text.Paragraph(f.DNI_CIF, subtitleFont);
                subTitle = new iTextSharp.text.Paragraph(f.Direccion_Cliente, subtitleFont);

                importantNoticeFont = FontFactory.GetFont("Calibri", 10, new BaseColor(123, 123, 122));
                importantNotice = new iTextSharp.text.Paragraph(f.CP_Cliente + ", " + f.Poblacio_Cliente, importantNoticeFont);

                importantNoticeFont2 = FontFactory.GetFont("Calibri", 10, new BaseColor(123, 123, 122));
                importantNotice2 = new iTextSharp.text.Paragraph(f.Provincia_Cliente + ", " + f.Pais_Cliente, importantNoticeFont2);

                Font titleFont3 = FontFactory.GetFont("Calibri", 10, 1, BaseColor.BLACK);
                iTextSharp.text.Paragraph docTitle3 = new iTextSharp.text.Paragraph("Factura", titleFont3);

                Font titleFont4 = FontFactory.GetFont("Calibri", 8, 1, BaseColor.BLACK);
                iTextSharp.text.Paragraph docTitle4 = new iTextSharp.text.Paragraph("Fecha:", titleFont4);


                Font titleFont5 = FontFactory.GetFont("Calibri", 8, new BaseColor(123, 123, 122));
                iTextSharp.text.Paragraph docTitle5 = new iTextSharp.text.Paragraph(f.Numero_Factura, titleFont5);

                Font titleFont6 = FontFactory.GetFont("Calibri", 8, new BaseColor(123, 123, 122));
                iTextSharp.text.Paragraph docTitle6 = new iTextSharp.text.Paragraph(f.fecha.ToString("dd/MM/yyyy"), titleFont6);

                PdfPCell espacio2; PdfPCell espacio3;

                table = new PdfPTable(1);
                cell = new PdfPCell(docTitle2);
                cell.Border = PdfPCell.NO_BORDER;
                cell.FixedHeight = 15f;
                cell.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(cell);
                cell = new PdfPCell(docTitle7);
                cell.FixedHeight = 15f;
                cell.Border = PdfPCell.NO_BORDER;

                cell.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(cell);


                cellCaveat = new PdfPCell(subTitle);

                cellCaveat.Border = PdfPCell.NO_BORDER;
                cell.FixedHeight = 15f;
                table.AddCell(cellCaveat);
                cellImportantNote = new PdfPCell(importantNotice);

                cellImportantNote.Border = PdfPCell.NO_BORDER;
                cell.FixedHeight = 15f;
                table.AddCell(cellImportantNote);

                cellImportantNote2 = new PdfPCell(importantNotice2);

                cellImportantNote2.Border = PdfPCell.NO_BORDER;
                cell.FixedHeight = 15f;
                //table.AddCell(cellImportantNote2);




                // Now we've added 2 rows: two rows will be shown:
                table.TotalWidth = 595f;
                table.WriteSelectedRows(0, -1, 400, 738, pcb);


                if (t != 3) { 
                table = new PdfPTable(1); cell = new PdfPCell(docTitle3);
                cell.Border = PdfPCell.NO_BORDER;

                cell.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(cell);
                cellCaveat = new PdfPCell(docTitle4);

                cellCaveat.Border = PdfPCell.NO_BORDER;

                //table.AddCell(cellCaveat);
                table.TotalWidth = 595f;
                table.WriteSelectedRows(0, -1, 400, 665, pcb);

                table = new PdfPTable(1); cell = new PdfPCell(docTitle5);
                cell.Border = PdfPCell.NO_BORDER;

                cell.HorizontalAlignment = Element.ALIGN_LEFT;
                //table.AddCell(cell);
                cellCaveat = new PdfPCell(docTitle6);

                cellCaveat.Border = PdfPCell.NO_BORDER;

                //table.AddCell(cellCaveat);
                table.TotalWidth = 595f;
                table.WriteSelectedRows(0, -1, 470, 665, pcb);
                }
                //////////////////////////////////////////////////////////////////////
                //////
                //Tabla Pedido////////////////////////////////////////////////////////
                //////
                //////////////////////////////////////////////////////////////////////
                ///
                table = new PdfPTable(6);
                float[] anchoDeColumnas = new float[] { 10f, 10f, 10f, 10f, 10f, 10f };
                table.SetWidthPercentage(anchoDeColumnas, oDocument.PageSize);
                //table.DefaultCell.Border = PdfPCell.BOTTOM_BORDER;
                table.DefaultCell.BorderWidthBottom = 5;

                table.DefaultCell.BorderColorBottom = new BaseColor(12, 105, 66);
                titleFont = FontFactory.GetFont("Calibri", 9, 1, new BaseColor(12, 105, 66));
                
                docTitle = new iTextSharp.text.Paragraph("NUM FACTURA", titleFont);
                if (t == 3)
                    docTitle = new iTextSharp.text.Paragraph("", titleFont);
                titleFont3 = FontFactory.GetFont("Calibri", 9, 1, new BaseColor(123, 123, 122));
                docTitle3 = new iTextSharp.text.Paragraph(Math.Round(f.Importe, 2).ToString("0.00") + " €", titleFont3);
                docTitle3.Alignment = Element.ALIGN_LEFT;
                docTitle4 = new iTextSharp.text.Paragraph(" ", titleFont);
                titleFont2 = FontFactory.GetFont("Calibri", 9, 1, new BaseColor(12, 105, 66));
                docTitle2 = new iTextSharp.text.Paragraph("FECHA.", titleFont2);
                docTitle2.Alignment = Element.ALIGN_LEFT;
                subtitleFont = FontFactory.GetFont("Calibri", 9, 1, new BaseColor(12, 105, 66));
                subTitle = new iTextSharp.text.Paragraph("IMPORTE TOTAL", subtitleFont);

                cell = new PdfPCell();
                cell.AddElement(docTitle);

                cell.PaddingTop = -0;
                cell.FixedHeight = 20;
                cell.BorderColor = new BaseColor(12, 105, 66);
                cell.Border = PdfPCell.BOTTOM_BORDER | PdfPCell.TOP_BORDER;
                cell.VerticalAlignment = Element.ALIGN_CENTER; ;
                table.AddCell(cell);

                cell = new PdfPCell();
                cell.PaddingTop = -0;
                f.Numero_Factura.Replace("__", "_");
                iTextSharp.text.Paragraph pppp = new iTextSharp.text.Paragraph(f.Numero_Factura, titleFont3);
                if (t == 3)
                     pppp = new iTextSharp.text.Paragraph("", titleFont3);
                pppp.Alignment = Element.ALIGN_LEFT;
                cell.AddElement(pppp);
                cell.FixedHeight = 20;
                cell.BorderColor = new BaseColor(12, 105, 66);
                cell.Border = PdfPCell.BOTTOM_BORDER | PdfPCell.TOP_BORDER;
                cell.VerticalAlignment = PdfPCell.ALIGN_LEFT;
                cell.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(cell);

                cellCaveat = new PdfPCell();
                pppp = new iTextSharp.text.Paragraph("FECHA FACTURA", titleFont2);
                if (t == 3)
                    pppp = new iTextSharp.text.Paragraph("", titleFont2);
                pppp.Alignment = Element.ALIGN_RIGHT;
                pppp.SpacingAfter = 50;
                cellCaveat.AddElement(pppp);
                cellCaveat.PaddingTop = -0;
                cellCaveat.Border = PdfPCell.BOTTOM_BORDER | PdfPCell.TOP_BORDER;
                cellCaveat.FixedHeight = 20;
                cellCaveat.BorderColor = new BaseColor(12, 105, 66);
                cellCaveat.VerticalAlignment = Element.ALIGN_CENTER;
                cellCaveat.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(cellCaveat);

                cell = new PdfPCell();
                pppp = new iTextSharp.text.Paragraph(f.fecha.ToString("dd/MM/yyyy"), titleFont3);
                if (t == 3)
                    pppp = new iTextSharp.text.Paragraph("", titleFont3);
                pppp.Alignment = Element.ALIGN_CENTER;
                cell.AddElement(pppp);
                cell.PaddingTop = -0;
                cell.PaddingLeft = 10;
                cell.FixedHeight = 20;
                cell.BorderColor = new BaseColor(12, 105, 66);
                cell.Border = PdfPCell.BOTTOM_BORDER | PdfPCell.TOP_BORDER;
                cell.VerticalAlignment = Element.ALIGN_CENTER; 
                cell.HorizontalAlignment = Element.ALIGN_RIGHT;
                table.AddCell(cell);

                cellCaveat = new PdfPCell();
                PdfPCell espacio = new PdfPCell();
                espacio.AddElement(subTitle);
                espacio.PaddingTop = -0;
                espacio.VerticalAlignment = Element.ALIGN_CENTER; ;
                espacio.Border = PdfPCell.BOTTOM_BORDER | PdfPCell.TOP_BORDER;
                espacio.FixedHeight = 20;
                espacio.BorderColor = new BaseColor(12, 105, 66);

                espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(espacio);

                cell = new PdfPCell();
                cell.AddElement(docTitle3);
                cell.PaddingTop = -0;
                cell.FixedHeight = 20;
                cell.BorderColor = new BaseColor(12, 105, 66);
                cell.Border = PdfPCell.BOTTOM_BORDER | PdfPCell.TOP_BORDER;
                cell.VerticalAlignment = Element.ALIGN_CENTER;
                cell.HorizontalAlignment = Element.ALIGN_RIGHT;
                table.AddCell(cell);

                table.TotalWidth = 520;
                table.WriteSelectedRows(0, -1, 40, 610, pcb);

                table = new PdfPTable(6);
                anchoDeColumnas = new float[] { 60f, 15f, 10f, 10f, 10f, 10f };
                table.SetWidthPercentage(anchoDeColumnas, oDocument.PageSize);
                //table.DefaultCell.Border = PdfPCell.BOTTOM_BORDER;
                table.DefaultCell.BorderWidthBottom = 5;

                table.DefaultCell.BorderColorBottom = new BaseColor(12, 105, 66);
                titleFont = FontFactory.GetFont("Calibri", 9, 1, new BaseColor(12, 105, 66));
                docTitle = new iTextSharp.text.Paragraph("Descripción", titleFont);
                titleFont3 = FontFactory.GetFont("Calibri", 9, 1, new BaseColor(123, 123, 122));
                docTitle3 = new iTextSharp.text.Paragraph("Camping", titleFont3);


                docTitle4 = new iTextSharp.text.Paragraph(" ", titleFont);

                titleFont2 = FontFactory.GetFont("Calibri", 9, 1, new BaseColor(12, 105, 66));
                docTitle2 = new iTextSharp.text.Paragraph("Cantid/Noche", titleFont2);
                docTitle2.Alignment = 1;

                subtitleFont = FontFactory.GetFont("Calibri", 9, 1, new BaseColor(12, 105, 66));
                subTitle = new iTextSharp.text.Paragraph("Precio", subtitleFont);
                subTitle.Alignment = 1;
                Font subtitleFont2 = FontFactory.GetFont("Calibri", 9, 1, new BaseColor(12, 105, 66));
                iTextSharp.text.Paragraph subTitle2 = new iTextSharp.text.Paragraph("Tipo IVA", subtitleFont);
                subTitle2.Alignment = 1;
                subTitle2.PaddingTop = 0;
                Font subtitleFont3 = FontFactory.GetFont("Calibri", 9, 1, new BaseColor(12, 105, 66));
                iTextSharp.text.Paragraph subTitle3 = new iTextSharp.text.Paragraph("Importe", subtitleFont);
                subTitle3.Alignment = 1;

                iTextSharp.text.Paragraph subTitle4 = new iTextSharp.text.Paragraph("Descuento", subtitleFont);
                subTitle4.Alignment = 1;
                cell = new PdfPCell();
                cell.AddElement(docTitle);
                cell.FixedHeight = 20;
                cell.PaddingTop = 0;
                cell.BorderColor = new BaseColor(12, 105, 66);
                cell.Border = PdfPCell.BOTTOM_BORDER;
                cell.VerticalAlignment = Element.ALIGN_CENTER;
                table.AddCell(cell);

                cellCaveat = new PdfPCell();

                cellCaveat.AddElement(docTitle2);

                cellCaveat.Border = PdfPCell.BOTTOM_BORDER;

                cellCaveat.PaddingTop = 0;
                cellCaveat.FixedHeight = 20;
                cellCaveat.BorderColor = new BaseColor(12, 105, 66);

                cellCaveat.VerticalAlignment = Element.ALIGN_CENTER; ;

                cellCaveat.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(cellCaveat);

                espacio = new PdfPCell();
                espacio.AddElement(subTitle);
                espacio.PaddingTop = 0;

                espacio.VerticalAlignment = Element.ALIGN_CENTER; ;
                espacio.Border = PdfPCell.BOTTOM_BORDER;
                espacio.FixedHeight = 20;
                espacio.BorderColor = new BaseColor(12, 105, 66);

                espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(espacio);

                espacio = new PdfPCell();
                espacio.AddElement(subTitle2);
                espacio.PaddingTop = 0;
                espacio.VerticalAlignment = Element.ALIGN_CENTER; ;
                espacio.Border = PdfPCell.BOTTOM_BORDER;
                espacio.FixedHeight = 20;
                espacio.BorderColor = new BaseColor(12, 105, 66);

                espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(espacio);

                espacio = new PdfPCell();
                espacio.AddElement(subTitle4);
                espacio.PaddingTop = 0;
                espacio.VerticalAlignment = Element.ALIGN_CENTER; 
                espacio.Border = PdfPCell.BOTTOM_BORDER;
                espacio.FixedHeight = 20;
                espacio.BorderColor = new BaseColor(12, 105, 66);

                espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(espacio);

                espacio = new PdfPCell();
                espacio.AddElement(subTitle3);
                espacio.PaddingTop = 0;

                espacio.VerticalAlignment = Element.ALIGN_CENTER; ;
                espacio.Border = PdfPCell.BOTTOM_BORDER;
                espacio.FixedHeight = 20;
                espacio.BorderColor = new BaseColor(12, 105, 66);

                espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(espacio);



                table.TotalWidth = 520;
                table.WriteSelectedRows(0, -1, 40, 590, pcb);

               
                int i = 0;
                table = new PdfPTable(6);
                float tasa = 0;
                foreach (Producto s in f.Lista_productos)
                {
                    if(s.Nombre_Producto.ToLower().Contains("tasa turistica"))
                    {

                        float ff = float.Parse(s.Precio.Replace(" €", "")) * float.Parse(s.Cantidad) ;
                        tasa += (float)Math.Round(ff, 2);
                    }
                    if (liva.Find(x => x.Id == int.Parse(s.IVA)).Porcentaje.Equals("21"))
                    {
                        iva21 += float.Parse(s.Cantidad) * float.Parse(s.Precio.Replace("€", "")) * 0.21f;
                    }
                    else if (liva.Find(x => x.Id == int.Parse(s.IVA)).Porcentaje.Equals("10"))
                    {
                        iva10 += float.Parse(s.Cantidad) * float.Parse(s.Precio.Replace("€", "")) * 0.10f;
                    }                    
                    else
                    {
                        ivaotros += float.Parse(s.Cantidad) * float.Parse(s.Precio.Replace("€", "")) * (int.Parse(liva.Find(x => x.Id == int.Parse(s.IVA)).Porcentaje) / 100);
                    }
                    totals += float.Parse(s.Descuento.Replace("€", ""));

                    anchoDeColumnas = new float[] { 60f, 15f, 10f, 10f, 10f,10f };
                    table.SetWidthPercentage(anchoDeColumnas, oDocument.PageSize);
                    //table.DefaultCell.Border = PdfPCell.BOTTOM_BORDER;
                    table.DefaultCell.BorderWidthBottom = 5;

                    table.DefaultCell.BorderColorBottom = new BaseColor(12, 105, 66);
                    titleFont = FontFactory.GetFont("Calibri", 9, 1, new BaseColor(38, 38, 38));
                    docTitle = new iTextSharp.text.Paragraph(s.Nombre_Producto, titleFont);
                    docTitle.Alignment = 0;
                    titleFont3 = FontFactory.GetFont("Calibri", 9, 0, new BaseColor(123, 123, 122));
                    docTitle3 = new iTextSharp.text.Paragraph(s.Cantidad, titleFont3);

                    docTitle3.Alignment = 1;

                    docTitle4 = new iTextSharp.text.Paragraph(" ", titleFont);

                    titleFont2 = FontFactory.GetFont("Calibri", 9, 0, new BaseColor(123, 123, 122));
                    docTitle2 = new iTextSharp.text.Paragraph(s.Cantidad, titleFont2);

                    docTitle2.Alignment = 1;

                    subtitleFont = FontFactory.GetFont("Calibri", 9, 0, new BaseColor(123, 123, 122));
                    subTitle = new iTextSharp.text.Paragraph(s.Precio + " €", subtitleFont);
                    subTitle.Alignment = 2;
                    subtitleFont2 = FontFactory.GetFont("Calibri", 9, 0, new BaseColor(123, 123, 122));
                    subTitle2 = new iTextSharp.text.Paragraph(liva.Find(x => x.Id == int.Parse(s.IVA)).Tipo, subtitleFont);

                    subTitle2.Alignment = 1;
                    subtitleFont3 = FontFactory.GetFont("Calibri", 9, 0, new BaseColor(123, 123, 122));
                    subTitle3 = new iTextSharp.text.Paragraph(s.Total, subtitleFont);
                    subTitle3.Alignment = 2;
                    subTitle4 = new iTextSharp.text.Paragraph(s.descu + " €", subtitleFont);
                    subTitle4.Alignment = 2;

                    if (i == f.Lista_productos.Count() - 1)
                    {
                        cell = new PdfPCell();
                        cell.AddElement(docTitle);
                        cell.FixedHeight = 20;
                        cell.BorderColor = new BaseColor(123, 123, 122);
                        cell.Border = PdfPCell.TOP_BORDER | PdfPCell.BOTTOM_BORDER;
                        cell.VerticalAlignment = Element.ALIGN_CENTER;
                        cell.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell.PaddingTop = -0;
                        table.AddCell(cell);

                        cellCaveat = new PdfPCell();

                        cellCaveat.AddElement(docTitle2);

                        cellCaveat.Border = PdfPCell.TOP_BORDER | PdfPCell.BOTTOM_BORDER;
                        cellCaveat.FixedHeight = 20;
                        cellCaveat.BorderColor = new BaseColor(123, 123, 122);
                        cellCaveat.PaddingTop = -0;
                        cellCaveat.VerticalAlignment = Element.ALIGN_TOP;                        
                        cellCaveat.HorizontalAlignment = Element.ALIGN_CENTER;
                        table.AddCell(cellCaveat);

                        espacio = new PdfPCell();
                        espacio.AddElement(subTitle);
                        espacio.VerticalAlignment = Element.ALIGN_TOP;
                        espacio.Border = PdfPCell.TOP_BORDER | PdfPCell.BOTTOM_BORDER ;
                        espacio.FixedHeight = 20;
                        espacio.PaddingTop = -0;
                        espacio.BorderColor = new BaseColor(123, 123, 122);
                        espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                        table.AddCell(espacio);

                        espacio = new PdfPCell();
                        espacio.AddElement(subTitle2);

                        espacio.PaddingTop = -0;
                        espacio.VerticalAlignment = Element.ALIGN_TOP;
                        espacio.Border = PdfPCell.TOP_BORDER | PdfPCell.BOTTOM_BORDER ;
                        espacio.FixedHeight = 20;
                        espacio.BorderColor = new BaseColor(123, 123, 122);

                        espacio.HorizontalAlignment = Element.ALIGN_CENTER;
                        table.AddCell(espacio);

                        espacio = new PdfPCell();
                        espacio.AddElement(subTitle4);

                        espacio.PaddingTop = -0;
                        espacio.VerticalAlignment = Element.ALIGN_TOP;
                        espacio.Border = PdfPCell.TOP_BORDER | PdfPCell.BOTTOM_BORDER ;
                        espacio.FixedHeight = 20;
                        espacio.BorderColor = new BaseColor(123, 123, 122);

                        espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                        table.AddCell(espacio);

                        espacio = new PdfPCell();
                        espacio.AddElement(subTitle3);
                        espacio.PaddingTop = -0;

                        espacio.VerticalAlignment = Element.ALIGN_TOP; ;
                        espacio.Border = PdfPCell.TOP_BORDER | PdfPCell.BOTTOM_BORDER;
                        espacio.FixedHeight = 20;
                        espacio.BorderColor = new BaseColor(123, 123, 122);

                        espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                        table.AddCell(espacio);
                    }
                    else
                    {
                        cell = new PdfPCell();
                        cell.AddElement(docTitle);
                        cell.FixedHeight = 20;
                        cell.BorderColor = new BaseColor(123, 123, 122);
                        cell.Border = PdfPCell.TOP_BORDER;
                        cell.VerticalAlignment = Element.ALIGN_CENTER;
                        cell.PaddingTop = -0;
                        table.AddCell(cell);

                        cellCaveat = new PdfPCell();

                        cellCaveat.AddElement(docTitle2);

                        cellCaveat.Border = PdfPCell.TOP_BORDER;
                        cellCaveat.FixedHeight = 20;
                        cellCaveat.BorderColor = new BaseColor(123, 123, 122);
                        cellCaveat.PaddingTop = -0;
                        cellCaveat.VerticalAlignment = Element.ALIGN_TOP;

                        cellCaveat.HorizontalAlignment = Element.ALIGN_LEFT;
                        table.AddCell(cellCaveat);

                        espacio = new PdfPCell();
                        espacio.AddElement(subTitle);
                        espacio.VerticalAlignment = Element.ALIGN_TOP;
                        espacio.Border = PdfPCell.TOP_BORDER;
                        espacio.FixedHeight = 20;
                        espacio.PaddingTop = -0;
                        espacio.BorderColor = new BaseColor(123, 123, 122);

                        espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                        table.AddCell(espacio);

                        espacio = new PdfPCell();
                        espacio.AddElement(subTitle2);

                        espacio.PaddingTop = -0;
                        espacio.VerticalAlignment = Element.ALIGN_TOP;
                        espacio.Border = PdfPCell.TOP_BORDER;
                        espacio.FixedHeight = 20;
                        espacio.BorderColor = new BaseColor(123, 123, 122);

                        espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                        table.AddCell(espacio);
                        espacio = new PdfPCell();
                        espacio.AddElement(subTitle4);

                        espacio.PaddingTop = -0;
                        espacio.VerticalAlignment = Element.ALIGN_TOP;
                        espacio.Border = PdfPCell.TOP_BORDER;
                        espacio.FixedHeight = 20;
                        espacio.BorderColor = new BaseColor(123, 123, 122);

                        espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                        table.AddCell(espacio);

                        espacio = new PdfPCell();
                        espacio.AddElement(subTitle3);
                        espacio.PaddingTop = -0;

                        espacio.VerticalAlignment = Element.ALIGN_TOP; ;
                        espacio.Border = PdfPCell.TOP_BORDER;
                        espacio.FixedHeight = 20;
                        espacio.BorderColor = new BaseColor(123, 123, 122);

                        espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                        table.AddCell(espacio);


                    }
                    //List<String> l2 = s.Split('*').ToList();

                    i++;
                }
                table.TotalWidth = 520;
                table.WriteSelectedRows(0, -1, 40, 570, pcb);

                table = new PdfPTable(8);
                table.DefaultCell.BorderWidthBottom = 5;

                table.DefaultCell.BorderColorBottom = new BaseColor(12, 105, 66);
                titleFont = FontFactory.GetFont("Calibri", 9, 1, new BaseColor(12, 105, 66));
                docTitle = new iTextSharp.text.Paragraph("IMPORTE.", titleFont);
                titleFont3 = FontFactory.GetFont("Calibri", 9, 1, new BaseColor(123, 123, 122));


                titleFont2 = FontFactory.GetFont("Calibri", 9, 1, new BaseColor(12, 105, 66));
                docTitle2 = new iTextSharp.text.Paragraph("DESC", titleFont2);

                docTitle2.Alignment = Element.ALIGN_CENTER;
                subtitleFont = FontFactory.GetFont("Calibri", 9, 1, new BaseColor(12, 105, 66));
                subTitle = new iTextSharp.text.Paragraph("BASE IMP.", subtitleFont);
                subTitle.Alignment = Element.ALIGN_CENTER;
                subtitleFont2 = FontFactory.GetFont("Calibri", 9, 1, new BaseColor(12, 105, 66));
                subTitle2 = new iTextSharp.text.Paragraph("IMP. TUR", subtitleFont);
                subTitle2.Alignment = Element.ALIGN_CENTER;
                subtitleFont3 = FontFactory.GetFont("Calibri", 9, 1, new BaseColor(12, 105, 66));
                subTitle3 = new iTextSharp.text.Paragraph("(1) IVA 21%", subtitleFont);
                subTitle3.Alignment = Element.ALIGN_CENTER;
                subTitle4 = new iTextSharp.text.Paragraph("(2) 10%", subtitleFont);
                subTitle4.Alignment = Element.ALIGN_CENTER;
                iTextSharp.text.Paragraph subTitle5 = new iTextSharp.text.Paragraph("(3) OTROS%", subtitleFont);
                subTitle5.Alignment = Element.ALIGN_CENTER;
                iTextSharp.text.Paragraph subTitle6 = new iTextSharp.text.Paragraph("TOTAL", subtitleFont);
                subTitle6.Alignment = Element.ALIGN_RIGHT;
                cell = new PdfPCell();
                cell.AddElement(docTitle);

                cell.PaddingTop = 0;
                cell.FixedHeight = 20;
                cell.PaddingTop = 0;
                cell.BorderColor = new BaseColor(12, 105, 66);
                cell.Border = PdfPCell.BOTTOM_BORDER | PdfPCell.TOP_BORDER;
                cell.VerticalAlignment = Element.ALIGN_CENTER;
                table.AddCell(cell);

                cellCaveat = new PdfPCell();

                cellCaveat.AddElement(docTitle2);

                cellCaveat.PaddingTop = 0;
                cellCaveat.Border = PdfPCell.BOTTOM_BORDER | PdfPCell.TOP_BORDER;

                cellCaveat.PaddingTop = 0;
                cellCaveat.FixedHeight = 20;
                cellCaveat.BorderColor = new BaseColor(12, 105, 66);

                cellCaveat.VerticalAlignment = Element.ALIGN_CENTER; ;

                cellCaveat.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(cellCaveat);

                espacio = new PdfPCell();
                espacio.AddElement(subTitle);
                espacio.PaddingTop = 0;

                espacio.VerticalAlignment = Element.ALIGN_CENTER; ;
                espacio.Border = PdfPCell.BOTTOM_BORDER | PdfPCell.TOP_BORDER;
                espacio.FixedHeight = 20;
                espacio.BorderColor = new BaseColor(12, 105, 66);

                espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(espacio);

                espacio = new PdfPCell();
                espacio.AddElement(subTitle2);

                espacio.PaddingTop = 0;
                espacio.VerticalAlignment = Element.ALIGN_CENTER; ;
                espacio.Border = PdfPCell.BOTTOM_BORDER | PdfPCell.TOP_BORDER;
                espacio.FixedHeight = 20;
                espacio.BorderColor = new BaseColor(12, 105, 66);

                espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(espacio);

                espacio = new PdfPCell();
                espacio.AddElement(subTitle3);
                espacio.PaddingTop = 0;
                espacio.VerticalAlignment = Element.ALIGN_CENTER; ;
                espacio.Border = PdfPCell.BOTTOM_BORDER | PdfPCell.TOP_BORDER;
                espacio.FixedHeight = 20;
                espacio.BorderColor = new BaseColor(12, 105, 66);
                espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(espacio);
                espacio = new PdfPCell();
                espacio.AddElement(subTitle4);
                espacio.PaddingTop = 0;
                espacio.VerticalAlignment = Element.ALIGN_CENTER; ;
                espacio.Border = PdfPCell.BOTTOM_BORDER | PdfPCell.TOP_BORDER;
                espacio.FixedHeight = 20;
                espacio.BorderColor = new BaseColor(12, 105, 66);
                espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(espacio);
                espacio = new PdfPCell();
                espacio.AddElement(subTitle5);
                espacio.PaddingTop = 0;
                espacio.VerticalAlignment = Element.ALIGN_CENTER; ;
                espacio.Border = PdfPCell.BOTTOM_BORDER | PdfPCell.TOP_BORDER;
                espacio.FixedHeight = 20;
                espacio.BorderColor = new BaseColor(12, 105, 66);
                espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(espacio);
                espacio = new PdfPCell();
                espacio.AddElement(subTitle6);
                espacio.PaddingTop = 0;
                espacio.VerticalAlignment = Element.ALIGN_CENTER; ;
                espacio.Border = PdfPCell.BOTTOM_BORDER | PdfPCell.TOP_BORDER;
                espacio.FixedHeight = 20;
                espacio.BorderColor = new BaseColor(12, 105, 66);
                espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(espacio);

                table.DefaultCell.BorderColorBottom = new BaseColor(123, 123, 122);
                titleFont = FontFactory.GetFont("Calibri", 9, 0, new BaseColor(123, 123, 122));
                docTitle = new iTextSharp.text.Paragraph(f.BI.ToString("0.00") + " €", titleFont);
                titleFont3 = FontFactory.GetFont("Calibri", 9, 0, new BaseColor(123, 123, 122));

                titleFont2 = FontFactory.GetFont("Calibri", 9, 0, new BaseColor(123, 123, 122));
                docTitle2 = new iTextSharp.text.Paragraph(f.Descuento+"%", titleFont2);

                docTitle2.Alignment = Element.ALIGN_CENTER;
                float des = float.Parse(f.Descuento)/ 100;
                subtitleFont = FontFactory.GetFont("Calibri", 9, 0, new BaseColor(123, 123, 122));
                
                subTitle = new iTextSharp.text.Paragraph(Math.Round(f.BI*(1-des),2).ToString("0.00") + " €", subtitleFont);
                subTitle.Alignment = Element.ALIGN_CENTER;
                subtitleFont2 = FontFactory.GetFont("Calibri", 9, 0, new BaseColor(123, 123, 122));
                subTitle2 = new iTextSharp.text.Paragraph(tasa.ToString("0.00") + " €", subtitleFont);
                iva21 = 0;
                iva10 = 0;
                ivaotros = 0;
                foreach (Producto s in f.Lista_productos)
                {
                    
                    if (liva.Find(x => x.Id == int.Parse(s.IVA)).Porcentaje.Equals("21"))
                    {
                        float des2 = float.Parse(s.Cantidad) * float.Parse(s.Precio.Replace("€", "")) * (float.Parse(f.Descuento) / 100);
                        iva21 += (float)(Math.Round(float.Parse(s.Cantidad) * float.Parse(s.Precio.Replace("€", "")),2)* (1 - float.Parse(s.Descuento) / 100)) * 0.21f;
                    }
                    else if (liva.Find(x => x.Id == int.Parse(s.IVA)).Porcentaje.Equals("10"))
                    {
                        float des2 = float.Parse(s.Cantidad) * float.Parse(s.Precio.Replace("€", "")) * (float.Parse(f.Descuento) / 100);
                        iva10 += (float)Math.Round(((float)(Math.Round(float.Parse(s.Cantidad) * float.Parse(s.Precio.Replace("€", "")), 2) * (1 - float.Parse(s.Descuento) / 100)  * 0.10f)),2);
                    }
                    else
                    {
                        float des2 = float.Parse(s.Cantidad) * float.Parse(s.Precio.Replace("€", "")) * (float.Parse(f.Descuento) / 100);
                        ivaotros += (float)Math.Round(float.Parse(s.Cantidad) * float.Parse(s.Precio.Replace("€", "")), 2) * (1 - float.Parse(s.Descuento) / 100) * float.Parse(liva.Find(x => x.Id == int.Parse(s.IVA)).Porcentaje) / 100;
                    } 
                }
                iva21= iva21*(1 - float.Parse(f.Descuento) / 100);
                iva10=iva10 * (1 - float.Parse(f.Descuento) / 100);
                ivaotros= ivaotros*(1 - float.Parse(f.Descuento) / 100);

                subTitle2.Alignment = Element.ALIGN_CENTER;
                subtitleFont3 = FontFactory.GetFont("Calibri", 9, 1, BaseColor.BLACK);
                subTitle3 = new iTextSharp.text.Paragraph(Math.Round(iva21 , 2).ToString("0.00") + " €", subtitleFont);
                subTitle3.Alignment = Element.ALIGN_CENTER;
                subTitle4 = new iTextSharp.text.Paragraph(Math.Round(iva10, 2).ToString("0.00") + " €", subtitleFont);
                subTitle4.Alignment = Element.ALIGN_CENTER;
                subTitle5 = new iTextSharp.text.Paragraph(Math.Round(ivaotros , 2).ToString("0.00") + " €", subtitleFont);
                subTitle5.Alignment = Element.ALIGN_CENTER;
                float BI = (float)Math.Round(f.BI * (1 - des), 2);
                subTitle6 = new iTextSharp.text.Paragraph(Math.Round(BI+iva21+iva10+ivaotros+ tasa, 2).ToString("0.00") + " €", subtitleFont3);
                subTitle6.Alignment = Element.ALIGN_RIGHT;
                cell = new PdfPCell();
                cell.AddElement(docTitle);

                cell.PaddingTop = 0;
                cell.FixedHeight = 20;
                cell.PaddingTop = 0;
                cell.BorderColor = new BaseColor(123, 123, 122);
                cell.Border = PdfPCell.BOTTOM_BORDER;
                cell.VerticalAlignment = Element.ALIGN_CENTER;
                table.AddCell(cell);

                cellCaveat = new PdfPCell();

                cellCaveat.AddElement(docTitle2);

                cellCaveat.PaddingTop = 0;
                cellCaveat.Border = PdfPCell.BOTTOM_BORDER;

                cellCaveat.PaddingTop = 0;
                cellCaveat.FixedHeight = 20;
                cellCaveat.BorderColor = new BaseColor(123, 123, 122);

                cellCaveat.VerticalAlignment = Element.ALIGN_CENTER; ;

                cellCaveat.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(cellCaveat);

                espacio = new PdfPCell();
                espacio.AddElement(subTitle);
                espacio.PaddingTop = 0;

                espacio.VerticalAlignment = Element.ALIGN_CENTER; ;
                espacio.Border = PdfPCell.BOTTOM_BORDER;
                espacio.FixedHeight = 20;
                espacio.BorderColor = new BaseColor(123, 123, 122);

                espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(espacio);

                espacio = new PdfPCell();
                espacio.AddElement(subTitle2);

                espacio.PaddingTop = 0;
                espacio.VerticalAlignment = Element.ALIGN_CENTER; ;
                espacio.Border = PdfPCell.BOTTOM_BORDER;
                espacio.FixedHeight = 20;
                espacio.BorderColor = new BaseColor(123, 123, 122);

                espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(espacio);

                espacio = new PdfPCell();
                espacio.AddElement(subTitle3);
                espacio.PaddingTop = 0;
                espacio.VerticalAlignment = Element.ALIGN_CENTER; ;
                espacio.Border = PdfPCell.BOTTOM_BORDER;
                espacio.FixedHeight = 20;
                espacio.BorderColor = new BaseColor(123, 123, 122);
                espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(espacio);
                espacio = new PdfPCell();
                espacio.AddElement(subTitle4);
                espacio.PaddingTop = 0;
                espacio.VerticalAlignment = Element.ALIGN_CENTER; ;
                espacio.Border = PdfPCell.BOTTOM_BORDER;
                espacio.FixedHeight = 20;
                espacio.BorderColor = new BaseColor(123, 123, 122);
                espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(espacio);
                espacio = new PdfPCell();
                espacio.AddElement(subTitle5);
                espacio.PaddingTop = 0;
                espacio.VerticalAlignment = Element.ALIGN_CENTER; ;
                espacio.Border = PdfPCell.BOTTOM_BORDER;
                espacio.FixedHeight = 20;
                espacio.BorderColor = new BaseColor(123, 123, 122);
                espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(espacio);
                espacio = new PdfPCell();
                espacio.AddElement(subTitle6);
                espacio.PaddingTop = 0;
                espacio.VerticalAlignment = Element.ALIGN_CENTER; ;
                espacio.Border = PdfPCell.BOTTOM_BORDER;
                espacio.FixedHeight = 20;
                espacio.BorderColor = new BaseColor(123, 123, 122);
                espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                table.AddCell(espacio);



                table.TotalWidth = 520;
                table.WriteSelectedRows(0, -1, 40, 150, pcb);

                if (f.Metodo_Pago != 0)
                {
                    table = new PdfPTable(4);
                    anchoDeColumnas = new float[] { 10f, 40f, 10f, 40f };
                    table.SetWidthPercentage(anchoDeColumnas, oDocument.PageSize);
                    //table.DefaultCell.Border = PdfPCell.BOTTOM_BORDER;
                    table.DefaultCell.BorderWidthBottom = 5;

                    table.DefaultCell.BorderColorBottom = new BaseColor(12, 105, 66);
                    titleFont = FontFactory.GetFont("Calibri", 9, 1, new BaseColor(12, 105, 66));
                    docTitle = new iTextSharp.text.Paragraph("METODO PAGO", titleFont);
                    titleFont3 = FontFactory.GetFont("Calibri", 9, 0, new BaseColor(123, 123, 122));
                    string ss = "Tarjeta";

                    if (f.Metodo_Pago == 2)
                    {
                        ss = "Transferencia";
                    }
                    else if (f.Metodo_Pago == 3)
                    {
                        ss = "Efectivo";

                    }


                    titleFont2 = FontFactory.GetFont("Calibri", 8, 0, new BaseColor(123, 123, 122));
                    docTitle2 = new iTextSharp.text.Paragraph(ss, titleFont2);

                    docTitle2.Alignment = Element.ALIGN_LEFT;
                    subtitleFont = FontFactory.GetFont("Calibri", 9, 1, new BaseColor(12, 105, 66));
                    subTitle = new iTextSharp.text.Paragraph("IBAN", subtitleFont);
                    subTitle.Alignment = Element.ALIGN_CENTER;
                    subtitleFont2 = FontFactory.GetFont("Calibri", 8, 0, new BaseColor(123, 123, 122));
                    subTitle2 = new iTextSharp.text.Paragraph(f.IBAN, subtitleFont2);
                    subTitle2.Alignment = Element.ALIGN_LEFT;

                    cell = new PdfPCell();
                    cell.AddElement(docTitle);

                    cell.PaddingTop = 0;
                    cell.FixedHeight = 20;
                    cell.PaddingTop = 0;
                    cell.BorderColor = new BaseColor(12, 105, 66);
                    cell.Border = PdfPCell.BOTTOM_BORDER | PdfPCell.TOP_BORDER;
                    cell.VerticalAlignment = Element.ALIGN_CENTER;
                    table.AddCell(cell);

                    cellCaveat = new PdfPCell();

                    cellCaveat.AddElement(docTitle2);

                    cellCaveat.Border = PdfPCell.BOTTOM_BORDER | PdfPCell.TOP_BORDER;

                    cellCaveat.PaddingTop = 1;
                    cellCaveat.FixedHeight = 20;
                    cellCaveat.BorderColor = new BaseColor(12, 105, 66);

                    cellCaveat.VerticalAlignment = Element.ALIGN_CENTER; ;

                    cellCaveat.HorizontalAlignment = Element.ALIGN_LEFT;
                    table.AddCell(cellCaveat);

                    espacio = new PdfPCell();
                    espacio.AddElement(subTitle);
                    espacio.PaddingTop = 0;

                    espacio.VerticalAlignment = Element.ALIGN_CENTER; ;
                    espacio.Border = PdfPCell.BOTTOM_BORDER | PdfPCell.TOP_BORDER;
                    espacio.FixedHeight = 20;
                    espacio.BorderColor = new BaseColor(12, 105, 66);

                    espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                    table.AddCell(espacio);

                    espacio = new PdfPCell();
                    espacio.AddElement(subTitle2);

                    espacio.PaddingTop = 1;
                    espacio.VerticalAlignment = Element.ALIGN_CENTER; ;
                    espacio.Border = PdfPCell.BOTTOM_BORDER | PdfPCell.TOP_BORDER;
                    espacio.FixedHeight = 20;
                    espacio.BorderColor = new BaseColor(12, 105, 66);

                    espacio.HorizontalAlignment = Element.ALIGN_LEFT;
                    table.AddCell(espacio);

                    table.TotalWidth = 520;
                    table.WriteSelectedRows(0, -1, 40, 70, pcb);

                    table = new PdfPTable(1);

                    titleFont = FontFactory.GetFont("Calibri", 8, 0, new BaseColor(12, 105, 66));
                    docTitle = new iTextSharp.text.Paragraph(f.Direccion_Facturacion + " | " + f.CP_Facturacion + ", " + f.Poblecion_Facturacion + " (" + f.Provincia_Facturacion + ") | Tlf." + f.Telefono_Camping + " | info@campingmontserrat.cat", titleFont);
                    docTitle.Alignment = Element.ALIGN_CENTER;

                    cell = new PdfPCell();
                    //cell.AddElement(docTitle);

                    cell.PaddingTop = 0;
                    cell.FixedHeight = 20;
                    cell.PaddingTop = 0;
                    cell.BorderColor = new BaseColor(12, 105, 66);
                    cell.Border = PdfPCell.NO_BORDER;
                    cell.VerticalAlignment = Element.ALIGN_CENTER;
                    //table.AddCell(cell);
                    table.TotalWidth = 520;
                    table.WriteSelectedRows(0, -1, 40, 25, pcb);
                }
                //table = new PdfPTable(2);

                //crea una nueva pagina y agrega el pdf original

                // Cerramos los objetos utilizados
                if (t == 0 || t == 1 ||t==3) {
                PdfImportedPage page = oWriter.GetImportedPage(oReader, 1);
                oPDF.AddTemplate(page, 0, 0);
                }
                    oDocument.Close();
                    oFS.Close();
                    oWriter.Close();
                    oReader.Close(); 


                    Process.Start(filename);
                }

        }
        private MemoryStream Decompress(byte[] b)
        {
            MemoryStream memoryStream;
            using (var ms = new MemoryStream())
            {
                using (var bs = new MemoryStream(b))
                using (GZipStream gZipStream = new GZipStream(bs, CompressionMode.Decompress))
                {
                    memoryStream = new MemoryStream();
                    gZipStream.CopyTo(memoryStream);
                }
                return memoryStream;
            }
        }

        private void PrintFDFLabel(string imageLabel)
        {
            var byteStream = Convert.FromBase64String(imageLabel);
            MemoryStream memoryStream = Decompress(byteStream);// i need to Decompress the Gzip

            PrintDocument print = new PrintDocument();

            print.PrinterSettings.PrinterName = LocalPrintServer.GetDefaultPrintQueue().FullName;
            print.Print();

        }
       

        private void Save_Click(object sender, RoutedEventArgs e)
        {
            if (factura_menu.SelectedIndex <= 1)
            {
                vb2.Close();
                vb2 = new Browser2(1);
                vb2.Show();
            }
            else
            {
                vb.Close();
                vb = new Browser(1, 0);
                vb.Show();
            }

        }

        private void AddnewProduct_Click(object sender, RoutedEventArgs e)
        {
            if (factura_menu.SelectedIndex == 1)
            {
                vprd.Close();
                CargarIva();
                cargarProductosNuevos();
                vprd = new VentanaProducto(Facturas.SelectedItem as Facturas, liva, lpdrr, 0);
                vprd.Show();
            }
            else
            {
                vprd.Close();
                CargarIva();
                cargarProductosNuevos();
                vprd = new VentanaProducto(Recibos.SelectedItem as Recibos, liva, lpdrr);
                vprd.Show();
            }
        }

        private void deleteProducto_Click(object sender, RoutedEventArgs e)
        {

            if (factura_menu.SelectedIndex == 3)
            {
                Producto p = Productos2.SelectedItem as Producto;
                Productos2.SelectedItem = null;
                Productos2.Items.Remove(p);
                if (Productos2.Items.Count > 17)
                {
                    AddnewProduct.IsEnabled = false;
                }
                else
                {

                    AddnewProduct.IsEnabled = true;
                }
                ProductosConsulta pc = new ProductosConsulta(null, "DELETE FROM Productos_Registro2 WHERE Id=" + p.Id);
                pc.filtro = "Id=" + p.Id;
                lpc.Add(pc);
                if (Recibos.SelectedItem != null)
                {
                    Recibos f = Recibos.SelectedItem as Recibos;
                    bool a = false;
                    if (Productos2.Items.Count > 0)
                    {
                        float precio = 0;
                        float impuesto = 0;
                        float total = 0;
                        tasa = 0;
                        float descuento = 0;
                        foreach (Producto p2 in Productos2.Items)
                        {
                            if (p2.Nombre_Producto.ToLower().Contains("tasa turistica"))
                            {
                                float ff = float.Parse(p2.Precio.Replace(" €", "")) * float.Parse(p2.Cantidad);
                                tasa += (float)Math.Round(ff, 2);
                                float fff = float.Parse(liva.Find(x => x.Id == int.Parse(p2.IVA)).Porcentaje) / 100;
                                float imp = (float)ff * (fff);
                                impuesto += (float)ff * (fff);

                                total += (float)ff + imp;
                            }
                            else
                            {
                                for (int i = 0; i < int.Parse(p2.Cantidad); i++)
                                {
                                    p2.Precio = p2.Precio.Replace(" €", "");
                                    p2.Impuesto = p2.Impuesto.Replace(" €", "");
                                    float ff = float.Parse(p2.Descuento.Replace(" €", "")) / 100;
                                    float pc2 = (float)float.Parse(p2.Precio) * (1 - ff);
                                    precio += pc2;
                                    float fff = float.Parse(liva.Find(x => x.Id == int.Parse(p2.IVA)).Porcentaje) / 100;
                                    float imp = (float)pc2 * (fff);
                                    impuesto += (float)pc2 * (fff);
                                    total += (float)pc2 + imp;
                                }

                            }

                        }
                        string d = "0";
                        if (Descuento.Text.Length != 0)
                        {
                            d = Descuento.Text;
                        }
                        float dd = float.Parse(d) / 100;
                        total = total * (1 - dd);
                        string a2 = Math.Round(precio, 2).ToString("0.00") + " €";
                        Console.WriteLine(a2);
                        Base_Imponible2.Text = a2;
                        Cuota_IVA2.Text = Math.Round(impuesto, 2).ToString("0.00") + " €";
                        Importe_Factura2.Text = Math.Round(total, 2).ToString("0.00") + " €";
                    }
                    else
                    {
                        Base_Imponible2.Text = (0).ToString("0.00");
                        Cuota_IVA2.Text = (0).ToString("0.00");
                        Importe_Factura2.Text = (0).ToString("0.00");
                    }

                    if (!Nombre_Cliente_Factura2.Text.Equals(f.Nombre_Cliente))
                    {
                        a = true;
                        Nombre_Cliente_Factura2.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Nombre_Cliente_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }
                    Console.WriteLine("1 " + a);

                    if (!DNI_Cliente_Factura2.Text.Equals(f.DNI_CIF))
                    {
                        a = true;
                        DNI_Cliente_Factura2.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        DNI_Cliente_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }
                    Console.WriteLine("2 " + a);
                    if (!Direccion_Camping_Factura2.Text.Equals(f.Direccion_Facturacion))
                    {
                        a = true;
                        Direccion_Camping_Factura2.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Direccion_Camping_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }
                    Console.WriteLine("3 " + a);
                    if (!Poblacion_Camping_Factura2.Text.Equals(f.Poblecion_Facturacion))
                    {
                        a = true;
                        Poblacion_Camping_Factura2.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Poblacion_Camping_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }
                    Console.WriteLine("4 " + a);

                    if (!Codigo_Postal_Camping_Factura2.Text.Equals(f.CP_Facturacion.ToString()))
                    {
                        Codigo_Postal_Camping_Factura2.BorderBrush = Brushes.Red;
                        a = true;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Codigo_Postal_Camping_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }
                    Console.WriteLine("5 " + a);
                    if (!Provincia_Camping_Factura2.Text.Equals(f.Provincia_Facturacion))

                    {
                        a = true;
                        Provincia_Camping_Factura2.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Provincia_Camping_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }

                    Console.WriteLine("6 " + a);
                    if (!Fecha_Factura2.SelectedDate.Equals(f.fecha))
                    {
                        a = true;
                        Fecha_Factura2.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Fecha_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }
                    Console.WriteLine("7 " + a);
                    if (!Fecha_Factura_ven2.SelectedDate.Equals(f.fecha_ven))
                    {
                        a = true;
                        Fecha_Factura_ven2.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Fecha_Factura_ven2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }
                    Console.WriteLine("8 " + a);
                    if (!Importe_Factura2.Text.Equals(f.Importe.ToString("0.00") + " €"))
                    {
                        a = true;
                        Base_Imponible2.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Base_Imponible2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }
                    Console.WriteLine("9 " + a);

                    if (!Direccion_Cliente_Factura2.Text.Equals(f.Direccion_Cliente))
                    {
                        a = true;
                        Direccion_Cliente_Factura2.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Direccion_Cliente_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }
                    Console.WriteLine("10 " + a);
                    if (!Poblacion_Cliente_Factura2.Text.Equals(f.Poblacio_Cliente))
                    {
                        a = true;
                        Poblacion_Cliente_Factura2.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Poblacion_Cliente_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }
                    Console.WriteLine("11 " + a);
                    if (!Codigo_Postal_Cliente_Facturacion2.Text.Equals(f.CP_Cliente.ToString()))
                    {
                        a = true;
                        Codigo_Postal_Cliente_Facturacion2.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Codigo_Postal_Cliente_Facturacion2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }
                    Console.WriteLine("12 " + a);
                    if (!Provincia_Cliente_Factura2.Text.Equals(f.Provincia_Cliente))
                    {
                        a = true;
                        Provincia_Cliente_Factura2.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Provincia_Cliente_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }
                    Console.WriteLine("13 " + a);



                    if (!Pais_Cliente_Factura2.Text.Equals(f.Pais_Cliente))
                    {
                        a = true;
                        Pais_Camping_Factura2.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Pais_Cliente_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }
                    Console.WriteLine("14 " + a);

                    if (!Pais_Camping_Factura2.Text.Equals(f.Pais_Facturacion))
                    {
                        a = true;
                        Pais_Camping_Factura2.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Pais_Camping_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }
                    Console.WriteLine("15 " + a);

                    if (!Empresa2.Text.Equals(f.Empresa))
                    {
                        a = true;
                        Empresa2.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Empresa2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }
                    Console.WriteLine("16 " + a);


                    if (!Telefono_cliente2.Text.Equals(f.Telefono))
                    {
                        a = true;
                        Metodo_Pago2.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Telefono_cliente2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }
                    Console.WriteLine("17 " + a);
                    if (!Telefono_Camping_Factura2.Text.Equals(f.Telefono_Camping))
                    {
                        a = true;
                        Telefono_Camping_Factura2.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Telefono_Camping_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }
                    Console.WriteLine("18 " + a);

                    if (Metodo_Pago2.SelectedIndex != f.Metodo_Pago)
                    {
                        a = true;
                        Metodo_Pago2.Foreground = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Metodo_Pago2.Foreground = Brushes.Black;
                    }
                    Console.WriteLine("19 " + a);
                    if (!Descuento2.Text.Equals(f.Descuento))
                    {
                        a = true;
                        Descuento2.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Descuento2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }
                    Console.WriteLine("20 " + a);
                    int[] pr = new int[f.Lista_productos.Count()];
                    for (int i = 0; i < pr.Count(); i++)
                    {
                        pr[i] = -1;
                    }

                    if (f.Lista_productos.Count == Productos2.Items.Count)
                    {

                        foreach (Producto p2 in Productos2.Items)
                        {
                            for (int i = 0; i < f.Lista_productos.Count(); i++)
                            {
                                if (pr[i] != 1)
                                    if (f.Lista_productos[i].Nombre_Producto.Equals(p2.Nombre_Producto))
                                    {
                                        pr[i] = 1;

                                        break;
                                    }
                                    else if (pr[i] != 1) pr[i] = 0;

                            }


                        }
                    }
                    else
                        a = true;

                    foreach (int i in pr)
                        Console.WriteLine(i + " ");
                    if (pr.Contains(0))
                    {
                        a = true;
                        Productos2.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Productos2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }
                    Console.WriteLine("21 " + a);

                    if (a)
                    {
                        change_Factura.IsEnabled = true;
                        safe = true;

                    }
                    else
                    {
                        change_Factura.IsEnabled = false;
                        safe = false;
                    }
                }
            }
            else { 
            Producto p = Productos.SelectedItem as Producto;
            Productos.SelectedItem = null;
            Productos.Items.Remove(p);
            if (Productos.Items.Count > 17)
            {
                AddnewProduct.IsEnabled = false;
            }
            else
            {

                AddnewProduct.IsEnabled = true;
            }
            ProductosConsulta pc = new ProductosConsulta(null, "DELETE FROM Productos_Registro WHERE Id=" + p.Id);
            pc.filtro = "Id=" + p.Id;
            lpc.Add(pc);
                if (Facturas.SelectedItem != null)
                {
                    Facturas f = Facturas.SelectedItem as Facturas;
                    bool a = false;
                
                    tasa = 0;
                    if (Productos.Items.Count > 0)
                    {
                        float precio = 0;
                        float impuesto = 0;
                        float total = 0;
                        tasa = 0;
                        float descuento = 0;
                        foreach (Producto p2 in Productos.Items)
                        {
                            if (p2.Nombre_Producto.ToLower().Contains("tasa turistica"))
                            {
                                float ff = float.Parse(p2.Precio.Replace(" €", "")) * float.Parse(p2.Cantidad);
                                tasa += (float)Math.Round(ff, 2);
                                float fff = float.Parse(liva.Find(x => x.Id == int.Parse(p2.IVA)).Porcentaje) / 100;
                                float imp = (float)ff * (fff);
                                impuesto += (float)ff * (fff);
                                total += (float)ff + imp;
                            }
                            else
                            {
                                for (int i = 0; i < int.Parse(p2.Cantidad); i++)
                                {
                                    p2.Precio = p2.Precio.Replace(" €", "");
                                    p2.Impuesto = p2.Impuesto.Replace(" €", "");
                                    float ff = float.Parse(p2.Descuento.Replace(" €", "")) / 100;
                                    float pc2 = (float)float.Parse(p2.Precio) * (1 - ff);
                                    precio += pc2;
                                    float fff = float.Parse(liva.Find(x => x.Id == int.Parse(p2.IVA)).Porcentaje) / 100;
                                    float imp = (float)pc2 * (fff);
                                    impuesto += (float)pc2 * (fff);
                                    total += (float)pc2 + imp;
                                }

                            }

                        }
                        string d = "0";
                        if (Descuento.Text.Length != 0)
                        {
                            d = Descuento.Text;
                        }
                        float dd = float.Parse(d) / 100;
                        total = total * (1 - dd);
                        string a2 = Math.Round(precio, 2).ToString("0.00") + " €";
                        Console.WriteLine(a2);
                        Base_Imponible.Text = a2;
                        Cuota_IVA.Text = Math.Round(impuesto, 2).ToString("0.00") + " €";
                        Importe_Factura.Text = Math.Round(total, 2).ToString("0.00") + " €";
                    }
                    else
                    {
                        Base_Imponible.Text = (0).ToString("0.00");
                        Cuota_IVA.Text = (0).ToString("0.00");
                        Importe_Factura.Text = (0).ToString("0.00");
                    }

                    if (!Nombre_Cliente_Factura.Text.Equals(f.Nombre_Cliente))
                    {
                        a = true;

                    }
                    if (!DNI_Cliente_Factura.Text.Equals(f.DNI_CIF))
                    {
                        a = true;


                    }
                    if (!Direccion_Camping_Factura.Text.Equals(f.Direccion_Facturacion))
                    {
                        a = true;

                    }
                    if (!Poblacion_Camping_Factura.Text.Equals(f.Poblecion_Facturacion))
                    {
                        a = true;
                    }

                    if (!Codigo_Postal_Camping_Factura.Text.Equals(f.CP_Facturacion.ToString()))
                    {
                        a = true;

                    }
                    if (!Provincia_Camping_Factura.Text.Equals(f.Provincia_Facturacion))

                    {
                        a = true;


                    }

                    if (!Fecha_Factura.SelectedDate.Equals(f.fecha))
                    {
                        a = true;

                    }
                    if (!Fecha_Factura_ven.SelectedDate.Equals(f.fecha_ven))
                    {
                        a = true;

                    }
                   
                    if (!Importe_Factura.Text.Equals(Math.Round(f.Importe,2).ToString("0.00") + " €"))
                    {
                        a = true;


                    }

                    if (!Direccion_Cliente_Factura.Text.Equals(f.Direccion_Cliente))
                    {
                        a = true;

                    }
                    if (!Poblacion_Cliente_Factura.Text.Equals(f.Poblacio_Cliente))
                    {
                        a = true;

                    }
                    if (!Codigo_Postal_Cliente_Facturacion.Text.Equals(f.CP_Cliente.ToString()))
                    {
                        a = true;

                    }
                    if (!Provincia_Cliente_Factura.Text.Equals(f.Provincia_Cliente))
                    {
                        a = true;

                    }
                    int[] pr = new int[f.Lista_productos.Count()];
                    for (int i = 0; i < pr.Count(); i++)
                    {
                        pr[i] = -1;
                    }

                    if (f.Lista_productos.Count == Productos.Items.Count)
                    {

                        foreach (Producto p3 in Productos.Items)
                        {
                            for (int i = 0; i < f.Lista_productos.Count(); i++)
                            {
                                if (pr[i] != 1)
                                    if (f.Lista_productos[i].Nombre_Producto.Equals(p3.Nombre_Producto))
                                    {
                                        pr[i] = 1;

                                        break;
                                    }
                                    else if (pr[i] != 1) pr[i] = 0;

                            }


                        }
                    }
                    else
                        a = true;

                    foreach (int i in pr)
                        Console.WriteLine(i + " ");
                    if (pr.Contains(0))
                    {
                        a = true;
                        Productos.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Productos.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }



                    if (a)
                    {
                        change_Factura.IsEnabled = true;
                        safe = true;

                    }
                    else
                    {
                        change_Factura.IsEnabled = false;
                        safe = false;
                    }
                }
            }
        }



        private void NumberValidationTextBox(object sender, TextCompositionEventArgs e)
        {
            Regex regex = new Regex("[^0-9]+");
            e.Handled = regex.IsMatch(e.Text);
        }

        private void mirarchecks(object sender, RoutedEventArgs e)
        {
            if (Roles.SelectedItem != null)
            {
                Roles r = Roles.SelectedItem as Roles;
                char[] c = r.Permisos_bin.ToArray<char>();
                //console.writeline(Convert.ToBoolean(Convert.ToInt32(c[3].ToString())) + " " + Convert.ToBoolean(Convert.ToInt32(c[4].ToString())) + Convert.ToBoolean(Convert.ToInt32(c[4].ToString())));
                if (rol_log != r)
                    if (Nombre_Rol.Text.Equals(r.Nom) && upd_Agenda.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[0])) && dlt_Agenda.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[1].ToString())) && ins_Agenda.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[2].ToString())) && upd_Sistema.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[3].ToString())) && dlt_Sistema.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[4].ToString())) && ins_Sistema.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[5].ToString())) && upd_Clientes.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[6].ToString())) && dlt_Clientes.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[7].ToString())) && ins_Clientes.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[8])) && upd_Mapa.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[9].ToString())) && dlt_Mapa.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[10].ToString())) && ins_Mapa.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[11].ToString())) && upd_Factura.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[12].ToString())) && dlt_Factura.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[13].ToString())) && ins_Factura.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[14].ToString())) && upd_Camara.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[15].ToString())) && dlt_Camara.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[16].ToString())) && ins_Camara.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[17].ToString())) && pestana_cliente1.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[24].ToString()))&& pestana_cliente2.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[25].ToString())) && pestana_cliente3.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[26].ToString())) && pestana_cliente4.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[27].ToString())) && pestana_cliente5.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[25].ToString())))
                    {
                        change_Sistema.IsEnabled = false;
                        safe = false;
                    }
                    else
                    {
                        change_Sistema.IsEnabled = true;
                        safe = true;
                    }

                if (!Nombre_Rol.Text.Equals(r.Nom))
                {
                    Nombre_Rol.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Nombre_Rol.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }



                if (upd_Agenda.IsChecked.Value != Convert.ToBoolean(int.Parse(c[0].ToString())))
                {
                    upd_Agenda.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    upd_Agenda.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (dlt_Agenda.IsChecked.Value != Convert.ToBoolean(int.Parse(c[1].ToString())))
                {
                    dlt_Agenda.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    dlt_Agenda.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (ins_Agenda.IsChecked.Value != Convert.ToBoolean(int.Parse(c[2].ToString())))
                {
                    ins_Agenda.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    ins_Agenda.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (upd_Sistema.IsChecked.Value != Convert.ToBoolean(int.Parse(c[3].ToString())))
                {
                    upd_Sistema.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    upd_Sistema.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (dlt_Sistema.IsChecked.Value != Convert.ToBoolean(int.Parse(c[4].ToString())))
                {
                    dlt_Sistema.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    dlt_Sistema.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (ins_Sistema.IsChecked.Value != Convert.ToBoolean(int.Parse(c[5].ToString())))
                {
                    ins_Sistema.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    ins_Sistema.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (upd_Clientes.IsChecked.Value != Convert.ToBoolean(int.Parse(c[6].ToString())))
                {
                    upd_Clientes.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    upd_Clientes.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (dlt_Clientes.IsChecked.Value != Convert.ToBoolean(int.Parse(c[7].ToString())))
                {
                    dlt_Clientes.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    dlt_Clientes.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (ins_Clientes.IsChecked.Value != Convert.ToBoolean(int.Parse(c[8].ToString())))
                {
                    ins_Clientes.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    ins_Clientes.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (upd_Mapa.IsChecked.Value != Convert.ToBoolean(int.Parse(c[9].ToString())))
                {
                    upd_Mapa.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    upd_Mapa.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (dlt_Mapa.IsChecked.Value != Convert.ToBoolean(int.Parse(c[10].ToString())))
                {
                    dlt_Mapa.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    dlt_Mapa.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (ins_Mapa.IsChecked.Value != Convert.ToBoolean(int.Parse(c[11].ToString())))
                {
                    ins_Mapa.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    ins_Mapa.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (upd_Factura.IsChecked.Value != Convert.ToBoolean(int.Parse(c[12].ToString())))
                {
                    upd_Factura.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    upd_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (dlt_Factura.IsChecked.Value != Convert.ToBoolean(int.Parse(c[13].ToString())))
                {
                    dlt_Factura.BorderBrush = Brushes.Red;


                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    dlt_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (ins_Factura.IsChecked.Value != Convert.ToBoolean(int.Parse(c[14].ToString())))
                {
                    ins_Factura.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    ins_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (upd_Camara.IsChecked.Value != Convert.ToBoolean(int.Parse(c[15].ToString())))
                {
                    upd_Camara.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    upd_Camara.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (dlt_Camara.IsChecked.Value != Convert.ToBoolean(int.Parse(c[16].ToString())))
                {
                    dlt_Camara.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    dlt_Camara.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (ins_Camara.IsChecked.Value != Convert.ToBoolean(int.Parse(c[17].ToString())))
                {
                    ins_Camara.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    ins_Camara.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (Agn.IsChecked.Value != Convert.ToBoolean(int.Parse(c[18].ToString())))
                {
                    Agn.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Agn.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (Sst.IsChecked.Value != Convert.ToBoolean(int.Parse(c[19].ToString())))
                {
                    Sst.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Sst.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (Cln.IsChecked.Value != Convert.ToBoolean(int.Parse(c[20].ToString())))
                {
                    Cln.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Cln.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (Map.IsChecked.Value != Convert.ToBoolean(int.Parse(c[21].ToString())))
                {
                    Map.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Map.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (Fct.IsChecked.Value != Convert.ToBoolean(int.Parse(c[22].ToString())))
                {
                    Fct.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Fct.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (Cmr.IsChecked.Value != Convert.ToBoolean(int.Parse(c[23].ToString())))
                {
                    Cmr.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Cmr.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (pestana_cliente1.IsChecked.Value != Convert.ToBoolean(int.Parse(c[24].ToString())))
                {
                    pestana_cliente1.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    pestana_cliente1.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (pestana_cliente2.IsChecked.Value != Convert.ToBoolean(int.Parse(c[25].ToString())))
                {
                    pestana_cliente2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    pestana_cliente2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (pestana_cliente3.IsChecked.Value != Convert.ToBoolean(int.Parse(c[26].ToString())))
                {
                    pestana_cliente3.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    pestana_cliente3.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (pestana_cliente4.IsChecked.Value != Convert.ToBoolean(int.Parse(c[27].ToString())))
                {
                    pestana_cliente4.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    pestana_cliente4.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (pestana_cliente5.IsChecked.Value != Convert.ToBoolean(int.Parse(c[28].ToString())))
                {
                    pestana_cliente5.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    pestana_cliente5.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
            }
        }

        private void mirarchecks2(object sender, RoutedEventArgs e)
        {
            if (Roles.SelectedItem != null)
            {
                Roles r = Roles.SelectedItem as Roles;
                char[] c = r.Permisos_bin.ToArray<char>();
                if (rol_log != r)
                    if (Nombre_Rol.Text.Equals(r.Nom) && upd_Agenda.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[0])) && dlt_Agenda.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[1].ToString())) && ins_Agenda.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[2].ToString())) && upd_Sistema.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[3].ToString())) && dlt_Sistema.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[4].ToString())) && ins_Sistema.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[5].ToString())) && upd_Clientes.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[6].ToString())) && dlt_Clientes.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[7].ToString())) && ins_Clientes.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[8])) && upd_Mapa.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[9].ToString())) && dlt_Mapa.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[10].ToString())) && ins_Mapa.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[11].ToString())) && upd_Factura.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[12].ToString())) && dlt_Factura.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[13].ToString())) && ins_Factura.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[14].ToString())) && upd_Camara.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[12].ToString())) && dlt_Camara.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[13].ToString())) && ins_Camara.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[14].ToString())))
                    {
                        change_Sistema.IsEnabled = false;
                        safe = false;
                    }
                    else
                    {
                        change_Sistema.IsEnabled = true;
                        safe = true;
                    }
            }
        }

        private void Todos_Checked(object sender, RoutedEventArgs e)
        {
            Roles r = Roles.SelectedItem as Roles;
            char[] c = r.Permisos_bin.ToArray<char>();

            Agn.IsChecked = Todos.IsChecked;
            Sst.IsChecked = Todos.IsChecked;
            Cln.IsChecked = Todos.IsChecked;
            Map.IsChecked = Todos.IsChecked;
            Fct.IsChecked = Todos.IsChecked;
            Cmr.IsChecked = Todos.IsChecked;

            //console.writeline(upd_Agenda.IsChecked+" "+Convert.ToBoolean(Convert.ToInt32(c[0])));
            //console.writeline(dlt_Agenda.IsChecked+" "+Convert.ToBoolean(Convert.ToInt32(c[1].ToString())));
            //console.writeline(ins_Agenda.IsChecked+" "+Convert.ToBoolean(Convert.ToInt32(c[2].ToString())));
            
            //console.writeline(upd_Sistema.IsChecked+" "+Convert.ToBoolean(Convert.ToInt32(c[3].ToString())));
            //console.writeline(dlt_Sistema.IsChecked+" "+Convert.ToBoolean(Convert.ToInt32(c[4].ToString())));
            //console.writeline(ins_Sistema.IsChecked+" "+Convert.ToBoolean(Convert.ToInt32(c[5].ToString())));


            //console.writeline(upd_Clientes.IsChecked+" "+Convert.ToBoolean(Convert.ToInt32(c[6].ToString())));
            //console.writeline(dlt_Clientes.IsChecked+" "+Convert.ToBoolean(Convert.ToInt32(c[7].ToString())));
            //console.writeline(ins_Clientes.IsChecked+" "+Convert.ToBoolean(Convert.ToInt32(c[8])));


            //console.writeline(upd_Mapa.IsChecked+" "+Convert.ToBoolean(Convert.ToInt32(c[9].ToString())));
            //console.writeline(Convert.ToInt32(c[9].ToString()) + " "+Convert.ToBoolean(Convert.ToInt32(c[9]+"")));
            //console.writeline(dlt_Mapa.IsChecked+" "+Convert.ToBoolean(Convert.ToInt32(c[10].ToString())));
            //console.writeline(ins_Mapa.IsChecked+" "+Convert.ToBoolean(Convert.ToInt32(c[11].ToString())));

            //console.writeline(upd_Factura.IsChecked+" "+Convert.ToBoolean(Convert.ToInt32(c[12].ToString())));
            //console.writeline(dlt_Factura.IsChecked+" "+Convert.ToBoolean(Convert.ToInt32(c[13].ToString())));
            //console.writeline(ins_Factura.IsChecked+" "+Convert.ToBoolean(Convert.ToInt32(c[14].ToString())));

            //console.writeline(upd_Camara.IsChecked+" "+Convert.ToBoolean(Convert.ToInt32(c[15].ToString())));
            //console.writeline(dlt_Camara.IsChecked+" "+Convert.ToBoolean(Convert.ToInt32(c[16].ToString())));
            //console.writeline(ins_Camara.IsChecked+" "+Convert.ToBoolean(Convert.ToInt32(c[17].ToString())));


            //console.writeline(Agn.IsChecked+" "+Convert.ToBoolean(Convert.ToInt32(c[18].ToString())));
            //console.writeline(Sst.IsChecked+" "+Convert.ToBoolean(Convert.ToInt32(c[19].ToString())));
            //console.writeline(Cln.IsChecked+" "+Convert.ToBoolean(Convert.ToInt32(c[20].ToString())));
            //console.writeline(Map.IsChecked+" "+Convert.ToBoolean(Convert.ToInt32(c[21].ToString())));
            //console.writeline(Fct.IsChecked+" "+Convert.ToBoolean(Convert.ToInt32(c[22].ToString())));
            //console.writeline(Cmr.IsChecked+" "+Convert.ToBoolean(Convert.ToInt32(c[23].ToString())));


            if (rol_log != r)
                if (Nombre_Rol.Text.Equals(r.Nom) && upd_Agenda.IsChecked == Convert.ToBoolean((c[0] - '0')) && dlt_Agenda.IsChecked == Convert.ToBoolean((c[1] - '0')) && ins_Agenda.IsChecked == Convert.ToBoolean((c[2] - '0')) && upd_Sistema.IsChecked == Convert.ToBoolean((c[3] - '0')) && dlt_Sistema.IsChecked == Convert.ToBoolean((c[4] - '0')) && ins_Sistema.IsChecked == Convert.ToBoolean((c[5] - '0')) && upd_Clientes.IsChecked == Convert.ToBoolean((c[6] - '0')) && dlt_Clientes.IsChecked == Convert.ToBoolean((c[7] - '0')) && ins_Clientes.IsChecked == Convert.ToBoolean((c[8] - '0')) && upd_Mapa.IsChecked == Convert.ToBoolean((c[9] - '0')) && dlt_Mapa.IsChecked == Convert.ToBoolean((c[10] - '0')) && ins_Mapa.IsChecked == Convert.ToBoolean((c[11] - '0')) && upd_Factura.IsChecked == Convert.ToBoolean((c[12] - '0')) && dlt_Factura.IsChecked == Convert.ToBoolean((c[13] - '0')) && ins_Factura.IsChecked == Convert.ToBoolean((c[14] - '0')) && upd_Camara.IsChecked == Convert.ToBoolean((c[15] - '0')) && dlt_Camara.IsChecked == Convert.ToBoolean((c[16] - '0')) && ins_Camara.IsChecked == Convert.ToBoolean((c[17] - '0')) && Agn.IsChecked == Convert.ToBoolean((c[18] - '0')) && Sst.IsChecked == Convert.ToBoolean((c[19] - '0')) && Cln.IsChecked == Convert.ToBoolean((c[20] - '0')) && Map.IsChecked == Convert.ToBoolean((c[21] - '0')) && Fct.IsChecked == Convert.ToBoolean((c[22] - '0')) && Cmr.IsChecked == Convert.ToBoolean((c[23] - '0')))
                {
                    change_Sistema.IsEnabled = false;
                    safe = false;
                }
                else
                {
                    change_Sistema.IsEnabled = true;
                    safe = true;
                }
        }
        private void Todos_Checked2(object sender, RoutedEventArgs e)
        {
            Roles r = Roles.SelectedItem as Roles;
            char[] c = r.Permisos_bin.ToArray<char>();

            Agn.IsChecked = Todos.IsChecked;
            Sst.IsChecked = Todos.IsChecked;
            Cln.IsChecked = Todos.IsChecked;
            Map.IsChecked = Todos.IsChecked;
            Fct.IsChecked = Todos.IsChecked;
            Cmr.IsChecked = Todos.IsChecked;
            
        }

        private void Camara_All(object sender, RoutedEventArgs e)
        {
            Roles r = Roles.SelectedItem as Roles;
            char[] c = r.Permisos_bin.ToArray<char>();

            upd_Camara.IsChecked = true;
            dlt_Camara.IsChecked = true;
            ins_Camara.IsChecked = true;
            
        }

        private void Camara_All2(object sender, RoutedEventArgs e)
        {
            Roles r = Roles.SelectedItem as Roles;
            char[] c = r.Permisos_bin.ToArray<char>();

            upd_Camara.IsChecked = false;
            dlt_Camara.IsChecked = false;
            ins_Camara.IsChecked = false;
            
        }

        private void Factura_All(object sender, RoutedEventArgs e)
        {
            Roles r = Roles.SelectedItem as Roles;
            char[] c = r.Permisos_bin.ToArray<char>();

            upd_Factura.IsChecked = true;
            dlt_Factura.IsChecked = true;
            ins_Factura.IsChecked = true;
           
        }
        private void Factura_All2(object sender, RoutedEventArgs e)
        {
            Roles r = Roles.SelectedItem as Roles;
            char[] c = r.Permisos_bin.ToArray<char>();

            upd_Factura.IsChecked = false;
            dlt_Factura.IsChecked = false;
            ins_Factura.IsChecked = false;
            
        }


        private void Clientes_All(object sender, RoutedEventArgs e)
        {
            Roles r = Roles.SelectedItem as Roles;
            char[] c = r.Permisos_bin.ToArray<char>();

            upd_Clientes.IsChecked = true;
            dlt_Clientes.IsChecked = true;
            ins_Clientes.IsChecked = true;
            
        }
        private void Clientes_All2(object sender, RoutedEventArgs e)
        {
            Roles r = Roles.SelectedItem as Roles;
            char[] c = r.Permisos_bin.ToArray<char>();

            upd_Clientes.IsChecked = false;
            dlt_Clientes.IsChecked = false;
            ins_Clientes.IsChecked = false;
           
        }

        private void Sistema_All(object sender, RoutedEventArgs e)
        {
            Roles r = Roles.SelectedItem as Roles;
            char[] c = r.Permisos_bin.ToArray<char>();
            
                upd_Sistema.IsChecked = true;
           
           
                dlt_Sistema.IsChecked = true;
            
            
                ins_Sistema.IsChecked = true;
            
            //console.writeline(Convert.ToBoolean(Convert.ToInt32(c[3].ToString()))+" "+ Convert.ToInt32(c[3].ToString()));
            //console.writeline(Convert.ToBoolean(Convert.ToInt32(c[4].ToString())) + " " + c[4]);
            //console.writeline(Convert.ToBoolean(Convert.ToInt32(c[5].ToString())) + " " + c[5]);
          

        }

        private void Sistema_All2(object sender, RoutedEventArgs e)
        {
            Roles r = Roles.SelectedItem as Roles;
            char[] c = r.Permisos_bin.ToArray<char>();

           
                upd_Sistema.IsChecked = false;
            
            
                dlt_Sistema.IsChecked = false;
            
            
                ins_Sistema.IsChecked = false;
            
           
        }

        private void mapa_All(object sender, RoutedEventArgs e)
        {
            Roles r = Roles.SelectedItem as Roles;
            char[] c = r.Permisos_bin.ToArray<char>();

            upd_Mapa.IsChecked = true;
            dlt_Mapa.IsChecked = true;
            ins_Mapa.IsChecked = true;
            
        }
        private void mapa_All2(object sender, RoutedEventArgs e)
        {
            Roles r = Roles.SelectedItem as Roles;
            char[] c = r.Permisos_bin.ToArray<char>();

            upd_Mapa.IsChecked = false;
            dlt_Mapa.IsChecked = false;
            ins_Mapa.IsChecked = false;
           
        }

        private void agenda_All(object sender, RoutedEventArgs e)
        {
            Roles r = Roles.SelectedItem as Roles;
            char[] c = r.Permisos_bin.ToArray<char>();

            upd_Agenda.IsChecked = true;
            dlt_Agenda.IsChecked = true;
            ins_Agenda.IsChecked = true;
            

        }



        private void agenda_All2(object sender, RoutedEventArgs e)
        {
            Roles r = Roles.SelectedItem as Roles;
            char[] c = r.Permisos_bin.ToArray<char>();

            upd_Agenda.IsChecked = false;
            dlt_Agenda.IsChecked = false;
            ins_Agenda.IsChecked = false;
           
        }

        private void upd_Agenda_Unchecked(object sender, RoutedEventArgs e)
        {
            Roles r = Roles.SelectedItem as Roles;
            char[] c = r.Permisos_bin.ToArray<char>();
            if (rol_log != r)
                if (Nombre_Rol.Text.Equals(r.Nom) && upd_Agenda.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[0])) && dlt_Agenda.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[1].ToString())) && ins_Agenda.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[2].ToString())) && upd_Sistema.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[3].ToString())) && dlt_Sistema.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[4].ToString())) && ins_Sistema.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[5].ToString())) && upd_Clientes.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[6].ToString())) && dlt_Clientes.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[7].ToString())) && ins_Clientes.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[8])) && upd_Mapa.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[9].ToString())) && dlt_Mapa.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[10].ToString())) && ins_Mapa.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[11].ToString())) && upd_Factura.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[12].ToString())) && dlt_Factura.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[13].ToString())) && ins_Factura.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[14].ToString())) && upd_Camara.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[15].ToString())) && dlt_Camara.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[16].ToString())) && ins_Camara.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[17].ToString())) && pestana_cliente1.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[24].ToString())) && pestana_cliente2.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[25].ToString())) && pestana_cliente3.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[26].ToString())) && pestana_cliente4.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[27].ToString())) && pestana_cliente5.IsChecked == Convert.ToBoolean(Convert.ToInt32(c[25].ToString())))
                {
                    change_Sistema.IsEnabled = false;
                    safe = false;
                }
                else
                {
                    change_Sistema.IsEnabled = true;
                    safe = true;
                }

            if (!Nombre_Rol.Text.Equals(r.Nom))
            {
                Nombre_Rol.BorderBrush = Brushes.Red;
            }
            else
            {
                BrushConverter bc = new BrushConverter();
                Nombre_Rol.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
            }



            if (upd_Agenda.IsChecked.Value != Convert.ToBoolean(int.Parse(c[0].ToString())))
            {
                upd_Agenda.BorderBrush = Brushes.Red;

            }
            else
            {
                BrushConverter bc = new BrushConverter();
                upd_Agenda.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
            }
            if (dlt_Agenda.IsChecked.Value != Convert.ToBoolean(int.Parse(c[1].ToString())))
            {
                dlt_Agenda.BorderBrush = Brushes.Red;
            }
            else
            {
                BrushConverter bc = new BrushConverter();
                dlt_Agenda.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
            }
            if (ins_Agenda.IsChecked.Value != Convert.ToBoolean(int.Parse(c[2].ToString())))
            {
                ins_Agenda.BorderBrush = Brushes.Red;
            }
            else
            {
                BrushConverter bc = new BrushConverter();
                ins_Agenda.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
            }

            if (upd_Sistema.IsChecked.Value != Convert.ToBoolean(int.Parse(c[3].ToString())))
            {
                upd_Sistema.BorderBrush = Brushes.Red;
            }
            else
            {
                BrushConverter bc = new BrushConverter();
                upd_Sistema.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
            }
            if (dlt_Sistema.IsChecked.Value != Convert.ToBoolean(int.Parse(c[4].ToString())))
            {
                dlt_Sistema.BorderBrush = Brushes.Red;

            }
            else
            {
                BrushConverter bc = new BrushConverter();
                dlt_Sistema.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
            }
            if (ins_Sistema.IsChecked.Value != Convert.ToBoolean(int.Parse(c[5].ToString())))
            {
                ins_Sistema.BorderBrush = Brushes.Red;
            }
            else
            {
                BrushConverter bc = new BrushConverter();
                ins_Sistema.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
            }

            if (upd_Clientes.IsChecked.Value != Convert.ToBoolean(int.Parse(c[6].ToString())))
            {
                upd_Clientes.BorderBrush = Brushes.Red;

            }
            else
            {
                BrushConverter bc = new BrushConverter();
                upd_Clientes.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
            }
            if (dlt_Clientes.IsChecked.Value != Convert.ToBoolean(int.Parse(c[7].ToString())))
            {
                dlt_Clientes.BorderBrush = Brushes.Red;

            }
            else
            {
                BrushConverter bc = new BrushConverter();
                dlt_Clientes.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
            }
            if (ins_Clientes.IsChecked.Value != Convert.ToBoolean(int.Parse(c[8].ToString())))
            {
                ins_Clientes.BorderBrush = Brushes.Red;

            }
            else
            {
                BrushConverter bc = new BrushConverter();
                ins_Clientes.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
            }

            if (upd_Mapa.IsChecked.Value != Convert.ToBoolean(int.Parse(c[9].ToString())))
            {
                upd_Mapa.BorderBrush = Brushes.Red;

            }
            else
            {
                BrushConverter bc = new BrushConverter();
                upd_Mapa.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
            }
            if (dlt_Mapa.IsChecked.Value != Convert.ToBoolean(int.Parse(c[10].ToString())))
            {
                dlt_Mapa.BorderBrush = Brushes.Red;

            }
            else
            {
                BrushConverter bc = new BrushConverter();
                dlt_Mapa.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
            }
            if (ins_Mapa.IsChecked.Value != Convert.ToBoolean(int.Parse(c[11].ToString())))
            {
                ins_Mapa.BorderBrush = Brushes.Red;
            }
            else
            {
                BrushConverter bc = new BrushConverter();
                ins_Mapa.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
            }

            if (upd_Factura.IsChecked.Value != Convert.ToBoolean(int.Parse(c[12].ToString())))
            {
                upd_Factura.BorderBrush = Brushes.Red;

            }
            else
            {
                BrushConverter bc = new BrushConverter();
                upd_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
            }
            if (dlt_Factura.IsChecked.Value != Convert.ToBoolean(int.Parse(c[13].ToString())))
            {
                dlt_Factura.BorderBrush = Brushes.Red;


            }
            else
            {
                BrushConverter bc = new BrushConverter();
                dlt_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
            }
            if (ins_Factura.IsChecked.Value != Convert.ToBoolean(int.Parse(c[14].ToString())))
            {
                ins_Factura.BorderBrush = Brushes.Red;
            }
            else
            {
                BrushConverter bc = new BrushConverter();
                ins_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
            }

            if (upd_Camara.IsChecked.Value != Convert.ToBoolean(int.Parse(c[15].ToString())))
            {
                upd_Camara.BorderBrush = Brushes.Red;

            }
            else
            {
                BrushConverter bc = new BrushConverter();
                upd_Camara.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
            }
            if (dlt_Camara.IsChecked.Value != Convert.ToBoolean(int.Parse(c[16].ToString())))
            {
                dlt_Camara.BorderBrush = Brushes.Red;
            }
            else
            {
                BrushConverter bc = new BrushConverter();
                dlt_Camara.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
            }
            if (ins_Camara.IsChecked.Value != Convert.ToBoolean(int.Parse(c[17].ToString())))
            {
                ins_Camara.BorderBrush = Brushes.Red;
            }
            else
            {
                BrushConverter bc = new BrushConverter();
                ins_Camara.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
            }

            if (Agn.IsChecked.Value != Convert.ToBoolean(int.Parse(c[18].ToString())))
            {
                Agn.BorderBrush = Brushes.Red;

            }
            else
            {
                BrushConverter bc = new BrushConverter();
                Agn.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
            }

            if (Sst.IsChecked.Value != Convert.ToBoolean(int.Parse(c[19].ToString())))
            {
                Sst.BorderBrush = Brushes.Red;

            }
            else
            {
                BrushConverter bc = new BrushConverter();
                Sst.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
            }

            if (Cln.IsChecked.Value != Convert.ToBoolean(int.Parse(c[20].ToString())))
            {
                Cln.BorderBrush = Brushes.Red;
            }
            else
            {
                BrushConverter bc = new BrushConverter();
                Cln.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
            }

            if (Map.IsChecked.Value != Convert.ToBoolean(int.Parse(c[21].ToString())))
            {
                Map.BorderBrush = Brushes.Red;
            }
            else
            {
                BrushConverter bc = new BrushConverter();
                Map.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
            }

            if (Fct.IsChecked.Value != Convert.ToBoolean(int.Parse(c[22].ToString())))
            {
                Fct.BorderBrush = Brushes.Red;
            }
            else
            {
                BrushConverter bc = new BrushConverter();
                Fct.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
            }

            if (Cmr.IsChecked.Value != Convert.ToBoolean(int.Parse(c[23].ToString())))
            {
                Cmr.BorderBrush = Brushes.Red;
            }
            else
            {
                BrushConverter bc = new BrushConverter();
                Cmr.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
            }
            if (pestana_cliente1.IsChecked.Value != Convert.ToBoolean(int.Parse(c[24].ToString())))
            {
                pestana_cliente1.BorderBrush = Brushes.Red;

            }
            else
            {
                BrushConverter bc = new BrushConverter();
                pestana_cliente1.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
            }

            if (pestana_cliente2.IsChecked.Value != Convert.ToBoolean(int.Parse(c[25].ToString())))
            {
                pestana_cliente2.BorderBrush = Brushes.Red;
            }
            else
            {
                BrushConverter bc = new BrushConverter();
                pestana_cliente2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
            }

            if (pestana_cliente3.IsChecked.Value != Convert.ToBoolean(int.Parse(c[26].ToString())))
            {
                pestana_cliente3.BorderBrush = Brushes.Red;
            }
            else
            {
                BrushConverter bc = new BrushConverter();
                pestana_cliente3.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
            }

            if (pestana_cliente4.IsChecked.Value != Convert.ToBoolean(int.Parse(c[27].ToString())))
            {
                pestana_cliente4.BorderBrush = Brushes.Red;
            }
            else
            {
                BrushConverter bc = new BrushConverter();
                pestana_cliente4.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
            }

            if (pestana_cliente5.IsChecked.Value != Convert.ToBoolean(int.Parse(c[28].ToString())))
            {
                pestana_cliente5.BorderBrush = Brushes.Red;
            }
            else
            {
                BrushConverter bc = new BrushConverter();
                pestana_cliente5.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
            }
        }

        private void Button_Click2(object sender, RoutedEventArgs e)
        {
            MessageBoxResult result = MessageBox.Show("¿Quieres salir?", "Atención!", MessageBoxButton.YesNo, MessageBoxImage.Question);
            if (result == MessageBoxResult.Yes)
            {
                System.Windows.Forms.Application.Restart();
                System.Windows.Application.Current.Shutdown();
            }


        }

        private void Clientes_HoraEntrada_ValueChanged(object sender, RoutedPropertyChangedEventArgs<object> e)
        {

            Clientes cc = Clientes.SelectedItem as Clientes;
            if (mirar2)
                if (!(cc is null))
                {
                    int pot = 0;
                    if (Potencia.SelectedItem != null)
                    {
                        Potencia pp = Potencia.SelectedItem as Potencia;
                        pot = pp.Id;
                    }

                    int b = 0;
                    if (Switch.IsChecked.Value)
                    {
                        b = 1;
                    }

                    Parcelas p = numero_plaza.SelectedItem as Parcelas;
                    if (p == null)
                    {
                        p = new Parcelas();
                        p.id = 0;
                    }
                    bool pos = false;
                    if (bdr2.HorizontalAlignment == HorizontalAlignment.Left)
                        pos = true;
                    //console.writeline(p.id + " " + cc.n_plaza);
                    string cd = "";
                    string cd2 = "";
                    if (cc.caducidad.Contains("/"))
                    {
                        cd = cc.caducidad.Split('/')[0];
                        cd2 = cc.caducidad.Split('/')[1];
                    }

                    if (numero_secreto.Text.Equals(cc.numero_secreto.ToString()) && caducidad.Text.Equals(cd) && caducidad1.Text.Equals(cd2) && titular_tarjeta.Text.Equals(cc.titular) && numero_tarjeta.Text.Equals(cc.n_tarjeta.ToString()) && mail_cliente.Text.Equals(cc.mail) && telefonos_cliente2.Text.Equals(cc.telefon2) && telefonos_cliente.Text.Equals(cc.telefon1) && pais.Text.Equals(cc.Pais) && provincia.Text.Equals(cc.Provincia) && poblacion_cliente.Text.Equals(cc.poblacio) && CP.Text.Equals(cc.codigo_postal) && puerta.Text.Equals(cc.Puerta) && piso.Text.Equals(cc.Piso) && numero.Text.Equals(cc.Numero) && direccion_cliente.Text.Equals(cc.direccion) && dni.Text.Equals(cc.dni) && apellidos_cliente.Text.Equals(cc.apellidos_cliente) && nombre_cliente.Text.Equals(cc.nombre_cliente) && numero_cliente.Text.Equals(cc.n_cliemte + "") && Clientes_FechaEntrada.SelectedDate == cc.Fecha_In && Clientes_FechaSalida.SelectedDate == cc.Fecha_Out && vehiculo1.Text.Equals(cc.Vehiculo1) && matricula1.Text.Equals(cc.matricula1) && vehiculo2.Text.Equals(cc.Vehiculo2) && matricula2.Text.Equals(cc.matricula2) && vehiculo3.Text.Equals(cc.Vehiculo3) && matricula3.Text.Equals(cc.matricula3) && vehiculo4.Text.Equals(cc.Vehiculo4) && matricula2.Text.Equals(cc.matricula2) && pot == cc.Potencia && nota1.Text.Equals(cc.Nota1) && p.id == int.Parse(cc.n_plaza) && Clientes_HoraEntrada.Text.Equals(cc.Hora_entrada) && Clientes_HoraSalida.Text.Equals(cc.Hora_salida) && Iban.Text.Equals(cc.iban) && Swift.Text.Equals(cc.swift) && entidad_bancaria.Text.Equals(cc.entidad_bacnaria) && Iban2.Text.Equals(cc.iban2) && Swift2.Text.Equals(cc.swift2) && entidad_bancaria2.Text.Equals(cc.entidad_bacnaria2) && mail_cliente2.Text.Equals(cc.mail2) && pos == cc.DeBaja && Fecha_Entrada_Estado.SelectedDate == cc.fecha_entrada_estado && Fecha_Contrato.SelectedDate == cc.fecha_contrato && Fecha_Pago.SelectedDate == cc.fecha_pago && medidas_vehiculo1.Text.Equals(cc.Medidas_Vehiculo1))
                    {
                        Console.WriteLine("31596");
                        change_client.IsEnabled = false;

                        change_client.IsEnabled = false;
                        safe = false;
                        //añadir_evento.IsEnabled = false;
                    }
                    else
                    {
                        Console.WriteLine("!31596");
                        change_client.IsEnabled = true;

                        change_client.IsEnabled = true;
                        safe = true;
                        //añadir_evento.IsEnabled = true;
                    }
                    if (Clientes_FechaEntrada.SelectedDate != null && Clientes_FechaSalida.SelectedDate != null)
                    {


                        //console.writeline(DateTime.Compare((DateTime)Clientes_FechaEntrada.SelectedDate, (DateTime)Clientes_FechaSalida.SelectedDate));

                        if (DateTime.Compare((DateTime)Clientes_FechaEntrada.SelectedDate, (DateTime)Clientes_FechaSalida.SelectedDate) > 0)
                        {
                            Console.WriteLine("32007");
                            Clientes_FechaEntrada.BorderBrush = Brushes.Red;
                            Clientes_FechaSalida.BorderBrush = Brushes.Red;
                            change_client.IsEnabled = false;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Console.WriteLine("!32007");
                            Clientes_FechaEntrada.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                            Clientes_FechaSalida.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        }
                    }

                    if (!(numero_cliente.Text.Equals(cc.n_cliemte + "")))
                    {
                        numero_cliente.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        numero_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    }
                    Parcelas pr = numero_plaza.SelectedItem as Parcelas;
                    if (pr != null)
                    {
                        if (cc.n_plaza != pr.id + "")
                        {

                            numero_plaza.Foreground = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            numero_plaza.Foreground = Brushes.Black;

                        }
                    }
                    else
                    {
                        if (numero_plaza.SelectedItem != null)
                            numero_plaza.BorderBrush = Brushes.Red;
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            numero_plaza.Foreground = Brushes.Black;
                        }
                    }




                    if (!(cc.nombre_cliente.Equals(nombre_cliente.Text)))
                    {
                        nombre_cliente.BorderBrush = Brushes.Red;


                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        nombre_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }


                    if (!(cc.apellidos_cliente.Equals(apellidos_cliente.Text)))
                    {
                        apellidos_cliente.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        apellidos_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }


                    if (!(cc.dni.Equals(dni.Text)))
                    {
                        dni.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        dni.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }



                    if (!(cc.direccion.Equals(direccion_cliente.Text)))
                    {

                        direccion_cliente.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        direccion_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }

                    if (!(cc.poblacio.Equals(poblacion_cliente.Text)))
                    {
                        poblacion_cliente.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        poblacion_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }

                    if (!(cc.telefon1.Equals(telefonos_cliente.Text)))
                    {

                        telefonos_cliente.BorderBrush = Brushes.Red;


                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        telefonos_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }

                    if (!(cc.telefon2.Equals(telefonos_cliente2.Text)))
                    {
                        telefonos_cliente2.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        telefonos_cliente2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }

                    if (!cc.codigo_postal.Equals(CP.Text))
                    {
                        CP.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        CP.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }
                    if (!(cc.mail.Equals(mail_cliente.Text)))
                    {
                        mail_cliente.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        mail_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }
                    if (!(cc.mail2.Equals(mail_cliente2.Text)))
                    {
                        mail_cliente2.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        mail_cliente2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }

                    /*u.Luz = "s";
                    u.Nota1 = "";
                    u.Nota2 = "";*/
                    /*if (!(cc.Metodo_Pago.ToString().Equals(Metodo_pago.Text)))
                    {
                        a = true;
                        sql_query += "Metodo_Pago=" + Metodo_pago.SelectedIndex + ", ";
                        parametros.Add("Metodo_Pago:" + Metodo_pago.SelectedIndex);
                    }*/

                    if (!(cc.titular.Equals(titular_tarjeta.Text)))
                    {
                        titular_tarjeta.BorderBrush = Brushes.Red;


                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        titular_tarjeta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }
                    string fecha = caducidad + "/" + caducidad1;
                    if (cc.caducidad.Contains("/"))
                        if (!(cc.caducidad.Equals(caducidad.Text + "/" + caducidad1.Text)))
                        {
                            caducidad.BorderBrush = Brushes.Red;
                            caducidad1.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            caducidad.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                            caducidad1.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }



                    if (!(cc.numero_secreto.Equals(numero_secreto.Text)))
                    {
                        numero_secreto.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        numero_secreto.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }

                    if (!(cc.n_tarjeta.Equals(numero_tarjeta.Text)))
                    {
                        numero_tarjeta.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        numero_tarjeta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }

                    if (!(cc.entidad_bacnaria.Equals(entidad_bancaria.Text)))
                    {
                        entidad_bancaria.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        entidad_bancaria.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }

                    if (!(cc.iban.Equals(Iban.Text)))
                    {
                        Iban.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Iban.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }

                    if (!(cc.swift.Equals(Swift.Text)))
                    {
                        Swift.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Swift.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }



                    if (!(cc.Pais.Equals(pais.Text)))
                    {
                        pais.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        pais.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }
                    if (!(cc.Numero.Equals(numero.Text)))
                    {
                        numero.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        numero.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }
                    if (!(cc.Piso.Equals(piso.Text)))
                    {
                        piso.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        piso.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }
                    if (!(cc.Puerta.Equals(puerta.Text)))
                    {
                        puerta.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        puerta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }
                    if (!(cc.Provincia.Equals(provincia.Text)))
                    {
                        provincia.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        provincia.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }



                    if (!(Clientes_FechaEntrada.SelectedDate.Equals(cc.Fecha_In)) && Clientes_FechaEntrada.SelectedDate != null)
                    {
                        Clientes_FechaEntrada.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Clientes_FechaEntrada.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }
                    if (!(Clientes_FechaSalida.SelectedDate.Equals(cc.Fecha_Out)))
                    {
                        Clientes_FechaSalida.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Clientes_FechaSalida.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }

                    if (!(vehiculo1.Text.Equals(cc.Vehiculo1)))
                    {
                        vehiculo1.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        vehiculo1.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }
                    if (!(matricula1.Text.Equals(cc.matricula1)))
                    {
                        matricula1.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        matricula1.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }


                    if (!(vehiculo2.Text.Equals(cc.Vehiculo2)))
                    {
                        vehiculo2.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        vehiculo2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }
                    if (!(matricula2.Text.Equals(cc.matricula2)))
                    {
                        matricula2.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        matricula2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }

                    int pott = 0;
                    if (Potencia.SelectedItem != null)
                    {
                        Potencia poten = Potencia.SelectedItem as Potencia;
                        if (cc.Potencia != poten.Id)
                        {
                            Potencia.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Potencia.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                    }


                    int b2 = 0;
                    if (Switch.IsChecked.Value)
                    {
                        b2 = 1;
                    }
                    if (b2 != cc.Switch)
                    {
                        Switch.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Switch.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }





                    if (!nota1.Text.Equals(cc.Nota1))
                    {

                        nota1.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        nota1.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }
                    try
                    {
                        DateTime dt2 = (DateTime)Clientes_HoraEntrada.Value;

                        if (!dt2.ToString("H:mm").Equals(cc.Hora_entrada))
                        {
                            Clientes_HoraEntrada.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Clientes_HoraEntrada.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                    }
                    catch (Exception ee) {
                        var st = new StackTrace(ee, true); // Get the top stack frame var frame = st.GetFrame(0); // Get the line number from the stack frame   var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                        var frame = st.GetFrame(0);
                        var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                        Peta(ee, line + "");
                        Console.WriteLine(line + ": " + ee.Message);
                    }
                    DateTime dt3 = (DateTime)Clientes_HoraSalida.Value;
                    if (!dt3.ToString("H:mm").Equals(cc.Hora_salida))
                    {
                        Clientes_HoraSalida.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Clientes_HoraSalida.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }
                    if (!(cc.entidad_bacnaria2.Equals(entidad_bancaria2.Text)))
                    {

                        entidad_bancaria2.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        entidad_bancaria2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }

                    if (!(cc.iban2.Equals(Iban2.Text)))
                    {
                        Iban2.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Iban2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }

                    if (!(cc.swift2.Equals(Swift2.Text)))
                    {
                        Swift2.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Swift2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }

                    bool bb = false;
                    if (bdr2.HorizontalAlignment == HorizontalAlignment.Left)
                        pos = true;
                    /*if (!(cc.DeBaja == bb))
                    {
                        numero_cliente.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        apellidos_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }*/


                    if (!Fecha_Entrada_Estado.SelectedDate.Equals(cc.fecha_entrada_estado))
                    {
                        Fecha_Entrada_Estado.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Fecha_Entrada_Estado.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }

                    if (!Fecha_Contrato.SelectedDate.Equals(cc.fecha_contrato))
                    {
                        Fecha_Contrato.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Fecha_Contrato.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }

                    if (!(cc.fecha_pago.Equals(Fecha_Pago.SelectedDate)))
                    {
                        Fecha_Pago.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Fecha_Pago.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }
                    if (!(cc.Medidas_Vehiculo1.Equals(medidas_vehiculo1.Text)))
                    {
                        medidas_vehiculo1.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        medidas_vehiculo1.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }

                }
        }

        private void all_MouseMove(object sender, MouseEventArgs e)
        {
            if (tabcontrol.IsEnabled)
            {
                inactividad.Change(
                Timeout.Infinite,
                Timeout.Infinite);
                inactividad = new System.Threading.Timer(ObservarTodo, null, timer, timer);
            }

        }

        private void all_KeyDown(object sender, KeyEventArgs e)
        {
            if (tabcontrol.IsEnabled)
            {
                inactividad.Change(
            Timeout.Infinite,
            Timeout.Infinite);
                inactividad = new System.Threading.Timer(ObservarTodo, null, timer, timer);
            }
        }

        private void all_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            if (tabcontrol.IsEnabled)
            {
                inactividad.Change(
            Timeout.Infinite,
            Timeout.Infinite);
                inactividad = new System.Threading.Timer(ObservarTodo, null, timer, timer);
            }


        }

        private void Cambiar_imagen_mapa(object sender, RoutedEventArgs e)
        {
            System.Windows.Forms.OpenFileDialog ofd = new System.Windows.Forms.OpenFileDialog();
            string targetPath = Directory.GetCurrentDirectory();
            string fileName = "test.txt";
            if (ofd.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {


                img.ImageSource = new BitmapImage(new Uri(ofd.FileName), new System.Net.Cache.RequestCachePolicy());
                //console.writeline(ofd.FileName);
                fileName = "1.png";
                targetPath = System.IO.Path.Combine(targetPath, fileName);
                System.IO.File.Copy(ofd.FileName, targetPath, true);
                FileInfo fi = new FileInfo(targetPath);
                fi.Open(FileMode.Open);
                mapa_menu.Items.Refresh();

            }



        }

        private void lista_productos_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (lista_productos.SelectedItem != null)
            {
                //deleteFactura.Visibility = Visibility.Visible;

                deleteFactura.Visibility = Visibility.Visible;
            }
            else
            {
                deleteFactura.Visibility = Visibility.Collapsed;

            }
        }

        private void Border_MouseLeftButtonDown_11(object sender, MouseButtonEventArgs e)
        {
            if (e.ClickCount == 2)
            {


                ProductosRegistrados p = lista_productos.SelectedItem as ProductosRegistrados;
                CargarIva();
                vprdn.Close();
                vprdn = new VentanaProductoNuevo(liva, p);
                vprdn.Show();
            }
        }

        private void Mapa_buscar_GotFocus(object sender, RoutedEventArgs e)
        {

        }

        private void Mapa_buscar_LostFocus(object sender, RoutedEventArgs e)
        {

        }

        private void Mapa_buscar_TextChanged(object sender, TextChangedEventArgs e)
        {

        }

        private void filtrar_Mapa_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {

        }

        private void Mapa_buscar_GotFocus_1(object sender, RoutedEventArgs e)
        {
           

                //Mapa_buscar.Text = "";


        }

        private void Mapa_buscar_LostFocus_1(object sender, RoutedEventArgs e)
        {
            /*if (Mapa_buscar.Text.Equals("") || Mapa_buscar.Text.Equals(" "))
            {

                Mapa_buscar.Text = "Buscar...";

            }*/
        }

        private void Mapa_buscar_TextChanged_1(object sender, TextChangedEventArgs e)
        {
          
        }

        private void filtrar_Mapa_SelectionChanged_1(object sender, SelectionChangedEventArgs e)
        {

        }

        private void debaja_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            bool pos = false;

            if (bdr2.HorizontalAlignment == HorizontalAlignment.Right)
            {


               
                bdr2.HorizontalAlignment = HorizontalAlignment.Left;
                pos = true;


            }
            else
            {

               
                bdr2.HorizontalAlignment = HorizontalAlignment.Right;
                if (bdrpower.HorizontalAlignment == HorizontalAlignment.Left)
                {
                    MouseButtonEventArgs mb = new MouseButtonEventArgs(Mouse.PrimaryDevice, 0, MouseButton.Right);
                    power_MouseLeftButtonDown(power, mb);
                }



            }

            Clientes cc = Clientes.SelectedItem as Clientes;
            if (mirar2)
                if (!(cc is null))
                {
                    int pot = 0;
                    if (Potencia.SelectedItem != null)
                    {
                        Potencia pp = Potencia.SelectedItem as Potencia;
                        pot = pp.Id;
                    }
                    int b = 0;
                    if (Switch.IsChecked.Value)
                    {
                        b = 1;
                    }
                    Parcelas p = numero_plaza.SelectedItem as Parcelas;


                    if (p == null)
                        p = new Parcelas();

                    if (cc.Fecha_In != null)
                    {

                    }
                    else
                    {

                    }
                    ////console.writeline(numero_secreto.Text.Equals(cc.numero_secreto.ToString()) + " " + caducidad.Text.Equals(cc.caducidad.Split('/')[0]) + " " + caducidad1.Text.Equals(cc.caducidad.Split('/')[1]) + " " + titular_tarjeta.Text.Equals(cc.titular) + " " + numero_tarjeta.Text.Equals(cc.n_tarjeta.ToString()) + " " + mail_cliente.Text.Equals(cc.mail) + " " + telefonos_cliente2.Text.Equals(cc.telefon2) + " " + telefonos_cliente.Text.Equals(cc.telefon1));
                    //console.writeline(pais.Text.Equals(cc.Pais) + " " + provincia.Text.Equals(cc.Provincia) + " " + poblacion_cliente.Text.Equals(cc.poblacio) + " " + CP.Text.Equals(cc.codigo_postal) + " " + puerta.Text.Equals(cc.Puerta) + " " + piso.Text.Equals(cc.Piso) + " " + numero.Text.Equals(cc.Numero) + " " + direccion_cliente.Text.Equals(cc.direccion) + " " + dni.Text.Equals(cc.dni) + " " + apellidos_cliente.Text.Equals(cc.apellidos_cliente) + " " + nombre_cliente.Text.Equals(cc.nombre_cliente));
                    //console.writeline(numero_cliente.Text.Equals(cc.n_cliemte) + " " + Clientes_FechaEntrada.SelectedDate.Equals(cc.Fecha_In) + " " + Clientes_FechaSalida.SelectedDate.Equals(cc.Fecha_Out) + " " + vehiculo1.Text.Equals(cc.Vehiculo1) + " " + matricula1.Text.Equals(cc.matricula1) + " " + numero_bastidor.Text.Equals(cc.Numero_Bastidor1) + " " + vehiculo2.Text.Equals(cc.Vehiculo2) + " " + matricula2.Text.Equals(cc.matricula2) + " " + numero_bastidor2.Text.Equals(cc.Numero_Bastidor2) + " " + nota1.Text.Equals(cc.Nota1) + " " + Clientes_HoraEntrada.Text.Equals(cc.Hora_entrada) + " " + Clientes_HoraSalida.Text.Equals(cc.Hora_salida));
                    //console.writeline((b == cc.Switch) + " " + (p.id == int.Parse(cc.n_plaza)) + " " + (pot == cc.Potencia));

                    if (p.id == null)
                        p.id = 0;

                    string cd = "";
                    string cd2 = "";
                    if (cc.caducidad.Contains("/"))
                    {
                        cd = cc.caducidad.Split('/')[0];
                        cd2 = cc.caducidad.Split('/')[1];
                    }
                    Console.WriteLine(email_cliente.Text.Equals(cc.mail));
                    Console.WriteLine(telefono2_cliente_alta.Text.Equals(cc.telefon2));
                    Console.WriteLine(telefono_cliente_alta.Text.Equals(cc.telefon1));
                    Console.WriteLine(pais_cliente_alta.Text.Equals(cc.Pais));
                    Console.WriteLine(provincia_cliente_alta.Text.Equals(cc.Provincia));
                    Console.WriteLine(poblacion_cliente_alta.Text.Equals(cc.poblacio));
                    Console.WriteLine(cp_cliente_alta.Text.Equals(cc.codigo_postal));
                    Console.WriteLine(direccion_cliente_alta.Text.Equals(cc.direccion));
                    Console.WriteLine(apellido_cliente_alta.Text.Equals(cc.apellidos_cliente) + " " + nombre_cliente_alta.Text.Equals(cc.nombre_cliente));
                    Console.WriteLine(numero_cliente_alta.Text.Equals(cc.n_cliemte + ""));
                    string aa = Clientes_FechaEntrada_alta.SelectedDate.ToString();
                    string aa2 = cc.Fecha_In.ToString();

                    Console.WriteLine(Clientes_FechaEntrada_alta.SelectedDate == cc.Fecha_In);
                    Console.WriteLine(Clientes_FechaSalida_alta.SelectedDate.Equals(cc.Fecha_Out)); //
                    Console.WriteLine(Vehiculo1_alta.Text.Equals(cc.Vehiculo1 + "")); //
                    Console.WriteLine(bastidor1_alta.Text.Equals(cc.matricula1)); //
                    Console.WriteLine(Vehiculo2_alta.Text.Equals(cc.Vehiculo2) + " " + bastidor2_alta.Text.Equals(cc.matricula2)); //
                    Console.WriteLine((nota1_alta.Text.Equals(cc.Nota1))); //
                    //Console.WriteLine((b == cc.Switch)); //
                    Console.WriteLine((p.id == int.Parse(cc.n_plaza))); //
                    Console.WriteLine((Clientes_HoraEntrada_alta.Text.Equals(cc.Hora_entrada))); //
                    Console.WriteLine((Clientes_HoraPeriodo_alta.Text.Equals(cc.Hora_salida))); //
                    Console.WriteLine((email_cliente2.Text.Equals(cc.mail2))); //
                    Console.WriteLine((pos == cc.DeBaja)); //
                   
                    Console.WriteLine((medidas_alta.Text.Equals(cc.Medidas_Vehiculo1)));
                    //console.writeline(p.id + " " + cc.n_plaza);
                    if (numero_secreto.Text.Equals(cc.numero_secreto.ToString()) && caducidad.Text.Equals(cd) && caducidad1.Text.Equals(cd2) && titular_tarjeta.Text.Equals(cc.titular) && numero_tarjeta.Text.Equals(cc.n_tarjeta.ToString()) && mail_cliente.Text.Equals(cc.mail) && telefonos_cliente2.Text.Equals(cc.telefon2) && telefonos_cliente.Text.Equals(cc.telefon1) && pais.Text.Equals(cc.Pais) && provincia.Text.Equals(cc.Provincia) && poblacion_cliente.Text.Equals(cc.poblacio) && CP.Text.Equals(cc.codigo_postal) && puerta.Text.Equals(cc.Puerta) && piso.Text.Equals(cc.Piso) && numero.Text.Equals(cc.Numero) && direccion_cliente.Text.Equals(cc.direccion) && dni.Text.Equals(cc.dni) && apellidos_cliente.Text.Equals(cc.apellidos_cliente) && nombre_cliente.Text.Equals(cc.nombre_cliente) && numero_cliente.Text.Equals(cc.n_cliemte + "") && Clientes_FechaEntrada.SelectedDate == cc.Fecha_In && Clientes_FechaSalida.SelectedDate == cc.Fecha_Out && vehiculo1.Text.Equals(cc.Vehiculo1) && matricula1.Text.Equals(cc.matricula1) && vehiculo2.Text.Equals(cc.Vehiculo2) && matricula2.Text.Equals(cc.matricula2) && vehiculo3.Text.Equals(cc.Vehiculo3) && matricula3.Text.Equals(cc.matricula3) && vehiculo4.Text.Equals(cc.Vehiculo4) && matricula2.Text.Equals(cc.matricula2) && pot == cc.Potencia && nota1.Text.Equals(cc.Nota1) && p.id == int.Parse(cc.n_plaza) && Clientes_HoraEntrada.Text.Equals(cc.Hora_entrada) && Clientes_HoraSalida.Text.Equals(cc.Hora_salida) && Iban.Text.Equals(cc.iban) && Swift.Text.Equals(cc.swift) && entidad_bancaria.Text.Equals(cc.entidad_bacnaria) && Iban2.Text.Equals(cc.iban2) && Swift2.Text.Equals(cc.swift2) && entidad_bancaria2.Text.Equals(cc.entidad_bacnaria2) && mail_cliente2.Text.Equals(cc.mail2) && pos == cc.DeBaja && Fecha_Entrada_Estado.SelectedDate == cc.fecha_entrada_estado && Fecha_Contrato.SelectedDate == cc.fecha_contrato && Fecha_Pago.SelectedDate == cc.fecha_pago && medidas_vehiculo1.Text.Equals(cc.Medidas_Vehiculo1) && bastidor.Text.Equals(cc.Numero_Bastidor1) && nbastidor2.Text.Equals(cc.Numero_Bastidor2) && nbastidor3.Text.Equals(cc.Numero_Bastidor3) && nbastidor4.Text.Equals(cc.Numero_Bastidor4) && medidas2.Text.Equals(cc.Medidas_Vehiculo2) && medidas3.Text.Equals(cc.Medidas_Vehiculo3) && medidas4.Text.Equals(cc.Medidas_Vehiculo4) && nota.Text.Equals(cc.Nota1) && tarjeta.Text.Equals(cc.N_tarjeta) && nota1_alta2.Text.Equals(cc.Nota2))
                    {
                        Console.WriteLine("33077");
                        change_client.IsEnabled = false;

                        change_client.IsEnabled = false;
                        safe = false;
                        //añadir_evento.IsEnabled = false;
                    }
                    else
                    {
                        Console.WriteLine("!33077");
                        change_client.IsEnabled = true;

                        change_client.IsEnabled = true;
                        safe = true;
                        //añadir_evento.IsEnabled = true;
                    }
                }
        }

        private void gotoPDF_Click(object sender, RoutedEventArgs e)
        {
            if (Clientes.SelectedItem != null)
            {
                cliente = true;
                Factura(Factura_button, RoutedEventArgs);
                AddnewFactura_Click(AddnewFactura, RoutedEventArgs);
                cliente = false;
            }


        }

        private void ComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (lista_parcelas != null)
                switch (Filtrar_parcela.SelectedIndex)
                {
                    case 0:
                        {
                            CargarParcela();
                        }
                        break;


                    case 1:
                        {
                            List<Parcelas> lc = new List<Parcelas>();


                            lc = lprc.Select(x => x).Where(x => x.ocupada == 1).ToList();


                            lista_parcelas.Items.Clear();
                            foreach (Parcelas cl in lc)
                            {
                                lista_parcelas.Items.Add(cl);
                            }
                        }
                        break;

                    case 2:
                        {
                            List<Parcelas> lc = new List<Parcelas>();


                            lc = lprc.Select(x => x).Where(x => x.ocupada == 0).ToList();


                            lista_parcelas.Items.Clear();
                            foreach (Parcelas cl in lc)
                            {
                                lista_parcelas.Items.Add(cl);
                            }
                        }
                        break;
                }

        }

        private void lock_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {



            if (!locker)
            {

                lockk.Background = Brushes.LightGray;
                bdr3.HorizontalAlignment = HorizontalAlignment.Right;

                unlock.Source= new BitmapImage(new Uri(@"/iconos/unlockgray.png", UriKind.RelativeOrAbsolute)); 
                lockkk.Source= new BitmapImage(new Uri(@"/iconos/lock.png", UriKind.RelativeOrAbsolute)); 


                locker = true;

            }
            else
            {
                lockk.Background = Brushes.LightGray;
                bdr3.HorizontalAlignment = HorizontalAlignment.Left;
                unlock.Source = new BitmapImage(new Uri(@"/iconos/unlock.png", UriKind.RelativeOrAbsolute));
                lockkk.Source = new BitmapImage(new Uri("/iconos/lockgray.png", UriKind.RelativeOrAbsolute));
                locker = false;

            }

            Button_Click(lockb, RoutedEventArgs);
        }

        private void Direccion_Parcela_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (lista_parcelas2.SelectedItem != null&& lista_parcelas.SelectedItem != null)
            {
                Parcelas pp = lista_parcelas.SelectedItem as Parcelas;
                if (pp.nom.Equals(Nombre_Parcela.Text) && pp.Distrito.Equals(Distrito.Text) && Meidas_Parcela.Text.Equals(pp.Medidas) && Orientación.Text.Equals(pp.Orientacion) && Descripción.Text.Equals(pp.Descripción) && Nota_Parcela.Text.Equals(pp.Nota))
                    change_mapa.IsEnabled = false;
                else
                    change_mapa.IsEnabled = true;
                if (Direccion_Parcela.SelectedItem != null)
                {
                    Direcciones d = Direccion_Parcela.SelectedItem as Direcciones;
                    if (pp.Direccion != d.Id)
                    {
                        Direccion_Parcela.Foreground = Brushes.Red;
                        change_mapa.IsEnabled = true;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Direccion_Parcela.Foreground = Brushes.Black;
                    }
                }


                if (!Nombre_Parcela.Text.Equals(pp.nom))
                {
                    Nombre_Parcela.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Nombre_Parcela.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (!Descripción.Text.Equals(pp.Descripción))
                {

                    Descripción.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Descripción.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (!Distrito.Text.Equals(pp.Distrito))
                {
                    Distrito.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Distrito.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (!Orientación.Text.Equals(pp.Orientacion))
                {
                    Orientación.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Orientación.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (!Nota_Parcela.Text.Equals(pp.Nota))
                {
                    Nota_Parcela.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Nota_Parcela.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (!Meidas_Parcela.Text.Equals(pp.Medidas))
                {
                    Nota_Parcela.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Nota_Parcela.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
            }
        }

        private void on_off_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {

        }

        private void MirarFicha(object sender, TextChangedEventArgs e)
        {
            if (mirar2)
                if (Clientes.SelectedItem != null && !newclient)
                {


                    Parcelas pa = numero_plaza_alta.SelectedItem as Parcelas;
                    DateTime dt1 = (DateTime)Clientes_HoraEntrada_alta.Value;
                    DateTime dt2 = (DateTime)Clientes_HoraSalida.Value;
                    Clientes cc = Clientes.SelectedItem as Clientes;
                    bool a = false;


                    if (!dt1.ToString("H:mm").Equals(cc.Hora_entrada))
                    {
                        Clientes_HoraEntrada_alta.BorderBrush = Brushes.Red;
                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Clientes_HoraEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }
                    if (!dt2.ToString("H:mm").Equals(cc.Hora_salida))
                    {
                        Clientes_HoraSalida.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Clientes_HoraSalida.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }
                    if (!importe_alta.Text.Equals(cc.importe))
                    {
                        importe_alta.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        importe_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }



                    if (!(cc is null))
                    {
                       
                        int b = 0;
                        if (on_off_border.HorizontalAlignment == HorizontalAlignment.Right)
                        {
                            b = 1;
                        }
                        Parcelas p = numero_plaza.SelectedItem as Parcelas;


                        if (p == null)
                            p = new Parcelas();

                        if (cc.Fecha_In != null)
                        {

                        }
                        else
                        {

                        }


                        if (p.id == null)
                            p.id = 0;
                        bool pos = false;
                        if (alta_baja.HorizontalAlignment == HorizontalAlignment.Left)
                            pos = true;
                        //console.writeline(p.id + " " + cc.n_plaza);

                        Console.WriteLine(email_cliente.Text.Equals(cc.mail));
                        Console.WriteLine(telefono2_cliente_alta.Text.Equals(cc.telefon2));
                        Console.WriteLine(telefono_cliente_alta.Text.Equals(cc.telefon1));
                        Console.WriteLine(pais_cliente_alta.Text.Equals(cc.Pais));
                        Console.WriteLine(provincia_cliente_alta.Text.Equals(cc.Provincia));
                        Console.WriteLine(poblacion_cliente_alta.Text.Equals(cc.poblacio));
                        Console.WriteLine(cp_cliente_alta.Text.Equals(cc.codigo_postal));
                        Console.WriteLine(direccion_cliente_alta.Text.Equals(cc.direccion));
                        Console.WriteLine(apellido_cliente_alta.Text.Equals(cc.apellidos_cliente) +" "+ nombre_cliente_alta.Text.Equals(cc.nombre_cliente));
                        Console.WriteLine(numero_cliente_alta.Text.Equals(cc.n_cliemte + ""));
                        string aa = Clientes_FechaEntrada_alta.SelectedDate.ToString();
                        string aa2 = cc.Fecha_In.ToString();

                        
                        Console.WriteLine(Vehiculo1_alta.Text.Equals(cc.Vehiculo1+"")); //
                        Console.WriteLine(bastidor1_alta.Text.Equals(cc.matricula1)); //
                        Console.WriteLine(Vehiculo2_alta.Text.Equals(cc.Vehiculo2) +" "+ bastidor2_alta.Text.Equals(cc.matricula2)); //
                        Console.WriteLine((nota1_alta.Text.Equals(cc.Nota1))); //
                        Console.WriteLine((b == cc.Switch)); //
                        Console.WriteLine((p.id == int.Parse(cc.n_plaza))); //
                        Console.WriteLine((Clientes_HoraEntrada_alta.Text.Equals(cc.Hora_entrada))); //
                        Console.WriteLine((Clientes_HoraPeriodo_alta.Text.Equals(cc.Hora_salida))); //
                        Console.WriteLine((email_cliente2.Text.Equals(cc.mail2))); //
                        Console.WriteLine((pos == cc.DeBaja)); //
                        Console.WriteLine((Clientes_FechaPeriodo_alta.SelectedDate == cc.fecha_entrada_estado)); //
                        Console.WriteLine((Clientes_FechaPago_alta.SelectedDate == cc.fecha_pago));
                        Console.WriteLine((medidas_alta.Text.Equals(cc.Medidas_Vehiculo1)));


                        if (tarjeta_alta.Text.Equals(cc.N_tarjeta)&&email_cliente.Text.Equals(cc.mail) && telefono2_cliente_alta.Text.Equals(cc.telefon2) && telefono_cliente_alta.Text.Equals(cc.telefon1) && pais_cliente_alta.Text.Equals(cc.Pais) && provincia_cliente_alta.Text.Equals(cc.Provincia) && poblacion_cliente_alta.Text.Equals(cc.poblacio) && cp_cliente_alta.Text.Equals(cc.codigo_postal) && direccion_cliente_alta.Text.Equals(cc.direccion) && dni_cliente_alta.Text.Equals(cc.dni) && apellido_cliente_alta.Text.Equals(cc.apellidos_cliente) && nombre_cliente_alta.Text.Equals(cc.nombre_cliente) && numero_cliente_alta.Text.Equals(cc.n_cliemte + "") && Clientes_FechaEntrada_alta.SelectedDate == cc.Fecha_In && Clientes_FechaSalida_alta.SelectedDate == cc.Fecha_Out && Vehiculo1_alta.Text.Equals(cc.Vehiculo1) && bastidor1_alta.Text.Equals(cc.matricula1) && Vehiculo2_alta.Text.Equals(cc.Vehiculo2) && bastidor2_alta.Text.Equals(cc.matricula2) && nota1_alta.Text.Equals(cc.Nota1) && b == cc.Switch && p.id == int.Parse(cc.n_plaza) && Clientes_HoraEntrada_alta.Text.Equals(cc.Hora_entrada) && Clientes_HoraPeriodo_alta.Text.Equals(cc.Hora_salida) && email_cliente2.Text.Equals(cc.mail2) && pos == cc.DeBaja && Clientes_FechaPeriodo_alta.SelectedDate == cc.fecha_entrada_estado && Clientes_FechaPago_alta.SelectedDate == cc.fecha_pago && medidas_alta.Text.Equals(cc.Medidas_Vehiculo1)&& bastidor_alta.Text.Equals(cc.Numero_Bastidor1) && nbastidor2_alta.Text.Equals(cc.Numero_Bastidor2) && nbastidor3_alta.Text.Equals(cc.Numero_Bastidor3) && nbastidor4_alta.Text.Equals(cc.Numero_Bastidor4)&&medidas2_alta.Text.Equals(cc.Medidas_Vehiculo2) && medidas3_alta.Text.Equals(cc.Medidas_Vehiculo3) && medidas4_alta.Text.Equals(cc.Medidas_Vehiculo4))
                        {
                            Console.WriteLine("33060");
                            change_client.IsEnabled = false;

                            safe = false;
                            //añadir_evento.IsEnabled = false;
                        }
                        else
                        {
                            Console.WriteLine("!33060");
                            change_client.IsEnabled = true;

                            safe = true;
                            //añadir_evento.IsEnabled = true;
                        }

                        try
                        {

                            if (!(tarjeta_alta.Text.Equals(cc.N_tarjeta + "")))
                            {
                                tarjeta_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                tarjeta_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                            }
                            if (!(numero_cliente_alta.Text.Equals(cc.n_cliemte + "")))
                            {
                                numero_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                numero_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                            }
                            Parcelas pr = numero_plaza_alta.SelectedItem as Parcelas;
                            if (pr != null)
                                if (cc.n_plaza != pr.id + "")
                                {

                                    numero_plaza_alta.BorderBrush = Brushes.Red;
                                }
                                else
                                {
                                    BrushConverter bc = new BrushConverter();
                                    numero_plaza_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                                }




                            if (!(cc.nombre_cliente.Equals(nombre_cliente_alta.Text)))
                            {
                                nombre_cliente_alta.BorderBrush = Brushes.Red;


                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nombre_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                            if (!(cc.apellidos_cliente.Equals(apellido_cliente_alta.Text)))
                            {
                                apellido_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                apellido_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                            if (!(cc.dni.Equals(dni_cliente_alta.Text)))
                            {
                                dni_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                dni_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            if (!(cc.direccion.Equals(direccion_cliente_alta.Text)))
                            {

                                direccion_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                direccion_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.poblacio.Equals(poblacion_cliente_alta.Text)))
                            {
                                poblacion_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                poblacion_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.telefon1.Equals(telefono_cliente_alta.Text)))
                            {

                                telefono_cliente_alta.BorderBrush = Brushes.Red;


                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                telefono_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.telefon2.Equals(telefono2_cliente_alta.Text)))
                            {
                                telefono2_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                telefono2_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!cc.codigo_postal.Equals(cp_cliente_alta.Text))
                            {
                                cp_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                cp_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(cc.mail.Equals(email_cliente.Text)))
                            {
                                email_cliente.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                email_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(cc.mail2.Equals(email_cliente2.Text)))
                            {
                                email_cliente2.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                email_cliente2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            /*u.Luz = "s";
                            u.Nota1 = "";
                            u.Nota2 = "";*/
                            /*if (!(cc.Metodo_Pago.ToString().Equals(Metodo_pago.Text)))
                            {
                                a = true;
                                sql_query += "Metodo_Pago=" + Metodo_pago.SelectedIndex + ", ";
                                parametros.Add("Metodo_Pago:" + Metodo_pago.SelectedIndex);
                            }*/




                            if (!(cc.Pais.Equals(pais_cliente_alta.Text)))
                            {
                                pais_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                pais_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.Provincia.Equals(provincia_cliente_alta.Text)))
                            {
                                provincia_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                provincia_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            if (!(Clientes_FechaEntrada_alta.SelectedDate.Equals(cc.Fecha_In)))
                            {
                                Clientes_FechaEntrada_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(Clientes_FechaSalida_alta.SelectedDate.Equals(cc.Fecha_Out)))
                            {
                                Clientes_FechaSalida_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaSalida_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(Vehiculo1_alta.Text.Equals(cc.Vehiculo1)))
                            {
                               Vehiculo1_alta.Foreground = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo1_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor1_alta.Text.Equals(cc.matricula1)))
                            {
                                bastidor1_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor1_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(Vehiculo2_alta.Text.Equals(cc.Vehiculo2)))
                            {
                               Vehiculo2_alta.Foreground = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo2_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor2_alta.Text.Equals(cc.matricula2)))
                            {
                                bastidor2_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor2_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            

                            if (!(Vehiculo3_alta.Text.Equals(cc.Vehiculo3)))
                            {
                               Vehiculo3_alta.Foreground = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo3_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor3_alta.Text.Equals(cc.matricula3)))
                            {
                                bastidor3_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor3_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(Vehiculo4_alta.Text.Equals(cc.Vehiculo4)))
                            {
                               Vehiculo4_alta.Foreground = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo4_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor4_alta.Text.Equals(cc.matricula4)))
                            {
                                bastidor4_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor4_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(bastidor_alta.Text.Equals(cc.Numero_Bastidor1)))
                            {
                                bastidor_alta.Foreground = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(nbastidor2_alta.Text.Equals(cc.Numero_Bastidor2)))
                            {
                                nbastidor2_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nbastidor2_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(nbastidor3_alta.Text.Equals(cc.Numero_Bastidor3)))
                            {
                                nbastidor3_alta.Foreground = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nbastidor3_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(nbastidor4_alta.Text.Equals(cc.Numero_Bastidor4)))
                            {
                                nbastidor4_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nbastidor4_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            

                            if (!(medidas_alta.Text.Equals(cc.Medidas_Vehiculo1)))
                            {
                                medidas_alta.Foreground = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                medidas_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(medidas2_alta.Text.Equals(cc.Medidas_Vehiculo2)))
                            {
                                medidas2_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                medidas2_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(medidas3_alta.Text.Equals(cc.Medidas_Vehiculo3)))
                            {
                                medidas3_alta.Foreground = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                medidas3_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(medidas4_alta.Text.Equals(cc.Medidas_Vehiculo4)))
                            {
                                medidas4_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                medidas4_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                            int pott = 0;
                            if (Potencia_alta.SelectedItem != null)
                            {
                                Potencia poten = Potencia_alta.SelectedItem as Potencia;
                                if (cc.Potencia != poten.Id)
                                {
                                    Potencia_alta.BorderBrush = Brushes.Red;
                                }
                                else
                                {
                                    BrushConverter bc = new BrushConverter();
                                    Potencia_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                                }
                            }


                            int bbb = 0;
                            if (on_off_border.HorizontalAlignment == HorizontalAlignment.Right)
                            {
                                on_off_border.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                on_off_border.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }





                            if (!nota1_alta.Text.Equals(cc.Nota1))
                            {

                                nota1_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nota1_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!nota1_alta2.Text.Equals(cc.Nota2))
                            {

                                nota1_alta2.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nota1_alta2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            try
                            {


                                if (!dt1.ToString("H:mm").Equals(cc.Hora_entrada))
                                {
                                    Clientes_HoraEntrada_alta.BorderBrush = Brushes.Red;

                                }
                                else
                                {
                                    BrushConverter bc = new BrushConverter();
                                    Clientes_HoraEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                                }
                            }
                            catch (Exception ee){
                                var st = new StackTrace(ee, true); // Get the top stack frame var frame = st.GetFrame(0); // Get the line number from the stack frame   var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                                var frame = st.GetFrame(0);
                                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                                Peta(ee, line + "");
                                Console.WriteLine(line + ": " + ee.Message);
                            }
                            DateTime dt3 = (DateTime)Clientes_HoraPeriodo_alta.Value;
                            if (!dt3.ToString("H:mm").Equals(cc.Hora_salida))
                            {
                                Clientes_HoraPeriodo_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_HoraPeriodo_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }




                            /*if (!(cc.DeBaja == bb))
                            {
                                numero_cliente.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                apellidos_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }*/


                            if (!Clientes_FechaPeriodo_alta.SelectedDate.Equals(cc.fecha_entrada_estado))
                            {
                                Clientes_FechaPeriodo_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaPeriodo_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            if (!(cc.fecha_pago.Equals(Clientes_FechaPago_alta.SelectedDate)))
                            {
                                Clientes_FechaPago_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaPago_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(cc.Medidas_Vehiculo1.Equals(medidas_alta.Text)))
                            {
                                medidas_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                medidas_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                        }
                        catch
                        {

                        }

                    }

                }
                else
                {
                    if (newclient)
                        if (numero_cliente_alta.Text.Length > 0 && nombre_cliente_alta.Text.Length > 0 && direccion_cliente_alta.Text.Length > 0 && cp_cliente_alta.Text.Length > 0 && provincia_cliente_alta.Text.Length > 0 && pais_cliente_alta.Text.Length > 0 && telefono_cliente_alta.Text.Length > 0 && email_cliente.Text.Length > 0 && Vehiculo1_alta.Text.Length > 0 && bastidor1_alta.Text.Length > 0 && Clientes_FechaEntrada_alta.SelectedDate != null && Clientes_HoraEntrada_alta.Text.Length > 0 && Clientes_FechaPeriodo_alta.SelectedDate != null && Clientes_HoraPeriodo_alta.Text.Length > 0&& apellido_cliente_alta.Text.Length>0&&dni_cliente_alta.Text.Length>0&&poblacion_cliente_alta.Text.Length>0)
                            change_client.IsEnabled = true;
                        else
                            change_client.IsEnabled = false;


                }

        }

        private void MirarFicha2(object sender, SelectionChangedEventArgs e)
        {
            if (mirar2)
                if (Clientes.SelectedItem != null && !newclient)
                {


                    Parcelas pa = numero_plaza_alta.SelectedItem as Parcelas;
                    DateTime dt1 = (DateTime)Clientes_HoraEntrada_alta.Value;
                    DateTime dt2 = (DateTime)Clientes_HoraSalida.Value;
                    Clientes cc = Clientes.SelectedItem as Clientes;
                    bool a = false;


                    if (!dt1.ToString("H:mm").Equals(cc.Hora_entrada))
                    {
                        Clientes_HoraEntrada_alta.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Clientes_HoraEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }
                    if (!dt2.ToString("H:mm").Equals(cc.Hora_salida))
                    {
                        Clientes_HoraSalida.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Clientes_HoraSalida.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }



                    if (!(cc is null))
                    {
                        int pot = 0;
                        if (Potencia_alta.SelectedItem != null)
                        {
                            Potencia pp = Potencia_alta.SelectedItem as Potencia;
                            pot = pp.Id;
                        }
                        int b = 0;
                        if (on_off_border.HorizontalAlignment == HorizontalAlignment.Right)
                        {
                            b = 1;
                        }
                        Parcelas p = numero_plaza_alta.SelectedItem as Parcelas;


                        if (p == null)
                            p = new Parcelas();

                        if (cc.Fecha_In != null)
                        {

                        }
                        else
                        {

                        }


                        if (p.id == null)
                            p.id = 0;
                        bool pos = false;
                        if (alta_baja.HorizontalAlignment == HorizontalAlignment.Right)
                            pos = true;
                        Console.WriteLine(email_cliente.Text.Equals(cc.mail));
                        Console.WriteLine(telefono2_cliente_alta.Text.Equals(cc.telefon2));
                        if (email_cliente.Text.Equals(cc.mail) && telefono2_cliente_alta.Text.Equals(cc.telefon2) && telefono_cliente_alta.Text.Equals(cc.telefon1) && pais_cliente_alta.Text.Equals(cc.Pais) && provincia_cliente_alta.Text.Equals(cc.Provincia) && poblacion_cliente_alta.Text.Equals(cc.poblacio) && cp_cliente_alta.Text.Equals(cc.codigo_postal) && direccion_cliente_alta.Text.Equals(cc.direccion) && dni_cliente_alta.Text.Equals(cc.dni) && apellido_cliente_alta.Text.Equals(cc.apellidos_cliente) && nombre_cliente_alta.Text.Equals(cc.nombre_cliente) && numero_cliente_alta.Text.Equals(cc.n_cliemte + "") && Clientes_FechaEntrada_alta.SelectedDate.Equals(cc.Fecha_In) && Clientes_FechaSalida_alta.SelectedDate.Equals(cc.Fecha_Out) && Vehiculo1_alta.Text.Equals(cc.Vehiculo1) && bastidor1_alta.Text.Equals(cc.matricula1) && Vehiculo2_alta.Text.Equals(cc.Vehiculo2) && bastidor2_alta.Text.Equals(cc.matricula2) && pot == cc.Potencia && nota1_alta.Text.Equals(cc.Nota1) && b == cc.Switch && p.id == int.Parse(cc.n_plaza) && Clientes_HoraEntrada_alta.Text.Equals(cc.Hora_entrada) && Clientes_HoraPeriodo_alta.Text.Equals(cc.Hora_salida) && email_cliente2.Text.Equals(cc.mail2) && pos == cc.DeBaja && Clientes_FechaPeriodo_alta.SelectedDate.Equals(cc.fecha_entrada_estado) && Clientes_FechaPago_alta.SelectedDate.Equals(cc.fecha_pago) && medidas_alta.Text.Equals(cc.Medidas_Vehiculo1))
                        {
                            change_client.IsEnabled = false;

                            change_client.IsEnabled = false;
                            safe = false;
                            //añadir_evento.IsEnabled = false;
                        }
                        else
                        {
                            change_client.IsEnabled = true;

                            change_client.IsEnabled = true;
                            safe = true;
                            //añadir_evento.IsEnabled = true;
                        }
                        try
                        {

                            if (!(numero_cliente_alta.Text.Equals(cc.n_cliemte + "")))
                            {
                                numero_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                numero_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                            }
                            Parcelas pr = numero_plaza_alta.SelectedItem as Parcelas;
                            if (pr != null)
                                if (cc.n_plaza != pr.id + "")
                                {

                                    numero_plaza_alta.BorderBrush = Brushes.Red;
                                }
                                else
                                {
                                    BrushConverter bc = new BrushConverter();
                                    numero_plaza_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                                }




                            if (!(cc.nombre_cliente.Equals(nombre_cliente_alta.Text)))
                            {
                                nombre_cliente_alta.BorderBrush = Brushes.Red;


                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nombre_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                            if (!(cc.apellidos_cliente.Equals(apellido_cliente_alta.Text)))
                            {
                                apellido_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                apellido_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                            if (!(cc.dni.Equals(dni_cliente_alta.Text)))
                            {
                                dni_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                dni_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            if (!(cc.direccion.Equals(direccion_cliente_alta.Text)))
                            {

                                dni_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                dni_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.poblacio.Equals(poblacion_cliente_alta.Text)))
                            {
                                poblacion_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                poblacion_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.telefon1.Equals(telefono_cliente_alta.Text)))
                            {

                                telefono_cliente_alta.BorderBrush = Brushes.Red;


                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                telefono_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.telefon2.Equals(telefono2_cliente_alta.Text)))
                            {
                                telefono2_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                telefono2_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!cc.codigo_postal.Equals(cp_cliente_alta.Text))
                            {
                                cp_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                cp_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(cc.mail.Equals(email_cliente.Text)))
                            {
                                email_cliente.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                email_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(cc.mail2.Equals(email_cliente2.Text)))
                            {
                                email_cliente2.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                email_cliente2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            /*u.Luz = "s";
                            u.Nota1 = "";
                            u.Nota2 = "";*/
                            /*if (!(cc.Metodo_Pago.ToString().Equals(Metodo_pago.Text)))
                            {
                                a = true;
                                sql_query += "Metodo_Pago=" + Metodo_pago.SelectedIndex + ", ";
                                parametros.Add("Metodo_Pago:" + Metodo_pago.SelectedIndex);
                            }*/




                            if (!(cc.Pais.Equals(pais_cliente_alta.Text)))
                            {
                                pais_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                pais_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.Provincia.Equals(provincia_cliente_alta.Text)))
                            {
                                provincia_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                provincia_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            if (!(Clientes_FechaEntrada_alta.SelectedDate.Equals(cc.Fecha_In)))
                            {
                                Clientes_FechaEntrada_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(Clientes_FechaSalida_alta.SelectedDate.Equals(cc.Fecha_Out)))
                            {
                                Clientes_FechaSalida_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaSalida_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(Vehiculo1_alta.Text.Equals(cc.Vehiculo1)))
                            {
                               Vehiculo1_alta.Foreground = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo1_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor1_alta.Text.Equals(cc.matricula1)))
                            {
                                bastidor1_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor1_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(Vehiculo2_alta.Text.Equals(cc.Vehiculo2)))
                            {
                               Vehiculo2_alta.Foreground = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo2_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor2_alta.Text.Equals(cc.matricula2)))
                            {
                               Vehiculo2_alta.Foreground = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo2_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }



                            if (!(Vehiculo3_alta.Text.Equals(cc.Vehiculo3)))
                            {
                                Vehiculo3_alta.Foreground = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo3_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor3_alta.Text.Equals(cc.matricula3)))
                            {
                                bastidor3_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor3_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(Vehiculo4_alta.Text.Equals(cc.Vehiculo4)))
                            {
                                Vehiculo4_alta.Foreground = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo4_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor4_alta.Text.Equals(cc.matricula4)))
                            {
                                bastidor4_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor4_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            int pott = 0;
                            if (Potencia_alta.SelectedItem != null)
                            {
                                Potencia poten = Potencia_alta.SelectedItem as Potencia;
                                if (cc.Potencia != poten.Id)
                                {
                                    Potencia_alta.BorderBrush = Brushes.Red;
                                }
                                else
                                {
                                    BrushConverter bc = new BrushConverter();
                                    Potencia_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                                }
                            }


                            int bbb = 0;
                            if (on_off_border.HorizontalAlignment == HorizontalAlignment.Right)
                            {
                                on_off_border.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                on_off_border.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }





                            if (!nota1_alta.Text.Equals(cc.Nota1))
                            {

                                nota1_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nota1_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!nota1_alta2.Text.Equals(cc.Nota2))
                            {

                                nota1_alta2.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nota1_alta2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            try
                            {


                                if (!dt1.ToString("H:mm").Equals(cc.Hora_entrada))
                                {
                                    Clientes_HoraEntrada_alta.BorderBrush = Brushes.Red;

                                }
                                else
                                {
                                    BrushConverter bc = new BrushConverter();
                                    Clientes_HoraEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                                }
                            }
                            catch (Exception ee){
                                var st = new StackTrace(ee, true); // Get the top stack frame var frame = st.GetFrame(0); // Get the line number from the stack frame   var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                                var frame = st.GetFrame(0);
                                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                                Peta(ee, line + "");
                                Console.WriteLine(line + ": " + ee.Message);
                            }
                            DateTime dt3 = (DateTime)Clientes_HoraPeriodo_alta.Value;
                            if (!dt3.ToString("H:mm").Equals(cc.Hora_salida))
                            {
                                Clientes_HoraPeriodo_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_HoraPeriodo_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }




                            /*if (!(cc.DeBaja == bb))
                            {
                                numero_cliente.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                apellidos_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }*/


                            if (!Clientes_FechaPeriodo_alta.SelectedDate.Equals(cc.fecha_entrada_estado))
                            {
                                Clientes_FechaPeriodo_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaPeriodo_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            if (!(cc.fecha_pago.Equals(Clientes_FechaPago_alta.SelectedDate)))
                            {
                                Clientes_FechaPago_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaPago_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(cc.Medidas_Vehiculo1.Equals(medidas_alta.Text)))
                            {
                                medidas_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                medidas_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                        }
                        catch
                        {

                        }

                    }
                    if (numero_plaza_alta.SelectedItem == null)
                    {
                        on_off.IsEnabled = true;
                        Potencia_alta.IsEnabled = false;
                        Potencia_alta.SelectedItem = null;
                    }
                    else
                    {
                        on_off.IsEnabled = false;
                        Potencia_alta.IsEnabled = false;

                        Potencia_alta.SelectedItem = lcnt.Find(x => x.Id == cc.Potencia);
                    }

                }
                else
                {
                    if (newclient)
                        if (numero_cliente_alta.Text.Length > 0 && nombre_cliente_alta.Text.Length > 0 && direccion_cliente_alta.Text.Length > 0 && cp_cliente_alta.Text.Length > 0 && provincia_cliente_alta.Text.Length > 0 && pais_cliente_alta.Text.Length > 0 && telefono_cliente_alta.Text.Length > 0 && email_cliente.Text.Length > 0 && Vehiculo1_alta.Text.Length > 0 && bastidor1_alta.Text.Length > 0 && Clientes_FechaEntrada_alta.SelectedDate != null && Clientes_HoraEntrada_alta.Text.Length > 0 && Clientes_FechaPeriodo_alta.SelectedDate != null && Clientes_HoraPeriodo_alta.Text.Length > 0 && apellido_cliente_alta.Text.Length > 0 && dni_cliente_alta.Text.Length > 0 && poblacion_cliente_alta.Text.Length > 0)
                            change_client.IsEnabled = true;
                        else
                            change_client.IsEnabled = false;


                }
            
        }

        private void FichaPotencia(object sender, MouseButtonEventArgs e)
        {
            if (mirar2)
                if (Clientes.SelectedItem != null && !newclient)
                {
                    if (on_off_border.HorizontalAlignment == HorizontalAlignment.Left)
                    {
                        on_off_border.HorizontalAlignment = HorizontalAlignment.Right;
                        on_off.Background = Brushes.LightGray;
                    }
                    else
                    {
                        on_off_border.HorizontalAlignment = HorizontalAlignment.Left;
                        on_off.Background = Brushes.LightBlue;
                    }

                    Parcelas pa = numero_plaza_alta.SelectedItem as Parcelas;
                    DateTime dt1 = (DateTime)Clientes_HoraEntrada_alta.Value;
                    DateTime dt2 = (DateTime)Clientes_HoraSalida.Value;
                    Clientes cc = Clientes.SelectedItem as Clientes;
                    bool a = false;


                    if (!dt1.ToString("H:mm").Equals(cc.Hora_entrada))
                    {
                        Clientes_HoraEntrada_alta.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Clientes_HoraEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }
                    if (!dt2.ToString("H:mm").Equals(cc.Hora_salida))
                    {
                        Clientes_HoraSalida.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Clientes_HoraSalida.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }



                    if (!(cc is null))
                    {
                        int pot = 0;
                        if (Potencia_alta.SelectedItem != null)
                        {
                            Potencia pp = Potencia.SelectedItem as Potencia;
                            if(pp!=null)
                            pot = pp.Id;
                        }
                        int b = 0;
                        if (on_off_border.HorizontalAlignment == HorizontalAlignment.Right)
                        {
                            b = 1;
                        }
                        Parcelas p = numero_plaza.SelectedItem as Parcelas;


                        if (p == null)
                            p = new Parcelas();

                        if (cc.Fecha_In != null)
                        {

                        }
                        else
                        {

                        }


                        if (p.id == null)
                            p.id = 0;
                        bool pos = false;
                        if (alta_baja.HorizontalAlignment == HorizontalAlignment.Right)
                            pos = true;
                        //console.writeline(p.id + " " + cc.n_plaza);
                        if (email_cliente.Text.Equals(cc.mail) && telefono2_cliente_alta.Text.Equals(cc.telefon2) && telefono_cliente_alta.Text.Equals(cc.telefon1) && pais_cliente_alta.Text.Equals(cc.Pais) && provincia_cliente_alta.Text.Equals(cc.Provincia) && poblacion_cliente_alta.Text.Equals(cc.poblacio) && cp_cliente_alta.Text.Equals(cc.codigo_postal) && direccion_cliente_alta.Text.Equals(cc.direccion) && dni_cliente_alta.Text.Equals(cc.dni) && apellido_cliente_alta.Text.Equals(cc.apellidos_cliente) && nombre_cliente_alta.Text.Equals(cc.nombre_cliente) && numero_cliente_alta.Text.Equals(cc.n_cliemte + "") && Clientes_FechaEntrada_alta.SelectedDate.Equals(cc.Fecha_In) && Clientes_FechaSalida_alta.SelectedDate.Equals(cc.Fecha_Out) && Vehiculo1_alta.Text.Equals(cc.Vehiculo1) && bastidor1_alta.Text.Equals(cc.matricula1) && Vehiculo2_alta.Text.Equals(cc.Vehiculo2) && bastidor2_alta.Text.Equals(cc.matricula2) && pot == cc.Potencia && nota1_alta.Text.Equals(cc.Nota1) && b == cc.Switch && p.id == int.Parse(cc.n_plaza) && Clientes_HoraEntrada_alta.Text.Equals(cc.Hora_entrada) && Clientes_HoraPeriodo_alta.Text.Equals(cc.Hora_salida) && email_cliente2.Text.Equals(cc.mail2) && pos == cc.DeBaja && Clientes_FechaPeriodo_alta.SelectedDate.Equals(cc.fecha_entrada_estado) && Clientes_FechaPago_alta.SelectedDate.Equals(cc.fecha_pago) && medidas_alta.Text.Equals(cc.Medidas_Vehiculo1))
                        {
                            change_client.IsEnabled = false;

                            change_client.IsEnabled = false;
                            safe = false;
                            //añadir_evento.IsEnabled = false;
                        }
                        else
                        {
                            change_client.IsEnabled = true;

                            change_client.IsEnabled = true;
                            safe = true;
                            //añadir_evento.IsEnabled = true;
                        }

                        try
                        {

                            if (!(numero_cliente_alta.Text.Equals(cc.n_cliemte + "")))
                            {
                                numero_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                numero_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                            }
                            Parcelas pr = numero_plaza_alta.SelectedItem as Parcelas;
                            if (pr != null)
                                if (cc.n_plaza != pr.id + "")
                                {

                                    numero_plaza_alta.BorderBrush = Brushes.Red;
                                }
                                else
                                {
                                    BrushConverter bc = new BrushConverter();
                                    numero_plaza_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                                }




                            if (!(cc.nombre_cliente.Equals(nombre_cliente_alta.Text)))
                            {
                                nombre_cliente_alta.BorderBrush = Brushes.Red;


                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nombre_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                            if (!(cc.apellidos_cliente.Equals(apellido_cliente_alta.Text)))
                            {
                                apellido_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                apellido_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                            if (!(cc.dni.Equals(dni_cliente_alta.Text)))
                            {
                                dni_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                dni_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            if (!(cc.direccion.Equals(direccion_cliente_alta.Text)))
                            {

                                dni_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                dni_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.poblacio.Equals(poblacion_cliente_alta.Text)))
                            {
                                poblacion_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                poblacion_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.telefon1.Equals(telefono_cliente_alta.Text)))
                            {

                                telefono_cliente_alta.BorderBrush = Brushes.Red;


                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                telefono_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.telefon2.Equals(telefono2_cliente_alta.Text)))
                            {
                                telefono2_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                telefono2_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!cc.codigo_postal.Equals(cp_cliente_alta.Text))
                            {
                                cp_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                cp_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(cc.mail.Equals(email_cliente.Text)))
                            {
                                email_cliente.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                email_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(cc.mail2.Equals(email_cliente2.Text)))
                            {
                                email_cliente2.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                email_cliente2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            /*u.Luz = "s";
                            u.Nota1 = "";
                            u.Nota2 = "";*/
                            /*if (!(cc.Metodo_Pago.ToString().Equals(Metodo_pago.Text)))
                            {
                                a = true;
                                sql_query += "Metodo_Pago=" + Metodo_pago.SelectedIndex + ", ";
                                parametros.Add("Metodo_Pago:" + Metodo_pago.SelectedIndex);
                            }*/




                            if (!(cc.Pais.Equals(pais_cliente_alta.Text)))
                            {
                                pais_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                pais_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.Provincia.Equals(provincia_cliente_alta.Text)))
                            {
                                provincia_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                provincia_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            if (!(Clientes_FechaEntrada_alta.SelectedDate.Equals(cc.Fecha_In)))
                            {
                                Clientes_FechaEntrada_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(Clientes_FechaSalida_alta.SelectedDate.Equals(cc.Fecha_Out)))
                            {
                                Clientes_FechaSalida_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaSalida_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(Vehiculo1_alta.Text.Equals(cc.Vehiculo1)))
                            {
                               Vehiculo1_alta.Foreground = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo1_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor1_alta.Text.Equals(cc.matricula1)))
                            {
                                bastidor1_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor1_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(Vehiculo2_alta.Text.Equals(cc.Vehiculo2)))
                            {
                               Vehiculo2_alta.Foreground = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo2_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor2_alta.Text.Equals(cc.matricula2)))
                            {
                               Vehiculo2_alta.Foreground = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo2_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }



                            if (!(Vehiculo3_alta.Text.Equals(cc.Vehiculo3)))
                            {
                                Vehiculo3_alta.Foreground = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo3_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor3_alta.Text.Equals(cc.matricula3)))
                            {
                                bastidor3_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor3_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(Vehiculo4_alta.Text.Equals(cc.Vehiculo4)))
                            {
                                Vehiculo4_alta.Foreground = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo4_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor4_alta.Text.Equals(cc.matricula4)))
                            {
                                bastidor4_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor4_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                            int pott = 0;
                            if (Potencia_alta.SelectedItem != null)
                            {
                                Potencia poten = Potencia_alta.SelectedItem as Potencia;
                                if (cc.Potencia != poten.Id)
                                {
                                    Potencia_alta.BorderBrush = Brushes.Red;
                                }
                                else
                                {
                                    BrushConverter bc = new BrushConverter();
                                    Potencia_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                                }
                            }


                            int bbb = 0;

                            if (on_off_border.HorizontalAlignment == HorizontalAlignment.Right)
                            {
                                on_off_border.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                on_off_border.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }





                            if (!nota1_alta.Text.Equals(cc.Nota1))
                            {

                                nota1_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nota1_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!nota1_alta2.Text.Equals(cc.Nota2))
                            {

                                nota1_alta2.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nota1_alta2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            try
                            {


                                if (!dt1.ToString("H:mm").Equals(cc.Hora_entrada))
                                {
                                    Clientes_HoraEntrada_alta.BorderBrush = Brushes.Red;

                                }
                                else
                                {
                                    BrushConverter bc = new BrushConverter();
                                    Clientes_HoraEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                                }
                            }
                            catch (Exception ee){
                                var st = new StackTrace(ee, true); // Get the top stack frame var frame = st.GetFrame(0); // Get the line number from the stack frame   var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                                var frame = st.GetFrame(0);
                                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                                Peta(ee, line + "");
                                Console.WriteLine(line + ": " + ee.Message);
                            }
                            DateTime dt3 = (DateTime)Clientes_HoraPeriodo_alta.Value;
                            if (!dt3.ToString("H:mm").Equals(cc.Hora_salida))
                            {
                                Clientes_HoraPeriodo_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_HoraPeriodo_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }




                            /*if (!(cc.DeBaja == bb))
                            {
                                numero_cliente.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                apellidos_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }*/


                            if (!Clientes_FechaPeriodo_alta.SelectedDate.Equals(cc.fecha_entrada_estado))
                            {
                                Clientes_FechaPeriodo_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaPeriodo_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            if (!(cc.fecha_pago.Equals(Clientes_FechaPago_alta.SelectedDate)))
                            {
                                Clientes_FechaPago_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaPago_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(cc.Medidas_Vehiculo1.Equals(medidas_alta.Text)))
                            {
                                medidas_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                medidas_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                        }
                        catch
                        {

                        }

                    }

                }
                else
                {
                    if (newclient)
                    {
                        if (on_off_border.HorizontalAlignment == HorizontalAlignment.Left)
                        {
                            on_off_border.HorizontalAlignment = HorizontalAlignment.Right;
                            on_off.Background = Brushes.LightGray;
                        }
                        else
                        {
                            on_off_border.HorizontalAlignment = HorizontalAlignment.Left;
                            on_off.Background = Brushes.LightBlue;
                        }
                        if (numero_cliente_alta.Text.Length > 0 && nombre_cliente_alta.Text.Length > 0 && direccion_cliente_alta.Text.Length > 0 && cp_cliente_alta.Text.Length > 0 && provincia_cliente_alta.Text.Length > 0 && pais_cliente_alta.Text.Length > 0 && telefono_cliente_alta.Text.Length > 0 && email_cliente.Text.Length > 0 && Vehiculo1_alta.Text.Length > 0 && bastidor1_alta.Text.Length > 0 && Clientes_FechaEntrada_alta.SelectedDate != null && Clientes_HoraEntrada_alta.Text.Length > 0 && Clientes_FechaPeriodo_alta.SelectedDate != null && Clientes_HoraPeriodo_alta.Text.Length > 0 && apellido_cliente_alta.Text.Length > 0 && dni_cliente_alta.Text.Length > 0 && poblacion_cliente_alta.Text.Length > 0)
                            change_client.IsEnabled = true;
                        else
                            change_client.IsEnabled = false;
                    }

                }
        }

        private void CambiarFiltro(object sender, MouseButtonEventArgs e)
        {
            Clientes.SelectedItem = null;
            if (alta_baja_buscar.HorizontalAlignment == HorizontalAlignment.Left)
            {
                alta_baja_buscar.HorizontalAlignment = HorizontalAlignment.Right;
                buscar_alta.Background = Brushes.LightGray;
            }
            else
            {
                alta_baja_buscar.HorizontalAlignment = HorizontalAlignment.Left;
                buscar_alta.Background = Brushes.LightBlue;
            }
            
            clientebool = true;
            cargarClientes();
            posicion = lista_clientes_ficha.Count() - 1;

        }

        private void MirarFicha3(object sender, SelectionChangedEventArgs e)
        {
            if (mirar2)
                if (Clientes.SelectedItem != null && !newclient)
                {


                    Parcelas pa = numero_plaza_alta.SelectedItem as Parcelas;
                    DateTime dt1 = (DateTime)Clientes_HoraEntrada_alta.Value;
                    DateTime dt2 = (DateTime)Clientes_HoraSalida.Value;
                    Clientes cc = Clientes.SelectedItem as Clientes;
                    bool a = false;


                    if (!dt1.ToString("H:mm").Equals(cc.Hora_entrada))
                    {
                        Clientes_HoraEntrada_alta.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Clientes_HoraEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }
                    if (!dt2.ToString("H:mm").Equals(cc.Hora_salida))
                    {
                        Clientes_HoraSalida.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Clientes_HoraSalida.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }



                    if (!(cc is null))
                    {
                        int pot = 0;
                        if (Potencia_alta.SelectedItem != null)
                        {
                            Potencia pp = Potencia_alta.SelectedItem as Potencia;
                            pot = pp.Id;
                        }
                        int b = 0;
                        if (on_off_border.HorizontalAlignment == HorizontalAlignment.Right)
                        {
                            b = 1;
                        }
                        Parcelas p = numero_plaza.SelectedItem as Parcelas;


                        if (p == null)
                            p = new Parcelas();

                        if (cc.Fecha_In != null)
                        {

                        }
                        else
                        {

                        }


                        if (p.id == null)
                            p.id = 0;
                        bool pos = false;
                        if (alta_baja.HorizontalAlignment == HorizontalAlignment.Right)
                            pos = true;
                        //console.writeline(p.id + " " + cc.n_plaza);
                        if (email_cliente.Text.Equals(cc.mail) && telefono2_cliente_alta.Text.Equals(cc.telefon2) && telefono_cliente_alta.Text.Equals(cc.telefon1) && pais_cliente_alta.Text.Equals(cc.Pais) && provincia_cliente_alta.Text.Equals(cc.Provincia) && poblacion_cliente_alta.Text.Equals(cc.poblacio) && cp_cliente_alta.Text.Equals(cc.codigo_postal) && direccion_cliente_alta.Text.Equals(cc.direccion) && dni_cliente_alta.Text.Equals(cc.dni) && apellido_cliente_alta.Text.Equals(cc.apellidos_cliente) && nombre_cliente_alta.Text.Equals(cc.nombre_cliente) && numero_cliente_alta.Text.Equals(cc.n_cliemte + "") && Clientes_FechaEntrada_alta.SelectedDate.Equals(cc.Fecha_In) && Clientes_FechaSalida_alta.SelectedDate.Equals(cc.Fecha_Out) && Vehiculo1_alta.Text.Equals(cc.Vehiculo1) && bastidor1_alta.Text.Equals(cc.matricula1) && Vehiculo2_alta.Text.Equals(cc.Vehiculo2) && bastidor2_alta.Text.Equals(cc.matricula2) && pot == cc.Potencia && nota1_alta.Text.Equals(cc.Nota1) && b == cc.Switch && p.id == int.Parse(cc.n_plaza) && Clientes_HoraEntrada_alta.Text.Equals(cc.Hora_entrada) && Clientes_HoraPeriodo_alta.Text.Equals(cc.Hora_salida) && email_cliente2.Text.Equals(cc.mail2) && pos == cc.DeBaja && Clientes_FechaPeriodo_alta.SelectedDate.Equals(cc.fecha_entrada_estado) && Clientes_FechaPago_alta.SelectedDate.Equals(cc.fecha_pago) && medidas_alta.Text.Equals(cc.Medidas_Vehiculo1))
                        {
                            change_client.IsEnabled = false;

                            change_client.IsEnabled = false;
                            safe = false;
                            //añadir_evento.IsEnabled = false;
                        }
                        else
                        {
                            change_client.IsEnabled = true;

                            change_client.IsEnabled = true;
                            safe = true;
                            //añadir_evento.IsEnabled = true;
                        }

                        try
                        {

                            if (!(numero_cliente_alta.Text.Equals(cc.n_cliemte + "")))
                            {
                                numero_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                numero_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                            }
                            Parcelas pr = numero_plaza_alta.SelectedItem as Parcelas;
                            if (pr != null)
                                if (cc.n_plaza != pr.id + "")
                                {

                                    numero_plaza_alta.BorderBrush = Brushes.Red;
                                }
                                else
                                {
                                    BrushConverter bc = new BrushConverter();
                                    numero_plaza_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                                }




                            if (!(cc.nombre_cliente.Equals(nombre_cliente_alta.Text)))
                            {
                                nombre_cliente_alta.BorderBrush = Brushes.Red;


                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nombre_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                            if (!(cc.apellidos_cliente.Equals(apellido_cliente_alta.Text)))
                            {
                                apellido_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                apellido_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                            if (!(cc.dni.Equals(dni_cliente_alta.Text)))
                            {
                                dni_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                dni_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            if (!(cc.direccion.Equals(direccion_cliente_alta.Text)))
                            {

                                dni_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                dni_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.poblacio.Equals(poblacion_cliente_alta.Text)))
                            {
                                poblacion_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                poblacion_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.telefon1.Equals(telefono_cliente_alta.Text)))
                            {

                                telefono_cliente_alta.BorderBrush = Brushes.Red;


                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                telefono_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.telefon2.Equals(telefono2_cliente_alta.Text)))
                            {
                                telefono2_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                telefono2_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!cc.codigo_postal.Equals(cp_cliente_alta.Text))
                            {
                                cp_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                cp_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(cc.mail.Equals(email_cliente.Text)))
                            {
                                email_cliente.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                email_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(cc.mail2.Equals(email_cliente2.Text)))
                            {
                                email_cliente2.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                email_cliente2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            /*u.Luz = "s";
                            u.Nota1 = "";
                            u.Nota2 = "";*/
                            /*if (!(cc.Metodo_Pago.ToString().Equals(Metodo_pago.Text)))
                            {
                                a = true;
                                sql_query += "Metodo_Pago=" + Metodo_pago.SelectedIndex + ", ";
                                parametros.Add("Metodo_Pago:" + Metodo_pago.SelectedIndex);
                            }*/




                            if (!(cc.Pais.Equals(pais_cliente_alta.Text)))
                            {
                                pais_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                pais_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.Provincia.Equals(provincia_cliente_alta.Text)))
                            {
                                provincia_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                provincia_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            if (!(Clientes_FechaEntrada_alta.SelectedDate.Equals(cc.Fecha_In)))
                            {
                                Clientes_FechaEntrada_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(Clientes_FechaSalida_alta.SelectedDate.Equals(cc.Fecha_Out)))
                            {
                                Clientes_FechaSalida_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaSalida_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(Vehiculo1_alta.Text.Equals(cc.Vehiculo1)))
                            {
                               Vehiculo1_alta.Foreground = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo1_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor1_alta.Text.Equals(cc.matricula1)))
                            {
                                bastidor1_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor1_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(Vehiculo2_alta.Text.Equals(cc.Vehiculo2)))
                            {
                               Vehiculo2_alta.Foreground = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo2_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor2_alta.Text.Equals(cc.matricula2)))
                            {
                               Vehiculo2_alta.Foreground = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo2_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }




                            if (!(Vehiculo3_alta.Text.Equals(cc.Vehiculo3)))
                            {
                                Vehiculo3_alta.Foreground = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo3_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor3_alta.Text.Equals(cc.matricula3)))
                            {
                                bastidor3_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor3_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(Vehiculo4_alta.Text.Equals(cc.Vehiculo4)))
                            {
                                Vehiculo4_alta.Foreground = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo4_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor4_alta.Text.Equals(cc.matricula4)))
                            {
                                bastidor4_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor4_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            int pott = 0;
                            if (Potencia_alta.SelectedItem != null)
                            {
                                Potencia poten = Potencia_alta.SelectedItem as Potencia;
                                if (cc.Potencia != poten.Id)
                                {
                                    Potencia_alta.BorderBrush = Brushes.Red;
                                }
                                else
                                {
                                    BrushConverter bc = new BrushConverter();
                                    Potencia_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                                }
                            }


                            int bbb = 0;
                            if (on_off_border.HorizontalAlignment == HorizontalAlignment.Right)
                            {
                                on_off_border.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                on_off_border.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }





                            if (!nota1_alta.Text.Equals(cc.Nota1))
                            {

                                nota1_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nota1_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!nota1_alta2.Text.Equals(cc.Nota2))
                            {

                                nota1_alta2.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nota1_alta2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            try
                            {


                                if (!dt1.ToString("H:mm").Equals(cc.Hora_entrada))
                                {
                                    Clientes_HoraEntrada_alta.BorderBrush = Brushes.Red;

                                }
                                else
                                {
                                    BrushConverter bc = new BrushConverter();
                                    Clientes_HoraEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                                }
                            }
                            catch(Exception ee) {
                                var st = new StackTrace(ee, true); // Get the top stack frame var frame = st.GetFrame(0); // Get the line number from the stack frame   var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                                var frame = st.GetFrame(0);
                                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                                Peta(ee, line + "");
                                Console.WriteLine(line + ": " + ee.Message);
                            }
                            DateTime dt3 = (DateTime)Clientes_HoraPeriodo_alta.Value;
                            if (!dt3.ToString("H:mm").Equals(cc.Hora_salida))
                            {
                                Clientes_HoraPeriodo_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_HoraPeriodo_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }




                            /*if (!(cc.DeBaja == bb))
                            {
                                numero_cliente.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                apellidos_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }*/


                            if (!Clientes_FechaPeriodo_alta.SelectedDate.Equals(cc.fecha_entrada_estado))
                            {
                                Clientes_FechaPeriodo_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaPeriodo_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            if (!(cc.fecha_pago.Equals(Clientes_FechaPago_alta.SelectedDate)))
                            {
                                Clientes_FechaPago_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaPago_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(cc.Medidas_Vehiculo1.Equals(medidas_alta.Text)))
                            {
                                medidas_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                medidas_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                        }
                        catch
                        {

                        }

                    }

                }
                else
                {
                    if (newclient)
                        if (numero_cliente_alta.Text.Length > 0 && nombre_cliente_alta.Text.Length > 0 && direccion_cliente_alta.Text.Length > 0 && cp_cliente_alta.Text.Length > 0 && provincia_cliente_alta.Text.Length > 0 && pais_cliente_alta.Text.Length > 0 && telefono_cliente_alta.Text.Length > 0 && email_cliente.Text.Length > 0 && Vehiculo1_alta.Text.Length > 0 && bastidor1_alta.Text.Length > 0 && Clientes_FechaEntrada_alta.SelectedDate != null && Clientes_HoraEntrada_alta.Text.Length > 0 && Clientes_FechaPeriodo_alta.SelectedDate != null && Clientes_HoraPeriodo_alta.Text.Length > 0 && apellido_cliente_alta.Text.Length > 0 && dni_cliente_alta.Text.Length > 0 && poblacion_cliente_alta.Text.Length > 0)
                            change_client.IsEnabled = true;
                        else
                            change_client.IsEnabled = false;


                }
        }

        private void MirarFicha4(object sender, RoutedPropertyChangedEventArgs<object> e)
        {
            if (mirar2)
                if (Clientes.SelectedItem != null && !newclient)
                {


                    Parcelas pa = numero_plaza_alta.SelectedItem as Parcelas;
                    DateTime dt1 = (DateTime)Clientes_HoraEntrada_alta.Value;
                    DateTime dt2 = (DateTime)Clientes_HoraSalida.Value;
                    Clientes cc = Clientes.SelectedItem as Clientes;
                    bool a = false;


                    if (!Clientes_HoraEntrada_alta.Text.Equals(cc.Hora_entrada))
                    {
                        Clientes_HoraEntrada_alta.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Clientes_HoraEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }
                    if (!Clientes_HoraPeriodo_alta.Text.Equals(cc.Hora_salida))
                    {
                        Clientes_HoraPeriodo_alta.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Clientes_HoraPeriodo_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }



                    if (!(cc is null))
                    {
                        int pot = 0;
                        if (Potencia_alta.SelectedItem != null)
                        {
                            Potencia pp = Potencia_alta.SelectedItem as Potencia;
                            pot = pp.Id;
                        }
                        int b = 0;
                        if (on_off_border.HorizontalAlignment == HorizontalAlignment.Right)
                        {
                            b = 1;
                        }
                        Parcelas p = numero_plaza.SelectedItem as Parcelas;


                        if (p == null)
                            p = new Parcelas();

                        if (cc.Fecha_In != null)
                        {

                        }
                        else
                        {

                        }


                        if (p.id == null)
                            p.id = 0;
                        bool pos = false;
                        if (alta_baja.HorizontalAlignment == HorizontalAlignment.Right)
                            pos = true;
                        //console.writeline(p.id + " " + cc.n_plaza);
                        if (email_cliente.Text.Equals(cc.mail) && telefono2_cliente_alta.Text.Equals(cc.telefon2) && telefono_cliente_alta.Text.Equals(cc.telefon1) && pais_cliente_alta.Text.Equals(cc.Pais) && provincia_cliente_alta.Text.Equals(cc.Provincia) && poblacion_cliente_alta.Text.Equals(cc.poblacio) && cp_cliente_alta.Text.Equals(cc.codigo_postal) && direccion_cliente_alta.Text.Equals(cc.direccion) && dni_cliente_alta.Text.Equals(cc.dni) && apellido_cliente_alta.Text.Equals(cc.apellidos_cliente) && nombre_cliente_alta.Text.Equals(cc.nombre_cliente) && numero_cliente_alta.Text.Equals(cc.n_cliemte + "") && Clientes_FechaEntrada_alta.SelectedDate.Equals(cc.Fecha_In) && Clientes_FechaSalida_alta.SelectedDate.Equals(cc.Fecha_Out) && Vehiculo1_alta.Text.Equals(cc.Vehiculo1) && bastidor1_alta.Text.Equals(cc.matricula1) && Vehiculo2_alta.Text.Equals(cc.Vehiculo2) && bastidor2_alta.Text.Equals(cc.matricula2) && pot == cc.Potencia && nota1_alta.Text.Equals(cc.Nota1) && b == cc.Switch && p.id == int.Parse(cc.n_plaza) && Clientes_HoraEntrada_alta.Text.Equals(cc.Hora_entrada) && Clientes_HoraPeriodo_alta.Text.Equals(cc.Hora_salida) && email_cliente2.Text.Equals(cc.mail2) && pos == cc.DeBaja && Clientes_FechaPeriodo_alta.SelectedDate.Equals(cc.fecha_entrada_estado) && Clientes_FechaPago_alta.SelectedDate.Equals(cc.fecha_pago) && medidas_alta.Text.Equals(cc.Medidas_Vehiculo1))
                        {
                            change_client.IsEnabled = false;

                            change_client.IsEnabled = false;
                            safe = false;
                            //añadir_evento.IsEnabled = false;
                        }
                        else
                        {
                            change_client.IsEnabled = true;

                            change_client.IsEnabled = true;
                            safe = true;
                            //añadir_evento.IsEnabled = true;
                        }

                        try
                        {

                            if (!(numero_cliente_alta.Text.Equals(cc.n_cliemte + "")))
                            {
                                numero_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                numero_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                            }
                            Parcelas pr = numero_plaza_alta.SelectedItem as Parcelas;
                            if (pr != null)
                                if (cc.n_plaza != pr.id + "")
                                {

                                    numero_plaza_alta.BorderBrush = Brushes.Red;
                                }
                                else
                                {
                                    BrushConverter bc = new BrushConverter();
                                    numero_plaza_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                                }




                            if (!(cc.nombre_cliente.Equals(nombre_cliente_alta.Text)))
                            {
                                nombre_cliente_alta.BorderBrush = Brushes.Red;


                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nombre_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                            if (!(cc.apellidos_cliente.Equals(apellido_cliente_alta.Text)))
                            {
                                apellido_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                apellido_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                            if (!(cc.dni.Equals(dni_cliente_alta.Text)))
                            {
                                dni_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                dni_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            if (!(cc.direccion.Equals(direccion_cliente_alta.Text)))
                            {

                                dni_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                dni_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.poblacio.Equals(poblacion_cliente_alta.Text)))
                            {
                                poblacion_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                poblacion_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.telefon1.Equals(telefono_cliente_alta.Text)))
                            {

                                telefono_cliente_alta.BorderBrush = Brushes.Red;


                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                telefono_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.telefon2.Equals(telefono2_cliente_alta.Text)))
                            {
                                telefono2_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                telefono2_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!cc.codigo_postal.Equals(cp_cliente_alta.Text))
                            {
                                cp_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                cp_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(cc.mail.Equals(email_cliente.Text)))
                            {
                                email_cliente.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                email_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(cc.mail2.Equals(email_cliente2.Text)))
                            {
                                email_cliente2.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                email_cliente2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            /*u.Luz = "s";
                            u.Nota1 = "";
                            u.Nota2 = "";*/
                            /*if (!(cc.Metodo_Pago.ToString().Equals(Metodo_pago.Text)))
                            {
                                a = true;
                                sql_query += "Metodo_Pago=" + Metodo_pago.SelectedIndex + ", ";
                                parametros.Add("Metodo_Pago:" + Metodo_pago.SelectedIndex);
                            }*/




                            if (!(cc.Pais.Equals(pais_cliente_alta.Text)))
                            {
                                pais_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                pais_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.Provincia.Equals(provincia_cliente_alta.Text)))
                            {
                                provincia_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                provincia_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            if (!(Clientes_FechaEntrada_alta.SelectedDate.Equals(cc.Fecha_In)))
                            {
                                Clientes_FechaEntrada_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(Clientes_FechaSalida_alta.SelectedDate.Equals(cc.Fecha_Out)))
                            {
                                Clientes_FechaSalida_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaSalida_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(Vehiculo1_alta.Text.Equals(cc.Vehiculo1)))
                            {
                               Vehiculo1_alta.Foreground = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo1_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor1_alta.Text.Equals(cc.matricula1)))
                            {
                                bastidor1_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor1_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(Vehiculo2_alta.Text.Equals(cc.Vehiculo2)))
                            {
                               Vehiculo2_alta.Foreground = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo2_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor2_alta.Text.Equals(cc.matricula2)))
                            {
                               Vehiculo2_alta.Foreground = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo2_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }



                            if (!(Vehiculo3_alta.Text.Equals(cc.Vehiculo3)))
                            {
                                Vehiculo3_alta.Foreground = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo3_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor3_alta.Text.Equals(cc.matricula3)))
                            {
                                bastidor3_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor3_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(Vehiculo4_alta.Text.Equals(cc.Vehiculo4)))
                            {
                                Vehiculo4_alta.Foreground = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo4_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor4_alta.Text.Equals(cc.matricula4)))
                            {
                                bastidor4_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor4_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                            int pott = 0;
                            if (Potencia_alta.SelectedItem != null)
                            {
                                Potencia poten = Potencia_alta.SelectedItem as Potencia;
                                if (cc.Potencia != poten.Id)
                                {
                                    Potencia_alta.BorderBrush = Brushes.Red;
                                }
                                else
                                {
                                    BrushConverter bc = new BrushConverter();
                                    Potencia_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                                }
                            }


                            int bbb = 0;
                            if (on_off_border.HorizontalAlignment == HorizontalAlignment.Right)
                            {
                                on_off_border.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                on_off_border.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }





                            if (!nota1_alta.Text.Equals(cc.Nota1))
                            {

                                nota1_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nota1_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!nota1_alta2.Text.Equals(cc.Nota2))
                            {

                                nota1_alta2.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nota1_alta2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            try
                            {


                                if (!dt1.ToString("H:mm").Equals(cc.Hora_entrada))
                                {
                                    Clientes_HoraEntrada_alta.BorderBrush = Brushes.Red;

                                }
                                else
                                {
                                    BrushConverter bc = new BrushConverter();
                                    Clientes_HoraEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                                }
                            }
                            catch (Exception ee){
                                var st = new StackTrace(ee, true); // Get the top stack frame var frame = st.GetFrame(0); // Get the line number from the stack frame   var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                                var frame = st.GetFrame(0);
                                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                                Peta(ee, line + "");
                                Console.WriteLine(line + ": " + ee.Message);
                            }
                            DateTime dt3 = (DateTime)Clientes_HoraPeriodo_alta.Value;
                            if (!dt3.ToString("H:mm").Equals(cc.Hora_salida))
                            {
                                Clientes_HoraPeriodo_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_HoraPeriodo_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }




                            /*if (!(cc.DeBaja == bb))
                            {
                                numero_cliente.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                apellidos_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }*/


                            if (!Clientes_FechaPeriodo_alta.SelectedDate.Equals(cc.fecha_entrada_estado))
                            {
                                Clientes_FechaPeriodo_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaPeriodo_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            if (!(cc.fecha_pago.Equals(Clientes_FechaPago_alta.SelectedDate)))
                            {
                                Clientes_FechaPago_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaPago_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(cc.Medidas_Vehiculo1.Equals(medidas_alta.Text)))
                            {
                                medidas_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                medidas_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                        }
                        catch
                        {

                        }

                    }

                }
                else
                {
                    if (newclient)
                        if (numero_cliente_alta.Text.Length > 0 && nombre_cliente_alta.Text.Length > 0 && direccion_cliente_alta.Text.Length > 0 && cp_cliente_alta.Text.Length > 0 && provincia_cliente_alta.Text.Length > 0 && pais_cliente_alta.Text.Length > 0 && telefono_cliente_alta.Text.Length > 0 && email_cliente.Text.Length > 0 && Vehiculo1_alta.Text.Length > 0 && bastidor1_alta.Text.Length > 0 && Clientes_FechaEntrada_alta.SelectedDate != null && Clientes_HoraEntrada_alta.Text.Length > 0 && Clientes_FechaPeriodo_alta.SelectedDate != null && Clientes_HoraPeriodo_alta.Text.Length > 0 && apellido_cliente_alta.Text.Length > 0 && dni_cliente_alta.Text.Length > 0 && poblacion_cliente_alta.Text.Length > 0)
                            change_client.IsEnabled = true;
                        else
                            change_client.IsEnabled = false;


                }
        }

        private void FichaPotencia2(object sender, MouseButtonEventArgs e)
        {
            if (mirar2)
                if (Clientes.SelectedItem != null && !newclient)
                {
                    if (alta_baja.HorizontalAlignment == HorizontalAlignment.Left)
                    {
                        alta_baja.HorizontalAlignment = HorizontalAlignment.Right;
                        if (on_off_border.HorizontalAlignment == HorizontalAlignment.Left)
                        {
                            MouseButtonEventArgs mb = new MouseButtonEventArgs(Mouse.PrimaryDevice, 0, MouseButton.Left);
                            FichaPotencia(on_off, mb);
                        }
                    }
                    else
                    {
                        alta_baja.HorizontalAlignment = HorizontalAlignment.Left;
                    }

                    Parcelas pa = numero_plaza_alta.SelectedItem as Parcelas;
                    DateTime dt1 = (DateTime)Clientes_HoraEntrada_alta.Value;
                    DateTime dt2 = (DateTime)Clientes_HoraSalida.Value;
                    Clientes cc = Clientes.SelectedItem as Clientes;
                    bool a = false;


                    if (!dt1.ToString("H:mm").Equals(cc.Hora_entrada))
                    {
                        Clientes_HoraEntrada_alta.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Clientes_HoraEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }
                    if (!dt2.ToString("H:mm").Equals(cc.Hora_salida))
                    {
                        Clientes_HoraSalida.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Clientes_HoraSalida.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }



                    if (!(cc is null))
                    {
                        int pot = 0;
                        if (Potencia_alta.SelectedItem != null)
                        {
                            Potencia pp = Potencia.SelectedItem as Potencia;
                            pot = pp.Id;
                        }
                        int b = 0;
                        if (on_off_border.HorizontalAlignment == HorizontalAlignment.Right)
                        {
                            b = 1;
                        }
                        Parcelas p = numero_plaza.SelectedItem as Parcelas;


                        if (p == null)
                            p = new Parcelas();

                        if (cc.Fecha_In != null)
                        {

                        }
                        else
                        {

                        }


                        if (p.id == null)
                            p.id = 0;
                        bool pos = false;

                        if (alta_baja.HorizontalAlignment == HorizontalAlignment.Left)
                        {
                            numero_plaza_alta.SelectedItem = null;
                        }
                        else
                        {
                            numero_plaza_alta.SelectedItem = p;
                        }
                        if (alta_baja.HorizontalAlignment == HorizontalAlignment.Left)
                            pos = true;
                        //console.writeline(p.id + " " + cc.n_plaza);
                        if (email_cliente.Text.Equals(cc.mail) && telefono2_cliente_alta.Text.Equals(cc.telefon2) && telefono_cliente_alta.Text.Equals(cc.telefon1) && pais_cliente_alta.Text.Equals(cc.Pais) && provincia_cliente_alta.Text.Equals(cc.Provincia) && poblacion_cliente_alta.Text.Equals(cc.poblacio) && cp_cliente_alta.Text.Equals(cc.codigo_postal) && direccion_cliente_alta.Text.Equals(cc.direccion) && dni_cliente_alta.Text.Equals(cc.dni) && apellido_cliente_alta.Text.Equals(cc.apellidos_cliente) && nombre_cliente_alta.Text.Equals(cc.nombre_cliente) && numero_cliente_alta.Text.Equals(cc.n_cliemte + "") && Clientes_FechaEntrada_alta.SelectedDate.Equals(cc.Fecha_In) && Clientes_FechaSalida_alta.SelectedDate.Equals(cc.Fecha_Out) && Vehiculo1_alta.Text.Equals(cc.Vehiculo1) && bastidor1_alta.Text.Equals(cc.matricula1) && Vehiculo2_alta.Text.Equals(cc.Vehiculo2) && bastidor2_alta.Text.Equals(cc.matricula2) && pot == cc.Potencia && nota1_alta.Text.Equals(cc.Nota1) && b == cc.Switch && p.id == int.Parse(cc.n_plaza) && Clientes_HoraEntrada_alta.Text.Equals(cc.Hora_entrada) && Clientes_HoraPeriodo_alta.Text.Equals(cc.Hora_salida) && email_cliente2.Text.Equals(cc.mail2) && pos == cc.DeBaja && Clientes_FechaPeriodo_alta.SelectedDate.Equals(cc.fecha_entrada_estado) && Clientes_FechaPago_alta.SelectedDate.Equals(cc.fecha_pago) && medidas_alta.Text.Equals(cc.Medidas_Vehiculo1))
                        {
                            change_client.IsEnabled = false;

                            change_client.IsEnabled = false;
                            safe = false;
                            //añadir_evento.IsEnabled = false;
                        }
                        else
                        {
                            change_client.IsEnabled = true;

                            change_client.IsEnabled = true;
                            safe = true;
                            //añadir_evento.IsEnabled = true;
                        }

                        try
                        {

                            if (!(numero_cliente_alta.Text.Equals(cc.n_cliemte + "")))
                            {
                                numero_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                numero_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                            }
                            Parcelas pr = numero_plaza_alta.SelectedItem as Parcelas;
                            if (pr != null)
                                if (cc.n_plaza != pr.id + "")
                                {

                                    numero_plaza_alta.BorderBrush = Brushes.Red;
                                }
                                else
                                {
                                    BrushConverter bc = new BrushConverter();
                                    numero_plaza_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                                }




                            if (!(cc.nombre_cliente.Equals(nombre_cliente_alta.Text)))
                            {
                                nombre_cliente_alta.BorderBrush = Brushes.Red;


                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nombre_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                            if (!(cc.apellidos_cliente.Equals(apellido_cliente_alta.Text)))
                            {
                                apellido_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                apellido_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                            if (!(cc.dni.Equals(dni_cliente_alta.Text)))
                            {
                                dni_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                dni_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            if (!(cc.direccion.Equals(direccion_cliente_alta.Text)))
                            {

                                dni_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                dni_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.poblacio.Equals(poblacion_cliente_alta.Text)))
                            {
                                poblacion_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                poblacion_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.telefon1.Equals(telefono_cliente_alta.Text)))
                            {

                                telefono_cliente_alta.BorderBrush = Brushes.Red;


                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                telefono_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.telefon2.Equals(telefono2_cliente_alta.Text)))
                            {
                                telefono2_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                telefono2_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!cc.codigo_postal.Equals(cp_cliente_alta.Text))
                            {
                                cp_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                cp_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(cc.mail.Equals(email_cliente.Text)))
                            {
                                email_cliente.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                email_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(cc.mail2.Equals(email_cliente2.Text)))
                            {
                                email_cliente2.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                email_cliente2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            /*u.Luz = "s";
                            u.Nota1 = "";
                            u.Nota2 = "";*/
                            /*if (!(cc.Metodo_Pago.ToString().Equals(Metodo_pago.Text)))
                            {
                                a = true;
                                sql_query += "Metodo_Pago=" + Metodo_pago.SelectedIndex + ", ";
                                parametros.Add("Metodo_Pago:" + Metodo_pago.SelectedIndex);
                            }*/




                            if (!(cc.Pais.Equals(pais_cliente_alta.Text)))
                            {
                                pais_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                pais_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.Provincia.Equals(provincia_cliente_alta.Text)))
                            {
                                provincia_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                provincia_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            if (!(Clientes_FechaEntrada_alta.SelectedDate.Equals(cc.Fecha_In)))
                            {
                                Clientes_FechaEntrada_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(Clientes_FechaSalida_alta.SelectedDate.Equals(cc.Fecha_Out)))
                            {
                                Clientes_FechaSalida_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaSalida_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(Vehiculo1_alta.Text.Equals(cc.Vehiculo1)))
                            {
                               Vehiculo1_alta.Foreground = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo1_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor1_alta.Text.Equals(cc.matricula1)))
                            {
                                bastidor1_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor1_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(Vehiculo2_alta.Text.Equals(cc.Vehiculo2)))
                            {
                               Vehiculo2_alta.Foreground = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo2_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor2_alta.Text.Equals(cc.matricula2)))
                            {
                               Vehiculo2_alta.Foreground = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo2_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }



                            if (!(Vehiculo3_alta.Text.Equals(cc.Vehiculo3)))
                            {
                                Vehiculo3_alta.Foreground = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo3_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor3_alta.Text.Equals(cc.matricula3)))
                            {
                                bastidor3_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor3_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(Vehiculo4_alta.Text.Equals(cc.Vehiculo4)))
                            {
                                Vehiculo4_alta.Foreground = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo4_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor4_alta.Text.Equals(cc.matricula4)))
                            {
                                bastidor4_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor4_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                            int pott = 0;
                            if (Potencia_alta.SelectedItem != null)
                            {
                                Potencia poten = Potencia_alta.SelectedItem as Potencia;
                                if (cc.Potencia != poten.Id)
                                {
                                    Potencia_alta.BorderBrush = Brushes.Red;
                                }
                                else
                                {
                                    BrushConverter bc = new BrushConverter();
                                    Potencia_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                                }
                            }


                            int bbb = 0;
                            if (on_off_border.HorizontalAlignment == HorizontalAlignment.Right)
                            {
                                on_off_border.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                on_off_border.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }





                            if (!nota1_alta.Text.Equals(cc.Nota1))
                            {

                                nota1_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nota1_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!nota1_alta2.Text.Equals(cc.Nota2))
                            {

                                nota1_alta2.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nota1_alta2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            try
                            {


                                if (!dt1.ToString("H:mm").Equals(cc.Hora_entrada))
                                {
                                    Clientes_HoraEntrada_alta.BorderBrush = Brushes.Red;

                                }
                                else
                                {
                                    BrushConverter bc = new BrushConverter();
                                    Clientes_HoraEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                                }
                            }
                            catch (Exception ee){
                                var st = new StackTrace(ee, true); // Get the top stack frame var frame = st.GetFrame(0); // Get the line number from the stack frame   var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                                var frame = st.GetFrame(0);
                                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                                Peta(ee, line + "");
                                Console.WriteLine(line + ": " + ee.Message);
                            }
                            DateTime dt3 = (DateTime)Clientes_HoraPeriodo_alta.Value;
                            if (!dt3.ToString("H:mm").Equals(cc.Hora_salida))
                            {
                                Clientes_HoraPeriodo_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_HoraPeriodo_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }




                            /*if (!(cc.DeBaja == bb))
                            {
                                numero_cliente.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                apellidos_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }*/


                            if (!Clientes_FechaPeriodo_alta.SelectedDate.Equals(cc.fecha_entrada_estado))
                            {
                                Clientes_FechaPeriodo_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaPeriodo_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            if (!(cc.fecha_pago.Equals(Clientes_FechaPago_alta.SelectedDate)))
                            {
                                Clientes_FechaPago_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaPago_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(cc.Medidas_Vehiculo1.Equals(medidas_alta.Text)))
                            {
                                medidas_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                medidas_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                        }
                        catch
                        {

                        }

                    }

                }
                else
                {
                    if (newclient)
                    {

                        if (numero_cliente_alta.Text.Length > 0 && nombre_cliente_alta.Text.Length > 0 && direccion_cliente_alta.Text.Length > 0 && cp_cliente_alta.Text.Length > 0 && provincia_cliente_alta.Text.Length > 0 && pais_cliente_alta.Text.Length > 0 && telefono_cliente_alta.Text.Length > 0 && email_cliente.Text.Length > 0 && Vehiculo1_alta.Text.Length > 0 && bastidor1_alta.Text.Length > 0 && Clientes_FechaEntrada_alta.SelectedDate != null && Clientes_HoraEntrada_alta.Text.Length > 0 && Clientes_FechaPeriodo_alta.SelectedDate != null && Clientes_HoraPeriodo_alta.Text.Length > 0 && apellido_cliente_alta.Text.Length > 0 && dni_cliente_alta.Text.Length > 0 && poblacion_cliente_alta.Text.Length > 0)
                            change_client.IsEnabled = true;
                        else
                            change_client.IsEnabled = false;
                    }

                }
           
        }

        private void Button_Click_1(object sender, RoutedEventArgs e)
        {
            bcl.Close();
            cargarClientes();
            bcl = new BusquedaCliente(lcln);
            bcl.Show();
        }

        private void clearUser_Click(object sender, RoutedEventArgs e)
        {
            Clientes c = Clientes.SelectedItem as Clientes;
            Clientes.SelectedItem = null;
            Clientes.SelectedItem = c;

            botones_ficha.IsEnabled = true;
        }

        private void Atras(object sender, RoutedEventArgs e)
        {
            if (safe)
            {
                MessageBoxResult result = MessageBox.Show("No se han guardado los datos ¿Desea continuar?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                if (result == MessageBoxResult.OK)
                {
                    if (posicion != 0)
                    {
                        if (buscarcliente)
                        {
                            Clientes.SelectedItem = null;
                            buscarcliente = false;

                            cargarClientes();

                            if (lista_clientes_ficha.Count > 0)
                                Clientes.SelectedItem = lista_clientes_ficha[posicion];
                            else
                                Clientes.SelectedItem = null;
                        }
                        else
                        {
                            if (lista_clientes_ficha.Count > 0)
                            {

                                Clientes.SelectedItem = null;

                                posicion--;
                                Clientes.SelectedItem = lista_clientes_ficha[posicion];
                            }


                        }


                        change_client.IsEnabled = false;
                    }
                }
            }
            else
            {
                if (posicion != 0)
                {
                    if (buscarcliente)
                    {
                        buscarcliente = false;

                        Clientes.SelectedItem = null;
                        cargarClientes();

                        if (lista_clientes_ficha.Count > 0)
                            Clientes.SelectedItem = lista_clientes_ficha[posicion];
                        else
                            Clientes.SelectedItem = null;
                    }
                    else
                    {
                        if (lista_clientes_ficha.Count > 0)
                        {

                            Clientes.SelectedItem = null;

                            posicion--;
                            Clientes.SelectedItem = lista_clientes_ficha[posicion];
                        }


                    }


                    change_client.IsEnabled = false;
                }
            }
        }

        private void Adelante(object sender, RoutedEventArgs e)
        {
            if (safe)
            {
                MessageBoxResult result = MessageBox.Show("No se han guardado los datos ¿Desea continuar?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                if (result == MessageBoxResult.OK)
                {
                    if (posicion != lista_clientes_ficha.Count - 1)
                    {
                        if (buscarcliente)
                        {
                            Clientes.SelectedItem = null;
                            buscarcliente = false;
                            cargarClientes();
                            if (lista_clientes_ficha.Count > 0)
                                Clientes.SelectedItem = lista_clientes_ficha[posicion];
                            else
                                Clientes.SelectedItem = null;
                        }
                        else
                        {
                            if (lista_clientes_ficha.Count > 0)
                            {
                                Clientes.SelectedItem = null;
                                posicion++;

                                Clientes.SelectedItem = lista_clientes_ficha[posicion];
                            }


                        }


                        change_client.IsEnabled = false;
                    }
                }
            }
            else
            {
                if (posicion != lista_clientes_ficha.Count - 1)
                {
                    if (buscarcliente)
                    {
                        Clientes.SelectedItem = null;
                        buscarcliente = false;
                        cargarClientes();
                        if (lista_clientes_ficha.Count > 0)
                            Clientes.SelectedItem = lista_clientes_ficha[posicion];
                        else
                            Clientes.SelectedItem = null;
                    }
                    else
                    {
                        if (lista_clientes_ficha.Count > 0)
                        {
                            posicion++;

                            Clientes.SelectedItem = null;
                            Clientes.SelectedItem = lista_clientes_ficha[posicion];
                        }


                    }


                    change_client.IsEnabled = false;
                }
            }

        }

        private void Al_Final(object sender, RoutedEventArgs e)
        {
            if (safe)
            {
                MessageBoxResult result = MessageBox.Show("No se han guardado los datos ¿Desea continuar?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                if (result == MessageBoxResult.OK)
                {
                    if (buscarcliente)
                    {
                        buscarcliente = false;

                        Clientes.SelectedItem = null;
                        cargarClientes();

                        if (lista_clientes_ficha.Count > 0)
                            Clientes.SelectedItem = lista_clientes_ficha[posicion];
                        else
                            Clientes.SelectedItem = null;

                    }
                    else
                    {
                        if (lista_clientes_ficha.Count > 0)
                        {
                            Clientes.SelectedItem = null;
                            posicion = lista_clientes_ficha.Count - 1;
                            Clientes.SelectedItem = lista_clientes_ficha[lista_clientes_ficha.Count - 1];

                        }
                    }



                    change_client.IsEnabled = false;
                }
            }
            else
            {
                if (buscarcliente)
                {
                    buscarcliente = false;

                    Clientes.SelectedItem = null;
                    cargarClientes();

                    if (lista_clientes_ficha.Count > 0)
                        Clientes.SelectedItem = lista_clientes_ficha[posicion];
                    else
                        Clientes.SelectedItem = null;

                }
                else
                {
                    if (lista_clientes_ficha.Count > 0)
                    {
                        Clientes.SelectedItem = null;
                        posicion = lista_clientes_ficha.Count - 1;
                        Clientes.SelectedItem = lista_clientes_ficha[lista_clientes_ficha.Count - 1];

                    }
                }



                change_client.IsEnabled = false;
            }
        }

        private void Al_Principio(object sender, RoutedEventArgs e)
        {
            if (safe)
            {
                MessageBoxResult result = MessageBox.Show("No se han guardado los datos ¿Desea continuar?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                if (result == MessageBoxResult.OK)
                {
                    if (buscarcliente)
                    {
                        buscarcliente = false;

                        Clientes.SelectedItem = null;
                        cargarClientes();

                        if (lista_clientes_ficha.Count > 0)
                            Clientes.SelectedItem = lista_clientes_ficha[posicion];
                        else
                            Clientes.SelectedItem = null;
                    }
                    else
                    {
                        if (lista_clientes_ficha.Count > 0)
                        {
                            Clientes.SelectedItem = null;
                            posicion = 0;
                            Clientes.SelectedItem = lista_clientes_ficha[0];
                        }

                    }
                    change_client.IsEnabled = false;
                }
            }
            else
            {
                if (buscarcliente)
                {
                    buscarcliente = false;

                    Clientes.SelectedItem = null;
                    cargarClientes();

                    if (lista_clientes_ficha.Count > 0)
                        Clientes.SelectedItem = lista_clientes_ficha[posicion];
                    else
                        Clientes.SelectedItem = null;
                }
                else
                {
                    if (lista_clientes_ficha.Count > 0)
                    {
                        Clientes.SelectedItem = null;
                        posicion = 0;
                        Clientes.SelectedItem = lista_clientes_ficha[0];
                    }

                }
                change_client.IsEnabled = false;
            }
        }

        private void Switch_FocusableChanged_1(object sender, DependencyPropertyChangedEventArgs e)
        {

        }

        private void power_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            if (bdrpower.HorizontalAlignment == HorizontalAlignment.Left)
            {
                power.Background = Brushes.LightGreen;
                bdrpower.HorizontalAlignment = HorizontalAlignment.Right;
                Switch.IsChecked = true;
            }
            else
            {
                power.Background = Brushes.LightGray;
                bdrpower.HorizontalAlignment = HorizontalAlignment.Left;

                Switch.IsChecked = false;
            }
        }

        private void Button_Click_2(object sender, RoutedEventArgs e)
        {

        }

        private void Button_Click_3(object sender, RoutedEventArgs e)
        {

        }

        private void Button_Click_4(object sender, RoutedEventArgs e)
        {

        }

        private void Button_Click_5(object sender, RoutedEventArgs e)
        {

        }

        private void Button_Click_6(object sender, RoutedEventArgs e)
        {

        }

        private void Button_Click_7(object sender, RoutedEventArgs e)
        {

        }

        private void Button_Click_8(object sender, RoutedEventArgs e)
        {

        }

        private void Button_Click_9(object sender, RoutedEventArgs e)
        {

        }

        private void Button_Click_10(object sender, RoutedEventArgs e)
        {

        }

        private void Button_Click_11(object sender, RoutedEventArgs e)
        {
           
            if (mirar2)
                if (Clientes.SelectedItem != null && !newclient)
                {


                    Parcelas pa = null;
                    DateTime dt1 = (DateTime)Clientes_HoraEntrada_alta.Value;
                    DateTime dt2 = (DateTime)Clientes_HoraSalida.Value;
                    Clientes cc = Clientes.SelectedItem as Clientes;
                    bool a = false;


                    if (!dt1.ToString("H:mm").Equals(cc.Hora_entrada))
                    {
                        Clientes_HoraEntrada_alta.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Clientes_HoraEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }
                    if (!dt2.ToString("H:mm").Equals(cc.Hora_salida))
                    {
                        Clientes_HoraSalida.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Clientes_HoraSalida.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }



                    if (!(cc is null))
                    {
                        int pot = 0;
                        if (Potencia_alta.SelectedItem != null)
                        {
                            Potencia pp = Potencia_alta.SelectedItem as Potencia;
                            pot = pp.Id;
                        }
                        int b = 0;
                        if (on_off_border.HorizontalAlignment == HorizontalAlignment.Right)
                        {
                            b = 1;
                        }
                        Parcelas p = numero_plaza_alta.SelectedItem as Parcelas;


                        if (p == null)
                            p = new Parcelas();

                        if (cc.Fecha_In != null)
                        {

                        }
                        else
                        {

                        }


                        if (p.id == null)
                            p.id = 0;
                        bool pos = false;
                        if (alta_baja.HorizontalAlignment == HorizontalAlignment.Right)
                            pos = true;
                        //console.writeline(p.id + " " + cc.n_plaza);
                        if (email_cliente.Text.Equals(cc.mail) && telefono2_cliente_alta.Text.Equals(cc.telefon2) && telefono_cliente_alta.Text.Equals(cc.telefon1) && pais_cliente_alta.Text.Equals(cc.Pais) && provincia_cliente_alta.Text.Equals(cc.Provincia) && poblacion_cliente_alta.Text.Equals(cc.poblacio) && cp_cliente_alta.Text.Equals(cc.codigo_postal) && direccion_cliente_alta.Text.Equals(cc.direccion) && dni_cliente_alta.Text.Equals(cc.dni) && apellido_cliente_alta.Text.Equals(cc.apellidos_cliente) && nombre_cliente_alta.Text.Equals(cc.nombre_cliente) && numero_cliente_alta.Text.Equals(cc.n_cliemte + "") && Clientes_FechaEntrada_alta.SelectedDate.Equals(cc.Fecha_In) && Clientes_FechaSalida_alta.SelectedDate.Equals(cc.Fecha_Out) && Vehiculo1_alta.Text.Equals(cc.Vehiculo1) && bastidor1_alta.Text.Equals(cc.matricula1) && Vehiculo2_alta.Text.Equals(cc.Vehiculo2) && bastidor2_alta.Text.Equals(cc.matricula2) && pot == cc.Potencia && nota1_alta.Text.Equals(cc.Nota1) && b == cc.Switch && p.id == int.Parse(cc.n_plaza) && Clientes_HoraEntrada_alta.Text.Equals(cc.Hora_entrada) && Clientes_HoraPeriodo_alta.Text.Equals(cc.Hora_salida) && email_cliente2.Text.Equals(cc.mail2) && pos == cc.DeBaja && Clientes_FechaPeriodo_alta.SelectedDate.Equals(cc.fecha_entrada_estado) && Clientes_FechaPago_alta.SelectedDate.Equals(cc.fecha_pago) && medidas_alta.Text.Equals(cc.Medidas_Vehiculo1))
                        {
                            change_client.IsEnabled = false;

                            change_client.IsEnabled = false;
                            safe = false;
                            //añadir_evento.IsEnabled = false;
                        }
                        else
                        {
                            change_client.IsEnabled = true;

                            change_client.IsEnabled = true;
                            safe = true;
                            //añadir_evento.IsEnabled = true;
                        }
                        try
                        {

                            if (!(numero_cliente_alta.Text.Equals(cc.n_cliemte + "")))
                            {
                                numero_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                numero_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                            }
                            Parcelas pr = numero_plaza_alta.SelectedItem as Parcelas;
                            if (pr != null)
                                if (cc.n_plaza != pr.id + "")
                                {

                                    numero_plaza_alta.BorderBrush = Brushes.Red;
                                }
                                else
                                {
                                    BrushConverter bc = new BrushConverter();
                                    numero_plaza_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                                }




                            if (!(cc.nombre_cliente.Equals(nombre_cliente_alta.Text)))
                            {
                                nombre_cliente_alta.BorderBrush = Brushes.Red;


                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nombre_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                            if (!(cc.apellidos_cliente.Equals(apellido_cliente_alta.Text)))
                            {
                                apellido_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                apellido_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                            if (!(cc.dni.Equals(dni_cliente_alta.Text)))
                            {
                                dni_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                dni_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            if (!(cc.direccion.Equals(direccion_cliente_alta.Text)))
                            {

                                dni_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                dni_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.poblacio.Equals(poblacion_cliente_alta.Text)))
                            {
                                poblacion_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                poblacion_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.telefon1.Equals(telefono_cliente_alta.Text)))
                            {

                                telefono_cliente_alta.BorderBrush = Brushes.Red;


                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                telefono_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.telefon2.Equals(telefono2_cliente_alta.Text)))
                            {
                                telefono2_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                telefono2_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!cc.codigo_postal.Equals(cp_cliente_alta.Text))
                            {
                                cp_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                cp_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(cc.mail.Equals(email_cliente.Text)))
                            {
                                email_cliente.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                email_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(cc.mail2.Equals(email_cliente2.Text)))
                            {
                                email_cliente2.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                email_cliente2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            /*u.Luz = "s";
                            u.Nota1 = "";
                            u.Nota2 = "";*/
                            /*if (!(cc.Metodo_Pago.ToString().Equals(Metodo_pago.Text)))
                            {
                                a = true;
                                sql_query += "Metodo_Pago=" + Metodo_pago.SelectedIndex + ", ";
                                parametros.Add("Metodo_Pago:" + Metodo_pago.SelectedIndex);
                            }*/




                            if (!(cc.Pais.Equals(pais_cliente_alta.Text)))
                            {
                                pais_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                pais_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.Provincia.Equals(provincia_cliente_alta.Text)))
                            {
                                provincia_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                provincia_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            if (!(Clientes_FechaEntrada_alta.SelectedDate.Equals(cc.Fecha_In)))
                            {
                                Clientes_FechaEntrada_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(Clientes_FechaSalida_alta.SelectedDate.Equals(cc.Fecha_Out)))
                            {
                                Clientes_FechaSalida_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaSalida_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(Vehiculo1_alta.Text.Equals(cc.Vehiculo1)))
                            {
                                Vehiculo1_alta.Foreground = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo1_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor1_alta.Text.Equals(cc.matricula1)))
                            {
                                bastidor1_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor1_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(Vehiculo2_alta.Text.Equals(cc.Vehiculo2)))
                            {
                                Vehiculo2_alta.Foreground = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo2_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor2_alta.Text.Equals(cc.matricula2)))
                            {
                                Vehiculo2_alta.Foreground = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo2_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }



                            if (!(Vehiculo3_alta.Text.Equals(cc.Vehiculo3)))
                            {
                                Vehiculo3_alta.Foreground = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo3_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor3_alta.Text.Equals(cc.matricula3)))
                            {
                                bastidor3_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor3_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(Vehiculo4_alta.Text.Equals(cc.Vehiculo4)))
                            {
                                Vehiculo4_alta.Foreground = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo4_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor4_alta.Text.Equals(cc.matricula4)))
                            {
                                bastidor4_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor4_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            int pott = 0;
                            if (Potencia_alta.SelectedItem != null)
                            {
                                Potencia poten = Potencia_alta.SelectedItem as Potencia;
                                if (cc.Potencia != poten.Id)
                                {
                                    Potencia_alta.BorderBrush = Brushes.Red;
                                }
                                else
                                {
                                    BrushConverter bc = new BrushConverter();
                                    Potencia_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                                }
                            }


                            int bbb = 0;
                            if (on_off_border.HorizontalAlignment == HorizontalAlignment.Right)
                            {
                                on_off_border.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                on_off_border.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }





                            if (!nota1_alta.Text.Equals(cc.Nota1))
                            {

                                nota1_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nota1_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!nota1_alta2.Text.Equals(cc.Nota2))
                            {

                                nota1_alta2.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nota1_alta2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            try
                            {


                                if (!dt1.ToString("H:mm").Equals(cc.Hora_entrada))
                                {
                                    Clientes_HoraEntrada_alta.BorderBrush = Brushes.Red;

                                }
                                else
                                {
                                    BrushConverter bc = new BrushConverter();
                                    Clientes_HoraEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                                }
                            }
                            catch (Exception ee)
                            {
                                var st = new StackTrace(ee, true); // Get the top stack frame var frame = st.GetFrame(0); // Get the line number from the stack frame   var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                                var frame = st.GetFrame(0);
                                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                                Peta(ee, line + "");
                                Console.WriteLine(line + ": " + ee.Message);
                            }
                            DateTime dt3 = (DateTime)Clientes_HoraPeriodo_alta.Value;
                            if (!dt3.ToString("H:mm").Equals(cc.Hora_salida))
                            {
                                Clientes_HoraPeriodo_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_HoraPeriodo_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }




                            /*if (!(cc.DeBaja == bb))
                            {
                                numero_cliente.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                apellidos_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }*/


                            if (!Clientes_FechaPeriodo_alta.SelectedDate.Equals(cc.fecha_entrada_estado))
                            {
                                Clientes_FechaPeriodo_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaPeriodo_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            if (!(cc.fecha_pago.Equals(Clientes_FechaPago_alta.SelectedDate)))
                            {
                                Clientes_FechaPago_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaPago_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(cc.Medidas_Vehiculo1.Equals(medidas_alta.Text)))
                            {
                                medidas_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                medidas_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                        }
                        catch
                        {

                        }

                    }
                    if (numero_plaza_alta.SelectedItem == null)
                    {
                        on_off.IsEnabled = true;
                        Potencia_alta.IsEnabled = false;
                        Potencia_alta.SelectedItem = null;
                    }
                    else
                    {
                        on_off.IsEnabled = false;
                        Potencia_alta.IsEnabled = false;

                        Potencia_alta.SelectedItem = lcnt.Find(x => x.Id == cc.Potencia);
                    }

                }
                else
                {
                    if (newclient)
                        if (numero_cliente_alta.Text.Length > 0 && nombre_cliente_alta.Text.Length > 0 && direccion_cliente_alta.Text.Length > 0 && cp_cliente_alta.Text.Length > 0 && provincia_cliente_alta.Text.Length > 0 && pais_cliente_alta.Text.Length > 0 && telefono_cliente_alta.Text.Length > 0 && email_cliente.Text.Length > 0 && Vehiculo1_alta.Text.Length > 0 && bastidor1_alta.Text.Length > 0 && Clientes_FechaEntrada_alta.SelectedDate != null && Clientes_HoraEntrada_alta.Text.Length > 0 && Clientes_FechaPeriodo_alta.SelectedDate != null && Clientes_HoraPeriodo_alta.Text.Length > 0 && apellido_cliente_alta.Text.Length > 0 && dni_cliente_alta.Text.Length > 0 && poblacion_cliente_alta.Text.Length > 0)
                            change_client.IsEnabled = true;
                        else
                            change_client.IsEnabled = false;


                }
            
        }

        private void Button_Click_12(object sender, RoutedEventArgs e)
        {
            Potencia_alta.SelectedItem = null;
        }

        private void gotoRecibo_Click(object sender, RoutedEventArgs e)
        {
            if (Clientes.SelectedItem != null)
            {
                cliente = true;
                Factura(Factura_button, RoutedEventArgs);
                factura_menu.SelectedIndex = 2;
                AddnewFactura_Click(AddnewFactura, RoutedEventArgs);
                cliente = false;
            }
        }

        private void changepdf_Click(object sender, RoutedEventArgs e)
        {

            
            System.Windows.Forms.OpenFileDialog ofd = new System.Windows.Forms.OpenFileDialog();
            string targetPath = Directory.GetCurrentDirectory();
            ofd.Filter = "Pdf files (*.pdf)|*.pdf";
            
            string fileName = "test.txt";
            if (ofd.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {

                /*Properties.Settings.Default.Pdf = ofd.FileName;
                Properties.Settings.Default.Save();
                pdf = new PDF(ofd.FileName);*/

               
            }

               
            
        }

        private void Button_Click_13(object sender, RoutedEventArgs e)
        {
            Clientes_Parcela.SelectedItem = null;
        }

        private void Nombre_Parcela2_TextChanged_1(object sender, TextChangedEventArgs e)
        {
            if (lista_parcelas2.SelectedItem != null)
            {
                bool a = false;
                Parcelas p = lista_parcelas2.SelectedItem as Parcelas;
                if (!Nombre_Parcela2.Text.Equals(p.nom))
                {
                    a = true;
                    Nombre_Parcela2.BorderBrush = Brushes.Red;
                    
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    nombre_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                Clientes c = Clientes_Parcela.SelectedItem as Clientes;
                if (c == null)
                {
                    boton_ficha.Visibility = Visibility.Collapsed;
                }else
                if (c.id != p.n_cliente)
                {
                    a = true;
                    Clientes_Parcela.BorderBrush = Brushes.Red;
                    boton_ficha.Visibility = Visibility.Collapsed;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Clientes_Parcela.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    boton_ficha.Visibility = Visibility.Visible;
                }

                if (!Nota_Parcela2.Text.Equals(p.Nota))
                {

                    a = true;
                    Nota_Parcela2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Nota_Parcela2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (!Distrito2.Text.Equals(p.Distrito))
                {


                    a = true;
                    Distrito2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Distrito2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
               
                if (!Descripción2.Text.Equals(p.Descripción))
                {

                    a = true;
                    Descripción2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Descripción2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (!Medidas2.Text.Equals(p.Medidas))
                {

                    a = true;
                    Medidas2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Medidas2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (a)
                {
                    change_mapa.IsEnabled = true;
                    safe = true;
                }
                else
                {
                    change_mapa.IsEnabled = false;
                    safe = false;
                }
            }
            
        }

        private void Clientes_Parcela_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            boton_ficha.Visibility = Visibility.Collapsed;
            if (lista_parcelas2.SelectedItem != null)
            {
                bool a = false;
                Parcelas p = lista_parcelas2.SelectedItem as Parcelas;
                if (!Nombre_Parcela2.Text.Equals(p.nom))
                {
                    a = true;
                    Nombre_Parcela2.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    nombre_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                Clientes c = Clientes_Parcela.SelectedItem as Clientes;
                if (c == null)
                {
                    boton_ficha.Visibility = Visibility.Collapsed;
                    c = new Clientes();
                    c.id = 0;
                }
                
                if (c.id != p.n_cliente)
                {
                    a = true;
                    Clientes_Parcela.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Clientes_Parcela.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                    if(c!=null)
                    boton_ficha.Visibility = Visibility.Visible;
                }

                

                if (!Nota_Parcela2.Text.Equals(p.Nota))
                {

                    a = true;
                    Nota_Parcela2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Nota_Parcela2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (!Distrito2.Text.Equals(p.Distrito))
                {


                    a = true;
                    Distrito2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Distrito2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                
                if (!Descripción2.Text.Equals(p.Descripción))
                {

                    a = true;
                    Descripción2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Descripción2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (!Medidas2.Text.Equals(p.Medidas))
                {

                    a = true;
                    Medidas2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Medidas2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (a)
                {
                    change_mapa.IsEnabled = true;
                    safe = true;

                }
                else
                {
                    change_mapa.IsEnabled = false;
                    safe = false;
                }
            }
        }

        private void boton_ficha_Click(object sender, RoutedEventArgs e)
        {
            if (Clientes_Parcela.SelectedItem != null)
            {
                safe = false;

                Clientes c = Clientes_Parcela.SelectedItem as Clientes;
                Cliente(Clientes_button, RoutedEventArgs);
                buscarcliente = true;
                Clientes.SelectedItem = c;
            }
            
        }

        

        private void Nombre_Parcelas(object sender, RoutedEventArgs e)
        {
            if (columna != 0)
            {
                columna = 0;
                cont = 1;
                List<Parcelas> lc = new List<Parcelas>();

                lc = lista_parcelas2.Items.Cast<Parcelas>().Select(x => x).OrderBy(x => x.nom).ToList();

                lista_parcelas2.Items.Clear();
                foreach (Parcelas cl in lc)
                {
                    lista_parcelas2.Items.Add(cl);
                }
            }
            else
            {
                if (cont == 1)
                {
                    cont++;
                    List<Parcelas> lc = new List<Parcelas>();
                    lc = lista_parcelas2.Items.Cast<Parcelas>().Select(x => x).OrderByDescending(x => x.nom).ToList();


                    lista_parcelas2.Items.Clear();
                    foreach (Parcelas cl in lc)
                    {
                        lista_parcelas2.Items.Add(cl);
                    }
                }
                else if (cont == 2)
                {
                    cont++;
                    List<Parcelas> lc = new List<Parcelas>();


                    lc = lprc;
                    


                    lista_parcelas2.Items.Clear();
                    foreach (Parcelas cl in lc)
                    {
                        lista_parcelas2.Items.Add(cl);
                    }
                }
                else
                {
                    cont = 1;
                    List<Parcelas> lc = new List<Parcelas>();

                    lc = lista_parcelas2.Items.Cast<Parcelas>().Select(x => x).OrderBy(x => x.nom).ToList();
                    lista_parcelas2.Items.Clear();
                    foreach (Parcelas cl in lc)
                    {
                        lista_parcelas2.Items.Add(cl);
                    }
                }
            }
        }

        private void Distrito_Parcelas(object sender, RoutedEventArgs e)
        {
            if (columna != 1)
            {
                columna = 1;
                cont = 1;
                List<Parcelas> lc = new List<Parcelas>();

                lc = lista_parcelas2.Items.Cast<Parcelas>().Select(x => x).OrderBy(x => x.Distrito).ToList();

                lista_parcelas2.Items.Clear();
                foreach (Parcelas cl in lc)
                {
                    lista_parcelas2.Items.Add(cl);
                }
            }
            else
            {
                if (cont == 1)
                {
                    cont++;
                    List<Parcelas> lc = new List<Parcelas>();
                    lc = lista_parcelas2.Items.Cast<Parcelas>().Select(x => x).OrderByDescending(x => x.Distrito).ToList();


                    lista_parcelas2.Items.Clear();
                    foreach (Parcelas cl in lc)
                    {
                        lista_parcelas2.Items.Add(cl);
                    }
                }
                else if (cont == 2)
                {
                    cont++;
                    List<Parcelas> lc = new List<Parcelas>();


                    lc = lprc;



                    lista_parcelas2.Items.Clear();
                    foreach (Parcelas cl in lc)
                    {
                        lista_parcelas2.Items.Add(cl);
                    }
                }
                else
                {
                    cont = 1;
                    List<Parcelas> lc = new List<Parcelas>();

                    lc = lista_parcelas2.Items.Cast<Parcelas>().Select(x => x).OrderBy(x => x.Distrito).ToList();
                    lista_parcelas2.Items.Clear();
                    foreach (Parcelas cl in lc)
                    {
                        lista_parcelas2.Items.Add(cl);
                    }
                }
            }
        }

        private void Medidas_Parcelas(object sender, RoutedEventArgs e)
        {
            if (columna != 0)
            {
                columna = 0;
                cont = 1;
                List<Parcelas> lc = new List<Parcelas>();

                lc = lista_parcelas2.Items.Cast<Parcelas>().Select(x => x).OrderBy(x => x.Medidas).ToList();

                lista_parcelas2.Items.Clear();
                foreach (Parcelas cl in lc)
                {
                    lista_parcelas2.Items.Add(cl);
                }
            }
            else
            {
                if (cont == 1)
                {
                    cont++;
                    List<Parcelas> lc = new List<Parcelas>();
                    lc = lista_parcelas2.Items.Cast<Parcelas>().Select(x => x).OrderByDescending(x => x.Medidas).ToList();


                    lista_parcelas2.Items.Clear();
                    foreach (Parcelas cl in lc)
                    {
                        lista_parcelas2.Items.Add(cl);
                    }
                }
                else if (cont == 2)
                {
                    cont++;
                    List<Parcelas> lc = new List<Parcelas>();


                    lc = lprc;



                    lista_parcelas2.Items.Clear();
                    foreach (Parcelas cl in lc)
                    {
                        lista_parcelas2.Items.Add(cl);
                    }
                }
                else
                {
                    cont = 1;
                    List<Parcelas> lc = new List<Parcelas>();

                    lc = lista_parcelas2.Items.Cast<Parcelas>().Select(x => x).OrderBy(x => x.Medidas).ToList();
                    lista_parcelas2.Items.Clear();
                    foreach (Parcelas cl in lc)
                    {
                        lista_parcelas2.Items.Add(cl);
                    }
                }
            }
        }

        private void Ocupada_Parcelas(object sender, RoutedEventArgs e)
        {
            if (columna != 0)
            {
                columna = 0;
                cont = 1;
                List<Parcelas> lc = new List<Parcelas>();


                lc = lista_parcelas2.Items.Cast<Parcelas>().Select(x => x).OrderBy(x => x.Disponibilidad).ToList();

                lista_parcelas2.Items.Clear();
                foreach (Parcelas cl in lc)
                {
                    lista_parcelas2.Items.Add(cl);
                }
            }
            else
            {
                if (cont == 1)
                {
                    cont++;
                    List<Parcelas> lc = new List<Parcelas>();
                    lc = lista_parcelas2.Items.Cast<Parcelas>().Select(x => x).OrderByDescending(x => x.Disponibilidad).ToList();


                    lista_parcelas2.Items.Clear();
                    foreach (Parcelas cl in lc)
                    {
                        lista_parcelas2.Items.Add(cl);
                    }
                }
                else if (cont == 2)
                {
                    cont++;
                    List<Parcelas> lc = new List<Parcelas>();


                    lc = lprc;



                    lista_parcelas2.Items.Clear();
                    foreach (Parcelas cl in lc)
                    {
                        lista_parcelas2.Items.Add(cl);
                    }
                }
                else
                {
                    cont = 1;
                    List<Parcelas> lc = new List<Parcelas>();

                    lc = lista_parcelas2.Items.Cast<Parcelas>().Select(x => x).OrderBy(x => x.Disponibilidad).ToList();
                    lista_parcelas2.Items.Clear();
                    foreach (Parcelas cl in lc)
                    {
                        lista_parcelas2.Items.Add(cl);
                    }
                }
            }
        }

        private void foto_Click(object sender, RoutedEventArgs e)
        {
            /*enderTargetBitmap rtb = new RenderTargetBitmap((int)fotoo.RenderSize.Width,
            (int)fotoo.RenderSize.Height, 96d, 96d, System.Windows.Media.PixelFormats.Default);
            rtb.Render(fotoo);

            //var crop = new CroppedBitmap(rtb, new Int32Rect(50, 50, 250, 250));

            BitmapEncoder pngEncoder = new PngBitmapEncoder();
            pngEncoder.Frames.Add(BitmapFrame.Create(rtb));
            string s = "";
            using (var fs = System.IO.File.OpenWrite("logo.png"))
            {
                pngEncoder.Save(fs);
                s = fs.Name;
            }

            Process.Start(s); */

             vb.Close();
            vb = new Browser(0);
            vb.Show();
        }

        private void Ordenar_parcelas_plaza(object sender, RoutedEventArgs e)
        {
            if (columna2 != 0)
            {
                columna2 = 0;
                cont2 = 1;
                List<Parcelas> lc = new List<Parcelas>();
                List<Parcelas> lc2 = new List<Parcelas>();

                if (Filtrar_parcela.SelectedIndex == 0)
                {
                    lc2 = lista_parcelas.Items.Cast<Parcelas>().Select(x => x).OrderBy(x => x.nom).ToList();
                }
                else if (Filtrar_parcela.SelectedIndex == 1)
                {
                    lc2 = lista_parcelas.Items.Cast<Parcelas>().Select(x => x).Where(x => x.ocupada == 1).OrderBy(x => x.nom).ToList();
                }
                else
                {
                    lc2 = lista_parcelas.Items.Cast<Parcelas>().Select(x => x).Where(x => x.ocupada == 0).OrderBy(x => x.nom).ToList();
                }
                lc = lc2;
                

                lista_parcelas.Items.Clear();
                foreach (Parcelas cl in lc)
                {
                    lista_parcelas.Items.Add(cl);
                }
            }
            else
            {
                if (cont2 == 1)
                {
                    cont2++;
                    List<Parcelas> lc = new List<Parcelas>();
                    List<Parcelas> lc2 = new List<Parcelas>();

                    if (Filtrar_parcela.SelectedIndex == 0)
                    {
                        lc2 = lista_parcelas.Items.Cast<Parcelas>().Select(x => x).OrderByDescending(x => x.nom).ToList();
                    }
                    else if (Filtrar_parcela.SelectedIndex == 1)
                    {
                        lc2 = lista_parcelas.Items.Cast<Parcelas>().Select(x => x).Where(x => x.ocupada == 1).OrderByDescending(x => x.nom).ToList();
                    }
                    else
                    {
                        lc2 = lista_parcelas.Items.Cast<Parcelas>().Select(x => x).Where(x => x.ocupada == 0).OrderByDescending(x => x.nom).ToList();
                    }
                    lc = lc2;


                    lista_parcelas.Items.Clear();
                    foreach (Parcelas cl in lc)
                    {
                        lista_parcelas.Items.Add(cl);
                    }
                }
                else if (cont2 == 2)
                {
                    cont2++;
                    List<Parcelas> lc = new List<Parcelas>(); 
                    List<Parcelas> lc2 = new List<Parcelas>();

                    if (Filtrar_parcela.SelectedIndex == 0)
                    {
                        lc2 = lprc.Select(x => x).ToList();
                    }
                    else if (Filtrar_parcela.SelectedIndex == 1)
                    {
                        lc2 = lprc.Select(x => x).Where(x => x.ocupada == 1).ToList();
                    }
                    else
                    {
                        lc2 = lprc.Select(x => x).Where(x => x.ocupada == 0).ToList();
                    }
                    lc = lc2;


                    



                    lista_parcelas.Items.Clear();
                    foreach (Parcelas cl in lc)
                    {
                        lista_parcelas.Items.Add(cl);
                    }
                }
                else
                {
                    cont2 = 1;
                    List<Parcelas> lc = new List<Parcelas>();

                    List<Parcelas> lc2 = new List<Parcelas>();

                    if (Filtrar_parcela.SelectedIndex == 0)
                    {
                        lc2 = lista_parcelas.Items.Cast<Parcelas>().Select(x => x).OrderBy(x => x.nom).ToList();
                    }
                    else if (Filtrar_parcela.SelectedIndex == 1)
                    {
                        lc2 = lista_parcelas.Items.Cast<Parcelas>().Select(x => x).Where(x => x.ocupada == 1).OrderBy(x => x.nom).ToList();
                    }
                    else
                    {
                        lc2 = lista_parcelas.Items.Cast<Parcelas>().Select(x => x).Where(x => x.ocupada == 0).OrderBy(x => x.nom).ToList();
                    }
                    lc = lc2;
                    lista_parcelas.Items.Clear();
                    foreach (Parcelas cl in lc)
                    {
                        lista_parcelas.Items.Add(cl);
                    }
                }
            }
        }

        private void Ordenar_parcelas_ocupada(object sender, RoutedEventArgs e)
        {
            if (columna2 != 0)
            {
                columna2 = 1;
                cont2 = 1;
                List<Parcelas> lc = new List<Parcelas>();
                List<Parcelas> lc2 = new List<Parcelas>();

                if (Filtrar_parcela.SelectedIndex == 0)
                {
                    lc2 = lista_parcelas.Items.Cast<Parcelas>().Select(x => x).OrderBy(x => x.Disponibilidad).ToList();
                }
                else if (Filtrar_parcela.SelectedIndex == 1)
                {
                    lc2 = lista_parcelas.Items.Cast<Parcelas>().Select(x => x).Where(x => x.ocupada == 1).OrderBy(x => x.Disponibilidad).ToList();
                }
                else
                {
                    lc2 = lista_parcelas.Items.Cast<Parcelas>().Select(x => x).Where(x => x.ocupada == 0).OrderBy(x => x.Disponibilidad).ToList();
                }
                lc = lc2;

                lista_parcelas.Items.Clear();
                foreach (Parcelas cl in lc)
                {
                    lista_parcelas.Items.Add(cl);
                }
            }
            else
            {
                if (cont2 == 1)
                {
                    cont2++;
                    List<Parcelas> lc = new List<Parcelas>();
                    List<Parcelas> lc2 = new List<Parcelas>();

                    if (Filtrar_parcela.SelectedIndex == 0)
                    {
                        lc2 = lista_parcelas.Items.Cast<Parcelas>().Select(x => x).OrderByDescending(x => x.Disponibilidad).ToList();
                    }
                    else if (Filtrar_parcela.SelectedIndex == 1)
                    {
                        lc2 = lista_parcelas.Items.Cast<Parcelas>().Select(x => x).Where(x => x.ocupada == 1).OrderByDescending(x => x.Disponibilidad).ToList();
                    }
                    else
                    {
                        lc2 = lista_parcelas.Items.Cast<Parcelas>().Select(x => x).Where(x => x.ocupada == 0).OrderByDescending(x => x.Disponibilidad).ToList();
                    }
                    lc = lc2;

                    lista_parcelas.Items.Clear();
                    foreach (Parcelas cl in lc)
                    {
                        lista_parcelas.Items.Add(cl);
                    }
                }
                else if (cont2 == 2)
                {
                    cont2++;
                    List<Parcelas> lc = new List<Parcelas>();

                    List<Parcelas> lc2 = new List<Parcelas>();

                    if (Filtrar_parcela.SelectedIndex == 0)
                    {
                        lc2 = lprc.Select(x => x).ToList();
                    }
                    else if (Filtrar_parcela.SelectedIndex == 1)
                    {
                        lc2 = lprc.Select(x => x).Where(x => x.ocupada == 1).ToList();
                    }
                    else
                    {
                        lc2 = lista_parcelas.Items.Cast<Parcelas>().Select(x => x).Where(x => x.ocupada == 0).ToList();
                    }
                    lc = lc2;



                    lista_parcelas.Items.Clear();
                    foreach (Parcelas cl in lc)
                    {
                        lista_parcelas.Items.Add(cl);
                    }
                }
                else
                {
                    cont2 = 1;
                    List<Parcelas> lc = new List<Parcelas>();
                    List<Parcelas> lc2 = new List<Parcelas>();

                    if (Filtrar_parcela.SelectedIndex == 0)
                    {
                        lc2 = lista_parcelas.Items.Cast<Parcelas>().Select(x => x).OrderBy(x => x.Disponibilidad).ToList();
                    }
                    else if (Filtrar_parcela.SelectedIndex == 1)
                    {
                        lc2 = lista_parcelas.Items.Cast<Parcelas>().Select(x => x).Where(x => x.ocupada == 1).OrderBy(x => x.Disponibilidad).ToList();
                    }
                    else
                    {
                        lc2 = lista_parcelas.Items.Cast<Parcelas>().Select(x => x).Where(x => x.ocupada == 0).OrderBy(x => x.Disponibilidad).ToList();
                    }
                    lc = lc2;
                    lista_parcelas.Items.Clear();
                    foreach (Parcelas cl in lc)
                    {
                        lista_parcelas.Items.Add(cl);
                    }
                }
            }
        }

        private void Añadir_Direccion1(object sender, RoutedEventArgs e)
        {
            vdir.Close();
            vdir = new VentanaDirecciones(ldir, 0);
            vdir.Show();
        }

        private void Borrar_Direccion1(object sender, RoutedEventArgs e)
        {
            try
            {
                MessageBoxResult result = MessageBox.Show("¿Desea borrar la direccion seleccionada?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                if (result == MessageBoxResult.OK)
                {
                    Direcciones d = Direcciones.SelectedItem as Direcciones;
                    List<string> parametros = new List<string>();
                    Consulta consulta;
                    SQLiteConnection cn = new SQLiteConnection(conexiondb);
                    cn.Open();
                    string sql_query = "DELETE FROM Direcciones WHERE Id=" + d.Id;
                    SQLiteCommand sql_cmd = new SQLiteCommand(sql_query, cn);
                    while (observartodotoken)
                    {

                    }
                    consulta = new Consulta("Direcciones", parametros, "Id:" + d.Id, "DELETE");
                    Lista_consultas.Add(consulta);

                    sql_cmd.ExecuteNonQuery();
                    cn.Close();
                    cargarDirecciones();
                }
            }
            catch (Exception ee)
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                Peta(ee, line + "");
            }
        }

        private void Añadir_Direccion2(object sender, RoutedEventArgs e)
        {
            vdir.Close();
            vdir = new VentanaDirecciones(ldir, 1);
            vdir.Show();
        }

        private void Borrar_Direccion2(object sender, RoutedEventArgs e)
        {
            try
            {
                MessageBoxResult result = MessageBox.Show("¿Desea borrar la direccion seleccionada?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
                if (result == MessageBoxResult.OK)
                {
                    Direcciones d = Direcciones_iluminacion.SelectedItem as Direcciones;
                    List<string> parametros = new List<string>();
                    Consulta consulta;
                    SQLiteConnection cn = new SQLiteConnection(conexiondb);
                    cn.Open();
                    string sql_query = "DELETE FROM Direcciones WHERE Id=" + d.Id;
                    SQLiteCommand sql_cmd = new SQLiteCommand(sql_query, cn);
                    while (observartodotoken)
                    {

                    }
                    consulta = new Consulta("Direcciones", parametros, "Id:" + d.Id, "DELETE");
                    Lista_consultas.Add(consulta);

                    sql_cmd.ExecuteNonQuery();
                    cn.Close();
                    cargarDirecciones();
                }
            }
            catch (Exception ee)
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                Peta(ee, line + "");
            }
        }

        private void Direcciones_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (Direcciones.SelectedItem != null) 
            {
                Direcciones d = Direcciones.SelectedItem as Direcciones;
                if (d.Asignada == 0)
                {
                    borrardireccion1.IsEnabled = true;
                }
                else
                {
                    borrardireccion1.IsEnabled = false;
                }
            }
            else
            {
                borrardireccion1.IsEnabled = false;
            }
        }

        private void Direcciones_iluminacion_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (Direcciones_iluminacion.SelectedItem != null)
            {
                Direcciones d = Direcciones_iluminacion.SelectedItem as Direcciones;
                if (d.Asignada == 0)
                {
                    borrardireccion2.IsEnabled = true;
                }
                else
                {
                    borrardireccion2.IsEnabled = false;
                }
            }
            else
            {
                borrardireccion2.IsEnabled = false;
            }
        }

        private void libre_color_SelectedColorChanged(object sender, RoutedPropertyChangedEventArgs<Color?> e)
        {
            Brush brush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.colorlibre);
            if (!nomirarcolor)
                if (libre_color.SelectedColor != ((SolidColorBrush)brush).Color)
            {
                SolidColorBrush b = new SolidColorBrush((Color)libre_color.SelectedColor);
                Properties.Settings.Default.colorlibre = b.Color.ToString();
                Properties.Settings.Default.Save();
                CargarParcela();
            }
        }

        private void sel_color_SelectedColorChanged(object sender, RoutedPropertyChangedEventArgs<Color?> e)
        {
            Brush brush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.colorselec);
            if (!nomirarcolor)
                if (sel_color.SelectedColor != ((SolidColorBrush)brush).Color)
            {
                SolidColorBrush b = new SolidColorBrush((Color) sel_color.SelectedColor);
                Properties.Settings.Default.colorselec = b.Color.ToString();
                Properties.Settings.Default.Save();
                CargarParcela();
            }
        }

        private void ocupada_color_SelectedColorChanged(object sender, RoutedPropertyChangedEventArgs<Color?> e)
        {   
            Brush brush = (Brush)new BrushConverter().ConvertFrom(SGC.Properties.Settings.Default.colorlibre);
            if(!nomirarcolor)
            if (ocupada_color.SelectedColor != ((SolidColorBrush)brush).Color)
            {
                SolidColorBrush b = new SolidColorBrush((Color)ocupada_color.SelectedColor);
                Properties.Settings.Default.colorocupado = b.Color.ToString();
                Properties.Settings.Default.Save();

                CargarParcela();
            }
        }

        private void Buscar_sistema(object sender, RoutedEventArgs e)
        {
            /*if (usuarios_menu.SelectedIndex == 1)
            {
                boton1_Sistema_Click(boton1_Sistema, RoutedEventArgs);
            }
            if (usuarios_menu.SelectedIndex == 3)
            {
                boton3_Sistema_Click(boton3_Sistema, RoutedEventArgs);
            }
            if (usuarios_menu.SelectedIndex == 5)
            {
                boton5_Sistema_Click(boton5_Sistema, RoutedEventArgs);
            }*/
            switch (usuarios_menu.SelectedIndex)
            {
                case 0:
                    {
                        if (sistema_buscar.Text.Length > 0)
                        {
                            if (!sistema_buscar.Text.Equals("Buscar..."))
                            {


                                switch (filtrar_Sistema.SelectedIndex)
                                {

                                    case 0:
                                        {
                                            List<Usuarios> lc = new List<Usuarios>();
                                            string[] c = sistema_buscar.Text.Split(' ');
                                            if (c.Length > 2)
                                            {
                                                lc = lusr.Select(sublist => sublist).Where(item => item.Nombre.ToLower().Contains(c[0].ToLower()) && item.Apellido1.ToLower().Contains(c[1].ToLower()) && item.Apellido2.ToLower().Contains(c[2].ToLower())).ToList();
                                            }
                                            else if (c.Length > 1)
                                            {
                                                lc = lusr.Select(sublist => sublist).Where(item => item.Nombre.ToLower().Contains(c[0].ToLower()) && item.Apellido1.ToLower().Contains(c[1].ToLower())).ToList();
                                            }
                                            else
                                            {
                                                lc = lusr.Select(sublist => sublist).Where(item => item.Nombre.ToLower().Contains(c[0].ToLower()) || item.Apellido1.ToLower().Contains(c[0].ToLower()) || item.Apellido2.ToLower().Contains(c[0].ToLower())).ToList();

                                            }




                                            Usuarios.ItemsSource = null;
                                            Usuarios.ItemsSource = lc;

                                        }
                                        break;
                                    case 1:
                                        {

                                            List<Usuarios> lc = new List<Usuarios>();

                                            lc = lusr.Select(sublist => sublist).Where(item => item.Dni_Trabajador.Contains(sistema_buscar.Text)).ToList();




                                            Usuarios.ItemsSource = null;
                                            Usuarios.ItemsSource = lc;
                                        }
                                        break;

                                    case 2:
                                        {
                                            List<Usuarios> lc = new List<Usuarios>();

                                            lc = lusr.Select(sublist => sublist).Where(item => item.Nombre_Rol.ToLower().Contains(sistema_buscar.Text.ToLower())).ToList();


                                            Usuarios.ItemsSource = null;
                                            Usuarios.ItemsSource = lc;
                                        }
                                        break;
                                    case 3:
                                        {
                                            List<Usuarios> lc = new List<Usuarios>();

                                            lc = lusr.Select(sublist => sublist).Where(item => item.Direccion.ToLower().Contains(sistema_buscar.Text.ToLower())).ToList();
                                            Usuarios.ItemsSource = null;
                                            Usuarios.ItemsSource = lc;
                                        }
                                        break;
                                    case 4:
                                        {
                                            List<Usuarios> lc = new List<Usuarios>();

                                            lc = lusr.Select(sublist => sublist).Where(item => item.Poblacion.ToLower().Contains(sistema_buscar.Text.ToLower())).ToList();

                                            Usuarios.ItemsSource = null;
                                            Usuarios.ItemsSource = lc;
                                        }
                                        break;
                                    case 5:
                                        {
                                            List<Usuarios> lc = new List<Usuarios>();

                                            lc = lusr.Select(sublist => sublist).Where(item => item.Telefono.ToLower().Contains(sistema_buscar.Text.ToLower())).ToList();

                                            Usuarios.ItemsSource = null;
                                            Usuarios.ItemsSource = lc;
                                        }
                                        break;
                                    case 6:
                                        {
                                            List<Usuarios> lc = new List<Usuarios>();

                                            lc = lusr.Select(sublist => sublist).Where(item => item.CP.ToLower().Contains(sistema_buscar.Text.ToLower())).ToList();

                                            Usuarios.ItemsSource = null;
                                            Usuarios.ItemsSource = lc;
                                        }
                                        break;
                                    case 7:
                                        {
                                            List<Usuarios> lc = new List<Usuarios>();

                                            lc = lusr.Select(sublist => sublist).Where(item => item.Mail.ToLower().Contains(sistema_buscar.Text.ToLower())).ToList();

                                            Usuarios.ItemsSource = null;
                                            Usuarios.ItemsSource = lc;
                                        }
                                        break;
                                    case 8:
                                        {
                                            List<Usuarios> lc = new List<Usuarios>();

                                            lc = lusr.Select(sublist => sublist).Where(item => item.Pais.ToLower().Contains(sistema_buscar.Text.ToLower())).ToList();

                                            Usuarios.ItemsSource = null;
                                            Usuarios.ItemsSource = lc;
                                        }
                                        break;
                                    case 9:
                                        {
                                            List<Usuarios> lc = new List<Usuarios>();

                                            lc = lusr.Select(sublist => sublist).Where(item => item.Provincia.ToLower().Contains(sistema_buscar.Text.ToLower())).ToList();

                                            Usuarios.ItemsSource = null;
                                            Usuarios.ItemsSource = lc;
                                        }
                                        break;

                                }
                            }

                            //List<Cliente> lc= clientes.Select(sublist=>sublist).Where(item=> item.)


                        }
                        else
                        {
                            CargarUsuarios();


                        }
                    }
                    break;
                case 1:
                    {

                        if (sistema_buscar.Text.Length > 0)
                        {
                            if (!sistema_buscar.Text.Equals("Buscar..."))
                            {
                                boton1_Sistema_Click(boton1_Sistema, RoutedEventArgs);

                                switch (filtrar_Sistema.SelectedIndex)
                                {
                                    case 0:
                                        {
                                            List<Usuarios> lc = new List<Usuarios>();
                                            string[] c = sistema_buscar.Text.Split(' ');
                                            if (c.Length > 2)
                                            {
                                                lc = lusr.Select(sublist => sublist).Where(item => item.Nombre.ToLower().Contains(c[0].ToLower()) && item.Apellido1.ToLower().Contains(c[1].ToLower()) && item.Apellido2.ToLower().Contains(c[2].ToLower())).ToList();
                                            }
                                            else if (c.Length > 1)
                                            {
                                                lc = lusr.Select(sublist => sublist).Where(item => item.Nombre.ToLower().Contains(c[0].ToLower()) && item.Apellido1.ToLower().Contains(c[1].ToLower())).ToList();
                                            }
                                            else
                                            {
                                                lc = lusr.Select(sublist => sublist).Where(item => item.Nombre.ToLower().Contains(c[0].ToLower()) || item.Apellido1.ToLower().Contains(c[0].ToLower()) || item.Apellido2.ToLower().Contains(c[0].ToLower())).ToList();

                                            }




                                            Usuarios.Items.Clear();
                                            foreach (Usuarios cl in lc)
                                            {
                                                Usuarios.Items.Add(cl);
                                            }
                                        }
                                        break;
                                    case 1:
                                        {

                                            List<Usuarios> lc = new List<Usuarios>();

                                            lc = lusr.Select(sublist => sublist).Where(item => item.Dni_Trabajador.Contains(sistema_buscar.Text)).ToList();





                                            Usuarios.Items.Clear();
                                            foreach (Usuarios cl in lc)
                                            {
                                                Usuarios.Items.Add(cl);
                                            }
                                        }
                                        break;

                                    case 2:
                                        {
                                            List<Usuarios> lc = new List<Usuarios>();

                                            lc = lusr.Select(sublist => sublist).Where(item => item.Nombre_Rol.ToLower().Contains(sistema_buscar.Text.ToLower())).ToList();





                                            Usuarios.Items.Clear();
                                            foreach (Usuarios cl in lc)
                                            {
                                                Usuarios.Items.Add(cl);
                                            }
                                        }
                                        break;
                                }
                            }

                            //List<Cliente> lc= clientes.Select(sublist=>sublist).Where(item=> item.)


                        }
                        else
                        {
                            CargarUsuarios();


                        }
                    }
                    break;
                case 2:
                    {
                        if (sistema_buscar2.Text.Length > 0)
                        {
                            if (!sistema_buscar2.Text.Equals("Buscar..."))
                            {
                                List<Roles> lc = new List<Roles>();

                                switch (filtrar_Sistema2.SelectedIndex)
                                {
                                    case 0:
                                        {
                                           

                                            lc = lrol.Select(sublist => sublist).Where(item => item.Nom.ToLower().Contains(sistema_buscar2.Text.ToLower())).ToList();

                                        }
                                        break;
                                    case 1:
                                        {

                                           

                                            lc = lrol.Select(sublist => sublist).Where(item => item.Permisos_bin.Contains(sistema_buscar2.Text)).ToList();


                                        }
                                        break;


                                }

                                Roles.Items.Clear();
                                foreach(Roles r in lc)
                                    Roles.Items.Add(r);
                            }

                            //List<Cliente> lc= clientes.Select(sublist=>sublist).Where(item=> item.)


                        }
                        else
                        {
                            CargarRoles();


                        }
                    }
                    break;
                case 3:
                    {

                        if (sistema_buscar.Text.Length > 0)
                        {
                            if (!sistema_buscar.Text.Equals("Buscar..."))
                            {
                                boton3_Sistema_Click(boton3_Sistema, RoutedEventArgs);

                                switch (filtrar_Sistema.SelectedIndex)
                                {
                                    case 0:
                                        {
                                            List<Roles> lc = new List<Roles>();

                                            lc = lrol.Select(sublist => sublist).Where(item => item.Nom.ToLower().Contains(sistema_buscar.Text.ToLower())).ToList();


                                            Roles.Items.Clear();
                                            foreach (Roles cl in lc)
                                            {
                                                Roles.Items.Add(cl);
                                            }
                                        }
                                        break;
                                    case 1:
                                        {

                                            List<Roles> lc = new List<Roles>();

                                            lc = lrol.Select(sublist => sublist).Where(item => item.Permisos_bin.Contains(sistema_buscar.Text)).ToList();


                                            Roles.Items.Clear();
                                            foreach (Roles cl in lc)
                                            {
                                                Roles.Items.Add(cl);
                                            }
                                        }
                                        break;


                                }
                            }

                            //List<Cliente> lc= clientes.Select(sublist=>sublist).Where(item=> item.)


                        }
                        else
                        {
                            CargarRoles();


                        }
                    }
                    break;
                case 4:
                    {
                        if (sistema_buscar3.Text.Length > 0)
                        {
                            if (!sistema_buscar3.Text.Equals("Buscar..."))
                            {


                                switch (filtrar_Sistema3.SelectedIndex)
                                {
                                    case 0:
                                        {
                                            List<IVAs> lc = new List<IVAs>();

                                            lc = liva.Select(sublist => sublist).Where(item => item.Tipo.ToLower().Contains(sistema_buscar3.Text.ToLower())).ToList();

                                            lista_iva.ItemsSource = null;
                                            lista_iva.ItemsSource = lc;
                                        }
                                        break;
                                    case 1:
                                        {

                                            List<IVAs> lc = new List<IVAs>();

                                            lc = liva.Select(sublist => sublist).Where(item => item.Porcentaje.ToString().Contains(sistema_buscar3.Text)).ToList();

                                            lista_iva.ItemsSource = null;
                                            lista_iva.ItemsSource = lc;
                                        }
                                        break;


                                }
                            }

                            //List<Cliente> lc= clientes.Select(sublist=>sublist).Where(item=> item.)


                        }
                        else
                        {
                            CargarIva();


                        }
                    }
                    break;
                case 5:
                    {
                        if (sistema_buscar3.Text.Length > 0)
                        {
                            if (!sistema_buscar3.Text.Equals("Buscar..."))
                            {
                                boton5_Sistema_Click(boton5_Sistema, RoutedEventArgs);


                                switch (filtrar_Sistema3.SelectedIndex)
                                {
                                    case 0:
                                        {
                                            List<IVAs> lc = new List<IVAs>();

                                            lc = liva.Select(sublist => sublist).Where(item => item.Tipo.ToLower().Contains(sistema_buscar3.Text.ToLower())).ToList();

                                            lista_iva.ItemsSource = null;
                                            lista_iva.ItemsSource = lc;
                                        }
                                        break;
                                    case 1:
                                        {

                                            List<IVAs> lc = new List<IVAs>();

                                            lc = liva.Select(sublist => sublist).Where(item => item.Porcentaje.ToString().Contains(sistema_buscar3.Text)).ToList();

                                            lista_iva.ItemsSource = null;
                                            lista_iva.ItemsSource = lc;
                                        }
                                        break;


                                }
                            }

                            //List<Cliente> lc= clientes.Select(sublist=>sublist).Where(item=> item.)


                        }
                        else
                        {
                            CargarIva();


                        }
                    }
                    break;

                case 7:
                    {
                        if (sistema_buscar5.Text.Length > 0)
                        {
                            if (!sistema_buscar5.Text.Equals("Buscar..."))
                            {
                                

                                switch (filtrar_Sistema5.SelectedIndex)
                                {
                                    case 0:
                                        {
                                            List<Vehiculos> lc = new List<Vehiculos>();

                                            lc = lvhc.Select(sublist => sublist).Where(item => item.Tipo.ToString().ToLower().Contains(sistema_buscar5.Text.ToLower())).ToList();
                                            Vehiculos.Items.Clear();

                                            foreach(Vehiculos v in lc)
                                            {
                                                Vehiculos.Items.Add(v);
                                            }

                                        }
                                        break;
                                  


                                }
                            }

                            //List<Cliente> lc= clientes.Select(sublist=>sublist).Where(item=> item.)


                        }
                        else
                        {
                            CargarVehiculos();


                        }
                    }
                    break;

            }
        }

        private void Buscar_Mapa(object sender, RoutedEventArgs e)
        {
           /* if (Mapa_buscar.Text.Length > 0)
            {
                if (!Mapa_buscar.Text.Equals("Buscar..."))
                {


                    switch (filtrar_Mapa.SelectedIndex)
                    {

                        case 0:
                            {
                                List<Parcelas> lc = new List<Parcelas>();


                                lc = lprc.Select(x => x).Where(x => x.Disponibilidad.ToLower() == Mapa_buscar.Text.ToLower()).ToList();


                                lista_parcelas.Items.Clear();
                                foreach (Parcelas cl in lc)
                                {
                                    lista_parcelas.Items.Add(cl);
                                }
                            }
                            break;
                        case 1:
                            {

                                List<Parcelas> lc = new List<Parcelas>();


                                lc = lprc.Select(x => x).Where(x => x.nom.ToLower().Contains(Mapa_buscar.Text.ToLower())).ToList();


                                lista_parcelas.Items.Clear();
                                foreach (Parcelas cl in lc)
                                {
                                    lista_parcelas.Items.Add(cl);
                                }
                            }
                            break;

                        case 2:
                            {

                                List<Parcelas> lc = new List<Parcelas>();


                                lc = lprc.Select(x => x).Where(x => x.direccion.ToLower().Contains(Mapa_buscar.Text.ToLower())).ToList();


                                lista_parcelas.Items.Clear();
                                foreach (Parcelas cl in lc)
                                {
                                    lista_parcelas.Items.Add(cl);
                                }
                            }
                            break;
                        case 3:
                            {

                                List<Parcelas> lc = new List<Parcelas>();


                                lc = lprc.Select(x => x).Where(x => x.Distrito.ToLower().Contains(Mapa_buscar.Text.ToLower())).ToList();


                                lista_parcelas.Items.Clear();
                                foreach (Parcelas cl in lc)
                                {
                                    lista_parcelas.Items.Add(cl);
                                }
                            }
                            break;
                        case 4:
                            {

                                List<Parcelas> lc = new List<Parcelas>();


                                lc = lprc.Select(x => x).Where(x => x.Descripción.ToLower().Contains(Mapa_buscar.Text.ToLower())).ToList();


                                lista_parcelas.Items.Clear();
                                foreach (Parcelas cl in lc)
                                {
                                    lista_parcelas.Items.Add(cl);
                                }
                            }
                            break;
                        case 5:
                            {

                                List<Parcelas> lc = new List<Parcelas>();


                                lc = lprc.Select(x => x).Where(x => x.Orientacion.ToLower().Contains(Mapa_buscar.Text.ToLower())).ToList();


                                lista_parcelas.Items.Clear();
                                foreach (Parcelas cl in lc)
                                {
                                    lista_parcelas.Items.Add(cl);
                                }
                            }
                            break;
                        case 6:
                            {

                                List<Parcelas> lc = new List<Parcelas>();


                                lc = lprc.Select(x => x).Where(x => x.Medidas.ToLower().Contains(Mapa_buscar.Text.ToLower())).ToList();


                                lista_parcelas.Items.Clear();
                                foreach (Parcelas cl in lc)
                                {
                                    lista_parcelas.Items.Add(cl);
                                }
                            }
                            break;




                    }
                }

                //List<Cliente> lc= clientes.Select(sublist=>sublist).Where(item=> item.)


            }
            else
            {

                int i = Filtrar_parcela.SelectedIndex;

                Filtrar_parcela.SelectedIndex = -1;
                Filtrar_parcela.SelectedIndex = i;

            }*/
        }

        private void Buscar_Factura(object sender, RoutedEventArgs e)
        {
            if (Facturas_buscar.Visibility == Visibility.Visible)
            {
                if (Facturas_buscar.Text.Length > 0)
                {
                    if (!Facturas_buscar.Text.Equals("Buscar..."))
                    {


                        switch (filtrar_Factura.SelectedIndex)
                        {
                            case 0:
                                {
                                    List<Facturas> lc = new List<Facturas>();

                                    lc = lfct.Select(sublist => sublist).Where(item => item.Nombre_Cliente.ToLower().Contains(Facturas_buscar.Text.ToLower())).ToList();

                                    Facturas.ItemsSource = null;
                                    Facturas.ItemsSource = lc;

                                    
                                }
                                break;
                            case 1:
                                {

                                    List<Facturas> lc = new List<Facturas>();

                                    lc = lfct.Select(sublist => sublist).Where(item => item.DNI_CIF.ToLower().Contains(Facturas_buscar.Text.ToLower())).ToList();

                                    Facturas.ItemsSource = null;
                                    Facturas.ItemsSource = lc;

                                }
                                break;
                            case 2:
                                {

                                    List<Facturas> lc = new List<Facturas>();

                                    lc = lfct.Select(sublist => sublist).Where(item => item.Direccion_Cliente.ToString().ToLower().Contains(Facturas_buscar.Text.ToLower())).ToList();

                                    Facturas.ItemsSource = null;
                                    Facturas.ItemsSource = lc;

                                }
                                break;
                            case 3:
                                {

                                    List<Facturas> lc = new List<Facturas>();

                                    lc = lfct.Select(sublist => sublist).Where(item => item.Poblacio_Cliente.ToLower().Contains(Facturas_buscar.Text.ToLower())).ToList();

                                    Facturas.ItemsSource = null;
                                    Facturas.ItemsSource = lc;

                                }
                                break;
                            case 4:
                                {

                                    List<Facturas> lc = new List<Facturas>();

                                    lc = lfct.Select(sublist => sublist).Where(item => item.CP_Cliente.ToLower().Contains(Facturas_buscar.Text.ToLower())).ToList();

                                    Facturas.ItemsSource = null;
                                    Facturas.ItemsSource = lc;

                                }
                                break;
                            case 5:
                                {

                                    List<Facturas> lc = new List<Facturas>();

                                    lc = lfct.Select(sublist => sublist).Where(item => item.Provincia_Cliente.ToLower().Contains(Facturas_buscar.Text.ToLower())).ToList();

                                    Facturas.ItemsSource = null;
                                    Facturas.ItemsSource = lc;

                                }
                                break;
                            case 6:
                                {

                                    List<Facturas> lc = new List<Facturas>();

                                    lc = lfct.Select(sublist => sublist).Where(item => item.Pais_Cliente.ToString().ToLower().Contains(Facturas_buscar.Text.ToLower())).ToList();

                                    Facturas.ItemsSource = null;
                                    Facturas.ItemsSource = lc;

                                }
                                break;
                            case 7:
                                {

                                    List<Facturas> lc = new List<Facturas>();

                                    lc = lfct.Select(sublist => sublist).Where(item => item.fecha == Facturas_buscar_fecha.SelectedDate).ToList();

                                    Facturas.ItemsSource = null;
                                    Facturas.ItemsSource = lc;

                                }
                                break;


                        }
                    }
                    

                    //List<Cliente> lc= clientes.Select(sublist=>sublist).Where(item=> item.)


                }
                
            }
            else
            {


                    
                    if (Facturas_buscar_fecha.SelectedDate != null)
                    {

                        List<Facturas> lc = new List<Facturas>();

                        lc = lfct.Select(sublist => sublist).Where(item => item.fecha.ToString("dd/MM/yyyy").Equals(Facturas_buscar_fecha.SelectedDate.Value.ToString("dd/MM/yyyy"))).ToList();

                        Facturas.ItemsSource = null;
                        Facturas.ItemsSource = lc;

                    }
                

            }
            
        }

        private void Recibo_Buscar(object sender, RoutedEventArgs e)
        {
            if (Facturas_buscar2.Visibility == Visibility.Visible)
            {
                if (Facturas_buscar2.Text.Length > 0)
                {
                    if (!Facturas_buscar2.Text.Equals("Buscar..."))
                    {


                        switch (filtrar_Factura2.SelectedIndex)
                        {
                            case 0:
                                {
                                    List<Recibos> lc = new List<Recibos>();

                                    lc = lrcb.Select(sublist => sublist).Where(item => item.Nombre_Cliente.ToLower().Contains(Facturas_buscar2.Text.ToLower())).ToList();

                                    Recibos.ItemsSource = null;
                                    Recibos.ItemsSource = lc;


                                }
                                break;
                            case 1:
                                {

                                    List<Recibos> lc = new List<Recibos>();

                                    lc = lrcb.Select(sublist => sublist).Where(item => item.DNI_CIF.ToLower().Contains(Facturas_buscar2.Text.ToLower())).ToList();

                                    Recibos.ItemsSource = null;
                                    Recibos.ItemsSource = lc;


                                }
                                break;
                            case 2:
                                {

                                    List<Recibos> lc = new List<Recibos>();

                                    lc = lrcb.Select(sublist => sublist).Where(item => item.Direccion_Cliente.ToString().ToLower().Contains(Facturas_buscar2.Text.ToLower())).ToList();
                                    Recibos.ItemsSource = null;
                                    Recibos.ItemsSource = lc;


                                }
                                break;
                            case 3:
                                {

                                    List<Recibos> lc = new List<Recibos>();

                                    lc = lrcb.Select(sublist => sublist).Where(item => item.Poblacio_Cliente.ToLower().Contains(Facturas_buscar2.Text.ToLower())).ToList();
                                    Recibos.ItemsSource = null;
                                    Recibos.ItemsSource = lc;


                                }
                                break;
                            case 4:
                                {

                                    List<Recibos> lc = new List<Recibos>();

                                    lc = lrcb.Select(sublist => sublist).Where(item => item.CP_Cliente.ToLower().Contains(Facturas_buscar2.Text.ToLower())).ToList();

                                    Recibos.ItemsSource = null;
                                    Recibos.ItemsSource = lc;

                                }
                                break;
                            case 5:
                                {

                                    List<Recibos> lc = new List<Recibos>();

                                    lc = lrcb.Select(sublist => sublist).Where(item => item.Provincia_Cliente.ToLower().Contains(Facturas_buscar2.Text.ToLower())).ToList();
                                    Recibos.ItemsSource = null;
                                    Recibos.ItemsSource = lc;


                                }
                                break;
                            case 6:
                                {

                                    List<Recibos> lc = new List<Recibos>();

                                    lc = lrcb.Select(sublist => sublist).Where(item => item.Pais_Cliente.ToString().ToLower().Contains(Facturas_buscar2.Text.ToLower())).ToList();

                                    Recibos.ItemsSource = null;
                                    Recibos.ItemsSource = lc;

                                }
                                break;
                            case 7:
                                {

                                    List<Recibos> lc = new List<Recibos>();

                                    lc = lrcb.Select(sublist => sublist).Where(item => item.fecha == Facturas_buscar_fecha2.SelectedDate).ToList();

                                    Recibos.ItemsSource = null;
                                    Recibos.ItemsSource = lc;


                                }
                                break;


                        }
                    }


                    //List<Cliente> lc= clientes.Select(sublist=>sublist).Where(item=> item.)


                }

            }
            else
            {



                if (Facturas_buscar_fecha2.SelectedDate != null)
                {

                    List<Recibos> lc = new List<Recibos>();

                    lc = lrcb.Select(sublist => sublist).Where(item => item.fecha.ToString("dd/MM/yyyy").Equals(Facturas_buscar_fecha2.SelectedDate.Value.ToString("dd/MM/yyyy"))).ToList();

                    Recibos.ItemsSource = null;
                    Recibos.ItemsSource = lc;

                }


            }

        }

        private void filtrar_cliente_SelectionChanged2(object sender, SelectionChangedEventArgs e)
        {
            if (filtrar_Factura2 != null)
                if (filtrar_Factura2.SelectedIndex == 7)
                {
                    Facturas_buscar_fecha2.Visibility = Visibility.Visible;
                    Facturas_buscar2.Visibility = Visibility.Collapsed;
                }
                else
                {
                    Facturas_buscar_fecha2.Visibility = Visibility.Collapsed;
                    Facturas_buscar2.Visibility = Visibility.Visible;
                }
        }

        private void Producto_Buscar(object sender, RoutedEventArgs e)
        {
            
                if (Facturas_buscar3.Text.Length > 0)
                {
                    if (!Facturas_buscar3.Text.Equals("Buscar..."))
                    {


                        switch (filtrar_Factura3.SelectedIndex)
                        {
                            case 0:
                                {
                                    List<ProductosRegistrados> lc = new List<ProductosRegistrados>();

                                    lc = lpdrr.Select(sublist => sublist).Where(item => item.Nombre.ToLower().Contains(Facturas_buscar3.Text.ToLower())).ToList();
                                    lista_productos.ItemsSource = null;
                                    lista_productos.ItemsSource = lc;
                                    lista_productos.Items.Refresh();

                                }
                                break;
                            case 1:
                                {

                                    List<ProductosRegistrados> lc = new List<ProductosRegistrados>();

                                    lc = lpdrr.Select(sublist => sublist).Where(item => item.Referencia.ToLower().Contains(Facturas_buscar3.Text.ToLower())).ToList();
                                lista_productos.ItemsSource = null;
                                lista_productos.ItemsSource = lc;

                                lista_productos.Items.Refresh();
                            }
                                break;
                            case 2:
                                {

                                List<ProductosRegistrados> lc = new List<ProductosRegistrados>();

                                lc = lpdrr.Select(sublist => sublist).Where(item => item.nombre_IVA.ToLower().Contains(Facturas_buscar3.Text.ToLower())).ToList();
                                lista_productos.ItemsSource = null;
                                lista_productos.ItemsSource = lc;

                                lista_productos.Items.Refresh();
                            }
                                break;
                           



                                
                        }
                    }
                                //List<Cliente> lc= clientes.Select(sublist=>sublist).Where(item=> item.)
                    }
                
           
        }

        private void Facturas_buscar_GotFocus3(object sender, RoutedEventArgs e)
        {
            Facturas_buscar5.Text = "";
        }

        private void Facturas_buscar_LostFocus3(object sender, RoutedEventArgs e)
        {
            if(Facturas_buscar5.Text.Equals("")|| Facturas_buscar5.Text.Equals(" "))
            Facturas_buscar5.Text = "";
        }

        private void Facturas_buscar_GotFocus2(object sender, RoutedEventArgs e)
        {
           
        }

        private void Facturas_buscar_LostFocus2(object sender, RoutedEventArgs e)
        {
           
               
        }

        private void Facturas_Find1(object sender, KeyEventArgs e)
        {
            /*if (e.Key == Key.Enter)
                Buscar_Factura(fct1, RoutedEventArgs);*/
        }

        private void Facturas_Find2(object sender, KeyEventArgs e)
        {/*
            if (e.Key == Key.Enter)
                Recibo_Buscar(fct2, RoutedEventArgs);*/
        }

        private void Facturas_Find3(object sender, KeyEventArgs e)
        {
            /*if (e.Key == Key.Enter)
                Producto_Buscar(fct3, RoutedEventArgs);*/
        }

        private void Sistema_Find1(object sender, KeyEventArgs e)
        {
          /*  if (e.Key == Key.Enter)
                Buscar_sistema(stm1, RoutedEventArgs);*/
        }
        private void Sistema_Find2(object sender, KeyEventArgs e)
        {
            /*if (e.Key == Key.Enter)
                Buscar_sistema(stm2, RoutedEventArgs);*/
        }
        private void Sistema_Find3(object sender, KeyEventArgs e)
        {/*
            if (e.Key == Key.Enter)
                Buscar_sistema(stm3, RoutedEventArgs);*/
        }

        private void Mapa_Find1(object sender, KeyEventArgs e)
        {
            /*if (e.Key == Key.Enter)
                Buscar_Mapa(mp1, RoutedEventArgs);*/
        }
        private void Mapa_Find2(object sender, KeyEventArgs e)
        {/*if(e.Key==Key.Enter)
            Buscar_Mapa2(mp2, RoutedEventArgs);*/
        }

        private void Buscar_Mapa2(object sender, RoutedEventArgs e)
        {
            /*if (Mapa_buscar2.Text.Length > 0)
            {
                if (!Mapa_buscar2.Text.Equals("Buscar..."))
                {


                    switch (filtrar_Mapa2.SelectedIndex)
                    {

                        case 0:
                            {
                                List<Parcelas> lc = new List<Parcelas>();


                                lc = lprc.Select(x => x).Where(x => x.Disponibilidad.ToLower() == Mapa_buscar2.Text.ToLower()).ToList();


                                lista_parcelas2.Items.Clear();
                                foreach (Parcelas cl in lc)
                                {
                                    lista_parcelas2.Items.Add(cl);
                                }
                            }
                            break;
                        case 1:
                            {

                                List<Parcelas> lc = new List<Parcelas>();


                                lc = lprc.Select(x => x).Where(x => x.nom.ToLower().Contains(Mapa_buscar2.Text.ToLower())).ToList();


                                lista_parcelas2.Items.Clear();
                                foreach (Parcelas cl in lc)
                                {
                                    lista_parcelas2.Items.Add(cl);
                                }
                            }
                            break;

                        case 2:
                            {

                                List<Parcelas> lc = new List<Parcelas>();


                                lc = lprc.Select(x => x).Where(x => x.Descripción.ToLower().Contains(Mapa_buscar2.Text.ToLower())).ToList();


                                lista_parcelas2.Items.Clear();
                                foreach (Parcelas cl in lc)
                                {
                                    lista_parcelas2.Items.Add(cl);
                                }
                            }
                            break;
                        case 3:
                            {

                                List<Parcelas> lc = new List<Parcelas>();


                                lc = lprc.Select(x => x).Where(x => x.Distrito.ToLower().Contains(Mapa_buscar2.Text.ToLower())).ToList();


                                lista_parcelas2.Items.Clear();
                                foreach (Parcelas cl in lc)
                                {
                                    lista_parcelas2.Items.Add(cl);
                                }
                            }
                            break;
                        case 4:
                            {

                                List<Parcelas> lc = new List<Parcelas>();


                                lc = lprc.Select(x => x).Where(x => x.Descripción.ToLower().Contains(Mapa_buscar2.Text.ToLower())).ToList();


                                lista_parcelas2.Items.Clear();
                                foreach (Parcelas cl in lc)
                                {
                                    lista_parcelas2.Items.Add(cl);
                                }
                            }
                            break;
                        case 5:
                            {

                                List<Parcelas> lc = new List<Parcelas>();


                                lc = lprc.Select(x => x).Where(x => x.Orientacion.ToLower().Contains(Mapa_buscar2.Text.ToLower())).ToList();


                                lista_parcelas2.Items.Clear();
                                foreach (Parcelas cl in lc)
                                {
                                    lista_parcelas2.Items.Add(cl);
                                }
                            }
                            break;
                        case 6:
                            {

                                List<Parcelas> lc = new List<Parcelas>();


                                lc = lprc.Select(x => x).Where(x => x.Medidas.ToLower().Contains(Mapa_buscar2.Text.ToLower())).ToList();


                                lista_parcelas2.Items.Clear();
                                foreach (Parcelas cl in lc)
                                {
                                    lista_parcelas2.Items.Add(cl);
                                }
                            }
                            break;




                    }
                }

                //List<Cliente> lc= clientes.Select(sublist=>sublist).Where(item=> item.)


            }*/
            
        }

        private void Mapa_buscar_GotFocus_2(object sender, RoutedEventArgs e)
        {
            //Mapa_buscar2.Text = "";
        }

        private void Mapa_buscar_LostFocus_2(object sender, RoutedEventArgs e)
        {
           /* if(Mapa_buscar2.Text.Equals("")|| Mapa_buscar2.Text.Equals(" "))
            {
                Mapa_buscar2.Text = "Buscar...";
            }*/
        }

        private void filtrar_factura_SelectionChanged2(object sender, SelectionChangedEventArgs e)
        {
            
                if (filtrar_Factura2.SelectedIndex == 7)
                {
                    Facturas_buscar_fecha2.Visibility = Visibility.Visible;
                    Facturas_buscar2.Visibility = Visibility.Collapsed;
                }
                else
                {
                    Facturas_buscar_fecha2.Visibility = Visibility.Collapsed;
                    Facturas_buscar2.Visibility = Visibility.Visible;
                }
        }

        private void filtrar_factura_SelectionChanged1(object sender, SelectionChangedEventArgs e)
        {
            /*if (filtrar_Factura != null)
                if (filtrar_Factura.SelectedIndex == 7)
                {
                    Facturas_buscar_fecha.Visibility = Visibility.Visible;
                    Facturas_buscar.Visibility = Visibility.Collapsed;
                }
                else
                {
                    Facturas_buscar_fecha.Visibility = Visibility.Collapsed;
                    Facturas_buscar.Visibility = Visibility.Visible;
                }*/
        }

        private void filtrar_factura_SelectionChanged3(object sender, SelectionChangedEventArgs e)
        {
            
        }

        private void filtrarnumero(object sender, RoutedEventArgs e)
        {
            if (posicionficha != 0)
            {
                posicionficha = 0;
                contadorfiltroficha = 0;
                if (lista_clientes_ficha.Count > 0)
                {
                    cargarClientes();
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.n_cliemte).ToList();
                    posicion = 0;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];

                }
            }
            else
            {
                if (contadorfiltroficha == 0)
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderByDescending(x => x.n_cliemte).ToList();
                    posicion = 0;
                    contadorfiltroficha = 1;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
                else
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.n_cliemte).ToList();
                    posicion = 0;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                    contadorfiltroficha = 0;
                }
            }
        }

        private void filtrarnombre(object sender, RoutedEventArgs e)
        {
            if (posicionficha != 1)
            {
                posicionficha = 1;
                contadorfiltroficha = 0;
                if (lista_clientes_ficha.Count > 0)
                {
                    cargarClientes();
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.nombre_cliente.ToLower()).ToList();
                    posicion = 0;


                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
            }
            else
            {
                if (contadorfiltroficha == 0)
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderByDescending(x => x.nombre_cliente.ToLower()).ToList();
                    posicion = 0;
                    contadorfiltroficha = 1;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
                else
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.nombre_cliente.ToLower()).ToList();
                    posicion = 0;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                    contadorfiltroficha = 0;
                }
            }
        }

        private void filtrarapellidos(object sender, RoutedEventArgs e)
        {
            if (posicionficha != 2)
            {
                posicionficha = 2;
                contadorfiltroficha = 0;
                if (lista_clientes_ficha.Count > 0)
                {
                    cargarClientes();
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.apellidos_cliente.ToLower()).ToList();
                    posicion = 0;


                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
            }
            else
            {
                if (contadorfiltroficha == 0)
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderByDescending(x => x.apellidos_cliente.ToLower()).ToList();
                    posicion = 0;
                    contadorfiltroficha = 1;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
                else
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.apellidos_cliente.ToLower()).ToList();
                    posicion = 0;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                    contadorfiltroficha = 0;
                }
            }
        }

        private void filtrardni(object sender, RoutedEventArgs e)
        {
            if (posicionficha != 3) {
                posicionficha = 3;
                contadorfiltroficha = 0;
            if (lista_clientes_ficha.Count > 0)
            {cargarClientes();
                lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.dni).ToList();
                posicion = 0;

                
                Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
            }
            else
            {
                if (contadorfiltroficha == 0)
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderByDescending(x => x.dni).ToList();
                    posicion = 0;
                    contadorfiltroficha = 1;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
                else
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.dni).ToList();
                    posicion = 0;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                    contadorfiltroficha = 0;
                }
            }
        }

        private void filtrardireccion(object sender, RoutedEventArgs e)
        {
            if (posicionficha != 4) {
                posicionficha = 4;
                contadorfiltroficha = 0;
            if (lista_clientes_ficha.Count > 0)
            {cargarClientes();
                lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.direccion.ToLower()).ToList();
                posicion = 0;

                
                Clientes.SelectedItem = lista_clientes_ficha[posicion];
            }
            }
            else
            {
                if (contadorfiltroficha == 0)
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderByDescending(x => x.direccion.ToLower()).ToList();
                    posicion = 0;
                    contadorfiltroficha = 1;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
                else
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.direccion.ToLower()).ToList();
                    posicion = 0;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                    contadorfiltroficha = 0;
                }
            }
        }

        private void filtrarpoblacion(object sender, RoutedEventArgs e)
        {
            if (posicionficha != 5)
            {
                posicionficha = 5;
                contadorfiltroficha = 0;
                if (lista_clientes_ficha.Count > 0)
                {
                    cargarClientes();
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.poblacio.ToLower()).ToList();
                    posicion = 0;


                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
            }
            else
            {
                if (contadorfiltroficha == 0)
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderByDescending(x => x.poblacio.ToLower()).ToList();
                    posicion = 0;
                    contadorfiltroficha = 1;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
                else
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.poblacio.ToLower()).ToList();
                    posicion = 0;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                    contadorfiltroficha = 0;
                }
            }

        }

        private void filtrarcp(object sender, RoutedEventArgs e)
        {
            if (posicionficha != 6)
            {
                posicionficha = 6;
                contadorfiltroficha = 0;
                if (lista_clientes_ficha.Count > 0)
                {
                    cargarClientes();
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.codigo_postal).ToList();
                    posicion = 0;


                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
            }
            else
            {
                if (contadorfiltroficha == 0)
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderByDescending(x => x.codigo_postal).ToList();
                    posicion = 0;
                    contadorfiltroficha = 1;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
                else
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.codigo_postal).ToList();
                    posicion = 0;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                    contadorfiltroficha = 0;
                }
            }
        }

        private void filtrarprovincia(object sender, RoutedEventArgs e)
        {
            if (posicionficha != 7) 
            {
                posicionficha = 7;
                contadorfiltroficha = 0;
            if (lista_clientes_ficha.Count > 0)
            {cargarClientes();
                lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.Provincia.ToLower()).ToList();
                posicion = 0;

                
                Clientes.SelectedItem = lista_clientes_ficha[posicion];
            }
            }
            else
            {
                if (contadorfiltroficha == 0)
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderByDescending(x => x.Provincia.ToLower()).ToList();
                    posicion = 0;
                    contadorfiltroficha = 1;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
                else
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.Provincia.ToLower()).ToList();
                    posicion = 0;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                    contadorfiltroficha = 0;
                }
            }
        }

        private void filtrarpais(object sender, RoutedEventArgs e)
        {
            if (posicionficha != 8)
            {

                posicionficha = 8;
                contadorfiltroficha = 0;
            if (lista_clientes_ficha.Count > 0)
            {cargarClientes();
                lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.Pais.ToLower()).ToList();
                posicion = 0;

                
                Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
            }
            else
            {
                if (contadorfiltroficha == 0)
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderByDescending(x => x.Pais.ToLower()).ToList();
                    posicion = 0;
                    contadorfiltroficha = 1;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
                else
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.Pais.ToLower()).ToList();
                    posicion = 0;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                    contadorfiltroficha = 0;
                }
            }
        }
        private void filtrar_telefono1_Click(object sender, RoutedEventArgs e)
        {
            if (posicionficha != 9)
            {
                posicionficha = 9;
                contadorfiltroficha = 0;
                if (lista_clientes_ficha.Count > 0)
                {
                    cargarClientes();
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.telefon1.ToLower()).ToList();
                    posicion = 0;


                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
            }
            else
            {
                if (contadorfiltroficha == 0)
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderByDescending(x => x.telefon1.ToLower()).ToList();
                    posicion = 0;
                    contadorfiltroficha = 1;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
                else
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.telefon1.ToLower()).ToList();
                    posicion = 0;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                    contadorfiltroficha = 0;
                }
            }
        }

        private void filtrar_telefono2_Click(object sender, RoutedEventArgs e)
        {
            if (posicionficha != 10)
            {
                posicionficha = 10;
                contadorfiltroficha = 0;
                if (lista_clientes_ficha.Count > 0)
                {
                    cargarClientes();
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.telefon2.ToLower()).ToList();
                    posicion = 0;


                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
            }
            else
            {
                if (contadorfiltroficha == 0)
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderByDescending(x => x.telefon2.ToLower()).ToList();
                    posicion = 0;
                    contadorfiltroficha = 1;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
                else
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.telefon2.ToLower()).ToList();
                    posicion = 0;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                    contadorfiltroficha = 0;
                }
            }
        }

        private void filtrar_mail1_Click(object sender, RoutedEventArgs e)
        {
            if (posicionficha != 11)
            {
                posicionficha = 11;
                contadorfiltroficha = 0;
                if (lista_clientes_ficha.Count > 0)
                {
                    cargarClientes();
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.mail.ToLower()).ToList();
                    posicion = 0;


                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
            }
            else
            {
                if (contadorfiltroficha == 0)
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderByDescending(x => x.mail.ToLower()).ToList();
                    posicion = 0;
                    contadorfiltroficha = 1;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
                else
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.mail.ToLower()).ToList();
                    posicion = 0;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                    contadorfiltroficha = 0;
                }
            }
        }

        private void filtrar_mail2_Click(object sender, RoutedEventArgs e)
        {
            if (posicionficha != 12)
            {
                posicionficha = 12;
                contadorfiltroficha = 0;
                if (lista_clientes_ficha.Count > 0)
                {
                    cargarClientes();
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.mail2.ToLower()).ToList();
                    posicion = 0;


                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
            }
            else
            {
                if (contadorfiltroficha == 0)
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderByDescending(x => x.mail2.ToLower()).ToList();
                    posicion = 0;
                    contadorfiltroficha = 1;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
                else
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.mail2.ToLower()).ToList();
                    posicion = 0;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                    contadorfiltroficha = 0;
                }
            }
        }

        private void filtrar_ntarjeta_Click(object sender, RoutedEventArgs e)
        {
            if (posicionficha != 13)
            {
                posicionficha = 13;
                contadorfiltroficha = 0;

                if (lista_clientes_ficha.Count > 0)
                {
                    cargarClientes();
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.n_tarjeta.ToLower()).ToList();
                    posicion = 0;


                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
            }
            else
            {
                if (contadorfiltroficha == 0)
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderByDescending(x => x.n_tarjeta.ToLower()).ToList();
                    posicion = 0;
                    contadorfiltroficha = 1;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
                else
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.n_tarjeta.ToLower()).ToList();
                    posicion = 0;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                    contadorfiltroficha = 0;
                }
            }
        }


        private void filtrar_parcela_Click(object sender, RoutedEventArgs e)
        {
            if (posicionficha != 14)
            {
                posicionficha = 14;
                contadorfiltroficha = 0;
                if (lista_clientes_ficha.Count > 0)
                {
                    cargarClientes();
                    List<Clientes> cero = new List<Clientes>();
                    cero= lista_clientes_ficha.Select(x => x).Where(x=>x.n_plaza.Equals("0")).OrderBy(x => x.n_plaza).ToList();
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).Where(x => !x.n_plaza.Equals("0")).OrderBy(x => int.Parse(x.n_plaza)).ToList();
                    lista_clientes_ficha.AddRange(cero);
                    posicion = 0;


                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
            }
            else
            {
                if (contadorfiltroficha == 0)
                {
                    List<Clientes> cero = new List<Clientes>();
                    cero = lista_clientes_ficha.Select(x => x).Where(x => x.n_plaza.Equals("0")).OrderBy(x => x.n_plaza).ToList();
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).Where(x => !x.n_plaza.Equals("0")).OrderByDescending(x => int.Parse(x.n_plaza)).ToList();

                    lista_clientes_ficha.AddRange(cero);
                    posicion = 0;
                    contadorfiltroficha = 1;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
                else
                {
                    List<Clientes> cero = new List<Clientes>();
                    cero = lista_clientes_ficha.Select(x => x).Where(x => x.n_plaza.Equals("0")).OrderBy(x => x.n_plaza).ToList();
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).Where(x => !x.n_plaza.Equals("0")).OrderBy(x => int.Parse(x.n_plaza)).ToList();

                    lista_clientes_ficha.AddRange(cero);
                    posicion = 0;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                    contadorfiltroficha = 0;
                }
            }
        }

        private void filtrar_potencia_Click(object sender, RoutedEventArgs e)
        {
            if (posicionficha != 15)
            {
                posicionficha = 15;
                contadorfiltroficha = 0;

                if (lista_clientes_ficha.Count > 0)
                {
                    cargarClientes();
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.Potencia).ToList();
                    posicion = 0;


                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
            }
            else
            {
                if (contadorfiltroficha == 0)
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderByDescending(x => x.Potencia).ToList();
                    posicion = 0;
                    contadorfiltroficha = 1;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
                else
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.Potencia).ToList();
                    posicion = 0;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                    contadorfiltroficha = 0;
                }
            }
        }

        private void filtrar_entrada_Click(object sender, RoutedEventArgs e)
        {
            if (posicionficha != 16)
            {
                posicionficha = 16;
                contadorfiltroficha = 0;
                if (lista_clientes_ficha.Count > 0)
                {
                    cargarClientes();
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.Fecha_In).ToList();
                    posicion = 0;


                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
            }
            else
            {
                if (contadorfiltroficha == 0)
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderByDescending(x => x.Fecha_In).ToList();
                    posicion = 0;
                    contadorfiltroficha = 1;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
                else
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.Fecha_In).ToList();
                    posicion = 0;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                    contadorfiltroficha = 0;
                }
            }
        }

        private void filtrar_hora1_Click(object sender, RoutedEventArgs e)
        {
            if (posicionficha != 17)
            {
                posicionficha = 17;
                contadorfiltroficha = 0;

                if (lista_clientes_ficha.Count > 0)
                {
                    cargarClientes();
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.Hora_entrada.ToLower()).ToList();
                    posicion = 0;


                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
            }
            else
            {
                if (contadorfiltroficha == 0)
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderByDescending(x => x.Hora_entrada.ToLower()).ToList();
                    posicion = 0;
                    contadorfiltroficha = 1;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
                else
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.Hora_entrada.ToLower()).ToList();
                    posicion = 0;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                    contadorfiltroficha = 0;
                }
            }
        }

        private void filtrar_periodo_Click(object sender, RoutedEventArgs e)
        {
            if (posicionficha != 18)
            {
                posicionficha = 18;
                contadorfiltroficha = 0;
                if (lista_clientes_ficha.Count > 0)
                {
                    cargarClientes();
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.fecha_entrada_estado).ToList();
                    posicion = 0;


                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
            }
            else
            {
                if (contadorfiltroficha == 0)
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderByDescending(x => x.fecha_entrada_estado).ToList();
                    posicion = 0;
                    contadorfiltroficha = 1;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
                else
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.fecha_entrada_estado).ToList();
                    posicion = 0;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                    contadorfiltroficha = 0;
                }
            }
        }

        private void filtrar_hora2_Click(object sender, RoutedEventArgs e)
        {
            if (posicionficha != 19)
            {
                posicionficha = 19;
                contadorfiltroficha = 0;
                if (lista_clientes_ficha.Count > 0)
                {
                    cargarClientes();
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.Hora_salida.ToLower()).ToList();
                    posicion = 0;


                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
            }
            else
            {
                if (contadorfiltroficha == 0)
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderByDescending(x => x.Hora_salida.ToLower()).ToList();
                    posicion = 0;
                    contadorfiltroficha = 1;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
                else
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.Hora_salida.ToLower()).ToList();
                    posicion = 0;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                    contadorfiltroficha = 0;
                }
            }
        }

        private void filtrar_salida_Click(object sender, RoutedEventArgs e)
        {
            if (posicionficha != 20)
            {
                posicionficha = 20;
                contadorfiltroficha = 0;

                if (lista_clientes_ficha.Count > 0)
                {
                    cargarClientes();
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.Fecha_Out).ToList();
                    posicion = 0;


                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
            }
            else
            {
                if (contadorfiltroficha == 0)
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderByDescending(x => x.Fecha_Out).ToList();
                    posicion = 0;
                    contadorfiltroficha = 1;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
                else
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.Fecha_Out).ToList();
                    posicion = 0;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                    contadorfiltroficha = 0;
                }
            }
        }

        private void filtrar_pago_Click(object sender, RoutedEventArgs e)
        {
            if (posicionficha != 21)
            {
                posicionficha = 21;
                contadorfiltroficha = 0;

                if (lista_clientes_ficha.Count > 0)
                {
                    cargarClientes();
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.fecha_pago).ToList();
                    posicion = 0;


                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
            }
            else
            {
                if (contadorfiltroficha == 0)
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderByDescending(x => x.fecha_pago).ToList();
                    posicion = 0;
                    contadorfiltroficha = 1;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
                else
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.fecha_pago).ToList();
                    posicion = 0;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                    contadorfiltroficha = 0;
                }
            }
        }

        private void filtrar_importe_Click(object sender, RoutedEventArgs e)
        {
            if (posicionficha != 22)
            {

                posicionficha = 22;
                contadorfiltroficha = 0;
                if (lista_clientes_ficha.Count > 0)
                {
                    cargarClientes();
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.importe.ToLower()).ToList();
                    posicion = 0;


                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
            }
            else
            {
                if (contadorfiltroficha == 0)
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderByDescending(x => x.importe.ToLower()).ToList();
                    posicion = 0;
                    contadorfiltroficha = 1;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
                else
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.importe.ToLower()).ToList();
                    posicion = 0;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                    contadorfiltroficha = 0;
                }
            }
        }

        private void filtrar_vehiculo1_Click(object sender, RoutedEventArgs e)
        {
            if (posicionficha != 23)
            {
                posicionficha = 23;
                contadorfiltroficha = 0;

                if (lista_clientes_ficha.Count > 0)
                {
                    cargarClientes();
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.Vehiculo1.ToLower()).ToList();
                    posicion = 0;


                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
            }
            else
            {
                if (contadorfiltroficha == 0)
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderByDescending(x => x.Vehiculo1.ToLower()).ToList();
                    posicion = 0;
                    contadorfiltroficha = 1;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
                else
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.Vehiculo1.ToLower()).ToList();
                    posicion = 0;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                    contadorfiltroficha = 0;
                }
            }
        }

        private void filtrar_matricula1_Click(object sender, RoutedEventArgs e)
        {
            if (posicionficha != 24)
            {
                posicionficha = 24;
                contadorfiltroficha = 0;

                if (lista_clientes_ficha.Count > 0)
                {
                    cargarClientes();
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.matricula1.ToLower()).ToList();
                    posicion = 0;


                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
            }
            else
            {
                if (contadorfiltroficha == 0)
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderByDescending(x => x.matricula1.ToLower()).ToList();
                    posicion = 0;
                    contadorfiltroficha = 1;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
                else
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.matricula1.ToLower()).ToList();
                    posicion = 0;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                    contadorfiltroficha = 0;
                }
            }
        }

        private void filtrar_vehiculo2_Click(object sender, RoutedEventArgs e)
        {
            if (posicionficha != 25)
            {
                posicionficha = 25;
                contadorfiltroficha = 0;

                if (lista_clientes_ficha.Count > 0)
                {
                    cargarClientes();
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.Vehiculo2.ToLower()).ToList();
                    posicion = 0;


                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
            }
            else
            {
                if (contadorfiltroficha == 0)
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderByDescending(x => x.Vehiculo2.ToLower()).ToList();
                    posicion = 0;
                    contadorfiltroficha = 1;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
                else
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.Vehiculo2.ToLower()).ToList();
                    posicion = 0;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                    contadorfiltroficha = 0;
                }
            }
        }

        private void filtrar_matricula2_Click(object sender, RoutedEventArgs e)
        {
            if (posicionficha != 26)
            {
                posicionficha = 26;
                contadorfiltroficha = 0;

                if (lista_clientes_ficha.Count > 0)
                {
                    cargarClientes();
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.matricula2.ToLower()).ToList();
                    posicion = 0;


                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
            }
            else
            {
                if (contadorfiltroficha == 0)
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderByDescending(x => x.matricula2.ToLower()).ToList();
                    posicion = 0;
                    contadorfiltroficha = 1;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
                else
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.matricula2.ToLower()).ToList();
                    posicion = 0;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                    contadorfiltroficha = 0;
                }
            }
        }

        private void filtrar_vehiculo3_Click(object sender, RoutedEventArgs e)
        {
            if (posicionficha != 27)
            {
                posicionficha = 27;
                contadorfiltroficha = 0;

                if (lista_clientes_ficha.Count > 0)
                {
                    cargarClientes();
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.Vehiculo3.ToLower()).ToList();
                    posicion = 0;


                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
            }
            else
            {
                if (contadorfiltroficha == 0)
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderByDescending(x => x.Vehiculo3.ToLower()).ToList();
                    posicion = 0;
                    contadorfiltroficha = 1;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
                else
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.Vehiculo3.ToLower()).ToList();
                    posicion = 0;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                    contadorfiltroficha = 0;
                }
            }
        }

        private void filtrar_matricula3_Click(object sender, RoutedEventArgs e)
        {
            if (posicionficha != 28)
            {
                posicionficha = 28;
                contadorfiltroficha = 0;

                if (lista_clientes_ficha.Count > 0)
                {
                    cargarClientes();
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.matricula3.ToLower()).ToList();
                    posicion = 0;


                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
            }
            else
            {
                if (contadorfiltroficha == 0)
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderByDescending(x => x.matricula3.ToLower()).ToList();
                    posicion = 0;
                    contadorfiltroficha = 1;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
                else
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.matricula3.ToLower()).ToList();
                    posicion = 0;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                    contadorfiltroficha = 0;
                }
            }
        }

        private void filtrar_vehiculo4_Click(object sender, RoutedEventArgs e)
        {
            if (posicionficha != 29)
            {
                posicionficha = 29;
                contadorfiltroficha = 0;
                if (lista_clientes_ficha.Count > 0)
                {
                    cargarClientes();
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.Vehiculo4.ToLower()).ToList();
                    posicion = 0;


                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
            }
            else
            {
                if (contadorfiltroficha == 0)
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderByDescending(x => x.Vehiculo4.ToLower()).ToList();
                    posicion = 0;
                    contadorfiltroficha = 1;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
                else
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.Vehiculo4.ToLower()).ToList();
                    posicion = 0;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                    contadorfiltroficha = 0;
                }
            }
        }

        private void filtrar_matricula4_Click(object sender, RoutedEventArgs e)
        {
            if (posicionficha != 30)
            {
                posicionficha = 30;
                contadorfiltroficha = 0;
                if (lista_clientes_ficha.Count > 0)
                {
                    cargarClientes();
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.matricula4.ToLower()).ToList();
                    posicion = 0;


                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
            }
            else
            {
                if (contadorfiltroficha == 0)
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderByDescending(x => x.matricula4.ToLower()).ToList();
                    posicion = 0;
                    contadorfiltroficha = 1;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
                else
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.matricula4.ToLower()).ToList();
                    posicion = 0;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                    contadorfiltroficha = 0;
                }
            }
        }

        private void filtrar_medida1_Click(object sender, RoutedEventArgs e)
        {
            if (posicionficha != 31)
            {
                posicionficha = 31;
                contadorfiltroficha = 0;
                if (lista_clientes_ficha.Count > 0)
                {
                    cargarClientes();
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.Medidas_Vehiculo1.ToLower()).ToList();
                    posicion = 0;


                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
            }
            else
            {
                if (contadorfiltroficha == 0)
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderByDescending(x => x.Medidas_Vehiculo1.ToLower()).ToList();
                    posicion = 0;
                    contadorfiltroficha = 1;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
                else
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.Medidas_Vehiculo1.ToLower()).ToList();
                    posicion = 0;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                    contadorfiltroficha = 0;
                }
            }
        }

        private void filtrar_mediada2_Click(object sender, RoutedEventArgs e)
        {
            if (posicionficha != 32)
            {
                posicionficha = 32;
                contadorfiltroficha = 0;
                if (lista_clientes_ficha.Count > 0)
                {
                    cargarClientes();
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.Medidas_Vehiculo2.ToLower()).ToList();
                    posicion = 0;


                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
            }
            else
            {
                if (contadorfiltroficha == 0)
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderByDescending(x => x.Medidas_Vehiculo2.ToLower()).ToList();
                    posicion = 0;
                    contadorfiltroficha = 1;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
                else
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.Medidas_Vehiculo2.ToLower()).ToList();
                    posicion = 0;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                    contadorfiltroficha = 0;
                }
            }
        }

        private void filtrar_bastidor_Click(object sender, RoutedEventArgs e)
        {
            if (posicionficha != 33)
            {
                posicionficha = 33;
                contadorfiltroficha = 0;

                if (lista_clientes_ficha.Count > 0)
                {
                    cargarClientes();
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.Numero_Bastidor3.ToLower()).ToList();
                    posicion = 0;


                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
            }
            else
            {
                if (contadorfiltroficha == 0)
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderByDescending(x => x.Numero_Bastidor3.ToLower()).ToList();
                    posicion = 0;
                    contadorfiltroficha = 1;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
                else
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.Numero_Bastidor3.ToLower()).ToList();
                    posicion = 0;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                    contadorfiltroficha = 0;
                }
            }
        }

        private void filtrar_medida3_Click(object sender, RoutedEventArgs e)
        {
            if (posicionficha != 34)
            {
                posicionficha = 34;
                contadorfiltroficha = 0;
                if (lista_clientes_ficha.Count > 0)
                {
                    cargarClientes();
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.Medidas_Vehiculo3.ToLower()).ToList();
                    posicion = 0;


                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
            }
            else
            {
                if (contadorfiltroficha == 0)
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderByDescending(x => x.Medidas_Vehiculo3.ToLower()).ToList();
                    posicion = 0;
                    contadorfiltroficha = 1;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
                else
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.Medidas_Vehiculo3.ToLower()).ToList();
                    posicion = 0;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                    contadorfiltroficha = 0;
                }
            }
        }

        private void filtrar_medida4_Click(object sender, RoutedEventArgs e)
        {
            if (posicionficha != 35)
            {
                posicionficha = 35;
                contadorfiltroficha = 0;
                if (lista_clientes_ficha.Count > 0)
                {
                    cargarClientes();
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.Medidas_Vehiculo4.ToLower()).ToList();
                    posicion = 0;


                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
            }
            else
            {
                if (contadorfiltroficha == 0)
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderByDescending(x => x.Medidas_Vehiculo4.ToLower()).ToList();
                    posicion = 0;
                    contadorfiltroficha = 1;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
                else
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.Medidas_Vehiculo4.ToLower()).ToList();
                    posicion = 0;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                    contadorfiltroficha = 0;
                }
            }
        }

        private void filtrar_bastidor1_Click(object sender, RoutedEventArgs e)
        {
            if (posicionficha != 36)
            {
                posicionficha = 36;
                contadorfiltroficha = 0;
                if (lista_clientes_ficha.Count > 0)
                {
                    cargarClientes();
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.Numero_Bastidor1.ToLower()).ToList();
                    posicion = 0;


                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
            }
            else
            {
                if (contadorfiltroficha == 0)
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderByDescending(x => x.Numero_Bastidor1.ToLower()).ToList();
                    posicion = 0;
                    contadorfiltroficha = 1;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
                else
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.Numero_Bastidor1.ToLower()).ToList();
                    posicion = 0;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                    contadorfiltroficha = 0;
                }
            }
        }

        private void filtrar_bastidor2_Click(object sender, RoutedEventArgs e)
        {
            if (posicionficha != 37)
            {

                posicionficha = 37;
                contadorfiltroficha = 0;
                if (lista_clientes_ficha.Count > 0)
                {
                    cargarClientes();
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.Numero_Bastidor2.ToLower()).ToList();
                    posicion = 0;


                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
            }
            else
            {
                if (contadorfiltroficha == 0)
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderByDescending(x => x.Numero_Bastidor2.ToLower()).ToList();
                    posicion = 0;
                    contadorfiltroficha = 1;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
                else
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.Numero_Bastidor2.ToLower()).ToList();
                    posicion = 0;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                    contadorfiltroficha = 0;
                }
            }
        }

        private void filtrar_bastidor4_Click(object sender, RoutedEventArgs e)
        {
            if (posicionficha != 38)
            {
                posicionficha = 38;
                contadorfiltroficha = 0;
                if (lista_clientes_ficha.Count > 0)
                {
                    cargarClientes();
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.Numero_Bastidor4.ToLower()).ToList();
                    posicion = 0;


                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
            }
            else
            {
                if (contadorfiltroficha == 0)
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderByDescending(x => x.Numero_Bastidor4.ToLower()).ToList();
                    posicion = 0;
                    contadorfiltroficha = 1;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                }
                else
                {
                    lista_clientes_ficha = lista_clientes_ficha.Select(x => x).OrderBy(x => x.Numero_Bastidor4.ToLower()).ToList();
                    posicion = 0;
                    Clientes.SelectedItem = lista_clientes_ficha[posicion];
                    contadorfiltroficha = 0;
                }
            }
        }

        private void FiltarUsuarios1(object sender, RoutedEventArgs e)
        {
            
            if (columna3 != 0)
            {
                columna3 = 0;
                cont3 = 1;
                List<Usuarios> lc = new List<Usuarios>();
                List<Usuarios> lc2 = new List<Usuarios>();

                lc= Usuarios.Items.Cast<Usuarios>().Select(x => x).OrderBy(x => x.Nombre_Usuario.ToLower()).ToList();
                Usuarios.ItemsSource = null;
                Usuarios.ItemsSource = lc;

            }
            else
            {
                if (cont3 == 1)
                {
                    cont3++;
                    List<Usuarios> lc = new List<Usuarios>();
                    List<Usuarios> lc2 = new List<Usuarios>();

                    lc = Usuarios.Items.Cast<Usuarios>().Select(x => x).OrderByDescending(x => x.Nombre.ToLower()).ToList();

                    Usuarios.ItemsSource = null;
                    Usuarios.ItemsSource = lc;

                }
                else if (cont3 == 2)
                {
                    cont3++;
                    CargarUsuarios();
                }
                else
                {
                   
                    cont3 = 1;
                    List<Usuarios> lc = new List<Usuarios>();
                    List<Usuarios> lc2 = new List<Usuarios>();

                    lc = Usuarios.Items.Cast<Usuarios>().Select(x => x).OrderBy(x => x.Nombre.ToLower()).ToList();
                    Usuarios.ItemsSource = null;
                    Usuarios.ItemsSource = lc;

                }
            }
        }

        private void FiltrarUsuarios2(object sender, RoutedEventArgs e)
        {
            if (columna3 != 1)
            {
                columna3 = 1;
                cont3 = 1;
                List<Usuarios> lc = new List<Usuarios>();
                List<Usuarios> lc2 = new List<Usuarios>();

                lc = Usuarios.Items.Cast<Usuarios>().Select(x => x).OrderBy(x => x.Dni_Trabajador.ToLower()).ToList();
                Usuarios.ItemsSource = null;
                Usuarios.ItemsSource = lc;

            }
            else
            {
                if (cont3 == 1)
                {
                    cont3++;
                    List<Usuarios> lc = new List<Usuarios>();
                    List<Usuarios> lc2 = new List<Usuarios>();

                    lc = Usuarios.Items.Cast<Usuarios>().Select(x => x).OrderByDescending(x => x.Dni_Trabajador.ToLower()).ToList();
                    Usuarios.ItemsSource = null;
                    Usuarios.ItemsSource = lc;

                }
                else if (cont3 == 2)
                {
                    cont3++;
                    CargarUsuarios();
                }
                else
                {

                    cont3 = 1;
                    List<Usuarios> lc = new List<Usuarios>();
                    List<Usuarios> lc2 = new List<Usuarios>();

                    lc = Usuarios.Items.Cast<Usuarios>().Select(x => x).OrderBy(x => x.Dni_Trabajador.ToLower()).ToList();
                    Usuarios.ItemsSource = null;
                    Usuarios.ItemsSource = lc;

                }
            }
        }
        private void FiltarUsuarios3(object sender, RoutedEventArgs e)
        {
            if (columna3 != 2)
            {
                columna3 = 2;
                cont3 = 1;
                List<Usuarios> lc = new List<Usuarios>();
                List<Usuarios> lc2 = new List<Usuarios>();

                lc = Usuarios.Items.Cast<Usuarios>().Select(x => x).OrderBy(x => x.nombreCompleto.ToLower()).ToList();
                Usuarios.ItemsSource = null;
                Usuarios.ItemsSource = lc;

            }
            else
            {
                if (cont3 == 1)
                {
                    cont3++;
                    List<Usuarios> lc = new List<Usuarios>();
                    List<Usuarios> lc2 = new List<Usuarios>();

                    lc = Usuarios.Items.Cast<Usuarios>().Select(x => x).OrderByDescending(x => x.nombreCompleto.ToLower()).ToList();
                    Usuarios.ItemsSource = null;
                    Usuarios.ItemsSource = lc;

                }
                else if (cont3 == 2)
                {
                    cont3++;
                    CargarUsuarios();
                }
                else
                {

                    cont3 = 1;
                    List<Usuarios> lc = new List<Usuarios>();
                    List<Usuarios> lc2 = new List<Usuarios>();

                    lc = Usuarios.Items.Cast<Usuarios>().Select(x => x).OrderBy(x => x.nombreCompleto.ToLower()).ToList();
                    Usuarios.ItemsSource = null;
                    Usuarios.ItemsSource = lc;

                }
            }
        }

        private void FiltrarUsuarios4(object sender, RoutedEventArgs e)
        {
            if (columna3 != 3)
            {
                columna3 = 3;
                cont3 = 1;
                List<Usuarios> lc = new List<Usuarios>();
                List<Usuarios> lc2 = new List<Usuarios>();

                lc = Usuarios.Items.Cast<Usuarios>().Select(x => x).OrderBy(x => x.Nombre_Rol.ToLower()).ToList();
                Usuarios.ItemsSource = null;
                Usuarios.ItemsSource = lc;

            }
            else
            {
                if (cont3 == 1)
                {
                    cont3++;
                    List<Usuarios> lc = new List<Usuarios>();
                    List<Usuarios> lc2 = new List<Usuarios>();

                    lc = Usuarios.Items.Cast<Usuarios>().Select(x => x).OrderByDescending(x => x.Nombre_Rol.ToLower()).ToList();
                    Usuarios.ItemsSource = null;
                    Usuarios.ItemsSource = lc;

                }
                else if (cont3 == 2)
                {
                    cont3++;
                    CargarUsuarios();
                }
                else
                {

                    cont3 = 1;
                    List<Usuarios> lc = new List<Usuarios>();
                    List<Usuarios> lc2 = new List<Usuarios>();

                    lc = Usuarios.Items.Cast<Usuarios>().Select(x => x).OrderBy(x => x.Nombre_Rol.ToLower()).ToList();
                    Usuarios.ItemsSource = null;
                    Usuarios.ItemsSource = lc;

                }
            }
        }
        private void FiltrarUsuarios5(object sender, RoutedEventArgs e)
        {
            if (columna3 != 4)
            {
                columna3 = 4;
                cont3 = 1;
                List<Usuarios> lc = new List<Usuarios>();
                List<Usuarios> lc2 = new List<Usuarios>();

                lc = Usuarios.Items.Cast<Usuarios>().Select(x => x).OrderBy(x => x.Telefono.ToLower()).ToList();
                Usuarios.ItemsSource = null;
                Usuarios.ItemsSource = lc;

            }
            else
            {
                if (cont3 == 1)
                {
                    cont3++;
                    List<Usuarios> lc = new List<Usuarios>();
                    List<Usuarios> lc2 = new List<Usuarios>();

                    lc = Usuarios.Items.Cast<Usuarios>().Select(x => x).OrderByDescending(x => x.Telefono.ToLower()).ToList();
                    Usuarios.ItemsSource = null;
                    Usuarios.ItemsSource = lc;

                }
                else if (cont3 == 2)
                {
                    cont3++;
                    CargarUsuarios();
                }
                else
                {

                    cont3 = 1;
                    List<Usuarios> lc = new List<Usuarios>();
                    List<Usuarios> lc2 = new List<Usuarios>();

                    lc = Usuarios.Items.Cast<Usuarios>().Select(x => x).OrderBy(x => x.Telefono.ToLower()).ToList();
                    Usuarios.ItemsSource = null;
                    Usuarios.ItemsSource = lc;

                }
            }
        }

        private void FiltrarRol1(object sender, RoutedEventArgs e)
        {
            if (columna4 != 0)
            {
                columna4 = 0;
                cont4 = 1;
                List<Roles> lc = new List<Roles>();
                List<Roles> lc2 = new List<Roles>();

                lc = Roles.Items.Cast<Roles>().Select(x => x).OrderBy(x => x.Id).ToList();
                Roles.ItemsSource = null;
                Roles.ItemsSource = lc;
            }
            else
            {
                if (cont4 == 1)
                {
                    cont4++;
                    List<Roles> lc = new List<Roles>();
                    List<Roles> lc2 = new List<Roles>();

                    lc = Roles.Items.Cast<Roles>().Select(x => x).OrderByDescending(x => x.Id).ToList();
                    Roles.ItemsSource = null;
                    Roles.ItemsSource = lc;
                }
                else if (cont4 == 2)
                {
                    cont4++;
                    CargarRoles();
                }
                else
                {

                    cont4 = 1;
                    List<Roles> lc = new List<Roles>();
                    List<Roles> lc2 = new List<Roles>();

                    lc = Roles.Items.Cast<Roles>().Select(x => x).OrderBy(x => x.Id).ToList();
                    Roles.ItemsSource = null;
                    Roles.ItemsSource = lc;
                }
            }
        }
        private void FiltrarRol2(object sender, RoutedEventArgs e)
        {
            if (columna4 != 1)
            {
                columna4 = 1;
                cont4 = 1;
                List<Roles> lc = new List<Roles>();
                List<Roles> lc2 = new List<Roles>();

                lc = Roles.Items.Cast<Roles>().Select(x => x).OrderBy(x => x.Nom.ToLower()).ToList();
                Roles.ItemsSource = null;
                Roles.ItemsSource = lc;
            }
            else
            {
                if (cont4 == 1)
                {
                    cont4++;
                    List<Roles> lc = new List<Roles>();
                    List<Roles> lc2 = new List<Roles>();

                    lc = Roles.Items.Cast<Roles>().Select(x => x).OrderByDescending(x => x.Nom.ToLower()).ToList();
                    Roles.ItemsSource = null;
                    Roles.ItemsSource = lc;
                }
                else if (cont4 == 2)
                {
                    cont4++;
                    CargarRoles();
                }
                else
                {

                    cont4 = 1;
                    List<Roles> lc = new List<Roles>();
                    List<Roles> lc2 = new List<Roles>();

                    lc = Roles.Items.Cast<Roles>().Select(x => x).OrderBy(x => x.Nom.ToLower()).ToList();
                    Roles.ItemsSource = null;
                    Roles.ItemsSource = lc;
                }
            }
        }
        private void FiltrarRol3(object sender, RoutedEventArgs e)
        {
            if (columna4 != 2)
            {
                columna4 = 2;
                cont4 = 1;
                List<Roles> lc = new List<Roles>();
                List<Roles> lc2 = new List<Roles>();

                lc = Roles.Items.Cast<Roles>().Select(x => x).OrderBy(x => x.Permisos_bin.ToLower()).ToList();
                Roles.ItemsSource = null;
                Roles.ItemsSource = lc;
            }
            else
            {
                if (cont4 == 1)
                {
                    cont4++;
                    List<Roles> lc = new List<Roles>();
                    List<Roles> lc2 = new List<Roles>();

                    lc = Roles.Items.Cast<Roles>().Select(x => x).OrderByDescending(x => x.Permisos_bin.ToLower()).ToList();
                    Roles.ItemsSource = null;
                    Roles.ItemsSource = lc;
                }
                else if (cont4 == 2)
                {
                    cont4++;
                    CargarRoles();
                }
                else
                {

                    cont4 = 1;
                    List<Roles> lc = new List<Roles>();
                    List<Roles> lc2 = new List<Roles>();

                    lc = Roles.Items.Cast<Roles>().Select(x => x).OrderBy(x => x.Permisos_bin.ToLower()).ToList();
                    Roles.ItemsSource = null;
                    Roles.ItemsSource = lc;

                }
            }
        }

        private void FiltrarFactura1(object sender, RoutedEventArgs e)
        {
            if (columna5 != 0)
            {
                columna5 = 0;
                cont5 = 1;
                List<Facturas> lc = new List<Facturas>();
                List<Facturas> lc2 = new List<Facturas>();

                lc = Facturas.Items.Cast<Facturas>().Select(x => x).OrderBy(x => x.Numero_Factura.ToLower()).ToList();

                Facturas.ItemsSource = null;
                Facturas.ItemsSource = lc;

                
            }
            else
            {
                if (cont5 == 1)
                {
                    cont5++;
                    List<Facturas> lc = new List<Facturas>();
                    List<Facturas> lc2 = new List<Facturas>();

                    lc = Facturas.Items.Cast<Facturas>().Select(x => x).OrderByDescending(x => x.Numero_Factura.ToLower()).ToList();

                    Facturas.ItemsSource = null;
                    Facturas.ItemsSource = lc;
                }
                else if (cont5 == 2)
                {
                    cont5++;
                    CargarFacturas();
                }
                else
                {

                    cont5 = 1;
                    List<Facturas> lc = new List<Facturas>();
                    List<Facturas> lc2 = new List<Facturas>();

                    lc = Facturas.Items.Cast<Facturas>().Select(x => x).OrderBy(x => x.Numero_Factura.ToLower()).ToList();


                    Facturas.ItemsSource = null;
                    Facturas.ItemsSource = lc;
                }
            }
        }

        private void FiltrarFactura2(object sender, RoutedEventArgs e)
        {
            if (columna5 != 1)
            {
                columna5 = 1;
                cont5 = 1;
                List<Facturas> lc = new List<Facturas>();
                List<Facturas> lc2 = new List<Facturas>();

                lc = Facturas.Items.Cast<Facturas>().Select(x => x).OrderBy(x => x.Nombre_Cliente.ToLower()).ToList();


                Facturas.ItemsSource = null;
                Facturas.ItemsSource = lc;
            }
            else
            {
                if (cont5 == 1)
                {
                    cont5++;
                    List<Facturas> lc = new List<Facturas>();
                    List<Facturas> lc2 = new List<Facturas>();

                    lc = Facturas.Items.Cast<Facturas>().Select(x => x).OrderByDescending(x => x.Nombre_Cliente.ToLower()).ToList();


                    Facturas.ItemsSource = null;
                    Facturas.ItemsSource = lc;
                }
                else if (cont5 == 2)
                {
                    cont5++;
                    CargarFacturas();
                }
                else
                {

                    cont5 = 1;
                    List<Facturas> lc = new List<Facturas>();
                    List<Facturas> lc2 = new List<Facturas>();

                    lc = Facturas.Items.Cast<Facturas>().Select(x => x).OrderBy(x => x.Nombre_Cliente.ToLower()).ToList();


                    Facturas.ItemsSource = null;
                    Facturas.ItemsSource = lc;
                }
            }
        }

        private void FiltrarFactura3(object sender, RoutedEventArgs e)
        {
            if (columna5 != 2)
            {
                columna5 = 2;
                cont5 = 1;
                List<Facturas> lc = new List<Facturas>();
                List<Facturas> lc2 = new List<Facturas>();

                lc = Facturas.Items.Cast<Facturas>().Select(x => x).OrderBy(x => x.DNI_CIF.ToLower()).ToList();


                Facturas.ItemsSource = null;
                Facturas.ItemsSource = lc;
            }
            else
            {
                if (cont5 == 1)
                {
                    cont5++;
                    List<Facturas> lc = new List<Facturas>();
                    List<Facturas> lc2 = new List<Facturas>();

                    lc = Facturas.Items.Cast<Facturas>().Select(x => x).OrderByDescending(x => x.DNI_CIF.ToLower()).ToList();


                    Facturas.ItemsSource = null;
                    Facturas.ItemsSource = lc;
                }
                else if (cont5 == 2)
                {
                    cont5++;
                    CargarFacturas();
                }
                else
                {

                    cont5 = 1;
                    List<Facturas> lc = new List<Facturas>();
                    List<Facturas> lc2 = new List<Facturas>();

                    lc = Facturas.Items.Cast<Facturas>().Select(x => x).OrderBy(x => x.DNI_CIF.ToLower()).ToList();


                    Facturas.ItemsSource = null;
                    Facturas.ItemsSource = lc;
                }
            }
        }

        private void FiltrarFactura4(object sender, RoutedEventArgs e)
        {
            if (columna5 != 3)
            {
                columna5 = 3;
                cont5 = 1;
                List<Facturas> lc = new List<Facturas>();
                List<Facturas> lc2 = new List<Facturas>();

                lc = Facturas.Items.Cast<Facturas>().Select(x => x).OrderBy(x => x.Direccion_Cliente.ToLower()).ToList();


                Facturas.ItemsSource = null;
                Facturas.ItemsSource = lc;
            }
            else
            {
                if (cont5 == 1)
                {
                    cont5++;
                    List<Facturas> lc = new List<Facturas>();
                    List<Facturas> lc2 = new List<Facturas>();

                    lc = Facturas.Items.Cast<Facturas>().Select(x => x).OrderByDescending(x => x.Direccion_Cliente.ToLower()).ToList();


                    Facturas.ItemsSource = null;
                    Facturas.ItemsSource = lc;
                }
                else if (cont5 == 2)
                {
                    cont5++;
                    CargarFacturas();
                }
                else
                {

                    cont5 = 1;
                    List<Facturas> lc = new List<Facturas>();
                    List<Facturas> lc2 = new List<Facturas>();

                    lc = Facturas.Items.Cast<Facturas>().Select(x => x).OrderBy(x => x.Direccion_Cliente.ToLower()).ToList();


                    Facturas.ItemsSource = null;
                    Facturas.ItemsSource = lc;
                }
            }
        }

        private void FiltrarFactura5(object sender, RoutedEventArgs e)
        {
            if (columna5 != 4)
            {
                columna5 = 4;
                cont5 = 1;
                List<Facturas> lc = new List<Facturas>();
                List<Facturas> lc2 = new List<Facturas>();

                lc = Facturas.Items.Cast<Facturas>().Select(x => x).OrderBy(x => x.Poblacio_Cliente.ToLower()).ToList();


                Facturas.ItemsSource = null;
                Facturas.ItemsSource = lc;
            }
            else
            {
                if (cont5 == 1)
                {
                    cont5++;
                    List<Facturas> lc = new List<Facturas>();
                    List<Facturas> lc2 = new List<Facturas>();

                    lc = Facturas.Items.Cast<Facturas>().Select(x => x).OrderByDescending(x => x.Poblacio_Cliente.ToLower()).ToList();


                    Facturas.ItemsSource = null;
                    Facturas.ItemsSource = lc;
                }
                else if (cont5 == 2)
                {
                    cont5++;
                    CargarFacturas();
                }
                else
                {

                    cont5 = 1;
                    List<Facturas> lc = new List<Facturas>();
                    List<Facturas> lc2 = new List<Facturas>();

                    lc = Facturas.Items.Cast<Facturas>().Select(x => x).OrderBy(x => x.Poblacio_Cliente.ToLower()).ToList();


                    Facturas.ItemsSource = null;
                    Facturas.ItemsSource = lc;
                }
            }
        }
        private void FiltrarFactura6(object sender, RoutedEventArgs e)
        {
            if (columna5 != 5)
            {
                columna5 = 5;
                cont5 = 1;
                List<Facturas> lc = new List<Facturas>();
                List<Facturas> lc2 = new List<Facturas>();

                lc = Facturas.Items.Cast<Facturas>().Select(x => x).OrderBy(x => x.CP_Cliente.ToLower()).ToList();


                Facturas.ItemsSource = null;
                Facturas.ItemsSource = lc;
            }
            else
            {
                if (cont5 == 1)
                {
                    cont5++;
                    List<Facturas> lc = new List<Facturas>();
                    List<Facturas> lc2 = new List<Facturas>();

                    lc = Facturas.Items.Cast<Facturas>().Select(x => x).OrderByDescending(x => x.Provincia_Cliente.ToLower()).ToList();


                    Facturas.ItemsSource = null;
                    Facturas.ItemsSource = lc;
                }
                else if (cont5 == 2)
                {
                    cont5++;
                    CargarFacturas();
                }
                else
                {

                    cont5 = 1;
                    List<Facturas> lc = new List<Facturas>();
                    List<Facturas> lc2 = new List<Facturas>();

                    lc = Facturas.Items.Cast<Facturas>().Select(x => x).OrderBy(x => x.Provincia_Cliente.ToLower()).ToList();


                    Facturas.ItemsSource = null;
                    Facturas.ItemsSource = lc;
                }
            }
        }

        private void FiltrarFactura7(object sender, RoutedEventArgs e)
        {
            if (columna5 != 6)
            {
                columna5 = 6;
                cont5 = 1;
                List<Facturas> lc = new List<Facturas>();
                List<Facturas> lc2 = new List<Facturas>();

                lc = Facturas.Items.Cast<Facturas>().Select(x => x).OrderBy(x => x.Provincia_Cliente.ToLower()).ToList();


                Facturas.ItemsSource = null;
                Facturas.ItemsSource = lc;
            }
            else
            {
                if (cont5 == 1)
                {
                    cont5++;
                    List<Facturas> lc = new List<Facturas>();
                    List<Facturas> lc2 = new List<Facturas>();

                    lc = Facturas.Items.Cast<Facturas>().Select(x => x).OrderByDescending(x => x.Provincia_Cliente.ToLower()).ToList();


                    Facturas.ItemsSource = null;
                    Facturas.ItemsSource = lc;
                }
                else if (cont5 == 2)
                {
                    cont5++;
                    CargarFacturas();
                }
                else
                {

                    cont5 = 1;
                    List<Facturas> lc = new List<Facturas>();
                    List<Facturas> lc2 = new List<Facturas>();

                    lc = Facturas.Items.Cast<Facturas>().Select(x => x).OrderBy(x => x.Provincia_Cliente.ToLower()).ToList();


                    Facturas.ItemsSource = null;
                    Facturas.ItemsSource = lc;
                }
            }
        }

        private void FiltrarFactura8(object sender, RoutedEventArgs e)
        {
            if (columna5 != 7)
            {
                columna5 = 7;
                cont5 = 1;
                List<Facturas> lc = new List<Facturas>();
                List<Facturas> lc2 = new List<Facturas>();

                lc = Facturas.Items.Cast<Facturas>().Select(x => x).OrderBy(x => x.Importe.ToString("0.00").ToLower()).ToList();


                Facturas.ItemsSource = null;
                Facturas.ItemsSource = lc;
            }
            else
            {
                if (cont5 == 1)
                {
                    cont5++;
                    List<Facturas> lc = new List<Facturas>();
                    List<Facturas> lc2 = new List<Facturas>();

                    lc = Facturas.Items.Cast<Facturas>().Select(x => x).OrderByDescending(x => x.Importe.ToString("0.00").ToLower()).ToList();


                    Facturas.ItemsSource = null;
                    Facturas.ItemsSource = lc;
                }
                else if (cont5 == 2)
                {
                    cont5++;
                    CargarFacturas();
                }
                else
                {

                    cont5 = 1;
                    List<Facturas> lc = new List<Facturas>();
                    List<Facturas> lc2 = new List<Facturas>();

                    lc = Facturas.Items.Cast<Facturas>().Select(x => x).OrderBy(x => x.Importe.ToString("0.00").ToLower()).ToList();


                    Facturas.ItemsSource = null;
                    Facturas.ItemsSource = lc;
                }
            }
        }

        private void FiltrarFactura9(object sender, RoutedEventArgs e)
        {
            if (columna5 != 8)
            {
                columna5 = 8;
                cont5 = 1;
                List<Facturas> lc = new List<Facturas>();
                List<Facturas> lc2 = new List<Facturas>();

                lc = Facturas.Items.Cast<Facturas>().Select(x => x).OrderBy(x => x.fecha).ToList();


                Facturas.ItemsSource = null;
                Facturas.ItemsSource = lc;
            }
            else
            {
                if (cont5 == 1)
                {
                    cont5++;
                    List<Facturas> lc = new List<Facturas>();
                    List<Facturas> lc2 = new List<Facturas>();

                    lc = Facturas.Items.Cast<Facturas>().Select(x => x).OrderByDescending(x => x.fecha).ToList();


                    Facturas.ItemsSource = null;
                    Facturas.ItemsSource = lc;
                }
                else if (cont5 == 2)
                {
                    cont5++;
                    CargarFacturas();
                }
                else
                {

                    cont5 = 1;
                    List<Facturas> lc = new List<Facturas>();
                    List<Facturas> lc2 = new List<Facturas>();

                    lc = Facturas.Items.Cast<Facturas>().Select(x => x).OrderBy(x => x.fecha).ToList();


                    Facturas.ItemsSource = null;
                    Facturas.ItemsSource = lc;
                }
            }
        }


        private void FiltrarRecibo1(object sender, RoutedEventArgs e)
        {
            if (columna7 != 0)
            {
                columna7 = 0;
                cont7 = 1;
                List<Recibos> lc = new List<Recibos>();
                List<Recibos> lc2 = new List<Recibos>();

                lc = Recibos.Items.Cast<Recibos>().Select(x => x).OrderBy(x => x.Id).ToList();


                Recibos.ItemsSource = null;
                Recibos.ItemsSource = lc;
            }
            else
            {
                if (cont7 == 1)
                {
                    cont7++;
                    List<Recibos> lc = new List<Recibos>();
                    List<Recibos> lc2 = new List<Recibos>();

                    lc = Recibos.Items.Cast<Recibos>().Select(x => x).OrderByDescending(x => x.Id).ToList();


                    Recibos.ItemsSource = null;
                    Recibos.ItemsSource = lc;
                }
                else if (cont7 == 2)
                {
                    cont7++;
                    CargarRecibos();
                }
                else
                {

                    cont7 = 1;
                    List<Recibos> lc = new List<Recibos>();
                    List<Recibos> lc2 = new List<Recibos>();

                    lc = Recibos.Items.Cast<Recibos>().Select(x => x).OrderBy(x => x.Id).ToList();


                    Recibos.ItemsSource = null;
                    Recibos.ItemsSource = lc;
                }
            }
        }

        private void FiltrarRecibo2(object sender, RoutedEventArgs e)
        {
            if (columna7 != 1)
            {
                columna7 = 1;
                cont7 = 1;
                List<Recibos> lc = new List<Recibos>();
                List<Recibos> lc2 = new List<Recibos>();

                lc = Recibos.Items.Cast<Recibos>().Select(x => x).OrderBy(x => x.Nombre_Cliente.ToLower()).ToList();


                Recibos.ItemsSource = null;
                Recibos.ItemsSource = lc;
            }
            else
            {
                if (cont7 == 1)
                {
                    cont7++;
                    List<Recibos> lc = new List<Recibos>();
                    List<Recibos> lc2 = new List<Recibos>();

                    lc = Recibos.Items.Cast<Recibos>().Select(x => x).OrderByDescending(x => x.Nombre_Cliente.ToLower()).ToList();


                    Recibos.ItemsSource = null;
                    Recibos.ItemsSource = lc;
                }
                else if (cont7 == 2)
                {
                    cont7++;
                    CargarRecibos();
                }
                else
                {

                    cont7 = 1;
                    List<Recibos> lc = new List<Recibos>();
                    List<Recibos> lc2 = new List<Recibos>();

                    lc = Recibos.Items.Cast<Recibos>().Select(x => x).OrderBy(x => x.Nombre_Cliente.ToLower()).ToList();


                    Recibos.ItemsSource = null;
                    Recibos.ItemsSource = lc;
                }
            }
        }

        private void FiltrarRecibo3(object sender, RoutedEventArgs e)
        {
            if (columna7 != 2)
            {
                columna7 = 2;
                cont7 = 1;
                List<Recibos> lc = new List<Recibos>();
                List<Recibos> lc2 = new List<Recibos>();

                lc = Recibos.Items.Cast<Recibos>().Select(x => x).OrderBy(x => x.DNI_CIF.ToLower()).ToList();


                Recibos.ItemsSource = null;
                Recibos.ItemsSource = lc;
            }
            else
            {
                if (cont7 == 1)
                {
                    cont7++;
                    List<Recibos> lc = new List<Recibos>();
                    List<Recibos> lc2 = new List<Recibos>();

                    lc = Recibos.Items.Cast<Recibos>().Select(x => x).OrderByDescending(x => x.DNI_CIF.ToLower()).ToList();


                    Recibos.ItemsSource = null;
                    Recibos.ItemsSource = lc;
                }
                else if (cont7 == 2)
                {
                    cont7++;
                    CargarRecibos();
                }
                else
                {

                    cont7 = 1;
                    List<Recibos> lc = new List<Recibos>();
                    List<Recibos> lc2 = new List<Recibos>();

                    lc = Recibos.Items.Cast<Recibos>().Select(x => x).OrderBy(x => x.DNI_CIF.ToLower()).ToList();


                    Recibos.ItemsSource = null;
                    Recibos.ItemsSource = lc;
                }
            }
        }

        private void FiltrarRecibo4(object sender, RoutedEventArgs e)
        {
            if (columna7 != 3)
            {
                columna7 = 3;
                cont7 = 1;
                List<Recibos> lc = new List<Recibos>();
                List<Recibos> lc2 = new List<Recibos>();

                lc = Recibos.Items.Cast<Recibos>().Select(x => x).OrderBy(x => x.Direccion_Cliente.ToLower()).ToList();


                Recibos.ItemsSource = null;
                Recibos.ItemsSource = lc;
            }
            else
            {
                if (cont7 == 1)
                {
                    cont7++;
                    List<Recibos> lc = new List<Recibos>();
                    List<Recibos> lc2 = new List<Recibos>();

                    lc = Recibos.Items.Cast<Recibos>().Select(x => x).OrderByDescending(x => x.Direccion_Cliente.ToLower()).ToList();


                    Recibos.ItemsSource = null;
                    Recibos.ItemsSource = lc;
                }
                else if (cont7 == 2)
                {
                    cont7++;
                    CargarRecibos();
                }
                else
                {

                    cont7 = 1;
                    List<Recibos> lc = new List<Recibos>();
                    List<Recibos> lc2 = new List<Recibos>();

                    lc = Recibos.Items.Cast<Recibos>().Select(x => x).OrderBy(x => x.Direccion_Cliente.ToLower()).ToList();


                    Recibos.ItemsSource = null;
                    Recibos.ItemsSource = lc;
                }
            }
        }

        private void FiltrarRecibo5(object sender, RoutedEventArgs e)
        {
            if (columna7 != 4)
            {
                columna7 = 4;
                cont7 = 1;
                List<Recibos> lc = new List<Recibos>();
                List<Recibos> lc2 = new List<Recibos>();

                lc = Recibos.Items.Cast<Recibos>().Select(x => x).OrderBy(x => x.Poblacio_Cliente.ToLower()).ToList();


                Recibos.ItemsSource = null;
                Recibos.ItemsSource = lc;
            }
            else
            {
                if (cont7 == 1)
                {
                    cont7++;
                    List<Recibos> lc = new List<Recibos>();
                    List<Recibos> lc2 = new List<Recibos>();

                    lc = Recibos.Items.Cast<Recibos>().Select(x => x).OrderByDescending(x => x.Poblacio_Cliente.ToLower()).ToList();


                    Recibos.ItemsSource = null;
                    Recibos.ItemsSource = lc;
                }
                else if (cont7 == 2)
                {
                    cont7++;
                    CargarRecibos();
                }
                else
                {

                    cont7 = 1;
                    List<Recibos> lc = new List<Recibos>();
                    List<Recibos> lc2 = new List<Recibos>();

                    lc = Recibos.Items.Cast<Recibos>().Select(x => x).OrderBy(x => x.Poblacio_Cliente.ToLower()).ToList();


                    Recibos.ItemsSource = null;
                    Recibos.ItemsSource = lc;
                }
            }
        }

        private void FiltrarRecibo6(object sender, RoutedEventArgs e)
        {
            if (columna7 != 5)
            {
                columna7 = 5;
                cont7 = 1;
                List<Recibos> lc = new List<Recibos>();
                List<Recibos> lc2 = new List<Recibos>();

                lc = Recibos.Items.Cast<Recibos>().Select(x => x).OrderBy(x => x.CP_Cliente.ToLower()).ToList();


                Recibos.ItemsSource = null;
                Recibos.ItemsSource = lc;
            }
            else
            {
                if (cont7 == 1)
                {
                    cont7++;
                    List<Recibos> lc = new List<Recibos>();
                    List<Recibos> lc2 = new List<Recibos>();

                    lc = Recibos.Items.Cast<Recibos>().Select(x => x).OrderByDescending(x => x.CP_Cliente.ToLower()).ToList();


                    Recibos.ItemsSource = null;
                    Recibos.ItemsSource = lc;
                }
                else if (cont7 == 2)
                {
                    cont7++;
                    CargarRecibos();
                }
                else
                {

                    cont7 = 1;
                    List<Recibos> lc = new List<Recibos>();
                    List<Recibos> lc2 = new List<Recibos>();

                    lc = Recibos.Items.Cast<Recibos>().Select(x => x).OrderBy(x => x.CP_Cliente.ToLower()).ToList();


                    Recibos.ItemsSource = null;
                    Recibos.ItemsSource = lc;
                }
            }
        }

        private void FiltrarRecibo7(object sender, RoutedEventArgs e)
        {
            if (columna7 != 6)
            {
                columna7 = 6;
                cont7 = 1;
                List<Recibos> lc = new List<Recibos>();
                List<Recibos> lc2 = new List<Recibos>();

                lc = Recibos.Items.Cast<Recibos>().Select(x => x).OrderBy(x => x.Provincia_Cliente.ToLower()).ToList();


                Recibos.ItemsSource = null;
                Recibos.ItemsSource = lc;
            }
            else
            {
                if (cont7 == 1)
                {
                    cont7++;
                    List<Recibos> lc = new List<Recibos>();
                    List<Recibos> lc2 = new List<Recibos>();

                    lc = Recibos.Items.Cast<Recibos>().Select(x => x).OrderByDescending(x => x.Provincia_Cliente.ToLower()).ToList();


                    Recibos.ItemsSource = null;
                    Recibos.ItemsSource = lc;
                }
                else if (cont7 == 2)
                {
                    cont7++;
                    CargarRecibos();
                }
                else
                {

                    cont7 = 1;
                    List<Recibos> lc = new List<Recibos>();
                    List<Recibos> lc2 = new List<Recibos>();

                    lc = Recibos.Items.Cast<Recibos>().Select(x => x).OrderBy(x => x.Provincia_Cliente.ToLower()).ToList();


                    Recibos.ItemsSource = null;
                    Recibos.ItemsSource = lc;
                }
            }

        }
        private void FiltrarRecibo8(object sender, RoutedEventArgs e)
        {
            if (columna7 != 7)
            {
                columna7 = 7;
                cont7 = 1;
                List<Recibos> lc = new List<Recibos>();
                List<Recibos> lc2 = new List<Recibos>();

                lc = Recibos.Items.Cast<Recibos>().Select(x => x).OrderBy(x => x.Importe.ToString("0.00").ToLower()).ToList();

                Recibos.ItemsSource = null;
                Recibos.ItemsSource = lc;
            }
            else
            {
                if (cont5 == 1)
                {
                    cont5++;
                    List<Recibos> lc = new List<Recibos>();
                    List<Recibos> lc2 = new List<Recibos>();

                    lc = Recibos.Items.Cast<Recibos>().Select(x => x).OrderByDescending(x => x.Importe.ToString("0.00").ToLower()).ToList();


                    Recibos.ItemsSource = null;
                    Recibos.ItemsSource = lc;
                }
                else if (cont5 == 2)
                {
                    cont5++;
                    CargarRecibos();
                }
                else
                {

                    cont5 = 1;
                    List<Recibos> lc = new List<Recibos>();
                    List<Recibos> lc2 = new List<Recibos>();

                    lc = Recibos.Items.Cast<Recibos>().Select(x => x).OrderBy(x => x.Importe.ToString("0.00").ToLower()).ToList();


                    Recibos.ItemsSource = null;
                    Recibos.ItemsSource = lc;
                }
            }

        }
        private void FiltrarRecibo9(object sender, RoutedEventArgs e)
        {
            if (columna7 != 8)
            {
                columna7 = 8;
                cont7 = 1;
                List<Recibos> lc = new List<Recibos>();
                List<Recibos> lc2 = new List<Recibos>();

                lc = Recibos.Items.Cast<Recibos>().Select(x => x).OrderBy(x => x.fecha).ToList();


                Recibos.ItemsSource = null;
                Recibos.ItemsSource = lc;
            }
            else
            {
                if (cont7 == 1)
                {
                    cont7++;
                    List<Recibos> lc = new List<Recibos>();
                    List<Recibos> lc2 = new List<Recibos>();

                    lc = Recibos.Items.Cast<Recibos>().Select(x => x).OrderByDescending(x => x.fecha).ToList();


                    Recibos.ItemsSource = null;
                    Recibos.ItemsSource = lc;
                }
                else if (cont7 == 2)
                {
                    cont7++;
                    CargarRecibos();
                }
                else
                {

                    cont7 = 1;
                    List<Recibos> lc = new List<Recibos>();
                    List<Recibos> lc2 = new List<Recibos>();

                    lc = Recibos.Items.Cast<Recibos>().Select(x => x).OrderBy(x => x.fecha).ToList();


                    Recibos.ItemsSource = null;
                    Recibos.ItemsSource = lc;
                }
            }

        }
        

        private void FiltrarProducto1(object sender, RoutedEventArgs e)
        {
            
        }

        private void FiltrarProducto2(object sender, RoutedEventArgs e)
        {
            if (columna8 != 1)
            {
                columna8 = 1;
                cont8 = 1;
                List<ProductosRegistrados> lc = new List<ProductosRegistrados>();
                List<ProductosRegistrados> lc2 = new List<ProductosRegistrados>();

                lc = lista_productos.Items.Cast<ProductosRegistrados>().Select(x => x).OrderBy(x => x.Referencia.ToLower()).ToList();

                lista_productos.ItemsSource = null;
                lista_productos.ItemsSource = lc;
               
            }
            else
            {
                if (cont8 == 1)
                {
                    cont8++;
                    List<ProductosRegistrados> lc = new List<ProductosRegistrados>();
                    List<ProductosRegistrados> lc2 = new List<ProductosRegistrados>();

                    lc = lista_productos.Items.Cast<ProductosRegistrados>().Select(x => x).OrderByDescending(x => x.Referencia.ToLower()).ToList();


                    lista_productos.ItemsSource = null;
                    lista_productos.ItemsSource = lc;
                }
                else if (cont8 == 2)
                {
                    cont8++;
                    cargarProductos();
                }
                else
                {

                    cont8 = 1;
                    List<ProductosRegistrados> lc = new List<ProductosRegistrados>();
                    List<ProductosRegistrados> lc2 = new List<ProductosRegistrados>();

                    lc = lista_productos.Items.Cast<ProductosRegistrados>().Select(x => x).OrderBy(x => x.Referencia.ToLower()).ToList();

                    lista_productos.ItemsSource = null;
                    lista_productos.ItemsSource = lc;
                }
            }
        }

        private void FiltrarProducto3(object sender, RoutedEventArgs e)
        {
            if (columna8 != 2)
            {
                columna8 = 2;
                cont8 = 1;
                List<ProductosRegistrados> lc = new List<ProductosRegistrados>();
                List<ProductosRegistrados> lc2 = new List<ProductosRegistrados>();

                lc = lista_productos.Items.Cast<ProductosRegistrados>().Select(x => x).OrderBy(x => x.Descripcion.ToLower()).ToList();

                lista_productos.ItemsSource = null;
                lista_productos.ItemsSource = lc;
            }
            else
            {
                if (cont8 == 1)
                {
                    cont8++;
                    List<ProductosRegistrados> lc = new List<ProductosRegistrados>();
                    List<ProductosRegistrados> lc2 = new List<ProductosRegistrados>();

                    lc = lista_productos.Items.Cast<ProductosRegistrados>().Select(x => x).OrderByDescending(x => x.Descripcion.ToLower()).ToList();


                    lista_productos.ItemsSource = null;
                    lista_productos.ItemsSource = lc;
                }
                else if (cont8 == 2)
                {
                    cont8++;
                    cargarProductos();
                }
                else
                {

                    cont8 = 1;
                    List<ProductosRegistrados> lc = new List<ProductosRegistrados>();
                    List<ProductosRegistrados> lc2 = new List<ProductosRegistrados>();

                    lc = lista_productos.Items.Cast<ProductosRegistrados>().Select(x => x).OrderBy(x => x.Descripcion.ToLower()).ToList();

                    lista_productos.ItemsSource = null;
                    lista_productos.ItemsSource = lc;
                }
            }
        }

        private void FiltrarProducto4(object sender, RoutedEventArgs e)
        {
            if (columna8 != 3)
            {
                columna8 = 3;
                cont8 = 1;
                List<ProductosRegistrados> lc = new List<ProductosRegistrados>();
                List<ProductosRegistrados> lc2 = new List<ProductosRegistrados>();

                lc = lista_productos.Items.Cast<ProductosRegistrados>().Select(x => x).OrderBy(x => x.Precio).ToList();

                lista_productos.ItemsSource = null;
                lista_productos.ItemsSource = lc;
            }
            else
            {
                if (cont8 == 1)
                {
                    cont8++;
                    List<ProductosRegistrados> lc = new List<ProductosRegistrados>();
                    List<ProductosRegistrados> lc2 = new List<ProductosRegistrados>();

                    lc = lista_productos.Items.Cast<ProductosRegistrados>().Select(x => x).OrderByDescending(x => x.Precio).ToList();

                    lista_productos.ItemsSource = null;
                    lista_productos.ItemsSource = lc;
                }
                else if (cont8 == 2)
                {
                    cont8++;
                    cargarProductos();
                }
                else
                {

                    cont8 = 1;
                    List<ProductosRegistrados> lc = new List<ProductosRegistrados>();
                    List<ProductosRegistrados> lc2 = new List<ProductosRegistrados>();

                    lc = lista_productos.Items.Cast<ProductosRegistrados>().Select(x => x).OrderBy(x => x.Precio).ToList();

                    lista_productos.ItemsSource = null;
                    lista_productos.ItemsSource = lc;
                }
            }
        }

        private void FiltrarProducto5(object sender, RoutedEventArgs e)
        {
            if (columna8 != 4)
            {
                columna8 = 4;
                cont8 = 1;
                List<ProductosRegistrados> lc = new List<ProductosRegistrados>();
                List<ProductosRegistrados> lc2 = new List<ProductosRegistrados>();

                lc = lista_productos.Items.Cast<ProductosRegistrados>().Select(x => x).OrderBy(x => x.nombre_IVA.ToLower()).ToList();

                lista_productos.ItemsSource = null;
                lista_productos.ItemsSource = lc;
            }
            else
            {
                if (cont8 == 1)
                {
                    cont8++;
                    List<ProductosRegistrados> lc = new List<ProductosRegistrados>();
                    List<ProductosRegistrados> lc2 = new List<ProductosRegistrados>();

                    lc = lista_productos.Items.Cast<ProductosRegistrados>().Select(x => x).OrderByDescending(x => x.nombre_IVA.ToLower()).ToList();

                    lista_productos.ItemsSource = null;
                    lista_productos.ItemsSource = lc;
                }
                else if (cont8 == 2)
                {
                    cont8++;
                    cargarProductos();
                }
                else
                {

                    cont8 = 1;
                    List<ProductosRegistrados> lc = new List<ProductosRegistrados>();
                    List<ProductosRegistrados> lc2 = new List<ProductosRegistrados>();

                    lc = lista_productos.Items.Cast<ProductosRegistrados>().Select(x => x).OrderBy(x => x.nombre_IVA.ToLower()).ToList();

                    lista_productos.ItemsSource = null;
                    lista_productos.ItemsSource = lc;
                }
            }
        }

        private void FiltroIva1(object sender, RoutedEventArgs e)
        {
            if (columna9 != 0)
            {
                columna9 = 0;
                cont9 = 1;
                List<IVAs> lc = new List<IVAs>();
                List<IVAs> lc2 = new List<IVAs>();

                lc = lista_iva.Items.Cast<IVAs>().Select(x => x).OrderBy(x => x.Id).ToList();
                lista_iva.ItemsSource = null;
                lista_iva.ItemsSource = lc;

            }
            else
            {
                if (cont9 == 1)
                {
                    cont9++;
                    List<IVAs> lc = new List<IVAs>();
                    List<IVAs> lc2 = new List<IVAs>();

                    lc = lista_iva.Items.Cast<IVAs>().Select(x => x).OrderByDescending(x => x.Id).ToList();

                    lista_iva.ItemsSource = null;
                    lista_iva.ItemsSource = lc;
                }
                else if (cont9 == 2)
                {
                    cont9++;
                    CargarIva();
                }
                else
                {

                    cont9 = 1;
                    List<IVAs> lc = new List<IVAs>();
                    List<IVAs> lc2 = new List<IVAs>();

                    lc = lista_iva.Items.Cast<IVAs>().Select(x => x).OrderBy(x => x.Id).ToList();

                    lista_iva.ItemsSource = null;
                    lista_iva.ItemsSource = lc;
                }
            }
        }

        private void FiltroIva2(object sender, RoutedEventArgs e)
        {
            if (columna9 != 1)
            {
                columna9 = 1;
                cont9 = 1;
                List<IVAs> lc = new List<IVAs>();
                List<IVAs> lc2 = new List<IVAs>();

                lc = lista_iva.Items.Cast<IVAs>().Select(x => x).OrderBy(x => x.Tipo).ToList();

                lista_iva.ItemsSource = null;
                lista_iva.ItemsSource = lc;
            }
            else
            {
                if (cont9 == 1)
                {
                    cont9++;
                    List<IVAs> lc = new List<IVAs>();
                    List<IVAs> lc2 = new List<IVAs>();

                    lc = lista_iva.Items.Cast<IVAs>().Select(x => x).OrderByDescending(x => x.Tipo).ToList();

                    lista_iva.ItemsSource = null;
                    lista_iva.ItemsSource = lc;
                }
                else if (cont9 == 2)
                {
                    cont9++;
                    CargarIva();
                }
                else
                {

                    cont9 = 1;
                    List<IVAs> lc = new List<IVAs>();
                    List<IVAs> lc2 = new List<IVAs>();

                    lc = lista_iva.Items.Cast<IVAs>().Select(x => x).OrderBy(x => x.Tipo).ToList();

                    lista_iva.ItemsSource = null;
                    lista_iva.ItemsSource = lc;
                }
            }

        }

        private void FiltroIva3(object sender, RoutedEventArgs e)
        {
            if (columna9 != 2)
            {
                columna9 = 2;
                cont9 = 1;
                List<IVAs> lc = new List<IVAs>();
                List<IVAs> lc2 = new List<IVAs>();

                lc = lista_iva.Items.Cast<IVAs>().Select(x => x).OrderBy(x => x.Porcentaje).ToList();

                lista_iva.ItemsSource = null;
                lista_iva.ItemsSource = lc;
            }
            else
            {
                if (cont9 == 1)
                {
                    cont9++;
                    List<IVAs> lc = new List<IVAs>();
                    List<IVAs> lc2 = new List<IVAs>();

                    lc = lista_iva.Items.Cast<IVAs>().Select(x => x).OrderByDescending(x => x.Porcentaje).ToList();

                    lista_iva.ItemsSource = null;
                    lista_iva.ItemsSource = lc;
                }
                else if (cont9 == 2)
                {
                    cont9++;
                    CargarIva();
                }
                else
                {

                    cont9 = 1;
                    List<IVAs> lc = new List<IVAs>();
                    List<IVAs> lc2 = new List<IVAs>();

                    lc = lista_iva.Items.Cast<IVAs>().Select(x => x).OrderBy(x => x.Porcentaje).ToList();

                    lista_iva.ItemsSource = null;
                    lista_iva.ItemsSource = lc;
                }
            }
        }

        private void FiltrarUsuarios3(object sender, RoutedEventArgs e)
        {
            if (columna3 != 2)
            {
                columna3 = 2;
                cont3 = 1;
                List<Usuarios> lc = new List<Usuarios>();
                List<Usuarios> lc2 = new List<Usuarios>();

                lc = Usuarios.Items.Cast<Usuarios>().Select(x => x).OrderBy(x => x.nombreCompleto.ToLower()).ToList();
                Usuarios.ItemsSource = null;
                Usuarios.ItemsSource = lc;

            }
            else
            {
                if (cont3 == 1)
                {
                    cont3++;
                    List<Usuarios> lc = new List<Usuarios>();
                    List<Usuarios> lc2 = new List<Usuarios>();

                    lc = Usuarios.Items.Cast<Usuarios>().Select(x => x).OrderByDescending(x => x.Nombre_Usuario.ToLower()).ToList();
                    Usuarios.ItemsSource = null;
                    Usuarios.ItemsSource = lc;
                }
                else if (cont3 == 2)
                {
                    cont3++;
                    CargarUsuarios();
                }
                else
                {

                    cont3 = 1;
                    List<Usuarios> lc = new List<Usuarios>();
                    List<Usuarios> lc2 = new List<Usuarios>();

                    lc = Usuarios.Items.Cast<Usuarios>().Select(x => x).OrderBy(x => x.Nombre_Usuario.ToLower()).ToList();
                    Usuarios.ItemsSource = null;
                    Usuarios.ItemsSource = lc;
                }
            }
        }

        


        private async void CargarVehiculos()
        {
            string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
            //Log oLog = new Log(path2);
            //oLog.Add("Rol");
            try
            {
                SQLiteConnection cn2 = new SQLiteConnection(conexiondb);

                bool actualizar = true;

                DateTime time = lista_tiempos[6];
                //DateTime.TryParse(mycontent, out time);
                string sql_Text2 = "SELECT * FROM Vehiculos_v";
                cn2.Open();
                SQLiteCommand cmd2 = new SQLiteCommand(sql_Text2, cn2);
                SQLiteDataReader rdr2 = cmd2.ExecuteReader();
                List<string> ImportedFiles2 = new List<string>();

                DateTime? b = null;
                while (rdr2.Read())
                {
                    Console.WriteLine("Vehiculos");
                    Console.WriteLine(rdr2.GetString(1));
                    DateTime d = DateTime.Parse(rdr2.GetString(1));
                    b = d;
                }
                rdr2.Close();
                if (b != null)
                {
                    if (DateTime.Compare((DateTime)b, time) == -1)
                    {
                        try
                        {
                           string uri = string.Format("http://app.adex-integracio.com/sgc/index2.php");
                            //SGC.Clases.Version v = new Version();
                            //Debug.WriteLine("Hola ");
                            //byteArray = Encoding.UTF8.GetBytes("tabla = Version");
                            IEnumerable<KeyValuePair<string, string>> queries = new List<KeyValuePair<string, string>>()
                                {
                                    new KeyValuePair<string, string>("tabla", "Vehiculos"),
                                    new KeyValuePair<string, string>("action", "Select")
                                };
                            //Uri = new Uri(uri);
                            HttpContent h = new FormUrlEncodedContent(queries);
                            using (HttpClient client2 = new HttpClient())
                            {
                                using (HttpResponseMessage resp2 = await client2.PostAsync(uri, h))
                                {
                                    using (HttpContent content22 = resp2.Content)
                                    {
                                        string mycontent = await content22.ReadAsStringAsync();
                                        HttpContentHeaders hch = content22.Headers;
                                        //console.writeline(mycontent);
                                        //v = new Version(mycontent);
                                        //Debug.WriteLine("IsSuccessStatusCode");

                                        List<Clientes> lst = new List<Clientes>();
                                        JArray jay = new JArray();
                                        try
                                        {
                                            jay = JArray.Parse(mycontent);
                                        }
                                        catch { }
                                        if (cn2.State != ConnectionState.Open) cn2.Open();
                                        //DataTable tb = new DataTable();
                                        string sql_Text3 = "DELETE FROM Vehiculos";

                                        SQLiteCommand cmd3 = new SQLiteCommand(sql_Text3, cn2);
                                        cmd3.ExecuteNonQuery();
                                        //lst.Remove(lst[0]);
                                        foreach (JObject s in jay)
                                        {


                                            Vehiculos p = new Clases.Vehiculos(s);
                                        
                                            string sql_query3 = "INSERT INTO Vehiculos([Id],[TipoVehiculo],[Descripcion]) VALUES("+p.Id+",'" + p.Tipo + "','" + p.Descripcion + "')";

                                            cmd3 = new SQLiteCommand(sql_query3, cn2);
                                            cmd3.ExecuteNonQuery();

                                        }

                                        string sql_query4 = "UPDATE Vehiculos_v SET TIME='" + DateTime.Now + "' WHERE Id=1";

                                        cmd3 = new SQLiteCommand(sql_query4, cn2);
                                        cmd3.ExecuteNonQuery();
                                    }
                                }
                            }





                        }
                        catch { };
                    }
                }
            }
            catch
            {

            }
            try
            {


                lvhc = new List<Vehiculos>();
                lvhcf = new List<Vehiculos>();
                Vehiculosstring = new List<string>();
                Vehiculos.Items.Clear();
                
                string cn_String = conexiondb;

                SQLiteConnection cn = new SQLiteConnection(cn_String);

                if (cn.State != ConnectionState.Open) cn.Open();
                DataTable tb = new DataTable();

                string sql_Text = "SELECT * FROM Vehiculos";
                SQLiteCommand cmd = new SQLiteCommand(sql_Text, cn);
                SQLiteDataReader rdr = cmd.ExecuteReader();
                
               
                while (rdr.Read())
                {
                    Vehiculos rol = new Vehiculos(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2));
                    Vehiculos.Items.Add(rol);
                    lvhcf.Add(rol);
                    Vehiculosstring.Add(rol.Tipo);

                    lvhc.Add(rol);
                    
                } 
                Vehiculo1_alta.ItemsSource = Vehiculosstring;
                Vehiculo2_alta.ItemsSource = Vehiculosstring;
                Vehiculo3_alta.ItemsSource = Vehiculosstring;
                Vehiculo4_alta.ItemsSource = Vehiculosstring;
                vehiculo1.ItemsSource = Vehiculosstring;
                vehiculo2.ItemsSource = Vehiculosstring;
                vehiculo3.ItemsSource = Vehiculosstring;
                vehiculo4.ItemsSource = Vehiculosstring;
            }
            catch(Exception ee)
            {
                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                Peta(ee, line + "");
                //oLog.Add("Linia 6686");
            }
        }

        private void Vehiculos_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (Vehiculos.SelectedItem != null)
            {
                Vehiculos v = Vehiculos.SelectedItem as Vehiculos;

                AddnewSistema.Visibility = Visibility.Visible;
                deleteSistema.Visibility = Visibility.Visible;
                editSistema.Visibility = Visibility.Visible;
            }
            else
            {
                AddnewSistema.Visibility = Visibility.Visible;
                deleteSistema.Visibility = Visibility.Collapsed;
                editSistema.Visibility = Visibility.Collapsed;
            }
        }

        private void EditarVehiculo(object sender, MouseButtonEventArgs e)
        {
            if (e.ClickCount == 2)
            {
                Vehiculos v = Vehiculos.SelectedItem as Vehiculos;
                vvhc.Close();
                vvhc = new VentanaVehiculo(v);
                vvhc.Show();
            }
        }

        private void FiltrarVehiculo1(object sender, RoutedEventArgs e)
        {
            if (columna10 != 0)
            {
                columna10 = 0;
                cont10 = 1;
                List<Vehiculos> lc = new List<Vehiculos>();
                List<Vehiculos> lc2 = new List<Vehiculos>();

                lc = Vehiculos.Items.Cast<Vehiculos>().Select(x => x).OrderBy(x => x.Id).ToList();


                Vehiculos.Items.Clear();
                foreach (Vehiculos cl in lc)
                {
                    Vehiculos.Items.Add(cl);
                }
            }
            else
            {
                if (cont10 == 1)
                {
                    cont10++;
                    List<Vehiculos> lc = new List<Vehiculos>();
                    List<Vehiculos> lc2 = new List<Vehiculos>();

                    lc = Vehiculos.Items.Cast<Vehiculos>().Select(x => x).OrderByDescending(x => x.Id).ToList();


                    Vehiculos.Items.Clear();
                    foreach (Vehiculos cl in lc)
                    {
                        Vehiculos.Items.Add(cl);
                    }
                }
                else if (cont10 == 2)
                {
                    cont10++;
                    CargarVehiculos();
                }
                else
                {

                    cont10 = 1;
                    List<Vehiculos> lc = new List<Vehiculos>();
                    List<Vehiculos> lc2 = new List<Vehiculos>();

                    lc = Vehiculos.Items.Cast<Vehiculos>().Select(x => x).OrderBy(x => x.Id).ToList();


                    Vehiculos.Items.Clear();
                    foreach (Vehiculos cl in lc)
                    {
                        Vehiculos.Items.Add(cl);
                    }
                }
            }
        }

        private void FiltrarVehiculo2(object sender, RoutedEventArgs e)
        {
            if (columna10 != 0)
            {
                columna10 = 0;
                cont10 = 1;
                List<Vehiculos> lc = new List<Vehiculos>();
                List<Vehiculos> lc2 = new List<Vehiculos>();

                lc = Vehiculos.Items.Cast<Vehiculos>().Select(x => x).OrderBy(x => x.Tipo.ToLower()).ToList();


                Vehiculos.Items.Clear();
                foreach (Vehiculos cl in lc)
                {
                    Vehiculos.Items.Add(cl);
                }
            }
            else
            {
                if (cont10 == 1)
                {
                    cont10++;
                    List<Vehiculos> lc = new List<Vehiculos>();
                    List<Vehiculos> lc2 = new List<Vehiculos>();

                    lc = Vehiculos.Items.Cast<Vehiculos>().Select(x => x).OrderByDescending(x => x.Tipo.ToLower()).ToList();


                    Vehiculos.Items.Clear();
                    foreach (Vehiculos cl in lc)
                    {
                        Vehiculos.Items.Add(cl);
                    }
                }
                else if (cont10 == 2)
                {
                    cont10++;
                    CargarVehiculos();
                }
                else
                {

                    cont10 = 1;
                    List<Vehiculos> lc = new List<Vehiculos>();
                    List<Vehiculos> lc2 = new List<Vehiculos>();

                    lc = Vehiculos.Items.Cast<Vehiculos>().Select(x => x).OrderBy(x => x.Tipo.ToLower()).ToList();


                    Vehiculos.Items.Clear();
                    foreach (Vehiculos cl in lc)
                    {
                        Vehiculos.Items.Add(cl);
                    }
                }
            }
        }

        private void FiltrarVehiculo3(object sender, RoutedEventArgs e)
        {
            if (Vehiculo1_alta.Text.Length > 0)
            {
                var cmbx = sender as ComboBox;
                List<string> listav = new List<string>();
                foreach(Vehiculos v in lvhc)
                {
                    listav.Add(v.Tipo);
                }
                List<string> list3 = listav.Select(x => x).Where(x => x.ToLower().Contains(Vehiculo1_alta.Text.ToLower())).ToList();
                Vehiculo1_alta.ItemsSource = list3;

                Vehiculos c = null;
                if (list3.Count > 0)
                {

                    cmbx.IsDropDownOpen = true;
                    //console.writeline(list3[0].Split('-')[0]);
                    c = lvhc.Find(x => x.Tipo.Contains(list3[0].Split('-')[0]));

                }
                if (c != null)
                {

                   
                }
                else
                {
                   
                }
            }
        }

        private void TextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            var cmbx = sender as ComboBox;

            if (mirar2)
                if (Clientes.SelectedItem != null && !newclient)
                {
                    Clientes cc = Clientes.SelectedItem as Clientes;
                    int pot = 0;
                    if (Potencia.SelectedItem != null)
                    {
                        Potencia pp = Potencia.SelectedItem as Potencia;
                        pot = pp.Id;
                    }
                    int b = 0;
                    if (Switch.IsChecked.Value)
                    {
                        b = 1;
                    }
                    Parcelas p = numero_plaza.SelectedItem as Parcelas;


                    if (p == null)
                        p = new Parcelas();

                    if (cc.Fecha_In != null)
                    {

                    }
                    else
                    {

                    }
                    ////console.writeline(numero_secreto.Text.Equals(cc.numero_secreto.ToString()) + " " + caducidad.Text.Equals(cc.caducidad.Split('/')[0]) + " " + caducidad1.Text.Equals(cc.caducidad.Split('/')[1]) + " " + titular_tarjeta.Text.Equals(cc.titular) + " " + numero_tarjeta.Text.Equals(cc.n_tarjeta.ToString()) + " " + mail_cliente.Text.Equals(cc.mail) + " " + telefonos_cliente2.Text.Equals(cc.telefon2) + " " + telefonos_cliente.Text.Equals(cc.telefon1));
                    //console.writeline(pais.Text.Equals(cc.Pais) + " " + provincia.Text.Equals(cc.Provincia) + " " + poblacion_cliente.Text.Equals(cc.poblacio) + " " + CP.Text.Equals(cc.codigo_postal) + " " + puerta.Text.Equals(cc.Puerta) + " " + piso.Text.Equals(cc.Piso) + " " + numero.Text.Equals(cc.Numero) + " " + direccion_cliente.Text.Equals(cc.direccion) + " " + dni.Text.Equals(cc.dni) + " " + apellidos_cliente.Text.Equals(cc.apellidos_cliente) + " " + nombre_cliente.Text.Equals(cc.nombre_cliente));
                    ////console.writeline(numero_cliente.Text.Equals(cc.n_cliemte) +" "+ Clientes_FechaEntrada.SelectedDate.Equals(cc.Fecha_In) +" "+ Clientes_FechaSalida.SelectedDate.Equals(cc.Fecha_Out) +" "+ vehiculo1.Text.Equals(cc.Vehiculo1) +" "+ matricula1.Text.Equals(cc.matricula1) +" "+ numero_bastidor.Text.Equals(cc.Numero_Bastidor1) +" "+ vehiculo2.Text.Equals(cc.Vehiculo2) +" "+ matricula2.Text.Equals(cc.matricula2) +" "+ numero_bastidor2.Text.Equals(cc.Numero_Bastidor2)  +" "+ nota1.Text.Equals(cc.Nota1) +" "+ Clientes_HoraEntrada.Text.Equals(cc.Hora_entrada) +" "+ Clientes_HoraSalida.Text.Equals(cc.Hora_salida));
                    //console.writeline((b == cc.Switch) + " " + (p.id == int.Parse(cc.n_plaza)) + " " + (pot == cc.Potencia));

                    if (p.id == null)
                        p.id = 0;
                    bool pos = false;
                    if (bdr2.HorizontalAlignment == HorizontalAlignment.Left)
                        pos = true;
                    //console.writeline(p.id + " " + cc.n_plaza);



                    string cd = "";
                    string cd2 = "";
                    if (cc.caducidad.Contains("/"))
                    {
                        cd = cc.caducidad.Split('/')[0];
                        cd2 = cc.caducidad.Split('/')[1];
                    }

                    Console.WriteLine(numero_secreto.Text.Equals(cc.numero_secreto.ToString()));
                    Console.WriteLine(caducidad.Text.Equals(cd));
                    Console.WriteLine(caducidad1.Text.Equals(cd2));
                    Console.WriteLine(titular_tarjeta.Text.Equals(cc.titular));
                    Console.WriteLine(numero_tarjeta.Text.Equals(cc.n_tarjeta.ToString()));
                    Console.WriteLine(mail_cliente.Text.Equals(cc.mail));
                    Console.WriteLine(telefonos_cliente2.Text.Equals(cc.telefon2));
                    Console.WriteLine(telefonos_cliente.Text.Equals(cc.telefon1));
                    Console.WriteLine(pais.Text.Equals(cc.Pais));
                    Console.WriteLine(provincia.Text.Equals(cc.Provincia)); Console.WriteLine(poblacion_cliente.Text.Equals(cc.poblacio)); Console.WriteLine(CP.Text.Equals(cc.codigo_postal)); Console.WriteLine(puerta.Text.Equals(cc.Puerta)); Console.WriteLine(piso.Text.Equals(cc.Piso)); Console.WriteLine(numero.Text.Equals(cc.Numero)); Console.WriteLine(direccion_cliente.Text.Equals(cc.direccion)); Console.WriteLine(dni.Text.Equals(cc.dni)); Console.WriteLine(apellidos_cliente.Text.Equals(cc.apellidos_cliente)); Console.WriteLine(nombre_cliente.Text.Equals(cc.nombre_cliente)); 
                    Console.WriteLine(numero_cliente.Text.Equals(cc.n_cliemte+"")); 
                        Console.WriteLine((pos == cc.DeBaja)); 
                    Console.WriteLine(Fecha_Entrada_Estado.SelectedDate.Equals(cc.fecha_entrada_estado)); Console.WriteLine(Fecha_Contrato.SelectedDate.Equals(cc.fecha_contrato)); Console.WriteLine(Fecha_Pago.SelectedDate.Equals(cc.fecha_pago)); 
                    Console.WriteLine( medidas_vehiculo1.Text.Equals(cc.Medidas_Vehiculo1));

                    if (numero_secreto.Text.Equals(cc.numero_secreto.ToString()) && caducidad.Text.Equals(cd) && caducidad1.Text.Equals(cd2) && titular_tarjeta.Text.Equals(cc.titular) && numero_tarjeta.Text.Equals(cc.n_tarjeta.ToString()) && mail_cliente.Text.Equals(cc.mail) && telefonos_cliente2.Text.Equals(cc.telefon2) && telefonos_cliente.Text.Equals(cc.telefon1) && pais.Text.Equals(cc.Pais) && provincia.Text.Equals(cc.Provincia) && poblacion_cliente.Text.Equals(cc.poblacio) && CP.Text.Equals(cc.codigo_postal) && puerta.Text.Equals(cc.Puerta) && piso.Text.Equals(cc.Piso) && numero.Text.Equals(cc.Numero) && direccion_cliente.Text.Equals(cc.direccion) && dni.Text.Equals(cc.dni) && apellidos_cliente.Text.Equals(cc.apellidos_cliente) && nombre_cliente.Text.Equals(cc.nombre_cliente) && numero_cliente.Text.Equals(cc.n_cliemte + "") && Clientes_FechaEntrada.SelectedDate == cc.Fecha_In && Clientes_FechaSalida.SelectedDate == cc.Fecha_Out && vehiculo1.Text.Equals(cc.Vehiculo1) && matricula1.Text.Equals(cc.matricula1) && vehiculo2.Text.Equals(cc.Vehiculo2) && matricula2.Text.Equals(cc.matricula2) && vehiculo3.Text.Equals(cc.Vehiculo3) && matricula3.Text.Equals(cc.matricula3) && vehiculo4.Text.Equals(cc.Vehiculo4) && matricula2.Text.Equals(cc.matricula2) && pot == cc.Potencia && nota1.Text.Equals(cc.Nota1) && p.id == int.Parse(cc.n_plaza) && Clientes_HoraEntrada.Text.Equals(cc.Hora_entrada) && Clientes_HoraSalida.Text.Equals(cc.Hora_salida) && Iban.Text.Equals(cc.iban) && Swift.Text.Equals(cc.swift) && entidad_bancaria.Text.Equals(cc.entidad_bacnaria) && Iban2.Text.Equals(cc.iban2) && Swift2.Text.Equals(cc.swift2) && entidad_bancaria2.Text.Equals(cc.entidad_bacnaria2) && mail_cliente2.Text.Equals(cc.mail2) && pos == cc.DeBaja && Fecha_Entrada_Estado.SelectedDate == cc.fecha_entrada_estado && Fecha_Contrato.SelectedDate == cc.fecha_contrato && Fecha_Pago.SelectedDate == cc.fecha_pago && medidas_vehiculo1.Text.Equals(cc.Medidas_Vehiculo1))
                    {
                        Console.WriteLine("41832");
                        change_client.IsEnabled = false;

                        change_client.IsEnabled = false;
                        safe = false;
                        //añadir_evento.IsEnabled = false;
                    }
                    else
                    {
                        Console.WriteLine("!41832");
                        change_client.IsEnabled = true;

                        change_client.IsEnabled = true;
                        safe = true;
                        //añadir_evento.IsEnabled = true;
                    }
                    
                    try
                    {

                        



                        if (!(numero_cliente.Text.Equals(cc.n_cliemte + "")))
                        {
                            numero_cliente.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            numero_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        }
                        Parcelas pr = numero_plaza.SelectedItem as Parcelas;
                        if (pr != null)
                        {
                            if (cc.n_plaza != pr.id + "")
                            {

                                numero_plaza.Foreground = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                numero_plaza.Foreground = Brushes.Black;

                            }
                        }
                        else
                        {
                            if (numero_plaza.SelectedItem != null)
                                numero_plaza.BorderBrush = Brushes.Red;
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                numero_plaza.Foreground = Brushes.Black;
                            }
                        }




                        if (!(cc.nombre_cliente.Equals(nombre_cliente.Text)))
                        {
                            nombre_cliente.BorderBrush = Brushes.Red;


                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            nombre_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }


                        if (!(cc.apellidos_cliente.Equals(apellidos_cliente.Text)))
                        {
                            apellidos_cliente.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            apellidos_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }


                        if (!(cc.dni.Equals(dni.Text)))
                        {
                            dni.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            dni.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }



                        if (!(cc.direccion.Equals(direccion_cliente.Text)))
                        {

                            direccion_cliente.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            direccion_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(cc.poblacio.Equals(poblacion_cliente.Text)))
                        {
                            poblacion_cliente.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            poblacion_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(cc.telefon1.Equals(telefonos_cliente.Text)))
                        {

                            telefonos_cliente.BorderBrush = Brushes.Red;


                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            telefonos_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(cc.telefon2.Equals(telefonos_cliente2.Text)))
                        {
                            telefonos_cliente2.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            telefonos_cliente2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!cc.codigo_postal.Equals(CP.Text))
                        {
                            CP.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            CP.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(cc.mail.Equals(mail_cliente.Text)))
                        {
                            mail_cliente.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            mail_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(cc.mail2.Equals(mail_cliente2.Text)))
                        {
                            mail_cliente2.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            mail_cliente2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        /*u.Luz = "s";
                        u.Nota1 = "";
                        u.Nota2 = "";*/
                        /*if (!(cc.Metodo_Pago.ToString().Equals(Metodo_pago.Text)))
                        {
                            a = true;
                            sql_query += "Metodo_Pago=" + Metodo_pago.SelectedIndex + ", ";
                            parametros.Add("Metodo_Pago:" + Metodo_pago.SelectedIndex);
                        }*/

                        if (!(cc.titular.Equals(titular_tarjeta.Text)))
                        {
                            titular_tarjeta.BorderBrush = Brushes.Red;


                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            titular_tarjeta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        string fecha = caducidad + "/" + caducidad1;
                        if (cc.caducidad.Contains("/"))
                            if (!(cc.caducidad.Equals(caducidad.Text + "/" + caducidad1.Text)))
                            {
                                caducidad.BorderBrush = Brushes.Red;
                                caducidad1.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                caducidad.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                                caducidad1.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                        if (!(cc.numero_secreto.Equals(numero_secreto.Text)))
                        {
                            numero_secreto.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            numero_secreto.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(cc.n_tarjeta.Equals(numero_tarjeta.Text)))
                        {
                            numero_tarjeta.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            numero_tarjeta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(cc.entidad_bacnaria.Equals(entidad_bancaria.Text)))
                        {
                            entidad_bancaria.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            entidad_bancaria.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(cc.iban.Equals(Iban.Text)))
                        {
                            Iban.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Iban.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(cc.swift.Equals(Swift.Text)))
                        {
                            Swift.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Swift.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }



                        if (!(cc.Pais.Equals(pais.Text)))
                        {
                            pais.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            pais.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(cc.Numero.Equals(numero.Text)))
                        {
                            numero.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            numero.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(cc.Piso.Equals(piso.Text)))
                        {
                            piso.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            piso.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(cc.Puerta.Equals(puerta.Text)))
                        {
                            puerta.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            puerta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(cc.Provincia.Equals(provincia.Text)))
                        {
                            provincia.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            provincia.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }



                        if (!(Clientes_FechaEntrada.SelectedDate.Equals(cc.Fecha_In)))
                        {
                            Clientes_FechaEntrada.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Clientes_FechaEntrada.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(Clientes_FechaSalida.SelectedDate.Equals(cc.Fecha_Out)))
                        {
                            Clientes_FechaSalida.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Clientes_FechaSalida.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(Vehiculo1_alta.Text.Equals(cc.Vehiculo1)))
                        {
                            vehiculo1.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            vehiculo1.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(matricula1.Text.Equals(cc.matricula1)))
                        {
                            matricula1.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            matricula1.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(Vehiculo2_alta.Text.Equals(cc.Vehiculo2)))
                        {
                            vehiculo2.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            vehiculo2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(matricula2.Text.Equals(cc.matricula2)))
                        {
                            matricula1.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            matricula2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(Vehiculo3_alta.Text.Equals(cc.Vehiculo3)))
                        {
                            vehiculo3.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            vehiculo3.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(matricula3.Text.Equals(cc.matricula3)))
                        {
                            matricula3.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            matricula3.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(matricula4.Text.Equals(cc.matricula4)))
                        {
                            matricula3.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            matricula4.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }




                        int pott = 0;
                        if (Potencia.SelectedItem != null)
                        {
                            Potencia poten = Potencia.SelectedItem as Potencia;
                            if (cc.Potencia != poten.Id)
                            {
                                Potencia.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Potencia.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                        }



                        int b2 = 0;
                        if (Switch.IsChecked.Value)
                        {
                            b2 = 1;
                        }
                        if (b2 != cc.Switch)
                        {
                            Switch.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Switch.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }





                        if (!nota1.Text.Equals(cc.Nota1))
                        {

                            nota1.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            nota1.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        try
                        {
                            DateTime dt2 = (DateTime)Clientes_HoraEntrada.Value;

                            if (!dt2.ToString("H:mm").Equals(cc.Hora_entrada))
                            {
                                Clientes_HoraEntrada.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_HoraEntrada.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                        }
                        catch (Exception ee)
                        {
                            var st = new StackTrace(ee, true); // Get the top stack frame var frame = st.GetFrame(0); // Get the line number from the stack frame   var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                            var frame = st.GetFrame(0);
                            var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                            Peta(ee, line + "");
                            Console.WriteLine(line + ": " + ee.Message);
                        }
                        DateTime dt3 = (DateTime)Clientes_HoraSalida.Value;
                        if (!dt3.ToString("H:mm").Equals(cc.Hora_salida))
                        {
                            Clientes_HoraSalida.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Clientes_HoraSalida.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(cc.entidad_bacnaria2.Equals(entidad_bancaria2.Text)))
                        {

                            entidad_bancaria2.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            entidad_bancaria2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(cc.iban2.Equals(Iban2.Text)))
                        {
                            Iban2.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Iban2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(cc.swift2.Equals(Swift2.Text)))
                        {
                            Swift2.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Swift2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        bool bb = false;
                        if (bdr2.HorizontalAlignment == HorizontalAlignment.Left)
                            pos = true;
                        /*if (!(cc.DeBaja == bb))
                        {
                            numero_cliente.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            apellidos_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }*/


                        if (!Fecha_Entrada_Estado.SelectedDate.Equals(cc.fecha_entrada_estado))
                        {
                            Fecha_Entrada_Estado.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Fecha_Entrada_Estado.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!Fecha_Contrato.SelectedDate.Equals(cc.fecha_contrato))
                        {
                            Fecha_Contrato.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Fecha_Contrato.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(cc.fecha_pago.Equals(Fecha_Pago.SelectedDate)))
                        {
                            Fecha_Pago.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Fecha_Pago.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(cc.Medidas_Vehiculo1.Equals(medidas_vehiculo1.Text)))
                        {
                            medidas_vehiculo1.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            medidas_vehiculo1.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                    }
                    catch
                    {

                    }




                }
        }
        private void TextBox_TextChanged2(object sender, TextChangedEventArgs e)
        {
            var cmbx = sender as ComboBox;
            cmbx.IsDropDownOpen = true;

        }
        private void TextBox_TextChanged3(object sender, TextChangedEventArgs e)
        {
            var cmbx = sender as ComboBox;
            cmbx.IsDropDownOpen = true;

        }
        private void TextBox_TextChanged4(object sender, TextChangedEventArgs e)
        {
            var cmbx = sender as ComboBox;
            cmbx.IsDropDownOpen = true;

        }

        private void Vehiculo1_alta_KeyDown(object sender, KeyEventArgs e)
        {
            ComboBox comboBox = (ComboBox)sender;
            TextBox textBox = comboBox.Template.FindName("PART_EditableTextBox", comboBox) as TextBox;
            if (textBox != null)
            {
                Dispatcher.InvokeAsync(() =>
                {
                    textBox.Select(textBox.Text.Length, 0);
                });
            }
            if (mirar2)
                if (Clientes.SelectedItem != null && !newclient)
                {
                    Clientes cc = Clientes.SelectedItem as Clientes;
                    int pot = 0;
                    if (Potencia.SelectedItem != null)
                    {
                        Potencia pp = Potencia.SelectedItem as Potencia;
                        pot = pp.Id;
                    }
                    int b = 0;
                    if (Switch.IsChecked.Value)
                    {
                        b = 1;
                    }
                    Parcelas p = numero_plaza.SelectedItem as Parcelas;


                    if (p == null)
                        p = new Parcelas();

                    if (cc.Fecha_In != null)
                    {

                    }
                    else
                    {

                    }
                    ////console.writeline(numero_secreto.Text.Equals(cc.numero_secreto.ToString()) + " " + caducidad.Text.Equals(cc.caducidad.Split('/')[0]) + " " + caducidad1.Text.Equals(cc.caducidad.Split('/')[1]) + " " + titular_tarjeta.Text.Equals(cc.titular) + " " + numero_tarjeta.Text.Equals(cc.n_tarjeta.ToString()) + " " + mail_cliente.Text.Equals(cc.mail) + " " + telefonos_cliente2.Text.Equals(cc.telefon2) + " " + telefonos_cliente.Text.Equals(cc.telefon1));
                    //console.writeline(pais.Text.Equals(cc.Pais) + " " + provincia.Text.Equals(cc.Provincia) + " " + poblacion_cliente.Text.Equals(cc.poblacio) + " " + CP.Text.Equals(cc.codigo_postal) + " " + puerta.Text.Equals(cc.Puerta) + " " + piso.Text.Equals(cc.Piso) + " " + numero.Text.Equals(cc.Numero) + " " + direccion_cliente.Text.Equals(cc.direccion) + " " + dni.Text.Equals(cc.dni) + " " + apellidos_cliente.Text.Equals(cc.apellidos_cliente) + " " + nombre_cliente.Text.Equals(cc.nombre_cliente));
                    ////console.writeline(numero_cliente.Text.Equals(cc.n_cliemte) +" "+ Clientes_FechaEntrada.SelectedDate.Equals(cc.Fecha_In) +" "+ Clientes_FechaSalida.SelectedDate.Equals(cc.Fecha_Out) +" "+ vehiculo1.Text.Equals(cc.Vehiculo1) +" "+ matricula1.Text.Equals(cc.matricula1) +" "+ numero_bastidor.Text.Equals(cc.Numero_Bastidor1) +" "+ vehiculo2.Text.Equals(cc.Vehiculo2) +" "+ matricula2.Text.Equals(cc.matricula2) +" "+ numero_bastidor2.Text.Equals(cc.Numero_Bastidor2)  +" "+ nota1.Text.Equals(cc.Nota1) +" "+ Clientes_HoraEntrada.Text.Equals(cc.Hora_entrada) +" "+ Clientes_HoraSalida.Text.Equals(cc.Hora_salida));
                    //console.writeline((b == cc.Switch) + " " + (p.id == int.Parse(cc.n_plaza)) + " " + (pot == cc.Potencia));

                    if (p.id == null)
                        p.id = 0;
                    bool pos = false;
                    if (bdr2.HorizontalAlignment == HorizontalAlignment.Left)
                        pos = true;
                    //console.writeline(p.id + " " + cc.n_plaza);



                    string cd = "";
                    string cd2 = "";
                    if (cc.caducidad.Contains("/"))
                    {
                        cd = cc.caducidad.Split('/')[0];
                        cd2 = cc.caducidad.Split('/')[1];
                    }

                    Console.WriteLine(email_cliente.Text.Equals(cc.mail));
                    Console.WriteLine(telefono2_cliente_alta.Text.Equals(cc.telefon2));
                    Console.WriteLine(telefono_cliente_alta.Text.Equals(cc.telefon1));
                    Console.WriteLine(pais_cliente_alta.Text.Equals(cc.Pais));
                    Console.WriteLine(provincia_cliente_alta.Text.Equals(cc.Provincia));
                    Console.WriteLine(poblacion_cliente_alta.Text.Equals(cc.poblacio));
                    Console.WriteLine(cp_cliente_alta.Text.Equals(cc.codigo_postal));
                    Console.WriteLine(direccion_cliente_alta.Text.Equals(cc.direccion));
                    Console.WriteLine(apellido_cliente_alta.Text.Equals(cc.apellidos_cliente) + " " + nombre_cliente_alta.Text.Equals(cc.nombre_cliente));
                    Console.WriteLine(numero_cliente_alta.Text.Equals(cc.n_cliemte + ""));
                    string aa = Clientes_FechaEntrada_alta.SelectedDate.ToString();
                    string aa2 = cc.Fecha_In.ToString();

                    
                    Console.WriteLine(Vehiculo1_alta.Text.Equals(cc.Vehiculo1 + "")); //
                    Console.WriteLine(bastidor1_alta.Text.Equals(cc.matricula1)); //
                    Console.WriteLine(Vehiculo2_alta.Text.Equals(cc.Vehiculo2) + " " + bastidor2_alta.Text.Equals(cc.matricula2)); //
                    Console.WriteLine((nota1_alta.Text.Equals(cc.Nota1))); //
                    Console.WriteLine((b == cc.Switch)); //
                    Console.WriteLine((p.id == int.Parse(cc.n_plaza))); //
                    Console.WriteLine((Clientes_HoraEntrada_alta.Text.Equals(cc.Hora_entrada))); //
                    Console.WriteLine((Clientes_HoraPeriodo_alta.Text.Equals(cc.Hora_salida))); //
                    Console.WriteLine((email_cliente2.Text.Equals(cc.mail2))); //
                    Console.WriteLine((pos == cc.DeBaja)); //
                    Console.WriteLine((Clientes_FechaPeriodo_alta.SelectedDate == cc.fecha_entrada_estado)); //
                    Console.WriteLine((Clientes_FechaPago_alta.SelectedDate == cc.fecha_pago));
                    Console.WriteLine((medidas_alta.Text.Equals(cc.Medidas_Vehiculo1)));

                    if (numero_secreto.Text.Equals(cc.numero_secreto.ToString()) && caducidad.Text.Equals(cd) && caducidad1.Text.Equals(cd2) && titular_tarjeta.Text.Equals(cc.titular) && numero_tarjeta.Text.Equals(cc.n_tarjeta.ToString()) && mail_cliente.Text.Equals(cc.mail) && telefonos_cliente2.Text.Equals(cc.telefon2) && telefonos_cliente.Text.Equals(cc.telefon1) && pais.Text.Equals(cc.Pais) && provincia.Text.Equals(cc.Provincia) && poblacion_cliente.Text.Equals(cc.poblacio) && CP.Text.Equals(cc.codigo_postal) && puerta.Text.Equals(cc.Puerta) && piso.Text.Equals(cc.Piso) && numero.Text.Equals(cc.Numero) && direccion_cliente.Text.Equals(cc.direccion) && dni.Text.Equals(cc.dni) && apellidos_cliente.Text.Equals(cc.apellidos_cliente) && nombre_cliente.Text.Equals(cc.nombre_cliente) && numero_cliente.Text.Equals(cc.n_cliemte + "") && Clientes_FechaEntrada.SelectedDate == cc.Fecha_In && Clientes_FechaSalida.SelectedDate == cc.Fecha_Out && vehiculo1.Text.Equals(cc.Vehiculo1) && matricula1.Text.Equals(cc.matricula1) && vehiculo2.Text.Equals(cc.Vehiculo2) && matricula2.Text.Equals(cc.matricula2) && vehiculo3.Text.Equals(cc.Vehiculo3) && matricula3.Text.Equals(cc.matricula3) && vehiculo4.Text.Equals(cc.Vehiculo4) && matricula2.Text.Equals(cc.matricula2) && pot == cc.Potencia && nota1.Text.Equals(cc.Nota1) && p.id == int.Parse(cc.n_plaza) && Clientes_HoraEntrada.Text.Equals(cc.Hora_entrada) && Clientes_HoraSalida.Text.Equals(cc.Hora_salida) && Iban.Text.Equals(cc.iban) && Swift.Text.Equals(cc.swift) && entidad_bancaria.Text.Equals(cc.entidad_bacnaria) && Iban2.Text.Equals(cc.iban2) && Swift2.Text.Equals(cc.swift2) && entidad_bancaria2.Text.Equals(cc.entidad_bacnaria2) && mail_cliente2.Text.Equals(cc.mail2) && pos == cc.DeBaja && Fecha_Entrada_Estado.SelectedDate == cc.fecha_entrada_estado && Fecha_Contrato.SelectedDate == cc.fecha_contrato && Fecha_Pago.SelectedDate == cc.fecha_pago && medidas_vehiculo1.Text.Equals(cc.Medidas_Vehiculo1))
                    {
                        Console.WriteLine("42166");
                        change_client.IsEnabled = false;

                        change_client.IsEnabled = false;
                        safe = false;
                        //añadir_evento.IsEnabled = false;
                    }
                    else
                    {
                        Console.WriteLine("!42166");
                        change_client.IsEnabled = true;

                        change_client.IsEnabled = true;
                        safe = true;
                        //añadir_evento.IsEnabled = true;
                    }

                    try
                    {

                      




                        if (!(numero_cliente.Text.Equals(cc.n_cliemte + "")))
                        {
                            numero_cliente.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            numero_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        }
                        Parcelas pr = numero_plaza.SelectedItem as Parcelas;
                        if (pr != null)
                        {
                            if (cc.n_plaza != pr.id + "")
                            {

                                numero_plaza.Foreground = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                numero_plaza.Foreground = Brushes.Black;

                            }
                        }
                        else
                        {
                            if (numero_plaza.SelectedItem != null)
                                numero_plaza.BorderBrush = Brushes.Red;
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                numero_plaza.Foreground = Brushes.Black;
                            }
                        }




                        if (!(cc.nombre_cliente.Equals(nombre_cliente.Text)))
                        {
                            nombre_cliente.BorderBrush = Brushes.Red;


                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            nombre_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }


                        if (!(cc.apellidos_cliente.Equals(apellidos_cliente.Text)))
                        {
                            apellidos_cliente.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            apellidos_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }


                        if (!(cc.dni.Equals(dni.Text)))
                        {
                            dni.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            dni.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }



                        if (!(cc.direccion.Equals(direccion_cliente.Text)))
                        {

                            direccion_cliente.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            direccion_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(cc.poblacio.Equals(poblacion_cliente.Text)))
                        {
                            poblacion_cliente.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            poblacion_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(cc.telefon1.Equals(telefonos_cliente.Text)))
                        {

                            telefonos_cliente.BorderBrush = Brushes.Red;


                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            telefonos_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(cc.telefon2.Equals(telefonos_cliente2.Text)))
                        {
                            telefonos_cliente2.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            telefonos_cliente2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!cc.codigo_postal.Equals(CP.Text))
                        {
                            CP.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            CP.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(cc.mail.Equals(mail_cliente.Text)))
                        {
                            mail_cliente.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            mail_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(cc.mail2.Equals(mail_cliente2.Text)))
                        {
                            mail_cliente2.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            mail_cliente2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        /*u.Luz = "s";
                        u.Nota1 = "";
                        u.Nota2 = "";*/
                        /*if (!(cc.Metodo_Pago.ToString().Equals(Metodo_pago.Text)))
                        {
                            a = true;
                            sql_query += "Metodo_Pago=" + Metodo_pago.SelectedIndex + ", ";
                            parametros.Add("Metodo_Pago:" + Metodo_pago.SelectedIndex);
                        }*/

                        if (!(cc.titular.Equals(titular_tarjeta.Text)))
                        {
                            titular_tarjeta.BorderBrush = Brushes.Red;


                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            titular_tarjeta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        string fecha = caducidad + "/" + caducidad1;
                        if (cc.caducidad.Contains("/"))
                            if (!(cc.caducidad.Equals(caducidad.Text + "/" + caducidad1.Text)))
                            {
                                caducidad.BorderBrush = Brushes.Red;
                                caducidad1.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                caducidad.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                                caducidad1.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                        if (!(cc.numero_secreto.Equals(numero_secreto.Text)))
                        {
                            numero_secreto.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            numero_secreto.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(cc.n_tarjeta.Equals(numero_tarjeta.Text)))
                        {
                            numero_tarjeta.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            numero_tarjeta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(cc.entidad_bacnaria.Equals(entidad_bancaria.Text)))
                        {
                            entidad_bancaria.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            entidad_bancaria.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(cc.iban.Equals(Iban.Text)))
                        {
                            Iban.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Iban.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(cc.swift.Equals(Swift.Text)))
                        {
                            Swift.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Swift.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }



                        if (!(cc.Pais.Equals(pais.Text)))
                        {
                            pais.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            pais.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(cc.Numero.Equals(numero.Text)))
                        {
                            numero.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            numero.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(cc.Piso.Equals(piso.Text)))
                        {
                            piso.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            piso.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(cc.Puerta.Equals(puerta.Text)))
                        {
                            puerta.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            puerta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(cc.Provincia.Equals(provincia.Text)))
                        {
                            provincia.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            provincia.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }



                        if (!(Clientes_FechaEntrada.SelectedDate.Equals(cc.Fecha_In)))
                        {
                            Clientes_FechaEntrada.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Clientes_FechaEntrada.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(Clientes_FechaSalida.SelectedDate.Equals(cc.Fecha_Out)))
                        {
                            Clientes_FechaSalida.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Clientes_FechaSalida.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(Vehiculo1_alta.Text.Equals(cc.Vehiculo1)))
                        {
                            vehiculo1.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            vehiculo1.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(matricula1.Text.Equals(cc.matricula1)))
                        {
                            matricula1.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            matricula1.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(Vehiculo2_alta.Text.Equals(cc.Vehiculo2)))
                        {
                            vehiculo2.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            vehiculo2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(matricula2.Text.Equals(cc.matricula2)))
                        {
                            matricula1.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            matricula2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(Vehiculo3_alta.Text.Equals(cc.Vehiculo3)))
                        {
                            vehiculo3.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            vehiculo3.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(matricula3.Text.Equals(cc.matricula3)))
                        {
                            matricula3.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            matricula3.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(matricula4.Text.Equals(cc.matricula4)))
                        {
                            matricula3.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            matricula4.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                       

                        
                        int pott = 0;
                        if (Potencia.SelectedItem != null)
                        {
                            Potencia poten = Potencia.SelectedItem as Potencia;
                            if (cc.Potencia != poten.Id)
                            {
                                Potencia.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Potencia.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                        }



                        int b2 = 0;
                        if (Switch.IsChecked.Value)
                        {
                            b2 = 1;
                        }
                        if (b2 != cc.Switch)
                        {
                            Switch.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Switch.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }





                        if (!nota1.Text.Equals(cc.Nota1))
                        {

                            nota1.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            nota1.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        try
                        {
                            DateTime dt2 = (DateTime)Clientes_HoraEntrada.Value;

                            if (!dt2.ToString("H:mm").Equals(cc.Hora_entrada))
                            {
                                Clientes_HoraEntrada.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_HoraEntrada.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                        }
                        catch (Exception ee)
                        {
                            var st = new StackTrace(ee, true); // Get the top stack frame var frame = st.GetFrame(0); // Get the line number from the stack frame   var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                            var frame = st.GetFrame(0);
                            var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                            Peta(ee, line + "");
                            Console.WriteLine(line + ": " + ee.Message);
                        }
                        DateTime dt3 = (DateTime)Clientes_HoraSalida.Value;
                        if (!dt3.ToString("H:mm").Equals(cc.Hora_salida))
                        {
                            Clientes_HoraSalida.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Clientes_HoraSalida.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(cc.entidad_bacnaria2.Equals(entidad_bancaria2.Text)))
                        {

                            entidad_bancaria2.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            entidad_bancaria2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(cc.iban2.Equals(Iban2.Text)))
                        {
                            Iban2.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Iban2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(cc.swift2.Equals(Swift2.Text)))
                        {
                            Swift2.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Swift2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        bool bb = false;
                        if (bdr2.HorizontalAlignment == HorizontalAlignment.Left)
                            pos = true;
                        /*if (!(cc.DeBaja == bb))
                        {
                            numero_cliente.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            apellidos_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }*/


                        if (!Fecha_Entrada_Estado.SelectedDate.Equals(cc.fecha_entrada_estado))
                        {
                            Fecha_Entrada_Estado.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Fecha_Entrada_Estado.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!Fecha_Contrato.SelectedDate.Equals(cc.fecha_contrato))
                        {
                            Fecha_Contrato.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Fecha_Contrato.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(cc.fecha_pago.Equals(Fecha_Pago.SelectedDate)))
                        {
                            Fecha_Pago.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Fecha_Pago.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(cc.Medidas_Vehiculo1.Equals(medidas_vehiculo1.Text)))
                        {
                            medidas_vehiculo1.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            medidas_vehiculo1.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                    }
                    catch
                    {

                    }
                   

                    

                }
        }

        private void Vehiculo1_alta_KeyDown4(object sender, KeyEventArgs e)
        {
            ComboBox comboBox = (ComboBox)sender;
            TextBox textBox = comboBox.Template.FindName("PART_EditableTextBox", comboBox) as TextBox;
            if (textBox != null)
            {
                Dispatcher.InvokeAsync(() =>
                {
                    textBox.Select(textBox.Text.Length, 0);
                });
            }
            if (mirar2)
                if (Clientes.SelectedItem != null && !newclient)
                {


                    Parcelas pa = numero_plaza_alta.SelectedItem as Parcelas;
                    DateTime dt1 = (DateTime)Clientes_HoraEntrada_alta.Value;
                    DateTime dt2 = (DateTime)Clientes_HoraSalida.Value;
                    Clientes cc = Clientes.SelectedItem as Clientes;
                    bool a = false;


                    if (!dt1.ToString("H:mm").Equals(cc.Hora_entrada))
                    {
                        Clientes_HoraEntrada_alta.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Clientes_HoraEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }
                    if (!dt2.ToString("H:mm").Equals(cc.Hora_salida))
                    {
                        Clientes_HoraSalida.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Clientes_HoraSalida.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }



                    if (!(cc is null))
                    {
                        int pot = 0;
                        if (Potencia_alta.SelectedItem != null)
                        {
                            Potencia pp = Potencia_alta.SelectedItem as Potencia;

                            pot = pp.Id;
                        }
                        int b = 0;
                        if (on_off_border.HorizontalAlignment == HorizontalAlignment.Right)
                        {
                            b = 1;
                        }
                        Parcelas p = numero_plaza.SelectedItem as Parcelas;


                        if (p == null)
                            p = new Parcelas();

                        if (cc.Fecha_In != null)
                        {

                        }
                        else
                        {

                        }


                        if (p.id == null)
                            p.id = 0;
                        bool pos = false;
                        if (alta_baja.HorizontalAlignment == HorizontalAlignment.Right)
                            pos = true;
                        //console.writeline(p.id + " " + cc.n_plaza);

                        if (email_cliente.Text.Equals(cc.mail) && telefono2_cliente_alta.Text.Equals(cc.telefon2) && telefono_cliente_alta.Text.Equals(cc.telefon1) && pais_cliente_alta.Text.Equals(cc.Pais) && provincia_cliente_alta.Text.Equals(cc.Provincia) && poblacion_cliente_alta.Text.Equals(cc.poblacio) && cp_cliente_alta.Text.Equals(cc.codigo_postal) && direccion_cliente_alta.Text.Equals(cc.direccion) && dni_cliente_alta.Text.Equals(cc.dni) && apellido_cliente_alta.Text.Equals(cc.apellidos_cliente) && nombre_cliente_alta.Text.Equals(cc.nombre_cliente) && numero_cliente_alta.Text.Equals(cc.n_cliemte + "") && Clientes_FechaEntrada_alta.SelectedDate == cc.Fecha_In && Clientes_FechaSalida_alta.SelectedDate == cc.Fecha_Out && Vehiculo1_alta.Text.Equals(cc.Vehiculo1) && bastidor1_alta.Text.Equals(cc.matricula1) && Vehiculo2_alta.Text.Equals(cc.Vehiculo2) && bastidor2_alta.Text.Equals(cc.matricula2) && pot == cc.Potencia && nota1_alta.Text.Equals(cc.Nota1) && b == cc.Switch && p.id == int.Parse(cc.n_plaza) && Clientes_HoraEntrada_alta.Text.Equals(cc.Hora_entrada) && Clientes_HoraPeriodo_alta.Text.Equals(cc.Hora_salida) && email_cliente2.Text.Equals(cc.mail2) && pos == cc.DeBaja && Clientes_FechaPeriodo_alta.SelectedDate == cc.fecha_entrada_estado && Clientes_FechaPago_alta.SelectedDate == cc.fecha_pago && medidas_alta.Text.Equals(cc.Medidas_Vehiculo1))
                        {
                            change_client.IsEnabled = false;

                            change_client.IsEnabled = false;
                            safe = false;
                            //añadir_evento.IsEnabled = false;
                        }
                        else
                        {
                            change_client.IsEnabled = true;

                            change_client.IsEnabled = true;
                            safe = true;
                            //añadir_evento.IsEnabled = true;
                        }

                        try
                        {

                            if (!(numero_cliente_alta.Text.Equals(cc.n_cliemte + "")))
                            {
                                numero_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                numero_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                            }
                            Parcelas pr = numero_plaza_alta.SelectedItem as Parcelas;
                            if (pr != null)
                                if (cc.n_plaza != pr.id + "")
                                {

                                    numero_plaza_alta.BorderBrush = Brushes.Red;
                                }
                                else
                                {
                                    BrushConverter bc = new BrushConverter();
                                    numero_plaza_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                                }




                            if (!(cc.nombre_cliente.Equals(nombre_cliente_alta.Text)))
                            {
                                nombre_cliente_alta.BorderBrush = Brushes.Red;


                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nombre_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                            if (!(cc.apellidos_cliente.Equals(apellido_cliente_alta.Text)))
                            {
                                apellido_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                apellido_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                            if (!(cc.dni.Equals(dni_cliente_alta.Text)))
                            {
                                dni_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                dni_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            if (!(cc.direccion.Equals(direccion_cliente_alta.Text)))
                            {

                                direccion_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                direccion_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.poblacio.Equals(poblacion_cliente_alta.Text)))
                            {
                                poblacion_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                poblacion_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.telefon1.Equals(telefono_cliente_alta.Text)))
                            {

                                telefono_cliente_alta.BorderBrush = Brushes.Red;


                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                telefono_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.telefon2.Equals(telefono2_cliente_alta.Text)))
                            {
                                telefono2_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                telefono2_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!cc.codigo_postal.Equals(cp_cliente_alta.Text))
                            {
                                cp_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                cp_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(cc.mail.Equals(email_cliente.Text)))
                            {
                                email_cliente.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                email_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(cc.mail2.Equals(email_cliente2.Text)))
                            {
                                email_cliente2.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                email_cliente2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            /*u.Luz = "s";
                            u.Nota1 = "";
                            u.Nota2 = "";*/
                            /*if (!(cc.Metodo_Pago.ToString().Equals(Metodo_pago.Text)))
                            {
                                a = true;
                                sql_query += "Metodo_Pago=" + Metodo_pago.SelectedIndex + ", ";
                                parametros.Add("Metodo_Pago:" + Metodo_pago.SelectedIndex);
                            }*/




                            if (!(cc.Pais.Equals(pais_cliente_alta.Text)))
                            {
                                pais_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                pais_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.Provincia.Equals(provincia_cliente_alta.Text)))
                            {
                                provincia_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                provincia_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            if (!(Clientes_FechaEntrada_alta.SelectedDate.Equals(cc.Fecha_In)))
                            {
                                Clientes_FechaEntrada_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(Clientes_FechaSalida_alta.SelectedDate.Equals(cc.Fecha_Out)))
                            {
                                Clientes_FechaSalida_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaSalida_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(Vehiculo1_alta.Text.Equals(cc.Vehiculo1)))
                            {
                               Vehiculo1_alta.Foreground = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo1_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor1_alta.Text.Equals(cc.matricula1)))
                            {
                                bastidor1_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor1_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(Vehiculo2_alta.Text.Equals(cc.Vehiculo2)))
                            {
                               Vehiculo2_alta.Foreground = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo2_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor2_alta.Text.Equals(cc.matricula2)))
                            {
                                bastidor2_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor2_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }




                            if (!(Vehiculo3_alta.Text.Equals(cc.Vehiculo3)))
                            {
                                Vehiculo3_alta.Foreground = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo3_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor3_alta.Text.Equals(cc.matricula3)))
                            {
                                bastidor3_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor3_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(Vehiculo4_alta.Text.Equals(cc.Vehiculo4)))
                            {
                                Vehiculo4_alta.Foreground = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo4_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor4_alta.Text.Equals(cc.matricula4)))
                            {
                                bastidor4_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor4_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            int pott = 0;
                            if (Potencia_alta.SelectedItem != null)
                            {
                                Potencia poten = Potencia_alta.SelectedItem as Potencia;
                                if (cc.Potencia != poten.Id)
                                {
                                    Potencia_alta.BorderBrush = Brushes.Red;
                                }
                                else
                                {
                                    BrushConverter bc = new BrushConverter();
                                    Potencia_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                                }
                            }


                            int bbb = 0;
                            if (on_off_border.HorizontalAlignment == HorizontalAlignment.Right)
                            {
                                on_off_border.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                on_off_border.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }





                            if (!nota1_alta.Text.Equals(cc.Nota1))
                            {

                                nota1_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nota1_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!nota1_alta2.Text.Equals(cc.Nota2))
                            {

                                nota1_alta2.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nota1_alta2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            try
                            {


                                if (!dt1.ToString("H:mm").Equals(cc.Hora_entrada))
                                {
                                    Clientes_HoraEntrada_alta.BorderBrush = Brushes.Red;

                                }
                                else
                                {
                                    BrushConverter bc = new BrushConverter();
                                    Clientes_HoraEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                                }
                            }
                            catch (Exception ee){
                                var st = new StackTrace(ee, true); // Get the top stack frame var frame = st.GetFrame(0); // Get the line number from the stack frame   var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                                var frame = st.GetFrame(0);
                                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                                Peta(ee, line + "");
                                Console.WriteLine(line + ": " + ee.Message);
                            }
                            DateTime dt3 = (DateTime)Clientes_HoraPeriodo_alta.Value;
                            if (!dt3.ToString("H:mm").Equals(cc.Hora_salida))
                            {
                                Clientes_HoraPeriodo_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_HoraPeriodo_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }




                            /*if (!(cc.DeBaja == bb))
                            {
                                numero_cliente.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                apellidos_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }*/


                            if (!Clientes_FechaPeriodo_alta.SelectedDate.Equals(cc.fecha_entrada_estado))
                            {
                                Clientes_FechaPeriodo_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaPeriodo_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            if (!(cc.fecha_pago.Equals(Clientes_FechaPago_alta.SelectedDate)))
                            {
                                Clientes_FechaPago_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaPago_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(cc.Medidas_Vehiculo1.Equals(medidas_alta.Text)))
                            {
                                medidas_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                medidas_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                        }
                        catch
                        {

                        }

                    }

                }
                else
                {
                    if (newclient)
                        if (numero_cliente_alta.Text.Length > 0 && nombre_cliente_alta.Text.Length > 0 && direccion_cliente_alta.Text.Length > 0 && cp_cliente_alta.Text.Length > 0 && provincia_cliente_alta.Text.Length > 0 && pais_cliente_alta.Text.Length > 0 && telefono_cliente_alta.Text.Length > 0 && email_cliente.Text.Length > 0 && Vehiculo1_alta.Text.Length > 0 && bastidor1_alta.Text.Length > 0 && Clientes_FechaEntrada_alta.SelectedDate != null && Clientes_HoraEntrada_alta.Text.Length > 0 && Clientes_FechaPeriodo_alta.SelectedDate != null && Clientes_HoraPeriodo_alta.Text.Length > 0 && apellido_cliente_alta.Text.Length > 0 && dni_cliente_alta.Text.Length > 0 && poblacion_cliente_alta.Text.Length > 0)
                            change_client.IsEnabled = true;
                        else
                            change_client.IsEnabled = false;


                }
        }

        private void Vehiculo1_alta_KeyDown3(object sender, KeyEventArgs e)
        {
            ComboBox comboBox = (ComboBox)sender;
            TextBox textBox = comboBox.Template.FindName("PART_EditableTextBox", comboBox) as TextBox;
            if (textBox != null)
            {
                Dispatcher.InvokeAsync(() =>
                {
                    textBox.Select(textBox.Text.Length, 0);
                });
            }
            if (mirar2)
                if (Clientes.SelectedItem != null && !newclient)
                {


                    Parcelas pa = numero_plaza_alta.SelectedItem as Parcelas;
                    DateTime dt1 = (DateTime)Clientes_HoraEntrada_alta.Value;
                    DateTime dt2 = (DateTime)Clientes_HoraSalida.Value;
                    Clientes cc = Clientes.SelectedItem as Clientes;
                    bool a = false;


                    if (!dt1.ToString("H:mm").Equals(cc.Hora_entrada))
                    {
                        Clientes_HoraEntrada_alta.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Clientes_HoraEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }
                    if (!dt2.ToString("H:mm").Equals(cc.Hora_salida))
                    {
                        Clientes_HoraSalida.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Clientes_HoraSalida.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }



                    if (!(cc is null))
                    {
                        int pot = 0;
                        if (Potencia_alta.SelectedItem != null)
                        {
                            Potencia pp = Potencia_alta.SelectedItem as Potencia;

                            pot = pp.Id;
                        }
                        int b = 0;
                        if (on_off_border.HorizontalAlignment == HorizontalAlignment.Right)
                        {
                            b = 1;
                        }
                        Parcelas p = numero_plaza.SelectedItem as Parcelas;


                        if (p == null)
                            p = new Parcelas();

                        if (cc.Fecha_In != null)
                        {

                        }
                        else
                        {

                        }


                        if (p.id == null)
                            p.id = 0;
                        bool pos = false;
                        if (alta_baja.HorizontalAlignment == HorizontalAlignment.Right)
                            pos = true;
                        //console.writeline(p.id + " " + cc.n_plaza);

                        if (email_cliente.Text.Equals(cc.mail) && telefono2_cliente_alta.Text.Equals(cc.telefon2) && telefono_cliente_alta.Text.Equals(cc.telefon1) && pais_cliente_alta.Text.Equals(cc.Pais) && provincia_cliente_alta.Text.Equals(cc.Provincia) && poblacion_cliente_alta.Text.Equals(cc.poblacio) && cp_cliente_alta.Text.Equals(cc.codigo_postal) && direccion_cliente_alta.Text.Equals(cc.direccion) && dni_cliente_alta.Text.Equals(cc.dni) && apellido_cliente_alta.Text.Equals(cc.apellidos_cliente) && nombre_cliente_alta.Text.Equals(cc.nombre_cliente) && numero_cliente_alta.Text.Equals(cc.n_cliemte + "") && Clientes_FechaEntrada_alta.SelectedDate == cc.Fecha_In && Clientes_FechaSalida_alta.SelectedDate == cc.Fecha_Out && Vehiculo1_alta.Text.Equals(cc.Vehiculo1) && bastidor1_alta.Text.Equals(cc.matricula1) && Vehiculo2_alta.Text.Equals(cc.Vehiculo2) && bastidor2_alta.Text.Equals(cc.matricula2) && pot == cc.Potencia && nota1_alta.Text.Equals(cc.Nota1) && b == cc.Switch && p.id == int.Parse(cc.n_plaza) && Clientes_HoraEntrada_alta.Text.Equals(cc.Hora_entrada) && Clientes_HoraPeriodo_alta.Text.Equals(cc.Hora_salida) && email_cliente2.Text.Equals(cc.mail2) && pos == cc.DeBaja && Clientes_FechaPeriodo_alta.SelectedDate == cc.fecha_entrada_estado && Clientes_FechaPago_alta.SelectedDate == cc.fecha_pago && medidas_alta.Text.Equals(cc.Medidas_Vehiculo1))
                        {
                            change_client.IsEnabled = false;

                            change_client.IsEnabled = false;
                            safe = false;
                            //añadir_evento.IsEnabled = false;
                        }
                        else
                        {
                            change_client.IsEnabled = true;

                            change_client.IsEnabled = true;
                            safe = true;
                            //añadir_evento.IsEnabled = true;
                        }

                        try
                        {

                            if (!(numero_cliente_alta.Text.Equals(cc.n_cliemte + "")))
                            {
                                numero_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                numero_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                            }
                            Parcelas pr = numero_plaza_alta.SelectedItem as Parcelas;
                            if (pr != null)
                                if (cc.n_plaza != pr.id + "")
                                {

                                    numero_plaza_alta.BorderBrush = Brushes.Red;
                                }
                                else
                                {
                                    BrushConverter bc = new BrushConverter();
                                    numero_plaza_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                                }




                            if (!(cc.nombre_cliente.Equals(nombre_cliente_alta.Text)))
                            {
                                nombre_cliente_alta.BorderBrush = Brushes.Red;


                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nombre_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                            if (!(cc.apellidos_cliente.Equals(apellido_cliente_alta.Text)))
                            {
                                apellido_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                apellido_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                            if (!(cc.dni.Equals(dni_cliente_alta.Text)))
                            {
                                dni_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                dni_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            if (!(cc.direccion.Equals(direccion_cliente_alta.Text)))
                            {

                                direccion_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                direccion_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.poblacio.Equals(poblacion_cliente_alta.Text)))
                            {
                                poblacion_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                poblacion_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.telefon1.Equals(telefono_cliente_alta.Text)))
                            {

                                telefono_cliente_alta.BorderBrush = Brushes.Red;


                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                telefono_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.telefon2.Equals(telefono2_cliente_alta.Text)))
                            {
                                telefono2_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                telefono2_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!cc.codigo_postal.Equals(cp_cliente_alta.Text))
                            {
                                cp_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                cp_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(cc.mail.Equals(email_cliente.Text)))
                            {
                                email_cliente.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                email_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(cc.mail2.Equals(email_cliente2.Text)))
                            {
                                email_cliente2.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                email_cliente2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            /*u.Luz = "s";
                            u.Nota1 = "";
                            u.Nota2 = "";*/
                            /*if (!(cc.Metodo_Pago.ToString().Equals(Metodo_pago.Text)))
                            {
                                a = true;
                                sql_query += "Metodo_Pago=" + Metodo_pago.SelectedIndex + ", ";
                                parametros.Add("Metodo_Pago:" + Metodo_pago.SelectedIndex);
                            }*/




                            if (!(cc.Pais.Equals(pais_cliente_alta.Text)))
                            {
                                pais_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                pais_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.Provincia.Equals(provincia_cliente_alta.Text)))
                            {
                                provincia_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                provincia_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            if (!(Clientes_FechaEntrada_alta.SelectedDate.Equals(cc.Fecha_In)))
                            {
                                Clientes_FechaEntrada_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(Clientes_FechaSalida_alta.SelectedDate.Equals(cc.Fecha_Out)))
                            {
                                Clientes_FechaSalida_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaSalida_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(Vehiculo1_alta.Text.Equals(cc.Vehiculo1)))
                            {
                               Vehiculo1_alta.Foreground = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo1_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor1_alta.Text.Equals(cc.matricula1)))
                            {
                                bastidor1_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor1_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(Vehiculo2_alta.Text.Equals(cc.Vehiculo2)))
                            {
                               Vehiculo2_alta.Foreground = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo2_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor2_alta.Text.Equals(cc.matricula2)))
                            {
                                bastidor2_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor2_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            if (!(Vehiculo3_alta.Text.Equals(cc.Vehiculo3)))
                            {
                                Vehiculo3_alta.Foreground = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo3_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor3_alta.Text.Equals(cc.matricula3)))
                            {
                                bastidor3_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor3_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(Vehiculo4_alta.Text.Equals(cc.Vehiculo4)))
                            {
                                Vehiculo4_alta.Foreground = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo4_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor4_alta.Text.Equals(cc.matricula4)))
                            {
                                bastidor4_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor4_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                            int pott = 0;
                            if (Potencia_alta.SelectedItem != null)
                            {
                                Potencia poten = Potencia_alta.SelectedItem as Potencia;
                                if (cc.Potencia != poten.Id)
                                {
                                    Potencia_alta.BorderBrush = Brushes.Red;
                                }
                                else
                                {
                                    BrushConverter bc = new BrushConverter();
                                    Potencia_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                                }
                            }


                            int bbb = 0;
                            if (on_off_border.HorizontalAlignment == HorizontalAlignment.Right)
                            {
                                on_off_border.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                on_off_border.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }





                            if (!nota1_alta.Text.Equals(cc.Nota1))
                            {

                                nota1_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nota1_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!nota1_alta2.Text.Equals(cc.Nota2))
                            {

                                nota1_alta2.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nota1_alta2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            try
                            {


                                if (!dt1.ToString("H:mm").Equals(cc.Hora_entrada))
                                {
                                    Clientes_HoraEntrada_alta.BorderBrush = Brushes.Red;

                                }
                                else
                                {
                                    BrushConverter bc = new BrushConverter();
                                    Clientes_HoraEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                                }
                            }
                            catch (Exception ee){
                                var st = new StackTrace(ee, true); // Get the top stack frame var frame = st.GetFrame(0); // Get the line number from the stack frame   var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                                var frame = st.GetFrame(0);
                                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                                Peta(ee, line + "");
                                Console.WriteLine(line + ": " + ee.Message);
                            }
                            DateTime dt3 = (DateTime)Clientes_HoraPeriodo_alta.Value;
                            if (!dt3.ToString("H:mm").Equals(cc.Hora_salida))
                            {
                                Clientes_HoraPeriodo_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_HoraPeriodo_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }




                            /*if (!(cc.DeBaja == bb))
                            {
                                numero_cliente.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                apellidos_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }*/


                            if (!Clientes_FechaPeriodo_alta.SelectedDate.Equals(cc.fecha_entrada_estado))
                            {
                                Clientes_FechaPeriodo_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaPeriodo_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            if (!(cc.fecha_pago.Equals(Clientes_FechaPago_alta.SelectedDate)))
                            {
                                Clientes_FechaPago_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaPago_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(cc.Medidas_Vehiculo1.Equals(medidas_alta.Text)))
                            {
                                medidas_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                medidas_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                        }
                        catch
                        {

                        }

                    }

                }
                else
                {
                    if (newclient)
                        if (numero_cliente_alta.Text.Length > 0 && nombre_cliente_alta.Text.Length > 0 && direccion_cliente_alta.Text.Length > 0 && cp_cliente_alta.Text.Length > 0 && provincia_cliente_alta.Text.Length > 0 && pais_cliente_alta.Text.Length > 0 && telefono_cliente_alta.Text.Length > 0 && email_cliente.Text.Length > 0 && Vehiculo1_alta.Text.Length > 0 && bastidor1_alta.Text.Length > 0 && Clientes_FechaEntrada_alta.SelectedDate != null && Clientes_HoraEntrada_alta.Text.Length > 0 && Clientes_FechaPeriodo_alta.SelectedDate != null && Clientes_HoraPeriodo_alta.Text.Length > 0 && apellido_cliente_alta.Text.Length > 0 && dni_cliente_alta.Text.Length > 0 && poblacion_cliente_alta.Text.Length > 0)
                            change_client.IsEnabled = true;
                        else
                            change_client.IsEnabled = false;


                }
        }

        private void Vehiculo1_alta_KeyDown2(object sender, KeyEventArgs e)
        {
            ComboBox comboBox = (ComboBox)sender;
            TextBox textBox = comboBox.Template.FindName("PART_EditableTextBox", comboBox) as TextBox;
            if (textBox != null)
            {
                Dispatcher.InvokeAsync(() =>
                {
                    textBox.Select(textBox.Text.Length, 0);
                });
            }
            if (mirar2)
                if (Clientes.SelectedItem != null && !newclient)
                {


                    Parcelas pa = numero_plaza_alta.SelectedItem as Parcelas;
                    DateTime dt1 = (DateTime)Clientes_HoraEntrada_alta.Value;
                    DateTime dt2 = (DateTime)Clientes_HoraSalida.Value;
                    Clientes cc = Clientes.SelectedItem as Clientes;
                    bool a = false;


                    if (!dt1.ToString("H:mm").Equals(cc.Hora_entrada))
                    {
                        Clientes_HoraEntrada_alta.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Clientes_HoraEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }
                    if (!dt2.ToString("H:mm").Equals(cc.Hora_salida))
                    {
                        Clientes_HoraSalida.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Clientes_HoraSalida.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }



                    if (!(cc is null))
                    {
                        int pot = 0;
                        if (Potencia_alta.SelectedItem != null)
                        {
                            Potencia pp = Potencia_alta.SelectedItem as Potencia;

                            pot = pp.Id;
                        }
                        int b = 0;
                        if (on_off_border.HorizontalAlignment == HorizontalAlignment.Right)
                        {
                            b = 1;
                        }
                        Parcelas p = numero_plaza.SelectedItem as Parcelas;


                        if (p == null)
                            p = new Parcelas();

                        if (cc.Fecha_In != null)
                        {

                        }
                        else
                        {

                        }


                        if (p.id == null)
                            p.id = 0;
                        bool pos = false;
                        if (alta_baja.HorizontalAlignment == HorizontalAlignment.Right)
                            pos = true;
                        //console.writeline(p.id + " " + cc.n_plaza);

                        if (email_cliente.Text.Equals(cc.mail) && telefono2_cliente_alta.Text.Equals(cc.telefon2) && telefono_cliente_alta.Text.Equals(cc.telefon1) && pais_cliente_alta.Text.Equals(cc.Pais) && provincia_cliente_alta.Text.Equals(cc.Provincia) && poblacion_cliente_alta.Text.Equals(cc.poblacio) && cp_cliente_alta.Text.Equals(cc.codigo_postal) && direccion_cliente_alta.Text.Equals(cc.direccion) && dni_cliente_alta.Text.Equals(cc.dni) && apellido_cliente_alta.Text.Equals(cc.apellidos_cliente) && nombre_cliente_alta.Text.Equals(cc.nombre_cliente) && numero_cliente_alta.Text.Equals(cc.n_cliemte + "") && Clientes_FechaEntrada_alta.SelectedDate == cc.Fecha_In && Clientes_FechaSalida_alta.SelectedDate == cc.Fecha_Out && Vehiculo1_alta.Text.Equals(cc.Vehiculo1) && bastidor1_alta.Text.Equals(cc.matricula1) && Vehiculo2_alta.Text.Equals(cc.Vehiculo2) && bastidor2_alta.Text.Equals(cc.matricula2) && pot == cc.Potencia && nota1_alta.Text.Equals(cc.Nota1) && b == cc.Switch && p.id == int.Parse(cc.n_plaza) && Clientes_HoraEntrada_alta.Text.Equals(cc.Hora_entrada) && Clientes_HoraPeriodo_alta.Text.Equals(cc.Hora_salida) && email_cliente2.Text.Equals(cc.mail2) && pos == cc.DeBaja && Clientes_FechaPeriodo_alta.SelectedDate == cc.fecha_entrada_estado && Clientes_FechaPago_alta.SelectedDate == cc.fecha_pago && medidas_alta.Text.Equals(cc.Medidas_Vehiculo1))
                        {
                            change_client.IsEnabled = false;

                            change_client.IsEnabled = false;
                            safe = false;
                            //añadir_evento.IsEnabled = false;
                        }
                        else
                        {
                            change_client.IsEnabled = true;

                            change_client.IsEnabled = true;
                            safe = true;
                            //añadir_evento.IsEnabled = true;
                        }

                        try
                        {

                            if (!(numero_cliente_alta.Text.Equals(cc.n_cliemte + "")))
                            {
                                numero_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                numero_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                            }
                            Parcelas pr = numero_plaza_alta.SelectedItem as Parcelas;
                            if (pr != null)
                                if (cc.n_plaza != pr.id + "")
                                {

                                    numero_plaza_alta.BorderBrush = Brushes.Red;
                                }
                                else
                                {
                                    BrushConverter bc = new BrushConverter();
                                    numero_plaza_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                                }




                            if (!(cc.nombre_cliente.Equals(nombre_cliente_alta.Text)))
                            {
                                nombre_cliente_alta.BorderBrush = Brushes.Red;


                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nombre_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                            if (!(cc.apellidos_cliente.Equals(apellido_cliente_alta.Text)))
                            {
                                apellido_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                apellido_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                            if (!(cc.dni.Equals(dni_cliente_alta.Text)))
                            {
                                dni_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                dni_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            if (!(cc.direccion.Equals(direccion_cliente_alta.Text)))
                            {

                                direccion_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                direccion_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.poblacio.Equals(poblacion_cliente_alta.Text)))
                            {
                                poblacion_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                poblacion_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.telefon1.Equals(telefono_cliente_alta.Text)))
                            {

                                telefono_cliente_alta.BorderBrush = Brushes.Red;


                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                telefono_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.telefon2.Equals(telefono2_cliente_alta.Text)))
                            {
                                telefono2_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                telefono2_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!cc.codigo_postal.Equals(cp_cliente_alta.Text))
                            {
                                cp_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                cp_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(cc.mail.Equals(email_cliente.Text)))
                            {
                                email_cliente.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                email_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(cc.mail2.Equals(email_cliente2.Text)))
                            {
                                email_cliente2.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                email_cliente2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            /*u.Luz = "s";
                            u.Nota1 = "";
                            u.Nota2 = "";*/
                            /*if (!(cc.Metodo_Pago.ToString().Equals(Metodo_pago.Text)))
                            {
                                a = true;
                                sql_query += "Metodo_Pago=" + Metodo_pago.SelectedIndex + ", ";
                                parametros.Add("Metodo_Pago:" + Metodo_pago.SelectedIndex);
                            }*/




                            if (!(cc.Pais.Equals(pais_cliente_alta.Text)))
                            {
                                pais_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                pais_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.Provincia.Equals(provincia_cliente_alta.Text)))
                            {
                                provincia_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                provincia_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            if (!(Clientes_FechaEntrada_alta.SelectedDate.Equals(cc.Fecha_In)))
                            {
                                Clientes_FechaEntrada_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(Clientes_FechaSalida_alta.SelectedDate.Equals(cc.Fecha_Out)))
                            {
                                Clientes_FechaSalida_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaSalida_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(Vehiculo1_alta.Text.Equals(cc.Vehiculo1)))
                            {
                               Vehiculo1_alta.Foreground = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo1_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor1_alta.Text.Equals(cc.matricula1)))
                            {
                                bastidor1_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor1_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(Vehiculo2_alta.Text.Equals(cc.Vehiculo2)))
                            {
                               Vehiculo2_alta.Foreground = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo2_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor2_alta.Text.Equals(cc.matricula2)))
                            {
                                bastidor2_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor2_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            if (!(Vehiculo3_alta.Text.Equals(cc.Vehiculo3)))
                            {
                                Vehiculo3_alta.Foreground = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo3_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor3_alta.Text.Equals(cc.matricula3)))
                            {
                                bastidor3_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor3_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(Vehiculo4_alta.Text.Equals(cc.Vehiculo4)))
                            {
                                Vehiculo4_alta.Foreground = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo4_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor4_alta.Text.Equals(cc.matricula4)))
                            {
                                bastidor4_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor4_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                            int pott = 0;
                            if (Potencia_alta.SelectedItem != null)
                            {
                                Potencia poten = Potencia_alta.SelectedItem as Potencia;
                                if (cc.Potencia != poten.Id)
                                {
                                    Potencia_alta.BorderBrush = Brushes.Red;
                                }
                                else
                                {
                                    BrushConverter bc = new BrushConverter();
                                    Potencia_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                                }
                            }


                            int bbb = 0;
                            if (on_off_border.HorizontalAlignment == HorizontalAlignment.Right)
                            {
                                on_off_border.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                on_off_border.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }





                            if (!nota1_alta.Text.Equals(cc.Nota1))
                            {

                                nota1_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nota1_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!nota1_alta2.Text.Equals(cc.Nota2))
                            {

                                nota1_alta2.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nota1_alta2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            try
                            {


                                if (!dt1.ToString("H:mm").Equals(cc.Hora_entrada))
                                {
                                    Clientes_HoraEntrada_alta.BorderBrush = Brushes.Red;

                                }
                                else
                                {
                                    BrushConverter bc = new BrushConverter();
                                    Clientes_HoraEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                                }
                            }
                            catch (Exception ee){
                                var st = new StackTrace(ee, true); // Get the top stack frame var frame = st.GetFrame(0); // Get the line number from the stack frame   var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                                var frame = st.GetFrame(0);
                                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                                Peta(ee, line + "");
                                Console.WriteLine(line + ": " + ee.Message);
                            }
                            DateTime dt3 = (DateTime)Clientes_HoraPeriodo_alta.Value;
                            if (!dt3.ToString("H:mm").Equals(cc.Hora_salida))
                            {
                                Clientes_HoraPeriodo_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_HoraPeriodo_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }




                            /*if (!(cc.DeBaja == bb))
                            {
                                numero_cliente.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                apellidos_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }*/


                            if (!Clientes_FechaPeriodo_alta.SelectedDate.Equals(cc.fecha_entrada_estado))
                            {
                                Clientes_FechaPeriodo_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaPeriodo_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            if (!(cc.fecha_pago.Equals(Clientes_FechaPago_alta.SelectedDate)))
                            {
                                Clientes_FechaPago_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaPago_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(cc.Medidas_Vehiculo1.Equals(medidas_alta.Text)))
                            {
                                medidas_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                medidas_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                        }
                        catch
                        {

                        }

                    }

                }
                else
                {
                    if (newclient)
                        if (numero_cliente_alta.Text.Length > 0 && nombre_cliente_alta.Text.Length > 0 && direccion_cliente_alta.Text.Length > 0 && cp_cliente_alta.Text.Length > 0 && provincia_cliente_alta.Text.Length > 0 && pais_cliente_alta.Text.Length > 0 && telefono_cliente_alta.Text.Length > 0 && email_cliente.Text.Length > 0 && Vehiculo1_alta.Text.Length > 0 && bastidor1_alta.Text.Length > 0 && Clientes_FechaEntrada_alta.SelectedDate != null && Clientes_HoraEntrada_alta.Text.Length > 0 && Clientes_FechaPeriodo_alta.SelectedDate != null && Clientes_HoraPeriodo_alta.Text.Length > 0 && apellido_cliente_alta.Text.Length > 0 && dni_cliente_alta.Text.Length > 0 && poblacion_cliente_alta.Text.Length > 0)
                            change_client.IsEnabled = true;
                        else
                            change_client.IsEnabled = false;


                }
        }

        private void Vehiculo1_alta_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            ComboBox comboBox = (ComboBox)sender;
            TextBox textBox = comboBox.Template.FindName("PART_EditableTextBox", comboBox) as TextBox;
            if (textBox != null)
            {
                Dispatcher.InvokeAsync(() =>
                {
                    textBox.Select(textBox.Text.Length, 0);
                });
            }
            if (mirar2)
                if (Clientes.SelectedItem != null && !newclient)
                {


                    Parcelas pa = numero_plaza_alta.SelectedItem as Parcelas;
                    DateTime dt1 = (DateTime)Clientes_HoraEntrada_alta.Value;
                    DateTime dt2 = (DateTime)Clientes_HoraSalida.Value;
                    Clientes cc = Clientes.SelectedItem as Clientes;
                    bool a = false;


                    if (!dt1.ToString("H:mm").Equals(cc.Hora_entrada))
                    {
                        Clientes_HoraEntrada_alta.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Clientes_HoraEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }
                    if (!dt2.ToString("H:mm").Equals(cc.Hora_salida))
                    {
                        Clientes_HoraSalida.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Clientes_HoraSalida.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }



                    if (!(cc is null))
                    {
                        int pot = 0;
                        if (Potencia_alta.SelectedItem != null)
                        {
                            Potencia pp = Potencia_alta.SelectedItem as Potencia;

                            pot = pp.Id;
                        }
                        int b = 0;
                        if (on_off_border.HorizontalAlignment == HorizontalAlignment.Right)
                        {
                            b = 1;
                        }
                        Parcelas p = numero_plaza.SelectedItem as Parcelas;


                        if (p == null)
                            p = new Parcelas();

                        if (cc.Fecha_In != null)
                        {

                        }
                        else
                        {

                        }


                        if (p.id == null)
                            p.id = 0;
                        bool pos = false;
                        if (alta_baja.HorizontalAlignment == HorizontalAlignment.Right)
                            pos = true;
                        //console.writeline(p.id + " " + cc.n_plaza);

                        if (email_cliente.Text.Equals(cc.mail) && telefono2_cliente_alta.Text.Equals(cc.telefon2) && telefono_cliente_alta.Text.Equals(cc.telefon1) && pais_cliente_alta.Text.Equals(cc.Pais) && provincia_cliente_alta.Text.Equals(cc.Provincia) && poblacion_cliente_alta.Text.Equals(cc.poblacio) && cp_cliente_alta.Text.Equals(cc.codigo_postal) && direccion_cliente_alta.Text.Equals(cc.direccion) && dni_cliente_alta.Text.Equals(cc.dni) && apellido_cliente_alta.Text.Equals(cc.apellidos_cliente) && nombre_cliente_alta.Text.Equals(cc.nombre_cliente) && numero_cliente_alta.Text.Equals(cc.n_cliemte + "") && Clientes_FechaEntrada_alta.SelectedDate == cc.Fecha_In && Clientes_FechaSalida_alta.SelectedDate == cc.Fecha_Out && Vehiculo1_alta.Text.Equals(cc.Vehiculo1) && bastidor1_alta.Text.Equals(cc.matricula1) && Vehiculo2_alta.Text.Equals(cc.Vehiculo2) && bastidor2_alta.Text.Equals(cc.matricula2) && pot == cc.Potencia && nota1_alta.Text.Equals(cc.Nota1) && b == cc.Switch && p.id == int.Parse(cc.n_plaza) && Clientes_HoraEntrada_alta.Text.Equals(cc.Hora_entrada) && Clientes_HoraPeriodo_alta.Text.Equals(cc.Hora_salida) && email_cliente2.Text.Equals(cc.mail2) && pos == cc.DeBaja && Clientes_FechaPeriodo_alta.SelectedDate == cc.fecha_entrada_estado && Clientes_FechaPago_alta.SelectedDate == cc.fecha_pago && medidas_alta.Text.Equals(cc.Medidas_Vehiculo1))
                        {
                            change_client.IsEnabled = false;

                            change_client.IsEnabled = false;
                            safe = false;
                            //añadir_evento.IsEnabled = false;
                        }
                        else
                        {
                            change_client.IsEnabled = true;

                            change_client.IsEnabled = true;
                            safe = true;
                            //añadir_evento.IsEnabled = true;
                        }

                        try
                        {

                            if (!(numero_cliente_alta.Text.Equals(cc.n_cliemte + "")))
                            {
                                numero_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                numero_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                            }
                            Parcelas pr = numero_plaza_alta.SelectedItem as Parcelas;
                            if (pr != null)
                                if (cc.n_plaza != pr.id + "")
                                {

                                    numero_plaza_alta.BorderBrush = Brushes.Red;
                                }
                                else
                                {
                                    BrushConverter bc = new BrushConverter();
                                    numero_plaza_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                                }




                            if (!(cc.nombre_cliente.Equals(nombre_cliente_alta.Text)))
                            {
                                nombre_cliente_alta.BorderBrush = Brushes.Red;


                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nombre_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                            if (!(cc.apellidos_cliente.Equals(apellido_cliente_alta.Text)))
                            {
                                apellido_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                apellido_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                            if (!(cc.dni.Equals(dni_cliente_alta.Text)))
                            {
                                dni_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                dni_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            if (!(cc.direccion.Equals(direccion_cliente_alta.Text)))
                            {

                                direccion_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                direccion_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.poblacio.Equals(poblacion_cliente_alta.Text)))
                            {
                                poblacion_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                poblacion_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.telefon1.Equals(telefono_cliente_alta.Text)))
                            {

                                telefono_cliente_alta.BorderBrush = Brushes.Red;


                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                telefono_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.telefon2.Equals(telefono2_cliente_alta.Text)))
                            {
                                telefono2_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                telefono2_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!cc.codigo_postal.Equals(cp_cliente_alta.Text))
                            {
                                cp_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                cp_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(cc.mail.Equals(email_cliente.Text)))
                            {
                                email_cliente.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                email_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(cc.mail2.Equals(email_cliente2.Text)))
                            {
                                email_cliente2.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                email_cliente2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            /*u.Luz = "s";
                            u.Nota1 = "";
                            u.Nota2 = "";*/
                            /*if (!(cc.Metodo_Pago.ToString().Equals(Metodo_pago.Text)))
                            {
                                a = true;
                                sql_query += "Metodo_Pago=" + Metodo_pago.SelectedIndex + ", ";
                                parametros.Add("Metodo_Pago:" + Metodo_pago.SelectedIndex);
                            }*/




                            if (!(cc.Pais.Equals(pais_cliente_alta.Text)))
                            {
                                pais_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                pais_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.Provincia.Equals(provincia_cliente_alta.Text)))
                            {
                                provincia_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                provincia_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            if (!(Clientes_FechaEntrada_alta.SelectedDate.Equals(cc.Fecha_In)))
                            {
                                Clientes_FechaEntrada_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(Clientes_FechaSalida_alta.SelectedDate.Equals(cc.Fecha_Out)))
                            {
                                Clientes_FechaSalida_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaSalida_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(Vehiculo1_alta.Text.Equals(cc.Vehiculo1)))
                            {
                               Vehiculo1_alta.Foreground = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo1_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(Vehiculo3_alta.Text.Equals(cc.Vehiculo3)))
                            {
                               Vehiculo3_alta.Foreground = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo3_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor1_alta.Text.Equals(cc.matricula1)))
                            {
                                bastidor1_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor1_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(bastidor3_alta.Text.Equals(cc.matricula3)))
                            {
                                bastidor3_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor3_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(bastidor4_alta.Text.Equals(cc.matricula4)))
                            {
                                bastidor4_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor4_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(Vehiculo2_alta.Text.Equals(cc.Vehiculo2)))
                            {
                               Vehiculo2_alta.Foreground = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo2_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor2_alta.Text.Equals(cc.matricula2)))
                            {
                                bastidor2_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor2_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                            int pott = 0;
                            if (Potencia_alta.SelectedItem != null)
                            {
                                Potencia poten = Potencia_alta.SelectedItem as Potencia;
                                if (cc.Potencia != poten.Id)
                                {
                                    Potencia_alta.BorderBrush = Brushes.Red;
                                }
                                else
                                {
                                    BrushConverter bc = new BrushConverter();
                                    Potencia_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                                }
                            }


                            int bbb = 0;
                            if (on_off_border.HorizontalAlignment == HorizontalAlignment.Right)
                            {
                                on_off_border.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                on_off_border.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }





                            if (!nota1_alta.Text.Equals(cc.Nota1))
                            {

                                nota1_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nota1_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!nota1_alta2.Text.Equals(cc.Nota2))
                            {

                                nota1_alta2.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nota1_alta2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            try
                            {


                                if (!dt1.ToString("H:mm").Equals(cc.Hora_entrada))
                                {
                                    Clientes_HoraEntrada_alta.BorderBrush = Brushes.Red;

                                }
                                else
                                {
                                    BrushConverter bc = new BrushConverter();
                                    Clientes_HoraEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                                }
                            }
                            catch (Exception ee){
                                var st = new StackTrace(ee, true); // Get the top stack frame var frame = st.GetFrame(0); // Get the line number from the stack frame   var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                                var frame = st.GetFrame(0);
                                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                                Peta(ee, line + "");
                                Console.WriteLine(line + ": " + ee.Message);
                            }
                            DateTime dt3 = (DateTime)Clientes_HoraPeriodo_alta.Value;
                            if (!dt3.ToString("H:mm").Equals(cc.Hora_salida))
                            {
                                Clientes_HoraPeriodo_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_HoraPeriodo_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }




                            /*if (!(cc.DeBaja == bb))
                            {
                                numero_cliente.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                apellidos_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }*/


                            if (!Clientes_FechaPeriodo_alta.SelectedDate.Equals(cc.fecha_entrada_estado))
                            {
                                Clientes_FechaPeriodo_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaPeriodo_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            if (!(cc.fecha_pago.Equals(Clientes_FechaPago_alta.SelectedDate)))
                            {
                                Clientes_FechaPago_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaPago_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(cc.Medidas_Vehiculo1.Equals(medidas_alta.Text)))
                            {
                                medidas_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                medidas_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                        }
                        catch
                        {

                        }

                    }

                }
                else
                {
                    if (newclient)
                        if (numero_cliente_alta.Text.Length > 0 && nombre_cliente_alta.Text.Length > 0 && direccion_cliente_alta.Text.Length > 0 && cp_cliente_alta.Text.Length > 0 && provincia_cliente_alta.Text.Length > 0 && pais_cliente_alta.Text.Length > 0 && telefono_cliente_alta.Text.Length > 0 && email_cliente.Text.Length > 0 && Vehiculo1_alta.Text.Length > 0 && bastidor1_alta.Text.Length > 0 && Clientes_FechaEntrada_alta.SelectedDate != null && Clientes_HoraEntrada_alta.Text.Length > 0 && Clientes_FechaPeriodo_alta.SelectedDate != null && Clientes_HoraPeriodo_alta.Text.Length > 0 && apellido_cliente_alta.Text.Length > 0 && dni_cliente_alta.Text.Length > 0 && poblacion_cliente_alta.Text.Length > 0)
                            change_client.IsEnabled = true;
                        else
                            change_client.IsEnabled = false;


                }
            comboBox.IsDropDownOpen = false;
        }  private void Vehiculo2_alta_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            ComboBox comboBox = (ComboBox)sender;
            TextBox textBox = comboBox.Template.FindName("PART_EditableTextBox", comboBox) as TextBox;
            if (textBox != null)
            {
                Dispatcher.InvokeAsync(() =>
                {
                    textBox.Select(textBox.Text.Length, 0);
                });
            }
            if (mirar2)
                if (Clientes.SelectedItem != null && !newclient)
                {


                    Parcelas pa = numero_plaza_alta.SelectedItem as Parcelas;
                    DateTime dt1 = (DateTime)Clientes_HoraEntrada_alta.Value;
                    DateTime dt2 = (DateTime)Clientes_HoraSalida.Value;
                    Clientes cc = Clientes.SelectedItem as Clientes;
                    bool a = false;


                    if (!dt1.ToString("H:mm").Equals(cc.Hora_entrada))
                    {
                        Clientes_HoraEntrada_alta.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Clientes_HoraEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }
                    if (!dt2.ToString("H:mm").Equals(cc.Hora_salida))
                    {
                        Clientes_HoraSalida.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Clientes_HoraSalida.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }



                    if (!(cc is null))
                    {
                        int pot = 0;
                        if (Potencia_alta.SelectedItem != null)
                        {
                            Potencia pp = Potencia_alta.SelectedItem as Potencia;

                            pot = pp.Id;
                        }
                        int b = 0;
                        if (on_off_border.HorizontalAlignment == HorizontalAlignment.Right)
                        {
                            b = 1;
                        }
                        Parcelas p = numero_plaza.SelectedItem as Parcelas;


                        if (p == null)
                            p = new Parcelas();

                        if (cc.Fecha_In != null)
                        {

                        }
                        else
                        {

                        }


                        if (p.id == null)
                            p.id = 0;
                        bool pos = false;
                        if (alta_baja.HorizontalAlignment == HorizontalAlignment.Right)
                            pos = true;
                        //console.writeline(p.id + " " + cc.n_plaza);

                        if (email_cliente.Text.Equals(cc.mail) && telefono2_cliente_alta.Text.Equals(cc.telefon2) && telefono_cliente_alta.Text.Equals(cc.telefon1) && pais_cliente_alta.Text.Equals(cc.Pais) && provincia_cliente_alta.Text.Equals(cc.Provincia) && poblacion_cliente_alta.Text.Equals(cc.poblacio) && cp_cliente_alta.Text.Equals(cc.codigo_postal) && direccion_cliente_alta.Text.Equals(cc.direccion) && dni_cliente_alta.Text.Equals(cc.dni) && apellido_cliente_alta.Text.Equals(cc.apellidos_cliente) && nombre_cliente_alta.Text.Equals(cc.nombre_cliente) && numero_cliente_alta.Text.Equals(cc.n_cliemte + "") && Clientes_FechaEntrada_alta.SelectedDate == cc.Fecha_In && Clientes_FechaSalida_alta.SelectedDate == cc.Fecha_Out && Vehiculo1_alta.Text.Equals(cc.Vehiculo1) && bastidor1_alta.Text.Equals(cc.matricula1) && Vehiculo2_alta.Text.Equals(cc.Vehiculo2) && bastidor2_alta.Text.Equals(cc.matricula2) && pot == cc.Potencia && nota1_alta.Text.Equals(cc.Nota1) && b == cc.Switch && p.id == int.Parse(cc.n_plaza) && Clientes_HoraEntrada_alta.Text.Equals(cc.Hora_entrada) && Clientes_HoraPeriodo_alta.Text.Equals(cc.Hora_salida) && email_cliente2.Text.Equals(cc.mail2) && pos == cc.DeBaja && Clientes_FechaPeriodo_alta.SelectedDate == cc.fecha_entrada_estado && Clientes_FechaPago_alta.SelectedDate == cc.fecha_pago && medidas_alta.Text.Equals(cc.Medidas_Vehiculo1))
                        {
                            change_client.IsEnabled = false;

                            change_client.IsEnabled = false;
                            safe = false;
                            //añadir_evento.IsEnabled = false;
                        }
                        else
                        {
                            change_client.IsEnabled = true;

                            change_client.IsEnabled = true;
                            safe = true;
                            //añadir_evento.IsEnabled = true;
                        }

                        try
                        {

                            if (!(numero_cliente_alta.Text.Equals(cc.n_cliemte + "")))
                            {
                                numero_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                numero_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                            }
                            Parcelas pr = numero_plaza_alta.SelectedItem as Parcelas;
                            if (pr != null)
                                if (cc.n_plaza != pr.id + "")
                                {

                                    numero_plaza_alta.BorderBrush = Brushes.Red;
                                }
                                else
                                {
                                    BrushConverter bc = new BrushConverter();
                                    numero_plaza_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                                }




                            if (!(cc.nombre_cliente.Equals(nombre_cliente_alta.Text)))
                            {
                                nombre_cliente_alta.BorderBrush = Brushes.Red;


                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nombre_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                            if (!(cc.apellidos_cliente.Equals(apellido_cliente_alta.Text)))
                            {
                                apellido_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                apellido_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                            if (!(cc.dni.Equals(dni_cliente_alta.Text)))
                            {
                                dni_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                dni_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            if (!(cc.direccion.Equals(direccion_cliente_alta.Text)))
                            {

                                direccion_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                direccion_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.poblacio.Equals(poblacion_cliente_alta.Text)))
                            {
                                poblacion_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                poblacion_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.telefon1.Equals(telefono_cliente_alta.Text)))
                            {

                                telefono_cliente_alta.BorderBrush = Brushes.Red;


                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                telefono_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.telefon2.Equals(telefono2_cliente_alta.Text)))
                            {
                                telefono2_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                telefono2_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!cc.codigo_postal.Equals(cp_cliente_alta.Text))
                            {
                                cp_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                cp_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(cc.mail.Equals(email_cliente.Text)))
                            {
                                email_cliente.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                email_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(cc.mail2.Equals(email_cliente2.Text)))
                            {
                                email_cliente2.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                email_cliente2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            /*u.Luz = "s";
                            u.Nota1 = "";
                            u.Nota2 = "";*/
                            /*if (!(cc.Metodo_Pago.ToString().Equals(Metodo_pago.Text)))
                            {
                                a = true;
                                sql_query += "Metodo_Pago=" + Metodo_pago.SelectedIndex + ", ";
                                parametros.Add("Metodo_Pago:" + Metodo_pago.SelectedIndex);
                            }*/




                            if (!(cc.Pais.Equals(pais_cliente_alta.Text)))
                            {
                                pais_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                pais_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.Provincia.Equals(provincia_cliente_alta.Text)))
                            {
                                provincia_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                provincia_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            if (!(Clientes_FechaEntrada_alta.SelectedDate.Equals(cc.Fecha_In)))
                            {
                                Clientes_FechaEntrada_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(Clientes_FechaSalida_alta.SelectedDate.Equals(cc.Fecha_Out)))
                            {
                                Clientes_FechaSalida_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaSalida_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(Vehiculo1_alta.Text.Equals(cc.Vehiculo1)))
                            {
                               Vehiculo1_alta.Foreground = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo1_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(Vehiculo3_alta.Text.Equals(cc.Vehiculo3)))
                            {
                               Vehiculo3_alta.Foreground = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo3_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor1_alta.Text.Equals(cc.matricula1)))
                            {
                                bastidor1_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor1_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(bastidor3_alta.Text.Equals(cc.matricula3)))
                            {
                                bastidor3_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor3_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(bastidor4_alta.Text.Equals(cc.matricula4)))
                            {
                                bastidor4_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor4_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(Vehiculo2_alta.Text.Equals(cc.Vehiculo2)))
                            {
                               Vehiculo2_alta.Foreground = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo2_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor2_alta.Text.Equals(cc.matricula2)))
                            {
                                bastidor2_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor2_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                            int pott = 0;
                            if (Potencia_alta.SelectedItem != null)
                            {
                                Potencia poten = Potencia_alta.SelectedItem as Potencia;
                                if (cc.Potencia != poten.Id)
                                {
                                    Potencia_alta.BorderBrush = Brushes.Red;
                                }
                                else
                                {
                                    BrushConverter bc = new BrushConverter();
                                    Potencia_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                                }
                            }


                            int bbb = 0;
                            if (on_off_border.HorizontalAlignment == HorizontalAlignment.Right)
                            {
                                on_off_border.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                on_off_border.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }





                            if (!nota1_alta.Text.Equals(cc.Nota1))
                            {

                                nota1_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nota1_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!nota1_alta2.Text.Equals(cc.Nota2))
                            {

                                nota1_alta2.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nota1_alta2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            try
                            {


                                if (!dt1.ToString("H:mm").Equals(cc.Hora_entrada))
                                {
                                    Clientes_HoraEntrada_alta.BorderBrush = Brushes.Red;

                                }
                                else
                                {
                                    BrushConverter bc = new BrushConverter();
                                    Clientes_HoraEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                                }
                            }
                            catch (Exception ee){
                                var st = new StackTrace(ee, true); // Get the top stack frame var frame = st.GetFrame(0); // Get the line number from the stack frame   var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                                var frame = st.GetFrame(0);
                                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                                Peta(ee, line + "");
                                Console.WriteLine(line + ": " + ee.Message);
                            }
                            DateTime dt3 = (DateTime)Clientes_HoraPeriodo_alta.Value;
                            if (!dt3.ToString("H:mm").Equals(cc.Hora_salida))
                            {
                                Clientes_HoraPeriodo_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_HoraPeriodo_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }




                            /*if (!(cc.DeBaja == bb))
                            {
                                numero_cliente.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                apellidos_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }*/


                            if (!Clientes_FechaPeriodo_alta.SelectedDate.Equals(cc.fecha_entrada_estado))
                            {
                                Clientes_FechaPeriodo_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaPeriodo_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            if (!(cc.fecha_pago.Equals(Clientes_FechaPago_alta.SelectedDate)))
                            {
                                Clientes_FechaPago_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaPago_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(cc.Medidas_Vehiculo1.Equals(medidas_alta.Text)))
                            {
                                medidas_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                medidas_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                        }
                        catch
                        {

                        }

                    }

                }
                else
                {
                    if (newclient)
                        if (numero_cliente_alta.Text.Length > 0 && nombre_cliente_alta.Text.Length > 0 && direccion_cliente_alta.Text.Length > 0 && cp_cliente_alta.Text.Length > 0 && provincia_cliente_alta.Text.Length > 0 && pais_cliente_alta.Text.Length > 0 && telefono_cliente_alta.Text.Length > 0 && email_cliente.Text.Length > 0 && Vehiculo1_alta.Text.Length > 0 && bastidor1_alta.Text.Length > 0 && Clientes_FechaEntrada_alta.SelectedDate != null && Clientes_HoraEntrada_alta.Text.Length > 0 && Clientes_FechaPeriodo_alta.SelectedDate != null && Clientes_HoraPeriodo_alta.Text.Length > 0 && apellido_cliente_alta.Text.Length > 0 && dni_cliente_alta.Text.Length > 0 && poblacion_cliente_alta.Text.Length > 0)
                            change_client.IsEnabled = true;
                        else
                            change_client.IsEnabled = false;


                }

            comboBox.IsDropDownOpen = false;
        }  private void Vehiculo3_alta_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            ComboBox comboBox = (ComboBox)sender;
            TextBox textBox = comboBox.Template.FindName("PART_EditableTextBox", comboBox) as TextBox;
            if (textBox != null)
            {
                Dispatcher.InvokeAsync(() =>
                {
                    textBox.Select(textBox.Text.Length, 0);
                });
            }
            if (mirar2)
                if (Clientes.SelectedItem != null && !newclient)
                {


                    Parcelas pa = numero_plaza_alta.SelectedItem as Parcelas;
                    DateTime dt1 = (DateTime)Clientes_HoraEntrada_alta.Value;
                    DateTime dt2 = (DateTime)Clientes_HoraSalida.Value;
                    Clientes cc = Clientes.SelectedItem as Clientes;
                    bool a = false;


                    if (!dt1.ToString("H:mm").Equals(cc.Hora_entrada))
                    {
                        Clientes_HoraEntrada_alta.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Clientes_HoraEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }
                    if (!dt2.ToString("H:mm").Equals(cc.Hora_salida))
                    {
                        Clientes_HoraSalida.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Clientes_HoraSalida.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }



                    if (!(cc is null))
                    {
                        int pot = 0;
                        if (Potencia_alta.SelectedItem != null)
                        {
                            Potencia pp = Potencia_alta.SelectedItem as Potencia;

                            pot = pp.Id;
                        }
                        int b = 0;
                        if (on_off_border.HorizontalAlignment == HorizontalAlignment.Right)
                        {
                            b = 1;
                        }
                        Parcelas p = numero_plaza.SelectedItem as Parcelas;


                        if (p == null)
                            p = new Parcelas();

                        if (cc.Fecha_In != null)
                        {

                        }
                        else
                        {

                        }


                        if (p.id == null)
                            p.id = 0;
                        bool pos = false;
                        if (alta_baja.HorizontalAlignment == HorizontalAlignment.Right)
                            pos = true;
                        //console.writeline(p.id + " " + cc.n_plaza);

                        if (email_cliente.Text.Equals(cc.mail) && telefono2_cliente_alta.Text.Equals(cc.telefon2) && telefono_cliente_alta.Text.Equals(cc.telefon1) && pais_cliente_alta.Text.Equals(cc.Pais) && provincia_cliente_alta.Text.Equals(cc.Provincia) && poblacion_cliente_alta.Text.Equals(cc.poblacio) && cp_cliente_alta.Text.Equals(cc.codigo_postal) && direccion_cliente_alta.Text.Equals(cc.direccion) && dni_cliente_alta.Text.Equals(cc.dni) && apellido_cliente_alta.Text.Equals(cc.apellidos_cliente) && nombre_cliente_alta.Text.Equals(cc.nombre_cliente) && numero_cliente_alta.Text.Equals(cc.n_cliemte + "") && Clientes_FechaEntrada_alta.SelectedDate == cc.Fecha_In && Clientes_FechaSalida_alta.SelectedDate == cc.Fecha_Out && Vehiculo1_alta.Text.Equals(cc.Vehiculo1) && bastidor1_alta.Text.Equals(cc.matricula1) && Vehiculo2_alta.Text.Equals(cc.Vehiculo2) && bastidor2_alta.Text.Equals(cc.matricula2) && pot == cc.Potencia && nota1_alta.Text.Equals(cc.Nota1) && b == cc.Switch && p.id == int.Parse(cc.n_plaza) && Clientes_HoraEntrada_alta.Text.Equals(cc.Hora_entrada) && Clientes_HoraPeriodo_alta.Text.Equals(cc.Hora_salida) && email_cliente2.Text.Equals(cc.mail2) && pos == cc.DeBaja && Clientes_FechaPeriodo_alta.SelectedDate == cc.fecha_entrada_estado && Clientes_FechaPago_alta.SelectedDate == cc.fecha_pago && medidas_alta.Text.Equals(cc.Medidas_Vehiculo1))
                        {
                            change_client.IsEnabled = false;

                            change_client.IsEnabled = false;
                            safe = false;
                            //añadir_evento.IsEnabled = false;
                        }
                        else
                        {
                            change_client.IsEnabled = true;

                            change_client.IsEnabled = true;
                            safe = true;
                            //añadir_evento.IsEnabled = true;
                        }

                        try
                        {

                            if (!(numero_cliente_alta.Text.Equals(cc.n_cliemte + "")))
                            {
                                numero_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                numero_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                            }
                            Parcelas pr = numero_plaza_alta.SelectedItem as Parcelas;
                            if (pr != null)
                                if (cc.n_plaza != pr.id + "")
                                {

                                    numero_plaza_alta.BorderBrush = Brushes.Red;
                                }
                                else
                                {
                                    BrushConverter bc = new BrushConverter();
                                    numero_plaza_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                                }




                            if (!(cc.nombre_cliente.Equals(nombre_cliente_alta.Text)))
                            {
                                nombre_cliente_alta.BorderBrush = Brushes.Red;


                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nombre_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                            if (!(cc.apellidos_cliente.Equals(apellido_cliente_alta.Text)))
                            {
                                apellido_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                apellido_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                            if (!(cc.dni.Equals(dni_cliente_alta.Text)))
                            {
                                dni_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                dni_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            if (!(cc.direccion.Equals(direccion_cliente_alta.Text)))
                            {

                                direccion_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                direccion_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.poblacio.Equals(poblacion_cliente_alta.Text)))
                            {
                                poblacion_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                poblacion_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.telefon1.Equals(telefono_cliente_alta.Text)))
                            {

                                telefono_cliente_alta.BorderBrush = Brushes.Red;


                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                telefono_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.telefon2.Equals(telefono2_cliente_alta.Text)))
                            {
                                telefono2_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                telefono2_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!cc.codigo_postal.Equals(cp_cliente_alta.Text))
                            {
                                cp_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                cp_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(cc.mail.Equals(email_cliente.Text)))
                            {
                                email_cliente.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                email_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(cc.mail2.Equals(email_cliente2.Text)))
                            {
                                email_cliente2.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                email_cliente2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            /*u.Luz = "s";
                            u.Nota1 = "";
                            u.Nota2 = "";*/
                            /*if (!(cc.Metodo_Pago.ToString().Equals(Metodo_pago.Text)))
                            {
                                a = true;
                                sql_query += "Metodo_Pago=" + Metodo_pago.SelectedIndex + ", ";
                                parametros.Add("Metodo_Pago:" + Metodo_pago.SelectedIndex);
                            }*/




                            if (!(cc.Pais.Equals(pais_cliente_alta.Text)))
                            {
                                pais_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                pais_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.Provincia.Equals(provincia_cliente_alta.Text)))
                            {
                                provincia_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                provincia_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            if (!(Clientes_FechaEntrada_alta.SelectedDate.Equals(cc.Fecha_In)))
                            {
                                Clientes_FechaEntrada_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(Clientes_FechaSalida_alta.SelectedDate.Equals(cc.Fecha_Out)))
                            {
                                Clientes_FechaSalida_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaSalida_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(Vehiculo1_alta.Text.Equals(cc.Vehiculo1)))
                            {
                               Vehiculo1_alta.Foreground = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo1_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(Vehiculo3_alta.Text.Equals(cc.Vehiculo3)))
                            {
                               Vehiculo3_alta.Foreground = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo3_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor1_alta.Text.Equals(cc.matricula1)))
                            {
                                bastidor1_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor1_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(bastidor3_alta.Text.Equals(cc.matricula3)))
                            {
                                bastidor3_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor3_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(bastidor4_alta.Text.Equals(cc.matricula4)))
                            {
                                bastidor4_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor4_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(Vehiculo2_alta.Text.Equals(cc.Vehiculo2)))
                            {
                               Vehiculo2_alta.Foreground = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo2_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor2_alta.Text.Equals(cc.matricula2)))
                            {
                                bastidor2_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor2_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                            int pott = 0;
                            if (Potencia_alta.SelectedItem != null)
                            {
                                Potencia poten = Potencia_alta.SelectedItem as Potencia;
                                if (cc.Potencia != poten.Id)
                                {
                                    Potencia_alta.BorderBrush = Brushes.Red;
                                }
                                else
                                {
                                    BrushConverter bc = new BrushConverter();
                                    Potencia_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                                }
                            }


                            int bbb = 0;
                            if (on_off_border.HorizontalAlignment == HorizontalAlignment.Right)
                            {
                                on_off_border.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                on_off_border.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }





                            if (!nota1_alta.Text.Equals(cc.Nota1))
                            {

                                nota1_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nota1_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!nota1_alta2.Text.Equals(cc.Nota2))
                            {

                                nota1_alta2.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nota1_alta2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            try
                            {


                                if (!dt1.ToString("H:mm").Equals(cc.Hora_entrada))
                                {
                                    Clientes_HoraEntrada_alta.BorderBrush = Brushes.Red;

                                }
                                else
                                {
                                    BrushConverter bc = new BrushConverter();
                                    Clientes_HoraEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                                }
                            }
                            catch (Exception ee){
                                var st = new StackTrace(ee, true); // Get the top stack frame var frame = st.GetFrame(0); // Get the line number from the stack frame   var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                                var frame = st.GetFrame(0);
                                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                                Peta(ee, line + "");
                                Console.WriteLine(line + ": " + ee.Message);
                            }
                            DateTime dt3 = (DateTime)Clientes_HoraPeriodo_alta.Value;
                            if (!dt3.ToString("H:mm").Equals(cc.Hora_salida))
                            {
                                Clientes_HoraPeriodo_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_HoraPeriodo_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }




                            /*if (!(cc.DeBaja == bb))
                            {
                                numero_cliente.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                apellidos_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }*/


                            if (!Clientes_FechaPeriodo_alta.SelectedDate.Equals(cc.fecha_entrada_estado))
                            {
                                Clientes_FechaPeriodo_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaPeriodo_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            if (!(cc.fecha_pago.Equals(Clientes_FechaPago_alta.SelectedDate)))
                            {
                                Clientes_FechaPago_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaPago_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(cc.Medidas_Vehiculo1.Equals(medidas_alta.Text)))
                            {
                                medidas_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                medidas_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                        }
                        catch
                        {

                        }

                    }

                }
                else
                {
                    if (newclient)
                        if (numero_cliente_alta.Text.Length > 0 && nombre_cliente_alta.Text.Length > 0 && direccion_cliente_alta.Text.Length > 0 && cp_cliente_alta.Text.Length > 0 && provincia_cliente_alta.Text.Length > 0 && pais_cliente_alta.Text.Length > 0 && telefono_cliente_alta.Text.Length > 0 && email_cliente.Text.Length > 0 && Vehiculo1_alta.Text.Length > 0 && bastidor1_alta.Text.Length > 0 && Clientes_FechaEntrada_alta.SelectedDate != null && Clientes_HoraEntrada_alta.Text.Length > 0 && Clientes_FechaPeriodo_alta.SelectedDate != null && Clientes_HoraPeriodo_alta.Text.Length > 0 && apellido_cliente_alta.Text.Length > 0 && dni_cliente_alta.Text.Length > 0 && poblacion_cliente_alta.Text.Length > 0)
                            change_client.IsEnabled = true;
                        else
                            change_client.IsEnabled = false;


                }

            comboBox.IsDropDownOpen = false;
        }  private void Vehiculo4_alta_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            ComboBox comboBox = (ComboBox)sender;
            TextBox textBox = comboBox.Template.FindName("PART_EditableTextBox", comboBox) as TextBox;
            if (textBox != null)
            {
                Dispatcher.InvokeAsync(() =>
                {
                    textBox.Select(textBox.Text.Length, 0);
                });
            }
            if (mirar2)
                if (Clientes.SelectedItem != null && !newclient)
                {


                    Parcelas pa = numero_plaza_alta.SelectedItem as Parcelas;
                    DateTime dt1 = (DateTime)Clientes_HoraEntrada_alta.Value;
                    DateTime dt2 = (DateTime)Clientes_HoraSalida.Value;
                    Clientes cc = Clientes.SelectedItem as Clientes;
                    bool a = false;


                    if (!dt1.ToString("H:mm").Equals(cc.Hora_entrada))
                    {
                        Clientes_HoraEntrada_alta.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Clientes_HoraEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }
                    if (!dt2.ToString("H:mm").Equals(cc.Hora_salida))
                    {
                        Clientes_HoraSalida.BorderBrush = Brushes.Red;

                    }
                    else
                    {
                        BrushConverter bc = new BrushConverter();
                        Clientes_HoraSalida.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                    }



                    if (!(cc is null))
                    {
                        int pot = 0;
                        if (Potencia_alta.SelectedItem != null)
                        {
                            Potencia pp = Potencia_alta.SelectedItem as Potencia;

                            pot = pp.Id;
                        }
                        int b = 0;
                        if (on_off_border.HorizontalAlignment == HorizontalAlignment.Right)
                        {
                            b = 1;
                        }
                        Parcelas p = numero_plaza.SelectedItem as Parcelas;


                        if (p == null)
                            p = new Parcelas();

                        if (cc.Fecha_In != null)
                        {

                        }
                        else
                        {

                        }


                        if (p.id == null)
                            p.id = 0;
                        bool pos = false;
                        if (alta_baja.HorizontalAlignment == HorizontalAlignment.Right)
                            pos = true;
                        //console.writeline(p.id + " " + cc.n_plaza);

                        if (email_cliente.Text.Equals(cc.mail) && telefono2_cliente_alta.Text.Equals(cc.telefon2) && telefono_cliente_alta.Text.Equals(cc.telefon1) && pais_cliente_alta.Text.Equals(cc.Pais) && provincia_cliente_alta.Text.Equals(cc.Provincia) && poblacion_cliente_alta.Text.Equals(cc.poblacio) && cp_cliente_alta.Text.Equals(cc.codigo_postal) && direccion_cliente_alta.Text.Equals(cc.direccion) && dni_cliente_alta.Text.Equals(cc.dni) && apellido_cliente_alta.Text.Equals(cc.apellidos_cliente) && nombre_cliente_alta.Text.Equals(cc.nombre_cliente) && numero_cliente_alta.Text.Equals(cc.n_cliemte + "") && Clientes_FechaEntrada_alta.SelectedDate == cc.Fecha_In && Clientes_FechaSalida_alta.SelectedDate == cc.Fecha_Out && Vehiculo1_alta.Text.Equals(cc.Vehiculo1) && bastidor1_alta.Text.Equals(cc.matricula1) && Vehiculo2_alta.Text.Equals(cc.Vehiculo2) && bastidor2_alta.Text.Equals(cc.matricula2) && pot == cc.Potencia && nota1_alta.Text.Equals(cc.Nota1) && b == cc.Switch && p.id == int.Parse(cc.n_plaza) && Clientes_HoraEntrada_alta.Text.Equals(cc.Hora_entrada) && Clientes_HoraPeriodo_alta.Text.Equals(cc.Hora_salida) && email_cliente2.Text.Equals(cc.mail2) && pos == cc.DeBaja && Clientes_FechaPeriodo_alta.SelectedDate == cc.fecha_entrada_estado && Clientes_FechaPago_alta.SelectedDate == cc.fecha_pago && medidas_alta.Text.Equals(cc.Medidas_Vehiculo1))
                        {
                            change_client.IsEnabled = false;

                            change_client.IsEnabled = false;
                            safe = false;
                            //añadir_evento.IsEnabled = false;
                        }
                        else
                        {
                            change_client.IsEnabled = true;

                            change_client.IsEnabled = true;
                            safe = true;
                            //añadir_evento.IsEnabled = true;
                        }

                        try
                        {

                            if (!(numero_cliente_alta.Text.Equals(cc.n_cliemte + "")))
                            {
                                numero_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                numero_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                            }
                            Parcelas pr = numero_plaza_alta.SelectedItem as Parcelas;
                            if (pr != null)
                                if (cc.n_plaza != pr.id + "")
                                {

                                    numero_plaza_alta.BorderBrush = Brushes.Red;
                                }
                                else
                                {
                                    BrushConverter bc = new BrushConverter();
                                    numero_plaza_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                                }




                            if (!(cc.nombre_cliente.Equals(nombre_cliente_alta.Text)))
                            {
                                nombre_cliente_alta.BorderBrush = Brushes.Red;


                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nombre_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                            if (!(cc.apellidos_cliente.Equals(apellido_cliente_alta.Text)))
                            {
                                apellido_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                apellido_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                            if (!(cc.dni.Equals(dni_cliente_alta.Text)))
                            {
                                dni_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                dni_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            if (!(cc.direccion.Equals(direccion_cliente_alta.Text)))
                            {

                                direccion_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                direccion_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.poblacio.Equals(poblacion_cliente_alta.Text)))
                            {
                                poblacion_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                poblacion_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.telefon1.Equals(telefono_cliente_alta.Text)))
                            {

                                telefono_cliente_alta.BorderBrush = Brushes.Red;


                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                telefono_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.telefon2.Equals(telefono2_cliente_alta.Text)))
                            {
                                telefono2_cliente_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                telefono2_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!cc.codigo_postal.Equals(cp_cliente_alta.Text))
                            {
                                cp_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                cp_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(cc.mail.Equals(email_cliente.Text)))
                            {
                                email_cliente.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                email_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(cc.mail2.Equals(email_cliente2.Text)))
                            {
                                email_cliente2.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                email_cliente2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            /*u.Luz = "s";
                            u.Nota1 = "";
                            u.Nota2 = "";*/
                            /*if (!(cc.Metodo_Pago.ToString().Equals(Metodo_pago.Text)))
                            {
                                a = true;
                                sql_query += "Metodo_Pago=" + Metodo_pago.SelectedIndex + ", ";
                                parametros.Add("Metodo_Pago:" + Metodo_pago.SelectedIndex);
                            }*/




                            if (!(cc.Pais.Equals(pais_cliente_alta.Text)))
                            {
                                pais_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                pais_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(cc.Provincia.Equals(provincia_cliente_alta.Text)))
                            {
                                provincia_cliente_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                provincia_cliente_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            if (!(Clientes_FechaEntrada_alta.SelectedDate.Equals(cc.Fecha_In)))
                            {
                                Clientes_FechaEntrada_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(Clientes_FechaSalida_alta.SelectedDate.Equals(cc.Fecha_Out)))
                            {
                                Clientes_FechaSalida_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaSalida_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(Vehiculo1_alta.Text.Equals(cc.Vehiculo1)))
                            {
                               Vehiculo1_alta.Foreground = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo1_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(Vehiculo3_alta.Text.Equals(cc.Vehiculo3)))
                            {
                               Vehiculo3_alta.Foreground = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo3_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor1_alta.Text.Equals(cc.matricula1)))
                            {
                                bastidor1_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor1_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(bastidor3_alta.Text.Equals(cc.matricula3)))
                            {
                                bastidor3_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor3_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(bastidor4_alta.Text.Equals(cc.matricula4)))
                            {
                                bastidor4_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor4_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!(Vehiculo2_alta.Text.Equals(cc.Vehiculo2)))
                            {
                               Vehiculo2_alta.Foreground = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Vehiculo2_alta.Foreground = (Brush)bc.ConvertFrom("#838d99");

                            }
                            if (!(bastidor2_alta.Text.Equals(cc.matricula2)))
                            {
                                bastidor2_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                bastidor2_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                            int pott = 0;
                            if (Potencia_alta.SelectedItem != null)
                            {
                                Potencia poten = Potencia_alta.SelectedItem as Potencia;
                                if (cc.Potencia != poten.Id)
                                {
                                    Potencia_alta.BorderBrush = Brushes.Red;
                                }
                                else
                                {
                                    BrushConverter bc = new BrushConverter();
                                    Potencia_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                                }
                            }


                            int bbb = 0;
                            if (on_off_border.HorizontalAlignment == HorizontalAlignment.Right)
                            {
                                on_off_border.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                on_off_border.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }





                            if (!nota1_alta.Text.Equals(cc.Nota1))
                            {

                                nota1_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nota1_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }

                            if (!nota1_alta2.Text.Equals(cc.Nota2))
                            {

                                nota1_alta2.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                nota1_alta2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            try
                            {


                                if (!dt1.ToString("H:mm").Equals(cc.Hora_entrada))
                                {
                                    Clientes_HoraEntrada_alta.BorderBrush = Brushes.Red;

                                }
                                else
                                {
                                    BrushConverter bc = new BrushConverter();
                                    Clientes_HoraEntrada_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                                }
                            }
                            catch (Exception ee){
                                var st = new StackTrace(ee, true); // Get the top stack frame var frame = st.GetFrame(0); // Get the line number from the stack frame   var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                                var frame = st.GetFrame(0);
                                var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                                Peta(ee, line + "");
                                Console.WriteLine(line + ": " + ee.Message);
                            }
                            DateTime dt3 = (DateTime)Clientes_HoraPeriodo_alta.Value;
                            if (!dt3.ToString("H:mm").Equals(cc.Hora_salida))
                            {
                                Clientes_HoraPeriodo_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_HoraPeriodo_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }




                            /*if (!(cc.DeBaja == bb))
                            {
                                numero_cliente.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                apellidos_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }*/


                            if (!Clientes_FechaPeriodo_alta.SelectedDate.Equals(cc.fecha_entrada_estado))
                            {
                                Clientes_FechaPeriodo_alta.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaPeriodo_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                            if (!(cc.fecha_pago.Equals(Clientes_FechaPago_alta.SelectedDate)))
                            {
                                Clientes_FechaPago_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_FechaPago_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                            if (!(cc.Medidas_Vehiculo1.Equals(medidas_alta.Text)))
                            {
                                medidas_alta.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                medidas_alta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }


                        }
                        catch
                        {

                        }

                    }

                }
                else
                {
                    if (newclient)
                        if (numero_cliente_alta.Text.Length > 0 && nombre_cliente_alta.Text.Length > 0 && direccion_cliente_alta.Text.Length > 0 && cp_cliente_alta.Text.Length > 0 && provincia_cliente_alta.Text.Length > 0 && pais_cliente_alta.Text.Length > 0 && telefono_cliente_alta.Text.Length > 0 && email_cliente.Text.Length > 0 && Vehiculo1_alta.Text.Length > 0 && bastidor1_alta.Text.Length > 0 && Clientes_FechaEntrada_alta.SelectedDate != null && Clientes_HoraEntrada_alta.Text.Length > 0 && Clientes_FechaPeriodo_alta.SelectedDate != null && Clientes_HoraPeriodo_alta.Text.Length > 0 && apellido_cliente_alta.Text.Length > 0 && dni_cliente_alta.Text.Length > 0 && poblacion_cliente_alta.Text.Length > 0)
                            change_client.IsEnabled = true;
                        else
                            change_client.IsEnabled = false;


                }

            comboBox.IsDropDownOpen = false;
        }

        private void Button_Click_14(object sender, RoutedEventArgs e)
        {
            BrushConverter bc = new BrushConverter();
            buton1.Background = (Brush)bc.ConvertFrom("#00ba91");
            buton2.Background = Brushes.Transparent;
            buton3.Background = Brushes.Transparent;
            buton4.Background = Brushes.Transparent;
            buton5.Background = Brushes.Transparent;
            buton6.Background = Brushes.Transparent;
            buton7.Background = Brushes.Transparent;
            buton8.Background = Brushes.Transparent;
            buton9.Background = Brushes.Transparent;
            buton10.Background = Brushes.Transparent;

            posicionapli = 0;
            
        }

        private void buton2_Click(object sender, RoutedEventArgs e)
        {
            BrushConverter bc = new BrushConverter();
            buton2.Background = (Brush)bc.ConvertFrom("#00ba91");
            buton1.Background = Brushes.Transparent;
            buton3.Background = Brushes.Transparent;
            buton4.Background = Brushes.Transparent;
            buton5.Background = Brushes.Transparent;
            buton6.Background = Brushes.Transparent;

            buton7.Background = Brushes.Transparent;
            buton8.Background = Brushes.Transparent;
            buton9.Background = Brushes.Transparent;
            buton10.Background = Brushes.Transparent;

            posicionapli = 1;
        }

        private void buton3_Click(object sender, RoutedEventArgs e)
        {
            BrushConverter bc = new BrushConverter();
            buton3.Background = (Brush)bc.ConvertFrom("#00ba91");
            buton2.Background = Brushes.Transparent;
            buton1.Background = Brushes.Transparent;
            buton4.Background = Brushes.Transparent;
            buton5.Background = Brushes.Transparent;
            buton6.Background = Brushes.Transparent;

            buton7.Background = Brushes.Transparent;
            buton8.Background = Brushes.Transparent;
            buton9.Background = Brushes.Transparent;
            buton10.Background = Brushes.Transparent;
            posicionapli = 2;
        }

        private void buton4_Click(object sender, RoutedEventArgs e)
        {
            BrushConverter bc = new BrushConverter();
            buton4.Background = (Brush)bc.ConvertFrom("#00ba91");
            buton2.Background = Brushes.Transparent;
            buton3.Background = Brushes.Transparent;
            buton1.Background = Brushes.Transparent;
            buton5.Background = Brushes.Transparent;
            buton6.Background = Brushes.Transparent;
            buton7.Background = Brushes.Transparent;
            buton8.Background = Brushes.Transparent;
            buton9.Background = Brushes.Transparent;
            buton10.Background = Brushes.Transparent;

            posicionapli = 3;
        }

        private void buton5_Click(object sender, RoutedEventArgs e)
        {
            BrushConverter bc = new BrushConverter();
            buton5.Background = (Brush)bc.ConvertFrom("#00ba91");
            buton2.Background = Brushes.Transparent;
            buton3.Background = Brushes.Transparent;
            buton4.Background = Brushes.Transparent;
            buton1.Background = Brushes.Transparent;
            buton6.Background = Brushes.Transparent;
            buton7.Background = Brushes.Transparent;
            buton8.Background = Brushes.Transparent;
            buton9.Background = Brushes.Transparent;
            buton10.Background = Brushes.Transparent;

            posicionapli = 4;
        }

        private void buton6_Click(object sender, RoutedEventArgs e)
        {
            BrushConverter bc = new BrushConverter();
            buton6.Background = (Brush)bc.ConvertFrom("#00ba91");
            buton2.Background = Brushes.Transparent;
            buton3.Background = Brushes.Transparent;
            buton4.Background = Brushes.Transparent;
            buton5.Background = Brushes.Transparent;
            buton1.Background = Brushes.Transparent;
            buton7.Background = Brushes.Transparent;
            buton8.Background = Brushes.Transparent;
            buton9.Background = Brushes.Transparent;
            buton10.Background = Brushes.Transparent;

            posicionapli = 5;
        }

        private void imprimirapli_Click(object sender, RoutedEventArgs e)
        {
            vb2.Close();
            vb2 = new Browser2(0);
            vb2.Show();
        }

        private void clienteapli_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (clienteapli.SelectedItem != null)
            {
                Clientes c = clienteapli.SelectedItem as Clientes;

                nombreapli.Text = c.nombre_completo;
                dniapli.Text = c.dni;
                direccionapli.Text = c.direccion;
                telefonoapli.Text = c.telefon1;
                telefono2apli.Text = c.telefon2;
                matricula1apli.Text = c.matricula1;
                matricula2apli.Text = c.matricula2;
                fechaapli.Text = c.Fecha_In.ToString().Split(' ')[0];
                fechasapli.Text = c.Fecha_Out.ToString().Split(' ')[0];
                fechapapli.Text = c.fecha_pago.ToString().Split(' ')[0];
            }
            else
            {
                nombreapli.Text = "";
                dniapli.Text = "";
                direccionapli.Text = "";
                telefonoapli.Text = "";
                telefono2apli.Text = "";
                matricula1apli.Text = "";
                matricula2apli.Text = "";
                fechaapli.Text = "";
                fechasapli.Text = "";
                fechapapli.Text = "";
            }
        }

        private void Border_MouseLeftButtonDown_15(object sender, MouseButtonEventArgs e)
        {if (e.ClickCount == 2)
                editSistema_Click(editSistema,RoutedEventArgs);
        }

        private async void On_Off(object sender, RoutedEventArgs e)
        {
            string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
            Log oLog = new Log(path2);
            //comprobar = true;
            int a = -1;
            Button b = sender as Button;
            Grid g = b.Parent as Grid;
            Label bb = g.Children[2] as Label;
            Grid dir2 = g.Children[0] as Grid;
            Label dir = dir2.Children[1] as Label;
            if (!conectado)
                _connection.Connect();
            Thread.Sleep(1000);
            if (bb.Content.Equals("ON"))
            {
                bb.Content = "Comprobando...";
                bb.Foreground = Brushes.Black;

                oLog.Add("Mirar accion ojo " + mirarDeNuevo);
                if (mirarDeNuevo)
                {
                    string[] ss = dir.Content.ToString().Split('/');

                    oLog.Add("Mirar accion "+ dir.Content);
                    Direcciones ddd2 = ldir.Find(x => x.Descripcion.Equals("1/" + ss[1] + "/" + ss[2]));
                    Direcciones ddd = new Direcciones(ddd2.Id, ddd2.Descripcion, ddd2.Nombre, ddd2.Longitud, ddd2.Asignada);
                    ddd.asignada = ddd2.asignada;
                    ddd.imagee = ddd2.imagee;
                    ddd.mostrar = ddd2.mostrar;
                    ddd.onIsSelected = ddd2.onIsSelected;
                    

                    oLog.Add("Mirar accion " + ddd.Descripcion);

                    if (ddd!=null)
                    {if (direcciones2.Count > 0)
                        {
                            ddd.Descripcion += "/false";
                            ss = ddd.Descripcion.Split('/');
                            ddd.Descripcion = "0/" + ss[1] + "/" + ss[2] + "/" + ss[3];
                            direcciones2.Insert(1, ddd);

                        }
                        else
                        {
                            ddd.Descripcion = "0/" + ss[1] + "/" + ss[2] + "/" + ss[3];
                            direcciones2.Add(ddd);

                            cargarBus2();
                        }
                    }

                }
                else
                {
                    string[] ss = dir.Content.ToString().Split('/');

                    oLog.Add("Mirar accion " + dir.Content);
                    Direcciones ddd2 = ldir.Find(x => x.Descripcion.Equals("1/" + ss[1] + "/" + ss[2]));
                    Direcciones ddd = new Direcciones(ddd2.Id, ddd2.Descripcion, ddd2.Nombre, ddd2.Longitud, ddd2.Asignada);
                    ddd.asignada = ddd2.asignada;
                    ddd.imagee = ddd2.imagee;
                    ddd.mostrar = ddd2.mostrar;
                    ddd.onIsSelected = ddd2.onIsSelected;
                  

                    oLog.Add("Mirar accion " + ddd.Descripcion);
                    if (ddd != null)
                    {
                        ddd.Descripcion += "/false";
                        ss = ddd.Descripcion.Split('/');
                        oLog.Add("Mirar accion " + ddd.Descripcion);
                        if (direcciones2.Count > 0)
                        {
                            ddd.Descripcion = "0/" + ss[1] + "/" + ss[2] + "/" + ss[3];

                            oLog.Add("Mirar accion en 1 " + "0/" + ss[1] + "/" + ss[2] + "/" + ss[3]);
                            direcciones2.Insert(1, ddd);

                        }
                        else
                        {
                            ddd.Descripcion = "0/" + ss[1] + "/" + ss[2] + "/" + ss[3];
                            oLog.Add("Mirar accion en 2 " + "0/" + ss[1] + "/" + ss[2] + "/" + ss[3]);
                            direcciones2.Add(ddd);

                        }
                    }
                }
                
               
            }
            else if (bb.Content.Equals("OFF"))
            {

                oLog.Add("Mirar accion ojo " + mirarDeNuevo);
                oLog.Add("Mirar accion");

                bb.Content = "Comprobando...";
                bb.Foreground = Brushes.Black;
                if (mirarDeNuevo)
                    {
                    string[] ss = dir.Content.ToString().Split('/');

                    oLog.Add("Mirar accion " + dir.Content); 
                    Direcciones ddd2 = ldir.Find(x => x.Descripcion.Equals("1/" + ss[1] + "/" + ss[2]));
                    Direcciones ddd = new Direcciones(ddd2.Id, ddd2.Descripcion, ddd2.Nombre, ddd2.Longitud, ddd2.Asignada);
                    ddd.asignada = ddd2.asignada;
                    ddd.imagee = ddd2.imagee;
                    ddd.mostrar = ddd2.mostrar;
                    ddd.onIsSelected = ddd2.onIsSelected;


                    oLog.Add("Mirar accion "+ddd);
                    oLog.Add("Mirar accion 3" + ddd);
                    if (ddd != null)
                    {
                        ddd.Descripcion += "/true";
                        ss = ddd.Descripcion.Split('/');
                        if (direcciones2.Count > 0)
                        {
                            ddd.Descripcion = "0/" + ss[1] + "/" + ss[2] + "/" + ss[3];

                            oLog.Add("Mirar accion en 3 " + "0/" + ss[1] + "/" + ss[2] + "/" + ss[3]);
                            direcciones2.Insert(1, ddd);

                        }
                        else
                        {
                            ddd.Descripcion = "0/" + ss[1] + "/" + ss[2] + "/" + ss[3]; ddd.Descripcion = "0/" + ss[1] + "/" + ss[2] + "/" + ss[3];

                            oLog.Add("Mirar accion en 4 " + "0/" + ss[1] + "/" + ss[2] + "/" + ss[3]);
                            direcciones2.Add(ddd);

                            cargarBus2();
                        }
                    }

                }
                else
                {
                    string[] ss = dir.Content.ToString().Split('/');

                    oLog.Add("Mirar accion " + dir.Content);
                    Direcciones ddd2 = ldir.Find(x => x.Descripcion.Equals("1/" + ss[1] + "/" + ss[2]));
                    Direcciones ddd = new Direcciones(ddd2.Id, ddd2.Descripcion, ddd2.Nombre, ddd2.Longitud, ddd2.Asignada);
                    ddd.asignada = ddd2.asignada;
                    ddd.imagee = ddd2.imagee;
                    ddd.mostrar = ddd2.mostrar;
                    ddd.onIsSelected = ddd2.onIsSelected;
                   

                    oLog.Add("Mirar accion " + ddd);
                    

                        oLog.Add("Mirar accion 2" + ddd);
                        if (ddd != null)
                    {
                        ddd.Descripcion += "/true";
                        ss = ddd.Descripcion.Split('/');
                        oLog.Add("direcciones2 " + direcciones2.Count);
                            if (direcciones2.Count > 0)
                            {

                                oLog.Add("ddd");
                                ddd.Descripcion = "0/" + ss[1] + "/" + ss[2] + "/" + ss[3];
                                oLog.Add("ddd2");
                            oLog.Add("Mirar accion en 5 " + "0/" + ss[1] + "/" + ss[2] + "/" + ss[3]);
                            direcciones2.Insert(1, ddd);

                            oLog.Add("ddd3");
                            }
                            else
                            {
                                oLog.Add("ddd4");
                                ddd.Descripcion = "0/" + ss[1] + "/" + ss[2] + "/" + ss[3];
                                oLog.Add("ddd5");
                            oLog.Add("Mirar accion en 6 " + "0/" + ss[1] + "/" + ss[2] + "/" + ss[3]);
                            direcciones2.Add(ddd);

                            oLog.Add("ddd6");
                            }
                        }
                    }
                }


            

            Thread.Sleep(200);

            comprobar = false;

        }

        private int accionbus(string d,bool v)
        {
            string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);

            Log oLog = new Log(path2 + "\\Log");
            DateTime dt = DateTime.Now;
            dt.AddSeconds(5);
            int a = -1;
            try
            {
                Properties.Settings.Default.sepuede2 = false;
                this.Dispatcher.Invoke(() =>
                {
                    oLog.Add("Estado Conectado: " + Properties.Settings.Default.modulo);
                    if (!conectado)
                        _connection.Connect();
                    
                        oLog.Add("Action to:"+d+" "+v);
                    String[] ss = d.Split('/');

                    if (!conectado)
                        _connection.Connect();
                    Thread.Sleep(200);
                    oLog.Add("0/" + ss[1] + "/" + ss[2]);
                    if(v)
                    _connection.Action("0/"+ss[1]+"/"+ss[2],true);
                    else
                        _connection.Action("0/" + ss[1] + "/" + ss[2], false);
                    Thread.Sleep(500);

                        a = int.Parse(Properties.Settings.Default.Valor2);
                        oLog.Add("Estado: " + a);
                       
                            oLog.Add(buss.Items.Cast<Direcciones>().ToList().Find(x => x.Descripcion.Equals("1/" + ss[1] + "/" + ss[2]))+"");
                    if (buss.Items.Cast<Direcciones>().ToList().Find(x => x.Descripcion.Equals("1/" + ss[1] + "/" + ss[2])).imagee.Equals("ON"))
                    {
                        buss.Items.Cast<Direcciones>().ToList().Find(x => x.Descripcion.Equals("1/" + ss[1] + "/" + ss[2])).imagee = "OFF";
                        buss.Items.Cast<Direcciones>().ToList().Find(x => x.Descripcion.Equals("1/" + ss[1] + "/" + ss[2])).onIsSelected = false;

                    }
                    else
                    {
                        oLog.Add("Estado: ON");
                        buss.Items.Cast<Direcciones>().ToList().Find(x => x.Descripcion.Equals("1/" + ss[1] + "/" + ss[2])).imagee = "ON";
                        buss.Items.Cast<Direcciones>().ToList().Find(x => x.Descripcion.Equals("1/" + ss[1] + "/" + ss[2])).onIsSelected = true;
                    }

                        buss.Items.Refresh();
                        Clientes.Items.Refresh();

                    oLog.Add("Estado: estad");
                    return a;
                });
            }
            catch { oLog.Add("Estado: estaderr"); }
            oLog.Add("Estado: estad2");
            return a;
        }

       

        private void Button_Click_15(object sender, RoutedEventArgs e)
        {
            if (numero_plaza_alta.SelectedItem != null)
            { Parcelas p = numero_plaza_alta.SelectedItem as Parcelas;
                Direcciones d = ldir.Find(x => x.Id ==p.id);

                mirarcorriente(d.Descripcion);
            }
        }

        private async void mirarcorriente(string descripcion)
        {
            string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
            Log oLog = new Log(path2);
            CancellationTokenSource s_cts = new CancellationTokenSource();
            s_cts.CancelAfter(100);
            string corriente = "error";
            oLog.Add("Mirando a: " + descripcion);
            corriente = await mirarbus2(descripcion);
            oLog.Add("Mirando a: " + corriente);
            corrientes.Text = corriente;




        }

        private async Task<string> mirarbus2(string descripcion)
        {
            string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
            Log oLog = new Log(path2);
            DateTime dt = DateTime.Now;
            dt.AddSeconds(5);
            string a = "error";
            try
            {
                Properties.Settings.Default.sepuede3 = false;



                string[] desc = descripcion.Split('/');

                this.Dispatcher.Invoke(() =>
                {
                    oLog.Add("Estado Conectado: " + Properties.Settings.Default.modulo);
                    if (Properties.Settings.Default.modulo)
                    {
                        oLog.Add("Request to: 2/" + desc[1] + "/" + desc[2]);
                        Thread.Sleep(50);
                        cambiarNumero2 = new System.Threading.Timer(new TimerCallback(holaaa2), null, 400, 5000);
                        _connection.RequestStatus("2/" + desc[1] + "/" + desc[2]);

                        while (!Properties.Settings.Default.sepuede3)
                        {

                            oLog.Add("block");
                        }

                        a = Properties.Settings.Default.valor3;
                        Properties.Settings.Default.Save();
                        oLog.Add("Estado: " + a);

                        return a;
                    }
                    return a;
                });
            }
            catch { }
            return a;
        }

        private void holaaa2(object state)
        {
            Properties.Settings.Default.sepuede3 = true;
            Properties.Settings.Default.Save();
            cambiarNumero2.Change(-1, -1);
        }

        private void lock_MouseLeftButtonDown2(object sender, MouseButtonEventArgs e)
        {
            string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
            Log oLog = new Log(path2);
            oLog.Add("lock 1");
            if (Properties.Settings.Default.posicion == 0)
            {

                oLog.Add("lock 2");
                bdr4.HorizontalAlignment = HorizontalAlignment.Right;
                Properties.Settings.Default.posicion = 1;
                Properties.Settings.Default.Save();
                seguir = true;
                mirarDeNuevo = false;
                if (!conectado)
                    _connection.Connect();

                oLog.Add("lock 3");
                backgroundWorker1.RunWorkerAsync(0);
                //backgroundWorkertiempo.RunWorkerAsync(0);
                manualknx.Visibility = Visibility.Collapsed;
                automaticoknx.Visibility = Visibility.Visible;
                buss.IsEnabled = true;
                timerbox.Visibility = Visibility.Visible;
                if (Properties.Settings.Default.timer.Length > 1)
                    timerNumber.SelectedIndex = int.Parse(Properties.Settings.Default.timer) / 5 - 1;
                else
                {
                    Properties.Settings.Default.timer = 30 + "";
                    Properties.Settings.Default.Save();
                    int a = int.Parse(Properties.Settings.Default.timer) / 5 - 1;
                    timerNumber.SelectedIndex = a;
                }

                oLog.Add("lock 4 "+mirarRegistros);
                if (mirarRegistros != null)
                {
                    mirarRegistros.Change(Timeout.Infinite, Timeout.Infinite);
                    timepocnt = 0;
                    timerObs.Stop();
                }

                oLog.Add("lock 5");
                try
                {
                    mirarRegistros = new System.Threading.Timer(ObserverRegistros, null, int.Parse(Properties.Settings.Default.timer) * 60000, int.Parse(Properties.Settings.Default.timer) * 60000);
                    timepocnt = 0;
                    timerObs = new DispatcherTimer();
                    timerObs.Start();
                }
                catch(Exception ee)
                {
                    oLog.Add("Log error "+ee.Message);
                }
               

                oLog.Add("lock 6");
            }
            else
            {
                oLog.Add("lock 22");
                assa = false;
                bdr4.HorizontalAlignment = HorizontalAlignment.Left;
                Properties.Settings.Default.posicion = 0;
                manualknx.Visibility = Visibility.Visible;
                automaticoknx.Visibility = Visibility.Collapsed;
                Properties.Settings.Default.Save();
                buss.IsEnabled = true;
                    mirarDeNuevo = false;
                if (!conectado)
                    _connection.Connect();

                oLog.Add("lock 33");
                seguir = false;
                timerbox.Visibility = Visibility.Collapsed;

                oLog.Add("lock 44");
                if (mirarRegistros != null)
                {
                    mirarRegistros.Change(Timeout.Infinite, Timeout.Infinite);
                    timepocnt = 0;
                    timerObs.Stop();
                }


                oLog.Add("lock 8");
            }
        }

        private void Facturas_SizeChanged(object sender, SizeChangedEventArgs e)
        {
            ListView l = (ListView)sender;
            DataTemplate dt = l.ItemTemplate;
            Border b = (Border)dt.LoadContent();
            Grid ff = (Grid)b.Child;
            Console.WriteLine("Lista" + Clientes.ActualWidth);
            Double d = Clientes.ActualWidth / 8;
            Console.WriteLine("double1" + d);
            ff.ColumnDefinitions.Clear();


            for (int i = 0; i < 9; i++)
            {

                switch (i)
                {
                    case 0:
                        {
                            ColumnDefinition df = new ColumnDefinition();
                            df.Width = new System.Windows.GridLength(Facturas.ActualWidth * 0.05);
                            df.MaxWidth = Facturas.ActualWidth * 0.05;
                            ff.ColumnDefinitions.Add(df);
                        }
                        break;
                    case 1:
                        {
                            ColumnDefinition df = new ColumnDefinition();
                            df.Width = new System.Windows.GridLength(Facturas.ActualWidth * 0.25);
                            df.MaxWidth = Facturas.ActualWidth * 0.25;
                            ff.ColumnDefinitions.Add(df);
                        }
                        break;
                    case 2:
                        {
                            ColumnDefinition df = new ColumnDefinition();
                            df.Width = new System.Windows.GridLength(Facturas.ActualWidth * 0.1);
                            df.MaxWidth = Facturas.ActualWidth * 0.1;
                            ff.ColumnDefinitions.Add(df);

                        }
                        break;
                    case 3:
                        {
                            ColumnDefinition df = new ColumnDefinition();
                            df.Width = new System.Windows.GridLength(Facturas.ActualWidth * 0.15);
                            df.MaxWidth = Facturas.ActualWidth * 0.15;
                            ff.ColumnDefinitions.Add(df);
                        }
                        break;
                    case 4:
                        {
                            ColumnDefinition df = new ColumnDefinition();
                            df.Width = new System.Windows.GridLength(Facturas.ActualWidth * 0.1);
                            df.MaxWidth = Facturas.ActualWidth * 0.1;
                            ff.ColumnDefinitions.Add(df);
                        }
                        break;
                    case 5:
                        {
                            ColumnDefinition df = new ColumnDefinition();
                            df.Width = new System.Windows.GridLength(Facturas.ActualWidth * 0.05);
                            df.MaxWidth = Facturas.ActualWidth * 0.05;
                            ff.ColumnDefinitions.Add(df);
                        }
                        break;
                    case 6:
                        {
                            ColumnDefinition df = new ColumnDefinition();
                            df.Width = new System.Windows.GridLength(Facturas.ActualWidth * 0.1);
                            df.MaxWidth = Facturas.ActualWidth * 0.1;
                            ff.ColumnDefinitions.Add(df);
                        }
                        break;
                    case 7:
                        {
                            ColumnDefinition df = new ColumnDefinition();
                            df.Width = new System.Windows.GridLength(Facturas.ActualWidth * 0.1);
                            df.MaxWidth = Facturas.ActualWidth * 0.1;
                            ff.ColumnDefinitions.Add(df);
                        }
                        break;
                    case 8:
                        {
                            ColumnDefinition df = new ColumnDefinition();
                            df.Width = new System.Windows.GridLength(Facturas.ActualWidth * 0.1);
                            df.MaxWidth = Facturas.ActualWidth * 0.1;
                            ff.ColumnDefinitions.Add(df);
                        }
                        break;


                }
            }
            foreach (ColumnDefinition cd in ff.ColumnDefinitions)
            {

                Console.WriteLine(cd.Width);
            }

            Facturas.ItemsSource = null;
            Facturas.ItemsSource = lfct;
            Facturas.Items.Refresh();
            ff.UpdateLayout();

        }

        private void Usuarios_SizeChanged(object sender, SizeChangedEventArgs e)
        {
            ListView l = (ListView)sender;
            DataTemplate dt = l.ItemTemplate;
            Border b = (Border)dt.LoadContent();
            Grid ff = (Grid)b.Child;
            Double d = Usuarios.ActualWidth / 5;
            ff.ColumnDefinitions.Clear();
            Console.WriteLine(Usuarios.ActualWidth);
            for (int i = 0; i < 5; i++)
            {
                ColumnDefinition df = new ColumnDefinition();
                df.Width = new System.Windows.GridLength(d);
                df.MaxWidth = d;
                ff.ColumnDefinitions.Add(df);
            }
            foreach (ColumnDefinition cd in ff.ColumnDefinitions)
            {


                Console.WriteLine(cd.Width);
            }
            Usuarios.ItemsSource = null;
            Usuarios.ItemsSource = lusr;
            ff.UpdateLayout();
        }

        private void Clientes_SizeChanged(object sender, SizeChangedEventArgs e)
        {
            ListView l = (ListView)sender;
            DataTemplate dt = l.ItemTemplate;
            Border b = (Border)dt.LoadContent();
            Grid ff = (Grid)b.Child;
            Console.WriteLine("Lista" + Clientes.ActualWidth);
            Double d = Clientes.ActualWidth / 8;
            Console.WriteLine("double1" + d);
            ff.ColumnDefinitions.Clear();
            
            
            for (int i = 0; i < 8; i++)
            {

                switch (i)
                {
                    case 0:
                        {
                            ColumnDefinition df = new ColumnDefinition();
                            df.Width = new System.Windows.GridLength(Clientes.ActualWidth * 0.1);
                            df.MaxWidth = Clientes.ActualWidth * 0.1;
                            ff.ColumnDefinitions.Add(df);
                        }
                        break;
                    case 1:
                        {
                            ColumnDefinition df = new ColumnDefinition();
                            df.Width = new System.Windows.GridLength(Clientes.ActualWidth * 0.2);
                            df.MaxWidth = Clientes.ActualWidth * 0.2;
                            ff.ColumnDefinitions.Add(df);
                        }
                        break;
                    case 2:
                        {
                            ColumnDefinition df = new ColumnDefinition();
                            df.Width = new System.Windows.GridLength(Clientes.ActualWidth * 0.1);
                            df.MaxWidth = Clientes.ActualWidth * 0.1;
                            ff.ColumnDefinitions.Add(df);
                            
                        }
                        break;
                    case 3:
                        {
                            ColumnDefinition df = new ColumnDefinition();
                            df.Width = new System.Windows.GridLength(Clientes.ActualWidth * 0.1);
                            df.MaxWidth = Clientes.ActualWidth * 0.1;
                            ff.ColumnDefinitions.Add(df);
                        }
                        break;
                    case 4:
                        {
                            ColumnDefinition df = new ColumnDefinition();
                            df.Width = new System.Windows.GridLength(Clientes.ActualWidth * 0.1);
                            df.MaxWidth = Clientes.ActualWidth * 0.1;
                            ff.ColumnDefinitions.Add(df);
                        }
                        break;
                    case 5:
                        {
                            ColumnDefinition df = new ColumnDefinition();
                            df.Width = new System.Windows.GridLength(Clientes.ActualWidth * 0.1);
                            df.MaxWidth = Clientes.ActualWidth * 0.1;
                            ff.ColumnDefinitions.Add(df);
                        }
                        break;
                    case 6:
                        {
                            ColumnDefinition df = new ColumnDefinition();
                            df.Width = new System.Windows.GridLength(Clientes.ActualWidth * 0.12);
                            df.MaxWidth = Clientes.ActualWidth * 0.12;
                            ff.ColumnDefinitions.Add(df);
                        }
                        break;
                    case 7:
                        {
                            ColumnDefinition df = new ColumnDefinition();
                            df.Width = new System.Windows.GridLength(Clientes.ActualWidth * 0.08);
                            df.MaxWidth = Clientes.ActualWidth*0.08;
                            ff.ColumnDefinitions.Add(df);
                        }
                        break;


                }
            }
            foreach (ColumnDefinition cd in ff.ColumnDefinitions)
            {


                Console.WriteLine(cd.Width);
            }

            Clientes.ItemsSource = null;
            Clientes.ItemsSource = lcln;
            ff.UpdateLayout();
        }

        private void Recibos_SizeChanged(object sender, SizeChangedEventArgs e)
        {
            ListView l = (ListView)sender;
            DataTemplate dt = l.ItemTemplate;
            Border b = (Border)dt.LoadContent();
            Grid ff = (Grid)b.Child;
            Console.WriteLine("Lista" + Clientes.ActualWidth);
            Double d = Clientes.ActualWidth / 8;
            Console.WriteLine("double1" + d);
            ff.ColumnDefinitions.Clear();


            for (int i = 0; i < 9; i++)
            {

                switch (i)
                {
                    case 0:
                        {
                            ColumnDefinition df = new ColumnDefinition();
                            df.Width = new System.Windows.GridLength(Recibos.ActualWidth * 0.05);
                            df.MaxWidth = Recibos.ActualWidth * 0.05;
                            ff.ColumnDefinitions.Add(df);
                        }
                        break;
                    case 1:
                        {
                            ColumnDefinition df = new ColumnDefinition();
                            df.Width = new System.Windows.GridLength(Recibos.ActualWidth * 0.25);
                            df.MaxWidth = Recibos.ActualWidth * 0.25;
                            ff.ColumnDefinitions.Add(df);
                        }
                        break;
                    case 2:
                        {
                            ColumnDefinition df = new ColumnDefinition();
                            df.Width = new System.Windows.GridLength(Recibos.ActualWidth * 0.1);
                            df.MaxWidth = Recibos.ActualWidth * 0.1;
                            ff.ColumnDefinitions.Add(df);

                        }
                        break;
                    case 3:
                        {
                            ColumnDefinition df = new ColumnDefinition();
                            df.Width = new System.Windows.GridLength(Recibos.ActualWidth * 0.15);
                            df.MaxWidth = Recibos.ActualWidth * 0.15;
                            ff.ColumnDefinitions.Add(df);
                        }
                        break;
                    case 4:
                        {
                            ColumnDefinition df = new ColumnDefinition();
                            df.Width = new System.Windows.GridLength(Recibos.ActualWidth * 0.1);
                            df.MaxWidth = Recibos.ActualWidth * 0.1;
                            ff.ColumnDefinitions.Add(df);
                        }
                        break;
                    case 5:
                        {
                            ColumnDefinition df = new ColumnDefinition();
                            df.Width = new System.Windows.GridLength(Recibos.ActualWidth * 0.05);
                            df.MaxWidth = Recibos.ActualWidth * 0.05;
                            ff.ColumnDefinitions.Add(df);
                        }
                        break;
                    case 6:
                        {
                            ColumnDefinition df = new ColumnDefinition();
                            df.Width = new System.Windows.GridLength(Recibos.ActualWidth * 0.1);
                            df.MaxWidth = Recibos.ActualWidth * 0.1;
                            ff.ColumnDefinitions.Add(df);
                        }
                        break;
                    case 7:
                        {
                            ColumnDefinition df = new ColumnDefinition();
                            df.Width = new System.Windows.GridLength(Recibos.ActualWidth * 0.1);
                            df.MaxWidth = Recibos.ActualWidth * 0.1;
                            ff.ColumnDefinitions.Add(df);
                        }
                        break;
                    case 8:
                        {
                            ColumnDefinition df = new ColumnDefinition();
                            df.Width = new System.Windows.GridLength(Recibos.ActualWidth * 0.1);
                            df.MaxWidth = Recibos.ActualWidth * 0.1;
                            ff.ColumnDefinitions.Add(df);
                        }
                        break;


                }
            }
            foreach (ColumnDefinition cd in ff.ColumnDefinitions)
            {

                Console.WriteLine(cd.Width);
            }

            Recibos.ItemsSource = null;
            Recibos.ItemsSource = lrcb;
            ff.UpdateLayout();
        }

        private void lista_productos_SizeChanged(object sender, SizeChangedEventArgs e)
        {
            ListView l = (ListView)sender;
            DataTemplate dt = l.ItemTemplate;
            Border b = (Border)dt.LoadContent();
            Grid ff = (Grid)b.Child;
            Console.WriteLine("Lista" + lista_productos.ActualWidth);
            Double d = lista_productos.ActualWidth / 5;
            Console.WriteLine("double1" + d);
            ff.ColumnDefinitions.Clear();
            for (int i = 0; i < 5; i++)
            {
                ColumnDefinition df = new ColumnDefinition();
                df.Width = new System.Windows.GridLength(d);
                df.MaxWidth = d;
                ff.ColumnDefinitions.Add(df);
            }
            foreach (ColumnDefinition cd in ff.ColumnDefinitions)
            {


                Console.WriteLine(cd.Width);
            }
            
            lista_productos.ItemsSource =  lista_productos.ItemsSource;

            lista_productos.Items.Refresh();
            ff.UpdateLayout();

        }

        private void Window_SizeChanged(object sender, SizeChangedEventArgs e)
        {
            Properties.Settings.Default.UsuariosWidth = Convert.ToInt32(this.ActualWidth * 0.97) + "";
            Properties.Settings.Default.UsuariosWidth = Convert.ToInt32(this.ActualWidth * 0.97) + "";
            //Properties.Settings.Default.LabelwidthFactura = Double.Parse(Facturas.ActualWidth / 9 + "");
            //Console.WriteLine(Facturas.ActualWidth / 9);
            //Console.WriteLine();

            Console.WriteLine(this.ActualWidth + " " + this.ActualHeight);

            Properties.Settings.Default.Save();

            if (System.Windows.Forms.Screen.PrimaryScreen.Bounds.Height > 900)
            {
                Properties.Settings.Default.Height = 40;
                Properties.Settings.Default.FontSize_Text = 12;
                Properties.Settings.Default.Height2 = 40;
                Properties.Settings.Default.Borderwidht = 60;
                Properties.Settings.Default.Borderheight = 25;
                Properties.Settings.Default.Botonheight = 27;
                Properties.Settings.Default.Botonwidht = 40;
                Productos.Height = 200;


            }
            else
            {
                Properties.Settings.Default.Height = 25;

                Properties.Settings.Default.FontSize_Text = 9;

                Properties.Settings.Default.Height2 = 25;
                Properties.Settings.Default.Height_box = 150;
                Properties.Settings.Default.Height3 = 25;
                Properties.Settings.Default.mapheight = 600;
                Properties.Settings.Default.mapwidth = 1100;

                Properties.Settings.Default.Borderwidht = 50;

                Properties.Settings.Default.Borderheight = 25;
                Properties.Settings.Default.Botonheight = 23;
                Properties.Settings.Default.Botonwidht = 30;
                Productos.Height = 135;

            }
            Properties.Settings.Default.Save();
        }

        private void botonesTab_SizeChanged(object sender, SizeChangedEventArgs e)
        {
            
            if (this.ActualWidth < 1400)
            {
                Console.WriteLine(this.ActualWidth);
                Grid g = (Grid)sender;

                g.ColumnDefinitions.Clear();
                for (int i = 0; i < 8; i++)
                {
                   
                    if (i >= 0 && i < 7)
                    {
                        ColumnDefinition cd = new ColumnDefinition();
                        cd.Width = new System.Windows.GridLength(120);
                        g.ColumnDefinitions.Add(cd);

                    }
                    if (i == 7)
                    {
                        ColumnDefinition cd = new ColumnDefinition();
                        cd.Width = new System.Windows.GridLength(1, GridUnitType.Star);
                        g.ColumnDefinitions.Add(cd);

                    }

                }
            }
            else
            {
                Console.WriteLine(this.ActualWidth);
                Grid g = (Grid)sender;

                g.ColumnDefinitions.Clear();
                for (int i = 0; i < 8; i++)
                {

                    if (i >= 0 && i < 7)
                    {
                        ColumnDefinition cd = new ColumnDefinition();
                        cd.Width = new System.Windows.GridLength(150);
                        g.ColumnDefinitions.Add(cd);

                    }
                    if (i == 7)
                    {
                        ColumnDefinition cd = new ColumnDefinition();
                        cd.Width = new System.Windows.GridLength(1, GridUnitType.Star);
                        g.ColumnDefinitions.Add(cd);

                    }

                }
            }
        }
        private void Label_SizeChanged_Factura(object sender, SizeChangedEventArgs e)
        {

            int rowIndex = Grid.GetColumn((UIElement)sender);
            Console.WriteLine(rowIndex);

            foreach (ColumnDefinition cd in gridd1.ColumnDefinitions)
            {
                Console.WriteLine(cd.ActualWidth);
            }

            switch (rowIndex)
            {
                case 0:
                    {
                        if (sender is Label)
                        {
                            Label l = (Label)sender;
                            l.MaxWidth = gridd2.ColumnDefinitions[0].ActualWidth;
                            l.Width = gridd2.ColumnDefinitions[0].ActualWidth;
                        }
                        if (sender is TextBlock)
                        {
                            TextBlock l = (TextBlock)sender;
                            l.MaxWidth = gridd2.ColumnDefinitions[0].ActualWidth;
                        }
                        if (sender is Grid)
                        {
                            Grid l = (Grid)sender;
                            l.MaxWidth = gridd2.ColumnDefinitions[0].ActualWidth + 30;
                        }
                    }
                    break;
                case 1:
                    {
                        if (sender is Label)
                        {
                            Label l = (Label)sender;
                            l.MaxWidth = gridd2.ColumnDefinitions[1].ActualWidth;

                        }
                        if (sender is TextBlock)
                        {
                            TextBlock l = (TextBlock)sender;
                            l.MaxWidth = gridd2.ColumnDefinitions[1].ActualWidth;

                        }
                    }
                    break;
                case 2:
                    {
                        if (sender is Label)
                        {
                            Label l = (Label)sender;
                            l.MaxWidth = gridd2.ColumnDefinitions[2].ActualWidth;

                        }
                        if (sender is TextBlock)
                        {
                            TextBlock l = (TextBlock)sender;
                            l.MaxWidth = gridd2.ColumnDefinitions[2].ActualWidth;

                        }
                    }
                    break;
                case 3:
                    {
                        if (sender is Label)
                        {
                            Label l = (Label)sender;
                            l.MaxWidth = gridd2.ColumnDefinitions[3].ActualWidth;

                        }
                        if (sender is TextBlock)
                        {
                            TextBlock l = (TextBlock)sender;
                            l.MaxWidth = gridd2.ColumnDefinitions[3].ActualWidth;

                        }
                    }
                    break;
                case 4:
                    {
                        if (sender is Label)
                        {
                            Label l = (Label)sender;
                            l.MaxWidth = gridd2.ColumnDefinitions[4].ActualWidth;

                        }
                        if (sender is TextBlock)
                        {
                            TextBlock l = (TextBlock)sender;
                            l.MaxWidth = gridd2.ColumnDefinitions[4].ActualWidth;

                        }
                    }
                    break;
                case 5:
                    {
                        if (sender is Label)
                        {
                            Label l = (Label)sender;
                            l.MaxWidth = gridd2.ColumnDefinitions[5].ActualWidth;

                        }
                        if (sender is TextBlock)
                        {
                            TextBlock l = (TextBlock)sender;
                            l.MaxWidth = gridd2.ColumnDefinitions[5].ActualWidth;

                        }
                    }
                    break;
                case 6:
                    {
                        if (sender is Label)
                        {
                            Label l = (Label)sender;
                            l.MaxWidth = gridd2.ColumnDefinitions[6].ActualWidth;

                        }
                        if (sender is TextBlock)
                        {
                            TextBlock l = (TextBlock)sender;
                            l.MaxWidth = gridd2.ColumnDefinitions[6].ActualWidth;

                        }
                    }
                    break;
                case 7:
                    {
                        if (sender is Label)
                        {
                            Label l = (Label)sender;
                            l.MaxWidth = gridd2.ColumnDefinitions[7].ActualWidth;

                        }
                        if (sender is TextBlock)
                        {
                            TextBlock l = (TextBlock)sender;

                            l.MaxWidth = gridd2.ColumnDefinitions[7].ActualWidth;

                        }
                    }
                    break;
                case 8:
                    {
                        if (sender is Label)
                        {
                            Label l = (Label)sender;
                            l.MaxWidth = gridd2.ColumnDefinitions[8].ActualWidth;

                        }
                        if (sender is TextBlock)
                        {
                            TextBlock l = (TextBlock)sender;

                            l.MaxWidth = gridd2.ColumnDefinitions[8].ActualWidth;

                        }
                    }
                    break;

            }
        }

        private void Label_SizeChanged_Clientes(object sender, SizeChangedEventArgs e)
        {
            
            int rowIndex = Grid.GetColumn((UIElement)sender);
            Console.WriteLine(rowIndex);

            foreach (ColumnDefinition cd in gridd1.ColumnDefinitions)
            {
                Console.WriteLine(cd.ActualWidth);
            }

            switch (rowIndex)
            {
                case 0:
                    {
                        if (sender is Label)
                        {
                            Label l = (Label)sender;
                            l.MaxWidth = gridd1.ColumnDefinitions[0].ActualWidth;
                        }
                        if (sender is TextBlock)
                        {
                            TextBlock l = (TextBlock)sender;
                            l.MaxWidth = gridd1.ColumnDefinitions[0].ActualWidth;
                        }
                        if (sender is Grid)
                        {
                            Grid l = (Grid)sender;
                            l.MaxWidth = gridd1.ColumnDefinitions[0].ActualWidth-30;
                        }
                    }
                    break;
                case 1:
                    {
                        if (sender is Label)
                        {
                            Label l = (Label)sender;
                            l.MaxWidth = gridd1.ColumnDefinitions[1].ActualWidth;

                        }
                        if (sender is TextBlock)
                        {
                            TextBlock l = (TextBlock)sender;
                            l.MaxWidth = gridd1.ColumnDefinitions[1].ActualWidth;

                        }
                    }
                    break;
                case 2:
                    {
                        if (sender is Label)
                        {
                            Label l = (Label)sender;
                            l.MaxWidth = gridd1.ColumnDefinitions[2].ActualWidth;

                        }
                        if (sender is TextBlock)
                        {
                            TextBlock l = (TextBlock)sender;
                            l.MaxWidth = gridd1.ColumnDefinitions[2].ActualWidth;

                        }
                    }
                    break;
                case 3:
                    {
                        if (sender is Label)
                        {
                            Label l = (Label)sender;
                            l.MaxWidth = gridd1.ColumnDefinitions[3].ActualWidth;

                        }
                        if (sender is TextBlock)
                        {
                            TextBlock l = (TextBlock)sender;
                            l.MaxWidth = gridd1.ColumnDefinitions[3].ActualWidth;

                        }
                    }
                    break;
                case 4:
                    {
                        if (sender is Label)
                        {
                            Label l = (Label)sender;
                            l.MaxWidth = gridd1.ColumnDefinitions[4].ActualWidth;

                        }
                        if (sender is TextBlock)
                        {
                            TextBlock l = (TextBlock)sender;
                            l.MaxWidth = gridd1.ColumnDefinitions[4].ActualWidth;

                        }
                    }
                    break;
                case 5:
                    {
                        if (sender is Label)
                        {
                            Label l = (Label)sender;
                            l.MaxWidth = gridd1.ColumnDefinitions[5].ActualWidth;

                        }
                        if (sender is TextBlock)
                        {
                            TextBlock l = (TextBlock)sender;
                            l.MaxWidth = gridd1.ColumnDefinitions[5].ActualWidth;

                        }
                    }
                    break;
                case 6:
                    {
                        if (sender is Label)
                        {
                            Label l = (Label)sender;
                            l.MaxWidth = gridd1.ColumnDefinitions[6].ActualWidth;

                        }
                        if (sender is TextBlock)
                        {
                            TextBlock l = (TextBlock)sender;
                            l.MaxWidth = gridd1.ColumnDefinitions[6].ActualWidth;

                        }
                    }
                    break;
                case 7:
                    {
                        if (sender is Label)
                        {
                            Label l = (Label)sender;
                            l.MaxWidth = gridd1.ColumnDefinitions[7].ActualWidth;

                        }
                        if (sender is TextBlock)
                        {
                            TextBlock l = (TextBlock)sender;

                            l.MaxWidth = gridd1.ColumnDefinitions[7].ActualWidth;

                        }
                    }
                    break; 

            }
        }

        private void Label_SizeChanged_Usuario(object sender, SizeChangedEventArgs e)
        {
            if (sender is Label)
            {
                Label l = (Label)sender;

                l.MaxWidth = Usuarios.ActualWidth / 5;
                //Console.WriteLine(l.MaxWidth);
            }
            if (sender is TextBlock)
            {
                TextBlock l = (TextBlock)sender;

                l.MaxWidth = Usuarios.ActualWidth / 5;
                //Console.WriteLine(l.MaxWidth);
            }
        }

        private void Label_SizeChanged_Rol(object sender, SizeChangedEventArgs e)
        {

        }

        private void Label_SizeChanged_Recibo(object sender, SizeChangedEventArgs e)
        {
            if (sender is Label)
            {
                Label l = (Label)sender;

                l.MaxWidth = Recibos.ActualWidth / 7;
                //Console.WriteLine(l.MaxWidth);
            }
            if (sender is TextBlock)
            {
                TextBlock l = (TextBlock)sender;

                l.MaxWidth = Recibos.ActualWidth / 7;
                //Console.WriteLine(l.MaxWidth);
            }
        }

        private void Label_SizeChanged_Productos(object sender, SizeChangedEventArgs e)
        {
            if (sender is Label)
            {
                Label l = (Label)sender;

                l.MaxWidth = lista_productos.ActualWidth / 5;
                //Console.WriteLine(l.MaxWidth);
            }
            if (sender is TextBlock)
            {
                TextBlock l = (TextBlock)sender;

                l.MaxWidth = lista_productos.ActualWidth / 5;
                //Console.WriteLine(l.MaxWidth);
            }
        }

        private void mirarFactura2(object sender, TextChangedEventArgs e)
        {
            if (Recibos.SelectedItem != null)
            {
                Recibos f = Recibos.SelectedItem as Recibos;
                bool a = false;
                if (!Nombre_Cliente_Factura2.Text.Equals(f.Nombre_Cliente))
                {
                    a = true;
                    Nombre_Cliente_Factura2.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Nombre_Cliente_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (!DNI_Cliente_Factura2.Text.Equals(f.DNI_CIF))
                {
                    a = true;
                    DNI_Cliente_Factura2.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    DNI_Cliente_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (!Direccion_Camping_Factura2.Text.Equals(f.Direccion_Facturacion))
                {
                    a = true;
                    Direccion_Camping_Factura2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Direccion_Camping_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (!Poblacion_Camping_Factura2.Text.Equals(f.Poblecion_Facturacion))
                {
                    a = true;
                    Poblacion_Camping_Factura2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Poblacion_Camping_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (!Codigo_Postal_Camping_Factura2.Text.Equals(f.CP_Facturacion.ToString()))
                {
                    Codigo_Postal_Camping_Factura2.BorderBrush = Brushes.Red;
                    a = true;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Codigo_Postal_Camping_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (!Provincia_Camping_Factura2.Text.Equals(f.Provincia_Facturacion))

                {
                    a = true;
                    Provincia_Camping_Factura2.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Provincia_Camping_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (!Fecha_Factura2.SelectedDate.Equals(f.fecha))
                {
                    a = true;
                    Fecha_Factura2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Fecha_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (!Fecha_Factura_ven2.SelectedDate.Equals(f.fecha_ven))
                {
                    a = true;
                    Fecha_Factura_ven2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Fecha_Factura_ven2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (!Base_Imponible2.Text.Equals(f.BI.ToString("0.00") + " €"))
                {
                    a = true;
                    Base_Imponible2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Base_Imponible2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }





                if (!Direccion_Cliente_Factura2.Text.Equals(f.Direccion_Cliente))
                {
                    a = true;
                    Direccion_Cliente_Factura2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Direccion_Cliente_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (!Poblacion_Cliente_Factura2.Text.Equals(f.Poblacio_Cliente))
                {
                    a = true;
                    Poblacion_Cliente_Factura2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Poblacion_Cliente_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (!Codigo_Postal_Cliente_Facturacion2.Text.Equals(f.CP_Cliente.ToString()))
                {
                    a = true;
                    Codigo_Postal_Cliente_Facturacion2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Codigo_Postal_Cliente_Facturacion2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (!Provincia_Cliente_Factura2.Text.Equals(f.Provincia_Cliente))
                {
                    a = true;
                    Provincia_Cliente_Factura2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Provincia_Cliente_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }



                if (!Pais_Cliente_Factura2.Text.Equals(f.Pais_Cliente))
                {
                    a = true;
                    Pais_Camping_Factura2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Pais_Cliente_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (!Pais_Camping_Factura2.Text.Equals(f.Pais_Facturacion))
                {
                    a = true;
                    Pais_Camping_Factura2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Pais_Camping_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (!Empresa2.Text.Equals(f.Empresa))
                {
                    a = true;
                    Empresa2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Empresa2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }


                if (!Telefono_cliente2.Text.Equals(f.Telefono))
                {
                    a = true;
                    Metodo_Pago2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Telefono_cliente2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (!Telefono_Camping_Factura2.Text.Equals(f.Telefono_Camping))
                {
                    a = true;
                    Telefono_Camping_Factura2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Telefono_Camping_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (!Mail_cliente2.Text.Equals(f.Mail))
                {
                    a = true;
                    Mail_cliente2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Mail_cliente2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (Metodo_Pago2.SelectedIndex != f.Metodo_Pago)
                {
                    a = true;
                    Metodo_Pago2.Foreground = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Metodo_Pago2.Foreground = Brushes.Black;
                }

                if (f.Lista_productos.Count == Productos2.Items.Count)
                {

                    foreach (Producto p in Productos2.Items)
                    {
                        if (!f.Lista_productos.Contains(p))
                        {
                            a = true;
                            Productos2.BorderBrush = Brushes.Red;
                            break;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Productos2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        }

                    }
                }
                else
                    a = true;

                if (a)
                {
                    change_Factura.IsEnabled = true;
                    safe = true;

                }
                else
                {
                    change_Factura.IsEnabled = false;
                    safe = false;
                }

            }
        }

        private void Metodo_Pago_SelectionChanged2(object sender, SelectionChangedEventArgs e)
        {

        }

        private void mirarFactura5(object sender, TextChangedEventArgs e)
        {
            float total = 0;
            float BI = 0;
            float Imp = 0;
            tasa = 0;
            foreach (Producto p2 in Productos.Items)
            {
                if (p2.Nombre_Producto.ToLower().Contains("tasa turisitca"))
                {
                    tasa += float.Parse(p2.Precio.Replace(" €", ""));
                }
                else
                {
                    p2.Precio = p2.Precio.Replace(" €", "");
                    p2.Impuesto = p2.Impuesto.Replace(" €", "");
                    BI += int.Parse(p2.Cantidad) * float.Parse(p2.Precio);
                    Imp += float.Parse(p2.Impuesto);
                    total += float.Parse(p2.Total.Replace("€", ""));
                }
            }
            string d = "0";
            if (Descuento.Text.Length!=0)
            {
                d = Descuento.Text;
            }
            total = total * (1 - (float.Parse(d) / 100));
            Base_Imponible.Text = BI.ToString("0.00") + " €";
            Cuota_IVA.Text = Imp.ToString("0.00") + " €";
            Importe_Factura.Text = (total + tasa).ToString("0.00") + " €";
            if (Facturas.SelectedItem != null)
            {
                Facturas f = Facturas.SelectedItem as Facturas;
                bool a = false;
                if (!Nombre_Cliente_Factura.Text.Equals(f.Nombre_Cliente))
                {
                    a = true;
                    Nombre_Cliente_Factura.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Nombre_Cliente_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (!DNI_Cliente_Factura.Text.Equals(f.DNI_CIF))
                {
                    a = true;
                    DNI_Cliente_Factura.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    DNI_Cliente_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (!Direccion_Camping_Factura.Text.Equals(f.Direccion_Facturacion))
                {
                    a = true;
                    Direccion_Camping_Factura.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Direccion_Camping_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (!Poblacion_Camping_Factura.Text.Equals(f.Poblecion_Facturacion))
                {
                    a = true;
                    Poblacion_Camping_Factura.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Poblacion_Camping_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (!Codigo_Postal_Camping_Factura.Text.Equals(f.CP_Facturacion.ToString()))
                {
                    Codigo_Postal_Camping_Factura.BorderBrush = Brushes.Red;
                    a = true;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Codigo_Postal_Camping_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (!Provincia_Camping_Factura.Text.Equals(f.Provincia_Facturacion))

                {
                    a = true;
                    Provincia_Camping_Factura.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Provincia_Camping_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (!Fecha_Factura.SelectedDate.Equals(f.fecha))
                {
                    a = true;
                    Fecha_Factura.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Fecha_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (!Fecha_Factura_ven.SelectedDate.Equals(f.fecha_ven))
                {
                    a = true;
                    Fecha_Factura_ven.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Fecha_Factura_ven.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (!Base_Imponible.Text.Equals(f.BI.ToString("0.00") + " €"))
                {
                    a = true;
                    Base_Imponible.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Base_Imponible.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }





                if (!Direccion_Cliente_Factura.Text.Equals(f.Direccion_Cliente))
                {
                    a = true;
                    Direccion_Cliente_Factura.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Direccion_Cliente_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (!Poblacion_Cliente_Factura.Text.Equals(f.Poblacio_Cliente))
                {
                    a = true;
                    Poblacion_Cliente_Factura.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Poblacion_Cliente_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (!Codigo_Postal_Cliente_Facturacion.Text.Equals(f.CP_Cliente.ToString()))
                {
                    a = true;
                    Codigo_Postal_Cliente_Facturacion.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Codigo_Postal_Cliente_Facturacion.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (!Provincia_Cliente_Factura.Text.Equals(f.Provincia_Cliente))
                {
                    a = true;
                    Provincia_Cliente_Factura.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Provincia_Cliente_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }



                if (!Pais_Cliente_Factura.Text.Equals(f.Pais_Cliente))
                {
                    a = true;
                    Pais_Camping_Factura.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Pais_Cliente_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (!Pais_Camping_Factura.Text.Equals(f.Pais_Facturacion))
                {
                    a = true;
                    Pais_Camping_Factura.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Pais_Camping_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (!Empresa.Text.Equals(f.Empresa))
                {
                    a = true;
                    Empresa.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Empresa.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }


                if (!Telefono_cliente.Text.Equals(f.Telefono))
                {
                    a = true;
                    Metodo_Pago.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Telefono_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (!Telefono_Camping_Factura.Text.Equals(f.Telefono_Camping))
                {
                    a = true;
                    Telefono_Camping_Factura.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Telefono_Camping_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (!Mail_cliente.Text.Equals(f.Mail))
                {
                    a = true;
                    Mail_cliente.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Mail_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (Metodo_Pago.SelectedIndex != f.Metodo_Pago)
                {
                    a = true;
                    Metodo_Pago.Foreground = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Metodo_Pago.Foreground = Brushes.Black;
                }
                if (!Descuento.Text.Equals(f.Descuento))
                {
                    a = true;
                    Descuento.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Descuento.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (f.Lista_productos.Count == Productos.Items.Count)
                {

                    foreach (Producto p in Productos.Items)
                    {
                        if (!f.Lista_productos.Contains(p))
                        {
                            a = true;
                            Productos.BorderBrush = Brushes.Red;
                            break;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Productos.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        }

                    }
                }
                else
                    a = true;

                if (a)
                {
                    change_Factura.IsEnabled = true;
                    safe = true;

                }
                else
                {
                    change_Factura.IsEnabled = false;
                    safe = false;
                }
            }
        }

        private void mirarFactura6(object sender, SelectionChangedEventArgs e)
        {
            if (Facturas.SelectedItem != null)
            {
                Facturas f = Facturas.SelectedItem as Facturas;

                bool a = false;
                if (!Nombre_Cliente_Factura.Text.Equals(f.Nombre_Cliente))
                {
                    a = true;
                    Nombre_Cliente_Factura.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Nombre_Cliente_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                Console.WriteLine("1 " + a);

                if (!DNI_Cliente_Factura.Text.Equals(f.DNI_CIF))
                {
                    a = true;
                    DNI_Cliente_Factura.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    DNI_Cliente_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                Console.WriteLine("2 " + a);
                if (!Direccion_Camping_Factura.Text.Equals(f.Direccion_Facturacion))
                {
                    a = true;
                    Direccion_Camping_Factura.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Direccion_Camping_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                Console.WriteLine("3 " + a);
                if (!Poblacion_Camping_Factura.Text.Equals(f.Poblecion_Facturacion))
                {
                    a = true;
                    Poblacion_Camping_Factura.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Poblacion_Camping_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                Console.WriteLine("4 " + a);

                if (!Codigo_Postal_Camping_Factura.Text.Equals(f.CP_Facturacion.ToString()))
                {
                    Codigo_Postal_Camping_Factura.BorderBrush = Brushes.Red;
                    a = true;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Codigo_Postal_Camping_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                Console.WriteLine("5 " + a);
                if (!Provincia_Camping_Factura.Text.Equals(f.Provincia_Facturacion))

                {
                    a = true;
                    Provincia_Camping_Factura.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Provincia_Camping_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                Console.WriteLine("6 " + a);
                if (!Fecha_Factura.SelectedDate.Equals(f.fecha))
                {
                    a = true;
                    Fecha_Factura.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Fecha_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                Console.WriteLine("7 " + a);
                if (!Fecha_Factura_ven.SelectedDate.Equals(f.fecha_ven))
                {
                    a = true;
                    Fecha_Factura_ven.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Fecha_Factura_ven.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                Console.WriteLine("8 " + a);
                if (!Importe_Factura.Text.Equals(f.Importe.ToString("0.00") + " €"))
                {
                    a = true;
                    Base_Imponible.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Base_Imponible.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                Console.WriteLine("9 " + a);

                if (!Direccion_Cliente_Factura.Text.Equals(f.Direccion_Cliente))
                {
                    a = true;
                    Direccion_Cliente_Factura.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Direccion_Cliente_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                Console.WriteLine("10 " + a);
                if (!Poblacion_Cliente_Factura.Text.Equals(f.Poblacio_Cliente))
                {
                    a = true;
                    Poblacion_Cliente_Factura.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Poblacion_Cliente_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                Console.WriteLine("11 " + a);
                if (!Codigo_Postal_Cliente_Facturacion.Text.Equals(f.CP_Cliente.ToString()))
                {
                    a = true;
                    Codigo_Postal_Cliente_Facturacion.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Codigo_Postal_Cliente_Facturacion.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                Console.WriteLine("12 " + a);
                if (!Provincia_Cliente_Factura.Text.Equals(f.Provincia_Cliente))
                {
                    a = true;
                    Provincia_Cliente_Factura.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Provincia_Cliente_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                Console.WriteLine("13 " + a);



                if (!Pais_Cliente_Factura.Text.Equals(f.Pais_Cliente))
                {
                    a = true;
                    Pais_Camping_Factura.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Pais_Cliente_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                Console.WriteLine("14 " + a);

                if (!Pais_Camping_Factura.Text.Equals(f.Pais_Facturacion))
                {
                    a = true;
                    Pais_Camping_Factura.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Pais_Camping_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                Console.WriteLine("15 " + a);

                if (!Empresa.Text.Equals(f.Empresa))
                {
                    a = true;
                    Empresa.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Empresa.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                Console.WriteLine("16 " + a);


                if (!Telefono_cliente.Text.Equals(f.Telefono))
                {
                    a = true;
                    Metodo_Pago.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Telefono_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                Console.WriteLine("17 " + a);
                if (!Telefono_Camping_Factura.Text.Equals(f.Telefono_Camping))
                {
                    a = true;
                    Telefono_Camping_Factura.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Telefono_Camping_Factura.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                Console.WriteLine("18 " + a);

                if (Metodo_Pago.SelectedIndex != f.Metodo_Pago)
                {
                    a = true;
                    Metodo_Pago.Foreground = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Metodo_Pago.Foreground = Brushes.Black;
                }
                Console.WriteLine("19 " + a);
                if (!Descuento.Text.Equals(f.Descuento))
                {
                    a = true;
                    Descuento.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Descuento.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                Console.WriteLine("20 " + a);
                int[] pr = new int[f.Lista_productos.Count()];
                for (int i = 0; i < pr.Count(); i++)
                {
                    pr[i] = -1;
                }

                if (f.Lista_productos.Count == Productos.Items.Count)
                {

                    foreach (Producto p in Productos.Items)
                    {
                        for (int i = 0; i < f.Lista_productos.Count(); i++)
                        {
                            if (pr[i] != 1)
                                if (f.Lista_productos[i].Nombre_Producto.Equals(p.Nombre_Producto))
                                {
                                    pr[i] = 1;

                                    break;
                                }
                                else if (pr[i] != 1) pr[i] = 0;

                        }


                    }
                }
                else
                    a = true;

                foreach (int i in pr)
                    Console.WriteLine(i + " ");
                if (pr.Contains(0))
                {
                    a = true;
                    Productos.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Productos.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                Console.WriteLine("21 " + a);

                if (a)
                {
                    change_Factura.IsEnabled = true;
                    safe = true;

                }
                else
                {
                    change_Factura.IsEnabled = false;
                    safe = false;
                }

            }
        }

        private void mirarFactura7(object sender, TextChangedEventArgs e)
        {
            bool a = false;
            float total = 0;
            float BI = 0;
            float Imp = 0;
            tasa = 0;
            foreach (Producto p2 in Productos2.Items)
            {
                if (p2.Nombre_Producto.ToLower().Contains("tasa turisitca"))
                {
                    tasa += float.Parse(p2.Precio.Replace(" €", ""));
                }
                else
                {
                    p2.Precio = p2.Precio.Replace(" €", "");
                    p2.Impuesto = p2.Impuesto.Replace(" €", "");
                    BI += int.Parse(p2.Cantidad) * float.Parse(p2.Precio);

                    Imp += float.Parse(p2.Impuesto);

                    total += float.Parse(p2.Total.Replace("€", ""));
                }
            }
            string d = "0";
            if (Descuento2.Text.Length != 0)
            {
                d = Descuento2.Text;
            }
            total = total * (1 - (float.Parse(d) / 100));
            Base_Imponible2.Text = BI.ToString("0.00") + " €";
            Cuota_IVA2.Text = Imp.ToString("0.00") + " €";
            Importe_Factura2.Text = (total + tasa).ToString("0.00") + " €";
            if (Recibos.SelectedItem != null)
            {
                Recibos f = Recibos.SelectedItem as Recibos;
              
                if (!Nombre_Cliente_Factura2.Text.Equals(f.Nombre_Cliente))
                {
                    a = true;
                    Nombre_Cliente_Factura2.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Nombre_Cliente_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (!DNI_Cliente_Factura2.Text.Equals(f.DNI_CIF))
                {
                    a = true;
                    DNI_Cliente_Factura2.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    DNI_Cliente_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (!Direccion_Camping_Factura2.Text.Equals(f.Direccion_Facturacion))
                {
                    a = true;
                    Direccion_Camping_Factura2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Direccion_Camping_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (!Poblacion_Camping_Factura2.Text.Equals(f.Poblecion_Facturacion))
                {
                    a = true;
                    Poblacion_Camping_Factura2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Poblacion_Camping_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (!Codigo_Postal_Camping_Factura2.Text.Equals(f.CP_Facturacion.ToString()))
                {
                    Codigo_Postal_Camping_Factura2.BorderBrush = Brushes.Red;
                    a = true;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Codigo_Postal_Camping_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (!Provincia_Camping_Factura2.Text.Equals(f.Provincia_Facturacion))

                {
                    a = true;
                    Provincia_Camping_Factura2.BorderBrush = Brushes.Red;

                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Provincia_Camping_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (!Fecha_Factura2.SelectedDate.Equals(f.fecha))
                {
                    a = true;
                    Fecha_Factura2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Fecha_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (!Fecha_Factura_ven2.SelectedDate.Equals(f.fecha_ven))
                {
                    a = true;
                    Fecha_Factura_ven2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Fecha_Factura_ven2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (!Base_Imponible2.Text.Equals(f.BI.ToString("0.00") + " €"))
                {
                    a = true;
                    Base_Imponible2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Base_Imponible2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }





                if (!Direccion_Cliente_Factura2.Text.Equals(f.Direccion_Cliente))
                {
                    a = true;
                    Direccion_Cliente_Factura2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Direccion_Cliente_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (!Descuento2.Text.Equals(f.Descuento))
                {
                    a = true;
                    Descuento2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Descuento2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (!Poblacion_Cliente_Factura2.Text.Equals(f.Poblacio_Cliente))
                {
                    a = true;
                    Poblacion_Cliente_Factura2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Poblacion_Cliente_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (!Codigo_Postal_Cliente_Facturacion2.Text.Equals(f.CP_Cliente.ToString()))
                {
                    a = true;
                    Codigo_Postal_Cliente_Facturacion2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Codigo_Postal_Cliente_Facturacion2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (!Provincia_Cliente_Factura2.Text.Equals(f.Provincia_Cliente))
                {
                    a = true;
                    Provincia_Cliente_Factura2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Provincia_Cliente_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }



                if (!Pais_Cliente_Factura2.Text.Equals(f.Pais_Cliente))
                {
                    a = true;
                    Pais_Camping_Factura2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Pais_Cliente_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (!Pais_Camping_Factura2.Text.Equals(f.Pais_Facturacion))
                {
                    a = true;
                    Pais_Camping_Factura2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Pais_Camping_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (!Empresa2.Text.Equals(f.Empresa))
                {
                    a = true;
                    Empresa2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Empresa2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }


                if (!Telefono_cliente2.Text.Equals(f.Telefono))
                {
                    a = true;
                    Metodo_Pago2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Telefono_cliente2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }
                if (!Telefono_Camping_Factura2.Text.Equals(f.Telefono_Camping))
                {
                    a = true;
                    Telefono_Camping_Factura2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Telefono_Camping_Factura2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (!Mail_cliente2.Text.Equals(f.Mail))
                {
                    a = true;
                    Mail_cliente2.BorderBrush = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Mail_cliente2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                }

                if (Metodo_Pago2.SelectedIndex != f.Metodo_Pago)
                {
                    a = true;
                    Metodo_Pago2.Foreground = Brushes.Red;
                }
                else
                {
                    BrushConverter bc = new BrushConverter();
                    Metodo_Pago2.Foreground = Brushes.Black;
                }

                if (f.Lista_productos.Count == Productos2.Items.Count)
                {

                    foreach (Producto p in Productos2.Items)
                    {
                        if (!f.Lista_productos.Contains(p))
                        {
                            a = true;
                            Productos2.BorderBrush = Brushes.Red;
                            break;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Productos2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        }

                    }
                }
                else
                    a = true;

                if (a)
                {
                    change_Factura.IsEnabled = true;
                    safe = true;

                }
                else
                {
                    change_Factura.IsEnabled = false;
                    safe = false;
                }

            }
        }

        private void Grid_SizeChanged(object sender, SizeChangedEventArgs e)
        {
            int rowIndex = Grid.GetColumn((UIElement)sender);
            Console.WriteLine(rowIndex);

            foreach (ColumnDefinition cd in gridd4.ColumnDefinitions)
            {
                Console.WriteLine(cd.ActualWidth);
            }

            switch (rowIndex)
            {
                case 0:
                    {
                        if (sender is Label)
                        {
                            Label l = (Label)sender;
                            l.MaxWidth = gridd4.ColumnDefinitions[0].ActualWidth;
                        }
                        if (sender is TextBlock)
                        {
                            TextBlock l = (TextBlock)sender;
                            l.MaxWidth = gridd4.ColumnDefinitions[0].ActualWidth;
                        }
                        if (sender is Grid)
                        {
                            Grid l = (Grid)sender;
                            l.MaxWidth = gridd4.ColumnDefinitions[0].ActualWidth;
                            l.Width = gridd4.ColumnDefinitions[0].ActualWidth;
                        }
                    }
                    break;
                case 1:
                    {
                        if (sender is Label)
                        {
                            Label l = (Label)sender;
                            l.MaxWidth = gridd4.ColumnDefinitions[1].ActualWidth;
                        }
                        if (sender is TextBlock)
                        {
                            TextBlock l = (TextBlock)sender;
                            l.MaxWidth = gridd4.ColumnDefinitions[1].ActualWidth;
                        }
                    }
                    break;
                case 2:
                    {
                        if (sender is Label)
                        {
                            Label l = (Label)sender;
                            l.MaxWidth = gridd4.ColumnDefinitions[2].ActualWidth;
                        }
                        if (sender is TextBlock)
                        {
                            TextBlock l = (TextBlock)sender;
                            l.MaxWidth = gridd4.ColumnDefinitions[2].ActualWidth;
                        }
                    }
                    break;
                case 3:
                    {
                        if (sender is Label)
                        {
                            Label l = (Label)sender;
                            l.MaxWidth = gridd4.ColumnDefinitions[3].ActualWidth;
                        }
                        if (sender is TextBlock)
                        {
                            TextBlock l = (TextBlock)sender;
                            l.MaxWidth = gridd4.ColumnDefinitions[3].ActualWidth;
                        }
                    }
                    break;
                case 4:
                    {
                        if (sender is Label)
                        {
                            Label l = (Label)sender;
                            l.MaxWidth = gridd4.ColumnDefinitions[4].ActualWidth;
                        }
                        if (sender is TextBlock)
                        {
                            TextBlock l = (TextBlock)sender;
                            l.MaxWidth = gridd4.ColumnDefinitions[4].ActualWidth;
                        }
                    }
                    break;
                case 5:
                    {
                        if (sender is Label)
                        {
                            Label l = (Label)sender;
                            l.MaxWidth = gridd4.ColumnDefinitions[5].ActualWidth;
                        }
                        if (sender is TextBlock)
                        {
                            TextBlock l = (TextBlock)sender;
                            l.MaxWidth = gridd4.ColumnDefinitions[5].ActualWidth;
                        }
                    }
                    break;
                case 6:
                    {
                        if (sender is Label)
                        {
                            Label l = (Label)sender;
                            l.MaxWidth = gridd4.ColumnDefinitions[6].ActualWidth;
                        }
                        if (sender is TextBlock)
                        {
                            TextBlock l = (TextBlock)sender;
                            l.MaxWidth = gridd4.ColumnDefinitions[6].ActualWidth;
                        }
                    }
                    break;
                    Productos2.Items.Refresh();

            }
        }

        private void Productos2_SizeChanged(object sender, SizeChangedEventArgs e)
        {

                ListView l = (ListView)sender;
                DataTemplate dt = l.ItemTemplate;
                Border b = (Border)dt.LoadContent();
                Grid ff = (Grid)b.Child;
                Console.WriteLine("Lista" + Productos2.ActualWidth);
                Double d = Productos2.ActualWidth / 7;
                Console.WriteLine("double1" + d);
                ff.ColumnDefinitions.Clear();
                for (int i = 0; i < 7; i++)
                {

                    switch (i)
                    {
                        case 0:
                            {
                                ColumnDefinition df = new ColumnDefinition();
                                df.Width = new System.Windows.GridLength(0.3);
                                df.MaxWidth = df.ActualWidth;
                                ff.ColumnDefinitions.Add(df);
                            }
                            break;
                        case 1:
                            {
                                ColumnDefinition df = new ColumnDefinition();
                                df.Width = new System.Windows.GridLength(0.1);
                                df.MaxWidth = df.ActualWidth;
                                ff.ColumnDefinitions.Add(df);
                            }
                            break;
                        case 2:
                            {
                                ColumnDefinition df = new ColumnDefinition();
                                df.Width = new System.Windows.GridLength(0.125);
                                df.MaxWidth = df.ActualWidth;
                                ff.ColumnDefinitions.Add(df);
                            }
                            break;
                        case 3:
                            {
                                ColumnDefinition df = new ColumnDefinition();
                                df.Width = new System.Windows.GridLength(0.1);
                                df.MaxWidth = df.ActualWidth;
                                ff.ColumnDefinitions.Add(df);
                            }
                            break;
                        case 4:
                            {
                                ColumnDefinition df = new ColumnDefinition();
                                df.Width = new System.Windows.GridLength(0.125);
                                df.MaxWidth = df.ActualWidth;
                                ff.ColumnDefinitions.Add(df);
                            }
                            break;
                        case 5:
                            {
                                ColumnDefinition df = new ColumnDefinition();
                                df.Width = new System.Windows.GridLength(0.125);
                                df.MaxWidth = df.ActualWidth;
                                ff.ColumnDefinitions.Add(df);
                            }
                            break;
                        case 6:
                            {
                                ColumnDefinition df = new ColumnDefinition();
                                df.Width = new System.Windows.GridLength(0.125);
                                df.MaxWidth = df.ActualWidth;
                                ff.ColumnDefinitions.Add(df);
                            }
                            break;


                    }
                }
                foreach (ColumnDefinition cd in ff.ColumnDefinitions)
                {


                    Console.WriteLine(cd.Width);
                }
                Productos2.Items.Clear();
            Recibos r = Recibos.SelectedItem as Recibos;

                foreach (Producto p in r.Lista_productos)
                    Productos2.Items.Add(p);
                ff.UpdateLayout();
            }

        private void Productos_SizeChanged(object sender, SizeChangedEventArgs e)
        {
            ListView l = (ListView)sender;
            DataTemplate dt = l.ItemTemplate;
            Border b = (Border)dt.LoadContent();
            Grid ff = (Grid)b.Child;
            Console.WriteLine("Lista" + Productos.ActualWidth);
            Double d = Productos.ActualWidth / 7;
            Console.WriteLine("double1" + d);
            ff.ColumnDefinitions.Clear();
            for (int i = 0; i < 7; i++)
            {

                switch (i)
                {
                    case 0:
                        {
                            ColumnDefinition df = new ColumnDefinition();
                            df.Width = new System.Windows.GridLength(0.3);
                            df.MaxWidth = df.ActualWidth;
                            ff.ColumnDefinitions.Add(df);
                        }
                        break;
                    case 1:
                        {
                            ColumnDefinition df = new ColumnDefinition();
                            df.Width = new System.Windows.GridLength(0.1);
                            df.MaxWidth = df.ActualWidth;
                            ff.ColumnDefinitions.Add(df);
                        }
                        break;
                    case 2:
                        {
                            ColumnDefinition df = new ColumnDefinition();
                            df.Width = new System.Windows.GridLength(0.125);
                            df.MaxWidth = df.ActualWidth;
                            ff.ColumnDefinitions.Add(df);
                        }
                        break;
                    case 3:
                        {
                            ColumnDefinition df = new ColumnDefinition();
                            df.Width = new System.Windows.GridLength(0.1);
                            df.MaxWidth = df.ActualWidth;
                            ff.ColumnDefinitions.Add(df);
                        }
                        break;
                    case 4:
                        {
                            ColumnDefinition df = new ColumnDefinition();
                            df.Width = new System.Windows.GridLength(0.125);
                            df.MaxWidth = df.ActualWidth;
                            ff.ColumnDefinitions.Add(df);
                        }
                        break;
                    case 5:
                        {
                            ColumnDefinition df = new ColumnDefinition();
                            df.Width = new System.Windows.GridLength(0.125);
                            df.MaxWidth = df.ActualWidth;
                            ff.ColumnDefinitions.Add(df);
                        }
                        break;
                    case 6:
                        {
                            ColumnDefinition df = new ColumnDefinition();
                            df.Width = new System.Windows.GridLength(0.125);
                            df.MaxWidth = df.ActualWidth;
                            ff.ColumnDefinitions.Add(df);
                        }
                        break;


                }
            }
            foreach (ColumnDefinition cd in ff.ColumnDefinitions)
            {


                Console.WriteLine(cd.Width);
            }
            List<Producto> lista = Productos.Items.Cast<Producto>()
                                 .Select(item => item)
                                 .ToList();
            Productos.Items.Clear();
            foreach (Producto p in lista)
                Productos.Items.Add(p);
            ff.UpdateLayout();
        }

        private void Grid_SizeChanged_1(object sender, SizeChangedEventArgs e)
        {
            int rowIndex = Grid.GetColumn((UIElement)sender);
            Console.WriteLine(rowIndex);

            foreach (ColumnDefinition cd in gridd3.ColumnDefinitions)
            {
                Console.WriteLine(cd.ActualWidth);
            }

            switch (rowIndex)
            {
                case 0:
                    {
                        if (sender is Label)
                        {
                            Label l = (Label)sender;
                            l.MaxWidth = gridd3.ColumnDefinitions[0].ActualWidth;
                        }
                        if (sender is TextBlock)
                        {
                            TextBlock l = (TextBlock)sender;
                            l.MaxWidth = gridd3.ColumnDefinitions[0].ActualWidth;
                        }
                        if (sender is Grid)
                        {
                            Grid l = (Grid)sender;
                            l.MaxWidth = gridd3.ColumnDefinitions[0].ActualWidth;
                            l.Width = gridd3.ColumnDefinitions[0].ActualWidth;
                        }
                    }
                    break;
                case 1:
                    {
                        if (sender is Label)
                        {
                            Label l = (Label)sender;
                            l.MaxWidth = gridd3.ColumnDefinitions[1].ActualWidth;
                        }
                        if (sender is TextBlock)
                        {
                            TextBlock l = (TextBlock)sender;
                            l.MaxWidth = gridd3.ColumnDefinitions[1].ActualWidth;
                        }
                    }
                    break;
                case 2:
                    {
                        if (sender is Label)
                        {
                            Label l = (Label)sender;
                            l.MaxWidth = gridd3.ColumnDefinitions[2].ActualWidth;
                        }
                        if (sender is TextBlock)
                        {
                            TextBlock l = (TextBlock)sender;
                            l.MaxWidth = gridd3.ColumnDefinitions[2].ActualWidth;
                        }
                    }
                    break;
                case 3:
                    {
                        if (sender is Label)
                        {
                            Label l = (Label)sender;
                            l.MaxWidth = gridd3.ColumnDefinitions[3].ActualWidth;
                        }
                        if (sender is TextBlock)
                        {
                            TextBlock l = (TextBlock)sender;
                            l.MaxWidth = gridd3.ColumnDefinitions[3].ActualWidth;
                        }
                    }
                    break;
                case 4:
                    {
                        if (sender is Label)
                        {
                            Label l = (Label)sender;
                            l.MaxWidth = gridd3.ColumnDefinitions[4].ActualWidth;
                        }
                        if (sender is TextBlock)
                        {
                            TextBlock l = (TextBlock)sender;
                            l.MaxWidth = gridd3.ColumnDefinitions[4].ActualWidth;
                        }
                    }
                    break;
                case 5:
                    {
                        if (sender is Label)
                        {
                            Label l = (Label)sender;
                            l.MaxWidth = gridd3.ColumnDefinitions[5].ActualWidth;
                        }
                        if (sender is TextBlock)
                        {
                            TextBlock l = (TextBlock)sender;
                            l.MaxWidth = gridd3.ColumnDefinitions[5].ActualWidth;
                        }
                    }
                    break;
                case 6:
                    {
                        if (sender is Label)
                        {
                            Label l = (Label)sender;
                            l.MaxWidth = gridd3.ColumnDefinitions[6].ActualWidth;
                        }
                        if (sender is TextBlock)
                        {
                            TextBlock l = (TextBlock)sender;
                            l.MaxWidth = gridd3.ColumnDefinitions[6].ActualWidth;
                        }
                    }
                    break;
                    Productos.Items.Refresh();
            }
        }

        private void vehiculo1_DataContextChanged(object sender, DependencyPropertyChangedEventArgs e)
        {
            if (mirar2)
                if (Clientes.SelectedItem != null && !newclient)
                {
                    Clientes cc = Clientes.SelectedItem as Clientes;
                    int pot = 0;
                    if (Potencia.SelectedItem != null)
                    {
                        Potencia pp = Potencia.SelectedItem as Potencia;
                        pot = pp.Id;
                    }
                    int b = 0;
                    if (Switch.IsChecked.Value)
                    {
                        b = 1;
                    }
                    Parcelas p = numero_plaza.SelectedItem as Parcelas;


                    if (p == null)
                        p = new Parcelas();

                    if (cc.Fecha_In != null)
                    {

                    }
                    else
                    {

                    }
                    ////console.writeline(numero_secreto.Text.Equals(cc.numero_secreto.ToString()) + " " + caducidad.Text.Equals(cc.caducidad.Split('/')[0]) + " " + caducidad1.Text.Equals(cc.caducidad.Split('/')[1]) + " " + titular_tarjeta.Text.Equals(cc.titular) + " " + numero_tarjeta.Text.Equals(cc.n_tarjeta.ToString()) + " " + mail_cliente.Text.Equals(cc.mail) + " " + telefonos_cliente2.Text.Equals(cc.telefon2) + " " + telefonos_cliente.Text.Equals(cc.telefon1));
                    //console.writeline(pais.Text.Equals(cc.Pais) + " " + provincia.Text.Equals(cc.Provincia) + " " + poblacion_cliente.Text.Equals(cc.poblacio) + " " + CP.Text.Equals(cc.codigo_postal) + " " + puerta.Text.Equals(cc.Puerta) + " " + piso.Text.Equals(cc.Piso) + " " + numero.Text.Equals(cc.Numero) + " " + direccion_cliente.Text.Equals(cc.direccion) + " " + dni.Text.Equals(cc.dni) + " " + apellidos_cliente.Text.Equals(cc.apellidos_cliente) + " " + nombre_cliente.Text.Equals(cc.nombre_cliente));
                    ////console.writeline(numero_cliente.Text.Equals(cc.n_cliemte) +" "+ Clientes_FechaEntrada.SelectedDate.Equals(cc.Fecha_In) +" "+ Clientes_FechaSalida.SelectedDate.Equals(cc.Fecha_Out) +" "+ vehiculo1.Text.Equals(cc.Vehiculo1) +" "+ matricula1.Text.Equals(cc.matricula1) +" "+ numero_bastidor.Text.Equals(cc.Numero_Bastidor1) +" "+ vehiculo2.Text.Equals(cc.Vehiculo2) +" "+ matricula2.Text.Equals(cc.matricula2) +" "+ numero_bastidor2.Text.Equals(cc.Numero_Bastidor2)  +" "+ nota1.Text.Equals(cc.Nota1) +" "+ Clientes_HoraEntrada.Text.Equals(cc.Hora_entrada) +" "+ Clientes_HoraSalida.Text.Equals(cc.Hora_salida));
                    //console.writeline((b == cc.Switch) + " " + (p.id == int.Parse(cc.n_plaza)) + " " + (pot == cc.Potencia));

                    if (p.id == null)
                        p.id = 0;
                    bool pos = false;
                    if (bdr2.HorizontalAlignment == HorizontalAlignment.Left)
                        pos = true;
                    //console.writeline(p.id + " " + cc.n_plaza);



                    string cd = "";
                    string cd2 = "";
                    if (cc.caducidad.Contains("/"))
                    {
                        cd = cc.caducidad.Split('/')[0];
                        cd2 = cc.caducidad.Split('/')[1];
                    }

                    Console.WriteLine(email_cliente.Text.Equals(cc.mail));
                    Console.WriteLine(telefono2_cliente_alta.Text.Equals(cc.telefon2));
                    Console.WriteLine(telefono_cliente_alta.Text.Equals(cc.telefon1));
                    Console.WriteLine(pais_cliente_alta.Text.Equals(cc.Pais));
                    Console.WriteLine(provincia_cliente_alta.Text.Equals(cc.Provincia));
                    Console.WriteLine(poblacion_cliente_alta.Text.Equals(cc.poblacio));
                    Console.WriteLine(cp_cliente_alta.Text.Equals(cc.codigo_postal));
                    Console.WriteLine(direccion_cliente_alta.Text.Equals(cc.direccion));
                    Console.WriteLine(apellido_cliente_alta.Text.Equals(cc.apellidos_cliente) + " " + nombre_cliente_alta.Text.Equals(cc.nombre_cliente));
                    Console.WriteLine(numero_cliente_alta.Text.Equals(cc.n_cliemte + ""));
                    string aa = Clientes_FechaEntrada_alta.SelectedDate.ToString();
                    string aa2 = cc.Fecha_In.ToString();

                 
                    Console.WriteLine(Vehiculo1_alta.Text.Equals(cc.Vehiculo1 + "")); //
                    Console.WriteLine(bastidor1_alta.Text.Equals(cc.matricula1)); //
                    Console.WriteLine(Vehiculo2_alta.Text.Equals(cc.Vehiculo2) + " " + bastidor2_alta.Text.Equals(cc.matricula2)); //
                    Console.WriteLine((nota1_alta.Text.Equals(cc.Nota1))); //
                    Console.WriteLine((b == cc.Switch)); //
                    Console.WriteLine((p.id == int.Parse(cc.n_plaza))); //
                    Console.WriteLine((Clientes_HoraEntrada_alta.Text.Equals(cc.Hora_entrada))); //
                    Console.WriteLine((Clientes_HoraPeriodo_alta.Text.Equals(cc.Hora_salida))); //
                    Console.WriteLine((email_cliente2.Text.Equals(cc.mail2))); //
                    Console.WriteLine((pos == cc.DeBaja)); //
                    Console.WriteLine((Clientes_FechaPeriodo_alta.SelectedDate == cc.fecha_entrada_estado)); //
                    Console.WriteLine((Clientes_FechaPago_alta.SelectedDate == cc.fecha_pago));
                    Console.WriteLine((medidas_alta.Text.Equals(cc.Medidas_Vehiculo1)));

                    if (numero_secreto.Text.Equals(cc.numero_secreto.ToString()) && caducidad.Text.Equals(cd) && caducidad1.Text.Equals(cd2) && titular_tarjeta.Text.Equals(cc.titular) && numero_tarjeta.Text.Equals(cc.n_tarjeta.ToString()) && mail_cliente.Text.Equals(cc.mail) && telefonos_cliente2.Text.Equals(cc.telefon2) && telefonos_cliente.Text.Equals(cc.telefon1) && pais.Text.Equals(cc.Pais) && provincia.Text.Equals(cc.Provincia) && poblacion_cliente.Text.Equals(cc.poblacio) && CP.Text.Equals(cc.codigo_postal) && puerta.Text.Equals(cc.Puerta) && piso.Text.Equals(cc.Piso) && numero.Text.Equals(cc.Numero) && direccion_cliente.Text.Equals(cc.direccion) && dni.Text.Equals(cc.dni) && apellidos_cliente.Text.Equals(cc.apellidos_cliente) && nombre_cliente.Text.Equals(cc.nombre_cliente) && numero_cliente.Text.Equals(cc.n_cliemte + "") && Clientes_FechaEntrada.SelectedDate == cc.Fecha_In && Clientes_FechaSalida.SelectedDate == cc.Fecha_Out && vehiculo1.Text.Equals(cc.Vehiculo1) && matricula1.Text.Equals(cc.matricula1) && vehiculo2.Text.Equals(cc.Vehiculo2) && matricula2.Text.Equals(cc.matricula2) && vehiculo3.Text.Equals(cc.Vehiculo3) && matricula3.Text.Equals(cc.matricula3) && vehiculo4.Text.Equals(cc.Vehiculo4) && matricula2.Text.Equals(cc.matricula2) && pot == cc.Potencia && nota1.Text.Equals(cc.Nota1) && p.id == int.Parse(cc.n_plaza) && Clientes_HoraEntrada.Text.Equals(cc.Hora_entrada) && Clientes_HoraSalida.Text.Equals(cc.Hora_salida) && Iban.Text.Equals(cc.iban) && Swift.Text.Equals(cc.swift) && entidad_bancaria.Text.Equals(cc.entidad_bacnaria) && Iban2.Text.Equals(cc.iban2) && Swift2.Text.Equals(cc.swift2) && entidad_bancaria2.Text.Equals(cc.entidad_bacnaria2) && mail_cliente2.Text.Equals(cc.mail2) && pos == cc.DeBaja && Fecha_Entrada_Estado.SelectedDate == cc.fecha_entrada_estado && Fecha_Contrato.SelectedDate == cc.fecha_contrato && Fecha_Pago.SelectedDate == cc.fecha_pago && medidas_vehiculo1.Text.Equals(cc.Medidas_Vehiculo1))
                    {
                        Console.WriteLine("49554");
                        change_client.IsEnabled = false;

                        change_client.IsEnabled = false;
                        safe = false;
                        //añadir_evento.IsEnabled = false;
                    }
                    else
                    {
                        Console.WriteLine("!49554");
                        change_client.IsEnabled = true;

                        change_client.IsEnabled = true;
                        safe = true;
                        //añadir_evento.IsEnabled = true;
                    }

                    try
                    {

                       




                        if (!(numero_cliente.Text.Equals(cc.n_cliemte + "")))
                        {
                            numero_cliente.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            numero_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                        }
                        Parcelas pr = numero_plaza.SelectedItem as Parcelas;
                        if (pr != null)
                            if (cc.n_plaza != pr.id + "")
                            {

                                numero_plaza.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                numero_plaza.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }




                        if (!(cc.nombre_cliente.Equals(nombre_cliente.Text)))
                        {
                            nombre_cliente.BorderBrush = Brushes.Red;


                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            nombre_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }


                        if (!(cc.apellidos_cliente.Equals(apellidos_cliente.Text)))
                        {
                            apellidos_cliente.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            apellidos_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }


                        if (!(cc.dni.Equals(dni.Text)))
                        {
                            dni.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            dni.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }



                        if (!(cc.direccion.Equals(direccion_cliente.Text)))
                        {

                            direccion_cliente.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            direccion_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(cc.poblacio.Equals(poblacion_cliente.Text)))
                        {
                            poblacion_cliente.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            poblacion_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(cc.telefon1.Equals(telefonos_cliente.Text)))
                        {

                            telefonos_cliente.BorderBrush = Brushes.Red;


                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            telefonos_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(cc.telefon2.Equals(telefonos_cliente2.Text)))
                        {
                            telefonos_cliente2.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            telefonos_cliente2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!cc.codigo_postal.Equals(CP.Text))
                        {
                            CP.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            CP.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(cc.mail.Equals(mail_cliente.Text)))
                        {
                            mail_cliente.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            mail_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(cc.mail2.Equals(mail_cliente2.Text)))
                        {
                            mail_cliente2.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            mail_cliente2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        /*u.Luz = "s";
                        u.Nota1 = "";
                        u.Nota2 = "";*/
                        /*if (!(cc.Metodo_Pago.ToString().Equals(Metodo_pago.Text)))
                        {
                            a = true;
                            sql_query += "Metodo_Pago=" + Metodo_pago.SelectedIndex + ", ";
                            parametros.Add("Metodo_Pago:" + Metodo_pago.SelectedIndex);
                        }*/

                        if (!(cc.titular.Equals(titular_tarjeta.Text)))
                        {
                            titular_tarjeta.BorderBrush = Brushes.Red;


                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            titular_tarjeta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        string fecha = caducidad + "/" + caducidad1;
                        if (cc.caducidad.Contains("/"))
                            if (!(cc.caducidad.Equals(caducidad.Text + "/" + caducidad1.Text)))
                            {
                                caducidad.BorderBrush = Brushes.Red;
                                caducidad1.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                caducidad.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");
                                caducidad1.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }



                        if (!(cc.numero_secreto.Equals(numero_secreto.Text)))
                        {
                            numero_secreto.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            numero_secreto.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(cc.n_tarjeta.Equals(numero_tarjeta.Text)))
                        {
                            numero_tarjeta.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            numero_tarjeta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(cc.entidad_bacnaria.Equals(entidad_bancaria.Text)))
                        {
                            entidad_bancaria.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            entidad_bancaria.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(cc.iban.Equals(Iban.Text)))
                        {
                            Iban.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Iban.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(cc.swift.Equals(Swift.Text)))
                        {
                            Swift.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Swift.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }



                        if (!(cc.Pais.Equals(pais.Text)))
                        {
                            pais.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            pais.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(cc.Numero.Equals(numero.Text)))
                        {
                            numero.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            numero.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(cc.Piso.Equals(piso.Text)))
                        {
                            piso.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            piso.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(cc.Puerta.Equals(puerta.Text)))
                        {
                            puerta.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            puerta.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(cc.Provincia.Equals(provincia.Text)))
                        {
                            provincia.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            provincia.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }



                        if (!(Clientes_FechaEntrada.SelectedDate.Equals(cc.Fecha_In)))
                        {
                            Clientes_FechaEntrada.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Clientes_FechaEntrada.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(Clientes_FechaSalida.SelectedDate.Equals(cc.Fecha_Out)))
                        {
                            Clientes_FechaSalida.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Clientes_FechaSalida.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(Vehiculo1_alta.Text.Equals(cc.Vehiculo1)))
                        {
                            vehiculo1.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            vehiculo1.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(matricula1.Text.Equals(cc.matricula1)))
                        {
                            matricula1.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            matricula1.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(Vehiculo2_alta.Text.Equals(cc.Vehiculo2)))
                        {
                            vehiculo2.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            vehiculo2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(matricula2.Text.Equals(cc.matricula2)))
                        {
                            matricula1.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            matricula2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(Vehiculo3_alta.Text.Equals(cc.Vehiculo3)))
                        {
                            vehiculo3.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            vehiculo3.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(matricula3.Text.Equals(cc.matricula3)))
                        {
                            matricula3.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            matricula3.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(matricula4.Text.Equals(cc.matricula4)))
                        {
                            matricula3.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            matricula4.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }




                        int pott = 0;
                        if (Potencia.SelectedItem != null)
                        {
                            Potencia poten = Potencia.SelectedItem as Potencia;
                            if (cc.Potencia != poten.Id)
                            {
                                Potencia.BorderBrush = Brushes.Red;
                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Potencia.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                        }



                        int b2 = 0;
                        if (Switch.IsChecked.Value)
                        {
                            b2 = 1;
                        }
                        if (b2 != cc.Switch)
                        {
                            Switch.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Switch.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }





                        if (!nota1.Text.Equals(cc.Nota1))
                        {

                            nota1.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            nota1.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        try
                        {
                            DateTime dt2 = (DateTime)Clientes_HoraEntrada.Value;

                            if (!dt2.ToString("H:mm").Equals(cc.Hora_entrada))
                            {
                                Clientes_HoraEntrada.BorderBrush = Brushes.Red;

                            }
                            else
                            {
                                BrushConverter bc = new BrushConverter();
                                Clientes_HoraEntrada.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                            }
                        }
                        catch (Exception ee)
                        {
                            var st = new StackTrace(ee, true); // Get the top stack frame var frame = st.GetFrame(0); // Get the line number from the stack frame   var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                            var frame = st.GetFrame(0);
                            var line = Convert.ToInt32(ee.StackTrace.Substring(ee.StackTrace.LastIndexOf(' ')));
                            Peta(ee, line + "");
                            Console.WriteLine(line + ": " + ee.Message);
                        }
                        DateTime dt3 = (DateTime)Clientes_HoraSalida.Value;
                        if (!dt3.ToString("H:mm").Equals(cc.Hora_salida))
                        {
                            Clientes_HoraSalida.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Clientes_HoraSalida.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(cc.entidad_bacnaria2.Equals(entidad_bancaria2.Text)))
                        {

                            entidad_bancaria2.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            entidad_bancaria2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(cc.iban2.Equals(Iban2.Text)))
                        {
                            Iban2.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Iban2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(cc.swift2.Equals(Swift2.Text)))
                        {
                            Swift2.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Swift2.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        bool bb = false;
                        if (bdr2.HorizontalAlignment == HorizontalAlignment.Left)
                            pos = true;
                        /*if (!(cc.DeBaja == bb))
                        {
                            numero_cliente.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            apellidos_cliente.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }*/


                        if (!Fecha_Entrada_Estado.SelectedDate.Equals(cc.fecha_entrada_estado))
                        {
                            Fecha_Entrada_Estado.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Fecha_Entrada_Estado.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!Fecha_Contrato.SelectedDate.Equals(cc.fecha_contrato))
                        {
                            Fecha_Contrato.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Fecha_Contrato.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                        if (!(cc.fecha_pago.Equals(Fecha_Pago.SelectedDate)))
                        {
                            Fecha_Pago.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            Fecha_Pago.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }
                        if (!(cc.Medidas_Vehiculo1.Equals(medidas_vehiculo1.Text)))
                        {
                            medidas_vehiculo1.BorderBrush = Brushes.Red;

                        }
                        else
                        {
                            BrushConverter bc = new BrushConverter();
                            medidas_vehiculo1.BorderBrush = (Brush)bc.ConvertFrom("#e2e6ee");

                        }

                    }
                    catch
                    {

                    }




                }
        }

        private void Acompañante1_click(object sender, RoutedEventArgs e)
        {
            Clientes c = Clientes.SelectedItem as Clientes;
            vacp.Close();
            if (nombreacompañante1_alta.Text.Length == 0)
                vacp = new VentanaAcompañante(conexiondb,0,c.id);
            else
                vacp = new VentanaAcompañante(c.lista_acompañantes[0],conexiondb,0, c.id);
            vacp.Show();
        }

        private void Acompañante2_click(object sender, RoutedEventArgs e)
        {
            Clientes c = Clientes.SelectedItem as Clientes;
            vacp.Close();
            if (nombreacompañante2_alta.Text.Length == 0)
                vacp = new VentanaAcompañante(conexiondb,1, c.id);
            else
                vacp = new VentanaAcompañante(c.lista_acompañantes[1], conexiondb,1, c.id);
            vacp.Show();
        }

        private void Acompañante3_click(object sender, RoutedEventArgs e)
        {
            Clientes c = Clientes.SelectedItem as Clientes;
            vacp.Close();
            if (nombreacompañante3_alta.Text.Length == 0)
                vacp = new VentanaAcompañante(conexiondb,2, c.id);
            else
                vacp = new VentanaAcompañante(c.lista_acompañantes[2], conexiondb,2, c.id);
            vacp.Show();
        }

        private void Acompañante4_click(object sender, RoutedEventArgs e)
        {
            Clientes c = Clientes.SelectedItem as Clientes;
            vacp.Close();
            if (nombreacompañante4_alta.Text.Length == 0)
                vacp = new VentanaAcompañante(conexiondb,3, c.id);
            else
                vacp = new VentanaAcompañante(c.lista_acompañantes[3], conexiondb,3, c.id);
            vacp.Show();
        }

        private void Acompañante5_click(object sender, RoutedEventArgs e)
        {
            Clientes c = Clientes.SelectedItem as Clientes;
            vacp.Close();
            if (nombreacompañante5_alta.Text.Length == 0)
                vacp = new VentanaAcompañante(conexiondb,4, c.id);
            else
                vacp = new VentanaAcompañante(c.lista_acompañantes[4], conexiondb,4, c.id);
            vacp.Show();
        }

        private void filtrar_factura_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (filtrar_Factura.SelectedIndex != 7)
            {
                Facturas_buscar.Visibility = Visibility.Visible;
                Facturas_buscar_fecha.Visibility = Visibility.Collapsed;

            }
            else
            {
                Facturas_buscar.Visibility = Visibility.Collapsed;
                Facturas_buscar_fecha.Visibility = Visibility.Visible;
            }
        }

        private void Button_Click_16(object sender, RoutedEventArgs e)
        {
             MessageBox.Show("Se esta implementando la funcion para resetera la BD", "Alerta!", MessageBoxButton.OK, MessageBoxImage.Exclamation);
        }

        private void Deleteacompañante(object sender, RoutedEventArgs e)
        {
            Clientes c = Clientes.SelectedItem as Clientes;
            MessageBoxResult result = MessageBox.Show("¿Quieres borrar el acompañante seleccionado?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
            if (result == MessageBoxResult.OK) { 
            if (c.lista_acompañantes[0]!=null)
            {
                Acompañantes ac = c.lista_acompañantes[0];
                c.lista_acompañantes[0] = null;
                Console.WriteLine(ac.ToString());
                nombreacompañante1_alta.Text = "";
                s.EjecutarQuery("DELETE FROM Acompañante WHERE Id=" + ac.Id);
            }

            c.OrdenarAcompañantes();
            nombreacompañante1_alta.Text = "";
            nombreacompañante1.Text = "";
            nombreacompañante2_alta.Text = "";
            nombreacompañante2.Text = "";
            nombreacompañante3_alta.Text = "";
            nombreacompañante3.Text = "";
            nombreacompañante4_alta.Text = "";
            nombreacompañante4.Text = "";
            nombreacompañante5_alta.Text = "";
            nombreacompañante5.Text = "";
            nombreacompañante6_alta.Text = "";
            nombreacompañante6.Text = "";
                for (int i = 0; i < c.lista_acompañantes.Count(); i++)
                {
                    switch (i)
                    {
                        case 0:
                            if (c.lista_acompañantes[0] != null)
                            {
                                nombreacompañante1_alta.Text = c.lista_acompañantes[0].ToString();
                                nombreacompañante1.Text = c.lista_acompañantes[0].ToString();
                            }
                            else
                            {
                                nombreacompañante1_alta.Text = "";
                                nombreacompañante1.Text = "";
                            }
                            break;
                        case 1:
                            if (c.lista_acompañantes[1] != null)
                            {
                                nombreacompañante2_alta.Text = c.lista_acompañantes[1].ToString();
                                nombreacompañante2.Text = c.lista_acompañantes[1].ToString();
                            }
                            else
                            {
                                nombreacompañante2_alta.Text = "";
                                nombreacompañante2.Text = "";
                            }
                            break;
                        case 2:
                            if (c.lista_acompañantes[2] != null)
                            {
                                nombreacompañante3_alta.Text = c.lista_acompañantes[2].ToString();
                                nombreacompañante3.Text = c.lista_acompañantes[2].ToString();
                            }
                            else
                            {
                                nombreacompañante3_alta.Text = "";
                                nombreacompañante3.Text = "";
                            }
                            break;
                        case 3:
                            if (c.lista_acompañantes[3] != null)
                            {
                                nombreacompañante4_alta.Text = c.lista_acompañantes[3].ToString();
                                nombreacompañante4.Text = c.lista_acompañantes[3].ToString();
                            }
                            else
                            {
                                nombreacompañante4_alta.Text = "";
                                nombreacompañante4.Text = "";
                            }
                            break;
                        case 4:
                            if (c.lista_acompañantes[4] != null)
                            {
                                nombreacompañante5_alta.Text = c.lista_acompañantes[4].ToString();
                                nombreacompañante5.Text = c.lista_acompañantes[4].ToString();
                            }
                            else
                            {
                                nombreacompañante5_alta.Text = "";
                                nombreacompañante5.Text = "";
                            }
                            break;
                        case 5:
                            if (c.lista_acompañantes[4] != null)
                            {
                                nombreacompañante6_alta.Text = c.lista_acompañantes[5].ToString();
                                nombreacompañante6.Text = c.lista_acompañantes[5].ToString();
                            }
                            else
                            {
                                nombreacompañante6_alta.Text = "";
                                nombreacompañante6.Text = "";
                            }
                            break;
                    }
                }
            }
        }

        private void Acompañante6_click(object sender, RoutedEventArgs e)
        {
            Clientes c = Clientes.SelectedItem as Clientes;
            vacp.Close();
            if (nombreacompañante6_alta.Text.Length == 0)
                vacp = new VentanaAcompañante(conexiondb, 5, c.id);
            else
                vacp = new VentanaAcompañante(c.lista_acompañantes[4], conexiondb, 5, c.id);
            vacp.Show();

        }

        private void Deleteacompañante2(object sender, RoutedEventArgs e)
        {
            Clientes c = Clientes.SelectedItem as Clientes;
            MessageBoxResult result = MessageBox.Show("¿Quieres borrar el acompañante seleccionado?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
            if (result == MessageBoxResult.OK)
            {
                if (c.lista_acompañantes[1] != null)
                {
                    Acompañantes ac = c.lista_acompañantes[1];
                    c.lista_acompañantes[1] = null;
                    Console.WriteLine(ac.ToString());
                    nombreacompañante3_alta.Text = "";
                    s.EjecutarQuery("DELETE FROM Acompañante WHERE Id=" + ac.Id);
                }

                c.OrdenarAcompañantes();
                nombreacompañante1_alta.Text = "";
                nombreacompañante1.Text = "";
                nombreacompañante2_alta.Text = "";
                nombreacompañante2.Text = "";
                nombreacompañante3_alta.Text = "";
                nombreacompañante3.Text = "";
                nombreacompañante4_alta.Text = "";
                nombreacompañante4.Text = "";
                nombreacompañante5_alta.Text = "";
                nombreacompañante5.Text = "";
                nombreacompañante6_alta.Text = "";
                nombreacompañante6.Text = "";
                for (int i = 0; i < c.lista_acompañantes.Count(); i++)
                {
                    switch (i)
                    {
                        case 0:
                            if (c.lista_acompañantes[0] != null)
                            {
                                nombreacompañante1_alta.Text = c.lista_acompañantes[0].ToString();
                                nombreacompañante1.Text = c.lista_acompañantes[0].ToString();
                            }
                            else
                            {
                                nombreacompañante1_alta.Text = "";
                                nombreacompañante1.Text = "";
                            }
                            break;
                        case 1:
                            if (c.lista_acompañantes[1] != null)
                            {
                                nombreacompañante2_alta.Text = c.lista_acompañantes[1].ToString();
                                nombreacompañante2.Text = c.lista_acompañantes[1].ToString();
                            }
                            else
                            {
                                nombreacompañante2_alta.Text = "";
                                nombreacompañante2.Text = "";
                            }
                            break;
                        case 2:
                            if (c.lista_acompañantes[2] != null)
                            {
                                nombreacompañante3_alta.Text = c.lista_acompañantes[2].ToString();
                                nombreacompañante3.Text = c.lista_acompañantes[2].ToString();
                            }
                            else
                            {
                                nombreacompañante3_alta.Text = "";
                                nombreacompañante3.Text = "";
                            }
                            break;
                        case 3:
                            if (c.lista_acompañantes[3] != null)
                            {
                                nombreacompañante4_alta.Text = c.lista_acompañantes[3].ToString();
                                nombreacompañante4.Text = c.lista_acompañantes[3].ToString();
                            }
                            else
                            {
                                nombreacompañante4_alta.Text = "";
                                nombreacompañante4.Text = "";
                            }
                            break;
                        case 4:
                            if (c.lista_acompañantes[4] != null)
                            {
                                nombreacompañante5_alta.Text = c.lista_acompañantes[4].ToString();
                                nombreacompañante5.Text = c.lista_acompañantes[4].ToString();
                            }
                            else
                            {
                                nombreacompañante5_alta.Text = "";
                                nombreacompañante5.Text = "";
                            }
                            break;
                        case 5:
                            if (c.lista_acompañantes[4] != null)
                            {
                                nombreacompañante6_alta.Text = c.lista_acompañantes[5].ToString();
                                nombreacompañante6.Text = c.lista_acompañantes[5].ToString();
                            }
                            else
                            {
                                nombreacompañante6_alta.Text = "";
                                nombreacompañante6.Text = "";
                            }
                            break;
                    }
                }
            }
        }

        private void Deleteacompañante3(object sender, RoutedEventArgs e)
        {
            Clientes c = Clientes.SelectedItem as Clientes;
            MessageBoxResult result = MessageBox.Show("¿Quieres borrar el acompañante seleccionado?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
            if (result == MessageBoxResult.OK)
            {
                if (c.lista_acompañantes[2] != null)
                {
                    Acompañantes ac = c.lista_acompañantes[2];
                    c.lista_acompañantes[2] = null;
                    Console.WriteLine(ac.ToString());
                    nombreacompañante3_alta.Text = "";
                    s.EjecutarQuery("DELETE FROM Acompañante WHERE Id=" + ac.Id);
                }

                c.OrdenarAcompañantes();
                nombreacompañante1_alta.Text = "";
                nombreacompañante1.Text = "";
                nombreacompañante2_alta.Text = "";
                nombreacompañante2.Text = "";
                nombreacompañante3_alta.Text = "";
                nombreacompañante3.Text = "";
                nombreacompañante4_alta.Text = "";
                nombreacompañante4.Text = "";
                nombreacompañante5_alta.Text = "";
                nombreacompañante5.Text = "";
                nombreacompañante6_alta.Text = "";
                nombreacompañante6.Text = "";
                for (int i = 0; i < c.lista_acompañantes.Count(); i++)
                {
                    switch (i)
                    {
                        case 0:
                            if (c.lista_acompañantes[0] != null)
                            {
                                nombreacompañante1_alta.Text = c.lista_acompañantes[0].ToString();
                                nombreacompañante1.Text = c.lista_acompañantes[0].ToString();
                            }
                            else
                            {
                                nombreacompañante1_alta.Text = "";
                                nombreacompañante1.Text = "";
                            }
                            break;
                        case 1:
                            if (c.lista_acompañantes[1] != null)
                            {
                                nombreacompañante2_alta.Text = c.lista_acompañantes[1].ToString();
                                nombreacompañante2.Text = c.lista_acompañantes[1].ToString();
                            }
                            else
                            {
                                nombreacompañante2_alta.Text = "";
                                nombreacompañante2.Text = "";
                            }
                            break;
                        case 2:
                            if (c.lista_acompañantes[2] != null)
                            {
                                nombreacompañante3_alta.Text = c.lista_acompañantes[2].ToString();
                                nombreacompañante3.Text = c.lista_acompañantes[2].ToString();
                            }
                            else
                            {
                                nombreacompañante3_alta.Text = "";
                                nombreacompañante3.Text = "";
                            }
                            break;
                        case 3:
                            if (c.lista_acompañantes[3] != null)
                            {
                                nombreacompañante4_alta.Text = c.lista_acompañantes[3].ToString();
                                nombreacompañante4.Text = c.lista_acompañantes[3].ToString();
                            }
                            else
                            {
                                nombreacompañante4_alta.Text = "";
                                nombreacompañante4.Text = "";
                            }
                            break;
                        case 4:
                            if (c.lista_acompañantes[4] != null)
                            {
                                nombreacompañante5_alta.Text = c.lista_acompañantes[4].ToString();
                                nombreacompañante5.Text = c.lista_acompañantes[4].ToString();
                            }
                            else
                            {
                                nombreacompañante5_alta.Text = "";
                                nombreacompañante5.Text = "";
                            }
                            break;
                        case 5:
                            if (c.lista_acompañantes[4] != null)
                            {
                                nombreacompañante6_alta.Text = c.lista_acompañantes[5].ToString();
                                nombreacompañante6.Text = c.lista_acompañantes[5].ToString();
                            }
                            else
                            {
                                nombreacompañante6_alta.Text = "";
                                nombreacompañante6.Text = "";
                            }
                            break;
                    }
                }
            }
        }

        private void Deleteacompañante4(object sender, RoutedEventArgs e)
        {
            Clientes c = Clientes.SelectedItem as Clientes;
            MessageBoxResult result = MessageBox.Show("¿Quieres borrar el acompañante seleccionado?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
            if (result == MessageBoxResult.OK)
            {
                if (c.lista_acompañantes[3] != null)
                {
                    Acompañantes ac = c.lista_acompañantes[3];
                    c.lista_acompañantes[3] = null;
                    Console.WriteLine(ac.ToString());
                    nombreacompañante4_alta.Text = "";
                    s.EjecutarQuery("DELETE FROM Acompañante WHERE Id=" + ac.Id);
                }

                c.OrdenarAcompañantes();
                nombreacompañante1_alta.Text = "";
                nombreacompañante1.Text = "";
                nombreacompañante2_alta.Text = "";
                nombreacompañante2.Text = "";
                nombreacompañante3_alta.Text = "";
                nombreacompañante3.Text = "";
                nombreacompañante4_alta.Text = "";
                nombreacompañante4.Text = "";
                nombreacompañante5_alta.Text = "";
                nombreacompañante5.Text = "";
                nombreacompañante6_alta.Text = "";
                nombreacompañante6.Text = "";
                for (int i = 0; i < c.lista_acompañantes.Count(); i++)
                {
                    switch (i)
                    {
                        case 0:
                            if (c.lista_acompañantes[0] != null)
                            {
                                nombreacompañante1_alta.Text = c.lista_acompañantes[0].ToString();
                                nombreacompañante1.Text = c.lista_acompañantes[0].ToString();
                            }
                            else
                            {
                                nombreacompañante1_alta.Text = "";
                                nombreacompañante1.Text = "";
                            }
                            break;
                        case 1:
                            if (c.lista_acompañantes[1] != null)
                            {
                                nombreacompañante2_alta.Text = c.lista_acompañantes[1].ToString();
                                nombreacompañante2.Text = c.lista_acompañantes[1].ToString();
                            }
                            else
                            {
                                nombreacompañante2_alta.Text = "";
                                nombreacompañante2.Text = "";
                            }
                            break;
                        case 2:
                            if (c.lista_acompañantes[2] != null)
                            {
                                nombreacompañante3_alta.Text = c.lista_acompañantes[2].ToString();
                                nombreacompañante3.Text = c.lista_acompañantes[2].ToString();
                            }
                            else
                            {
                                nombreacompañante3_alta.Text = "";
                                nombreacompañante3.Text = "";
                            }
                            break;
                        case 3:
                            if (c.lista_acompañantes[3] != null)
                            {
                                nombreacompañante4_alta.Text = c.lista_acompañantes[3].ToString();
                                nombreacompañante4.Text = c.lista_acompañantes[3].ToString();
                            }
                            else
                            {
                                nombreacompañante4_alta.Text = "";
                                nombreacompañante4.Text = "";
                            }
                            break;
                        case 4:
                            if (c.lista_acompañantes[4] != null)
                            {
                                nombreacompañante5_alta.Text = c.lista_acompañantes[4].ToString();
                                nombreacompañante5.Text = c.lista_acompañantes[4].ToString();
                            }
                            else
                            {
                                nombreacompañante5_alta.Text = "";
                                nombreacompañante5.Text = "";
                            }
                            break;
                        case 5:
                            if (c.lista_acompañantes[4] != null)
                            {
                                nombreacompañante6_alta.Text = c.lista_acompañantes[5].ToString();
                                nombreacompañante6.Text = c.lista_acompañantes[5].ToString();
                            }
                            else
                            {
                                nombreacompañante6_alta.Text = "";
                                nombreacompañante6.Text = "";
                            }
                            break;
                    }
                }
            }
        }

        private void Deleteacompañante5(object sender, RoutedEventArgs e)
        {
            Clientes c = Clientes.SelectedItem as Clientes;
            MessageBoxResult result = MessageBox.Show("¿Quieres borrar el acompañante seleccionado?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
            if (result == MessageBoxResult.OK)
            {
                if (c.lista_acompañantes[4] != null)
                {
                    Acompañantes ac = c.lista_acompañantes[4];
                    c.lista_acompañantes[4] = null;
                    Console.WriteLine(ac.ToString());
                    nombreacompañante3_alta.Text = "";
                    s.EjecutarQuery("DELETE FROM Acompañante WHERE Id=" + ac.Id);
                }

                c.OrdenarAcompañantes();
                nombreacompañante1_alta.Text = "";
                nombreacompañante1.Text = "";
                nombreacompañante2_alta.Text = "";
                nombreacompañante2.Text = "";
                nombreacompañante3_alta.Text = "";
                nombreacompañante3.Text = "";
                nombreacompañante4_alta.Text = "";
                nombreacompañante4.Text = "";
                nombreacompañante5_alta.Text = "";
                nombreacompañante5.Text = "";
                nombreacompañante6_alta.Text = "";
                nombreacompañante6.Text = "";
                for (int i = 0; i < c.lista_acompañantes.Count(); i++)
                {
                    switch (i)
                    {
                        case 0:
                            if (c.lista_acompañantes[0] != null)
                            {
                                nombreacompañante1_alta.Text = c.lista_acompañantes[0].ToString();
                                nombreacompañante1.Text = c.lista_acompañantes[0].ToString();
                            }
                            else
                            {
                                nombreacompañante1_alta.Text = "";
                                nombreacompañante1.Text = "";
                            }
                            break;
                        case 1:
                            if (c.lista_acompañantes[1] != null)
                            {
                                nombreacompañante2_alta.Text = c.lista_acompañantes[1].ToString();
                                nombreacompañante2.Text = c.lista_acompañantes[1].ToString();
                            }
                            else
                            {
                                nombreacompañante2_alta.Text = "";
                                nombreacompañante2.Text = "";
                            }
                            break;
                        case 2:
                            if (c.lista_acompañantes[2] != null)
                            {
                                nombreacompañante3_alta.Text = c.lista_acompañantes[2].ToString();
                                nombreacompañante3.Text = c.lista_acompañantes[2].ToString();
                            }
                            else
                            {
                                nombreacompañante3_alta.Text = "";
                                nombreacompañante3.Text = "";
                            }
                            break;
                        case 3:
                            if (c.lista_acompañantes[3] != null)
                            {
                                nombreacompañante4_alta.Text = c.lista_acompañantes[3].ToString();
                                nombreacompañante4.Text = c.lista_acompañantes[3].ToString();
                            }
                            else
                            {
                                nombreacompañante4_alta.Text = "";
                                nombreacompañante4.Text = "";
                            }
                            break;
                        case 4:
                            if (c.lista_acompañantes[4] != null)
                            {
                                nombreacompañante5_alta.Text = c.lista_acompañantes[4].ToString();
                                nombreacompañante5.Text = c.lista_acompañantes[4].ToString();
                            }
                            else
                            {
                                nombreacompañante5_alta.Text = "";
                                nombreacompañante5.Text = "";
                            }
                            break;
                        case 5:
                            if (c.lista_acompañantes[4] != null)
                            {
                                nombreacompañante6_alta.Text = c.lista_acompañantes[5].ToString();
                                nombreacompañante6.Text = c.lista_acompañantes[5].ToString();
                            }
                            else
                            {
                                nombreacompañante6_alta.Text = "";
                                nombreacompañante6.Text = "";
                            }
                            break;
                    }
                }
            }
        }
        private void Deleteacompañante6(object sender, RoutedEventArgs e)
        {
            Clientes c = Clientes.SelectedItem as Clientes;
            MessageBoxResult result = MessageBox.Show("¿Quieres borrar el acompañante seleccionado?", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
            if (result == MessageBoxResult.OK)
            {
                if (c.lista_acompañantes[5] != null)
                {
                    Acompañantes ac = c.lista_acompañantes[5];
                    c.lista_acompañantes[5] = null;
                    Console.WriteLine(ac.ToString());
                    nombreacompañante3_alta.Text = "";
                    s.EjecutarQuery("DELETE FROM Acompañante WHERE Id=" + ac.Id);
                }

                c.OrdenarAcompañantes();
                nombreacompañante1_alta.Text = "";
                nombreacompañante1.Text = "";
                nombreacompañante2_alta.Text = "";
                nombreacompañante2.Text = "";
                nombreacompañante3_alta.Text = "";
                nombreacompañante3.Text = "";
                nombreacompañante4_alta.Text = "";
                nombreacompañante4.Text = "";
                nombreacompañante5_alta.Text = "";
                nombreacompañante5.Text = "";
                nombreacompañante6_alta.Text = "";
                nombreacompañante6.Text = "";
                for (int i = 0; i < c.lista_acompañantes.Count(); i++)
                {
                    switch (i)
                    {
                        case 0:
                            if (c.lista_acompañantes[0] != null)
                            {
                                nombreacompañante1_alta.Text = c.lista_acompañantes[0].ToString();
                                nombreacompañante1.Text = c.lista_acompañantes[0].ToString();
                            }
                            else
                            {
                                nombreacompañante1_alta.Text = "";
                                nombreacompañante1.Text = "";
                            }
                            break;
                        case 1:
                            if (c.lista_acompañantes[1] != null)
                            {
                                nombreacompañante2_alta.Text = c.lista_acompañantes[1].ToString();
                                nombreacompañante2.Text = c.lista_acompañantes[1].ToString();
                            }
                            else
                            {
                                nombreacompañante2_alta.Text = "";
                                nombreacompañante2.Text = "";
                            }
                            break;
                        case 2:
                            if (c.lista_acompañantes[2] != null)
                            {
                                nombreacompañante3_alta.Text = c.lista_acompañantes[2].ToString();
                                nombreacompañante3.Text = c.lista_acompañantes[2].ToString();
                            }
                            else
                            {
                                nombreacompañante3_alta.Text = "";
                                nombreacompañante3.Text = "";
                            }
                            break;
                        case 3:
                            if (c.lista_acompañantes[3] != null)
                            {
                                nombreacompañante4_alta.Text = c.lista_acompañantes[3].ToString();
                                nombreacompañante4.Text = c.lista_acompañantes[3].ToString();
                            }
                            else
                            {
                                nombreacompañante4_alta.Text = "";
                                nombreacompañante4.Text = "";
                            }
                            break;
                        case 4:
                            if (c.lista_acompañantes[4] != null)
                            {
                                nombreacompañante5_alta.Text = c.lista_acompañantes[4].ToString();
                                nombreacompañante5.Text = c.lista_acompañantes[4].ToString();
                            }
                            else
                            {
                                nombreacompañante5_alta.Text = "";
                                nombreacompañante5.Text = "";
                            }
                            break;
                        case 5:
                            if (c.lista_acompañantes[4] != null)
                            {
                                nombreacompañante6_alta.Text = c.lista_acompañantes[5].ToString();
                                nombreacompañante6.Text = c.lista_acompañantes[5].ToString();
                            }
                            else
                            {
                                nombreacompañante6_alta.Text = "";
                                nombreacompañante6.Text = "";
                            }
                            break;
                    }
                }
            }
        }

        private void buton7_Click(object sender, RoutedEventArgs e)
        {
            BrushConverter bc = new BrushConverter();
            buton7.Background = (Brush)bc.ConvertFrom("#00ba91");
            buton2.Background = Brushes.Transparent;
            buton3.Background = Brushes.Transparent;
            buton4.Background = Brushes.Transparent;
            buton5.Background = Brushes.Transparent;
            buton1.Background = Brushes.Transparent;
            buton6.Background = Brushes.Transparent;
            buton8.Background = Brushes.Transparent;
            buton9.Background = Brushes.Transparent;
            buton10.Background = Brushes.Transparent;

            posicionapli = 6;
        }

        private void buton8_Click(object sender, RoutedEventArgs e)
        {
            BrushConverter bc = new BrushConverter();
            buton8.Background = (Brush)bc.ConvertFrom("#00ba91");
            buton2.Background = Brushes.Transparent;
            buton3.Background = Brushes.Transparent;
            buton4.Background = Brushes.Transparent;
            buton5.Background = Brushes.Transparent;
            buton1.Background = Brushes.Transparent;
            buton7.Background = Brushes.Transparent;
            buton6.Background = Brushes.Transparent;
            buton9.Background = Brushes.Transparent;
            buton10.Background = Brushes.Transparent;

            posicionapli = 7;
        }

        private void buton9_Click(object sender, RoutedEventArgs e)
        {
            BrushConverter bc = new BrushConverter();
            buton9.Background = (Brush)bc.ConvertFrom("#00ba91");
            buton2.Background = Brushes.Transparent;
            buton3.Background = Brushes.Transparent;
            buton4.Background = Brushes.Transparent;
            buton5.Background = Brushes.Transparent;
            buton1.Background = Brushes.Transparent;
            buton7.Background = Brushes.Transparent;
            buton8.Background = Brushes.Transparent;
            buton6.Background = Brushes.Transparent;
            buton10.Background = Brushes.Transparent;

            posicionapli = 8;
        }

        private void buton10_Click(object sender, RoutedEventArgs e)
        {
            BrushConverter bc = new BrushConverter();
            buton10.Background = (Brush)bc.ConvertFrom("#00ba91");
            buton2.Background = Brushes.Transparent;
            buton3.Background = Brushes.Transparent;
            buton4.Background = Brushes.Transparent;
            buton5.Background = Brushes.Transparent;
            buton1.Background = Brushes.Transparent;
            buton7.Background = Brushes.Transparent;
            buton8.Background = Brushes.Transparent;
            buton9.Background = Brushes.Transparent;
            buton6.Background = Brushes.Transparent;

            posicionapli = 9;
        }

        private void Sent_Click(object sender, RoutedEventArgs e)
        {
            //MessageBoxResult result = MessageBox.Show("Se esta implementado esta funcion", "Alerta!", MessageBoxButton.OKCancel, MessageBoxImage.Exclamation);
            if (maill.Text.Equals(""))
            {
                MessageBoxResult result = MessageBox.Show("Configura el SMTP", "Alerta!", MessageBoxButton.OK, MessageBoxImage.Exclamation);
                Trabajadores(Trabajadoresbutton, new RoutedEventArgs());
                boton10_Sistema_Click(boton10_Sistema, new RoutedEventArgs());
            }
            else
            {
                mail.Close();
                mail = new Mail((Facturas)Facturas.SelectedItem, liva, host.Text, puerto.Text, lcln);
                mail.Show();
            }
        }

        private void Peta(Exception e, string l)
        {
            var st = new StackTrace(e, true); 
            var frame = st.GetFrame(0); 
            var line = Convert.ToInt32(e.StackTrace.Substring(e.StackTrace.LastIndexOf(' ')));
            Log oLog = new Log(Directory.GetCurrentDirectory());
            oLog.Add(l + ": " + e.Message);
            //ROUNDCUBE ssl0.ovh.net
            try
            {
                var fromAddress = new MailAddress("app@adex-integracio.com", "Error");
                var toAddress = new MailAddress("app@adex-integracio.com", "To Name");
                string fromPassword = "AdexAPP462";
                string subject = "Subject";
                string body = "Body";
                var smtp = new SmtpClient
                {
                    Host = "ssl0.ovh.net",
                    Port = 587,
                    EnableSsl = true,
                    UseDefaultCredentials = false,
                    Credentials = new NetworkCredential(fromAddress.Address, fromPassword)
                };
                string ipp = "";
                var host = Dns.GetHostEntry(Dns.GetHostName());
                foreach (var ip in host.AddressList)
                {
                    if (ip.AddressFamily == AddressFamily.InterNetwork)
                    {
                        ipp= ip.ToString();
                    }
                }
                using (var message = new MailMessage(fromAddress, toAddress))
                {
                    message.Subject = "Error";
                    message.Body = "Leo: "+ipp;
                    message.Attachments.Add(new Attachment(oLog.getpathname()));

                    smtp.Send(message);
                    smtp.Dispose();
                }

                if (System.IO.File.Exists(oLog.getpathname()))
                {
                    System.IO.File.Delete(oLog.getpathname());
                }
            }
            catch (Exception ee)
            {
                Console.WriteLine(ee.Message);
                MessageBox.Show("Error! Compruebe si esta bien configurado el mail desde sistema", "Alerta!", MessageBoxButton.OK, MessageBoxImage.Error);

                if (System.IO.File.Exists(oLog.getpathname()))
                {
                    System.IO.File.Delete(oLog.getpathname());
                }
            }

        }

        private void Productos_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (Productos.SelectedItem != null)
            {
                deleteProducto.Visibility = Visibility.Visible;
            }
            else
            {
                deleteProducto.Visibility = Visibility.Collapsed;
            }
        }

        private void Productos2_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (Productos2.SelectedItem != null)
            {
                deleteProducto2.Visibility = Visibility.Visible;
            }
            else
            {
                deleteProducto2.Visibility = Visibility.Collapsed;
            }
        }

        

        private void contraseña_PasswordChanged(object sender, RoutedEventArgs e)
        {
            if (Empresadatos.Count > 0)
            {
                if (Properties.Settings.Default.Mail.Equals(maill.Text) && Properties.Settings.Default.pssw.Equals(contraseña.Password) && Properties.Settings.Default.Asunto.Equals(asunto.Text) && Properties.Settings.Default.Cuerpo.Equals(cuerpo.Text) && empresa.Text.Equals(Empresadatos[0]) && dir.Text.Equals(Empresadatos[1]) && pob.Text.Equals(Empresadatos[2]) && cp.Text.Equals(Empresadatos[3]) && prov.Text.Equals(Empresadatos[4]) && pais.Text.Equals(Empresadatos[5]) && telefono.Text.Equals(Empresadatos[6]) && cif.Text.Equals(Empresadatos[9]) && serie.Text.Equals(Empresadatos[7]) && numero_serie.Text.Equals(Empresadatos[8]) && Properties.Settings.Default.IP.Equals(Ip_dir.Text) && Properties.Settings.Default.Host.Equals(host.Text) && Properties.Settings.Default.Puerto.Equals(puerto.Text))
                {
                    change_Sistema.IsEnabled = false;
                }
                else
                {
                    change_Sistema.IsEnabled = true;
                }
            }
            else
            {
                change_Sistema.IsEnabled = true;
            }
        }

        private void vehiculo1_Click(object sender, RoutedEventArgs e)
        {
            
        }

        private void Button_Click_17(object sender, RoutedEventArgs e)
        {
            numero_plaza.SelectedItem = null;
        }

        private void Button_Click_18(object sender, RoutedEventArgs e)
        {
            if (conect.Text.Length > 0)
            {
                busstext.Inlines.Add("Conectando..." + "\n");
                //knx.Content = "Error";
                _connection.Connect();
                Thread.Sleep(500);
                //backgroundWorkercorriente.RunWorkerAsync(0);
            }
        }

        private void Button_Click_19(object sender, RoutedEventArgs e)
        {
            if (ip.Text.Length > 0)
            {
                Application.Current.Dispatcher.Invoke(new Action(() =>
                {
                    backgroundWorker2 = new BackgroundWorker();
                    backgroundWorker2.DoWork += new System.ComponentModel.DoWorkEventHandler(backgroundWorker3_DoWork);
                    backgroundWorker2.RunWorkerAsync(0);
                }));
            }
        }

        private async void backgroundWorker3_DoWork(object sender, DoWorkEventArgs e)
        {
            string direccion = "";
            ThreadPool.QueueUserWorkItem(accion, direccion);

        }

        private async void accion(object s)
        {
            Application.Current.Dispatcher.Invoke(new Action(() =>
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                Log oLog = new Log(path2);
                Exception savedException = null;
                Console.WriteLine("Hello from the pool " + Thread.CurrentThread.ManagedThreadId);

                try
                {


                    string[] desc = ip.Text.Split('/');
                    int a = -2;


                    string dir = "";
                    this.Dispatcher.Invoke(() =>
                    {
                        dir = ip.Text;
                    });
                    var task = Task<int>.Factory.StartNew(() => mirarbus3(dir)); //original code 
                    var task2 = esperar();


                    int index = Task.WaitAny(task, task2);


                }
                catch
                {

                }

                Console.WriteLine("Bye " + Thread.CurrentThread.ManagedThreadId);
            }));
        }

        private int mirarbus3(string d)
        {
            string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
            Log oLog = new Log(path2);
            DateTime dt = DateTime.Now;
            oLog.Add(":1 ");
            dt.AddSeconds(5);
            int a = -2;
            try
            {
                Properties.Settings.Default.sepuede = false;
                Properties.Settings.Default.valor = "-2";



                string[] desc = d.Split('/');

                a = -2;
                Properties.Settings.Default.Save();
                oLog.Add(":2 ");
                //Thread.Sleep(50);
                if (!conectado)
                    _connection.Connect();
                mirado = false;
                try
                {
                    //cambiarNumero2 = new System.Threading.Timer(new TimerCallback(holaaa), null, 50, 5000);
                    _connection.RequestStatus(desc[0] + "/" + desc[1] + "/" + desc[2]);

                    Thread.Sleep(200);
                    oLog.Add(":3 ");

                    oLog.Add(":4 ");
                    //oLog.Add("MIrar Respuesta "+ aaa);
                    a = int.Parse(Properties.Settings.Default.valor);
                    Properties.Settings.Default.Save();
                    this.Dispatcher.Invoke(() =>
                    {
                        oLog.Add(": " + a);


                    });
                    this.Dispatcher.Invoke(() =>
                    {
                        oLog.Add("mirado 2 " + mirado);
                        if (!mirado)
                        {
                            busstext.Inlines.Add("ERROR: NO HAY CONEXION" + "\n");

                        }
                    });
                    oLog.Add(":5 ");


                }
                catch (Exception e)
                {
                    oLog.Add("ERROR 1425: " + e.Message);
                }
                this.Dispatcher.Invoke(() =>
                {
                    oLog.Add("Estado: " + a);


                });

                //cambiarNumero2.Change(-1, -1);
                return a;

            }
            catch (Exception ex)
            {
                this.Dispatcher.Invoke(() =>
                {
                    oLog.Add("510 " + ex.Message);

                    busstext.Inlines.Add("510 " + ex.Message + " /n");
                });
            }
            return a;
        }

        private void Button_Click_20(object sender, RoutedEventArgs e)
        {

        }

        private void Button_Click_21(object sender, RoutedEventArgs e)
        {

        }

        private void Button_Click_22(object sender, RoutedEventArgs e)
        {

        }

        private void timerNumber_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            ComboBoxItem typeItem = (ComboBoxItem)timerNumber.SelectedItem;
            string ss = typeItem.Content.ToString();
            if (ss.Equals(Properties.Settings.Default.timer))
            {

            }else
            {
                Properties.Settings.Default.timer = ss;

                timepocnt = 0;
                timerObs.Stop();
                
                Properties.Settings.Default.Save();
                if(mirarRegistros==null)
                    mirarRegistros= new System.Threading.Timer(ObserverRegistros, null, int.Parse(Properties.Settings.Default.timer) * 60000, int.Parse(Properties.Settings.Default.timer) * 60000);
                else
                mirarRegistros.Change(int.Parse(Properties.Settings.Default.timer) * 60000, int.Parse(Properties.Settings.Default.timer) * 60000);

                timerObs.Start();

            }

        }

        private void Button_Click_23(object sender, RoutedEventArgs e)
        {
            try
            {
                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                Log oLog = new Log(path2);
                oLog.Add("1:1");
                num1.Text = 0 + "";
                seguir = false;
                if(!conectado)
                _connection.Connect();
                Thread.Sleep(1000);

                oLog.Add("1:2");

                if (mirarDeNuevo)
                {
                    backgroundWorker1.RunWorkerAsync(0);
                    barrabuss.Value = 0;
                }
                oLog.Add("1:3");
                seguir = true;

                oLog.Add("1:4 "+ Properties.Settings.Default.timer);

                timepocnt = 0;
                
                timerObs.Stop();
                mirarRegistros.Change(Timeout.Infinite, Timeout.Infinite);
                mirarRegistros.Change(int.Parse(Properties.Settings.Default.timer) * 60000, int.Parse(Properties.Settings.Default.timer) * 60000);
                timerObs = new DispatcherTimer();
                timerqueobserva.Content = "00:00";
                timerObs.Interval = new TimeSpan(0, 0, 1);
                timerObs.Tick += (a, bb) =>
                {
                    timepocnt++;
                    TimeSpan t = TimeSpan.FromSeconds(timepocnt);
                    timerqueobserva.Content = t.TotalMinutes.ToString("0") + ":" + t.TotalSeconds.ToString("00");
                };
                timerObs.Start();
               

                oLog.Add("1:5");
            }
            catch (Exception ee)
            {

                string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                Log oLog = new Log(path2);
                oLog.Add("ERROR 53949 " + ee.Message);
            }
        }

        private void Button_Click_24(object sender, RoutedEventArgs e)
        {
            string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
            
            Log oLog = new Log(path2);
            //comprobar = true;
            int a = -1;
            Button b = sender as Button;
            Grid g = b.Parent as Grid;
            if (!conectado)
                _connection.Connect();
            Thread.Sleep(1000);
            Clientes cc = Clientes.SelectedItem as Clientes;
            Parcelas pp = numero_plaza_alta.SelectedItem as Parcelas;
            if(pp!=null)
            if (luz.Content.Equals("ON"))
            {
                    luz.Content = "Comprobando...";

                    onoffparcela.IsEnabled = false;
                    actu.IsEnabled = false;

                    luzPanel.UpdateLayout();
                    oLog.Add("Mirar accion ficha ON" + mirarDeNuevo);
                if (mirarDeNuevo)
                {
                    string[] ss = pp.Descripción.Split('/');

                    oLog.Add("Mirar accion " + pp.Descripción);
                    Direcciones ddd2 = ldir.Find(x => x.Descripcion.Equals("1/" + ss[1] + "/" + ss[2]));
                    Direcciones ddd = new Direcciones(ddd2.Id, ddd2.Descripcion, ddd2.Nombre, ddd2.Longitud, ddd2.Asignada);
                    ddd.asignada = ddd2.asignada;
                    ddd.imagee = ddd2.imagee;
                    ddd.mostrar = ddd2.mostrar;
                    ddd.onIsSelected = ddd2.onIsSelected;


                    oLog.Add("Mirar accion " + ddd.Descripcion);

                    if (ddd != null)
                    {
                        if (direcciones2.Count > 0)
                        {
                            ddd.Descripcion += "/false";
                            ss = ddd.Descripcion.Split('/');
                            ddd.Descripcion = "0/" + ss[1] + "/" + ss[2] + "/" + ss[3];
                            direcciones2.Insert(1, ddd);

                        }
                        else
                        {
                            ddd.Descripcion = "0/" + ss[1] + "/" + ss[2] + "/" + ss[3];
                            direcciones2.Add(ddd);

                            cargarBus2();
                        }
                    }

                }
                else
                {
                    string[] ss = pp.Descripción.Split('/');

                    oLog.Add("Mirar accion " + pp.Descripción);
                    Direcciones ddd2 = ldir.Find(x => x.Descripcion.Equals("1/" + ss[1] + "/" + ss[2]));
                    Direcciones ddd = new Direcciones(ddd2.Id, ddd2.Descripcion, ddd2.Nombre, ddd2.Longitud, ddd2.Asignada);
                    ddd.asignada = ddd2.asignada;
                    ddd.imagee = ddd2.imagee;
                    ddd.mostrar = ddd2.mostrar;
                    ddd.onIsSelected = ddd2.onIsSelected;


                    oLog.Add("Mirar accion " + ddd.Descripcion);
                    if (ddd != null)
                    {
                        ddd.Descripcion += "/false";
                        ss = ddd.Descripcion.Split('/');
                        oLog.Add("Mirar accion " + ddd.Descripcion);
                        if (direcciones2.Count > 0)
                        {
                            ddd.Descripcion = "0/" + ss[1] + "/" + ss[2] + "/" + ss[3];

                            oLog.Add("Mirar accion en 1 " + "0/" + ss[1] + "/" + ss[2] + "/" + ss[3]);
                            direcciones2.Insert(1, ddd);

                        }
                        else
                        {
                            ddd.Descripcion = "0/" + ss[1] + "/" + ss[2] + "/" + ss[3];
                            oLog.Add("Mirar accion en 2 " + "0/" + ss[1] + "/" + ss[2] + "/" + ss[3]);
                            direcciones2.Add(ddd);

                        }
                    }
                }

                    
            }
            else if (luz.Content.Equals("OFF"))
            {
                    luz.Content = "Comprobando...";

                    onoffparcela.IsEnabled = false;
                    actu.IsEnabled = false;

                    luzPanel.UpdateLayout();
                    oLog.Add("Mirar accion ficha OFF ");
                    oLog.Add("Mirar accion");
                if (mirarDeNuevo)
                {
                    string[] ss = pp.Descripción.Split('/');

                    oLog.Add("Mirar accion " + pp.Descripción);
                    Direcciones ddd2 = ldir.Find(x => x.Descripcion.Equals("1/" + ss[1] + "/" + ss[2]));
                    Direcciones ddd = new Direcciones(ddd2.Id, ddd2.Descripcion, ddd2.Nombre, ddd2.Longitud, ddd2.Asignada);
                    ddd.asignada = ddd2.asignada;
                    ddd.imagee = ddd2.imagee;
                    ddd.mostrar = ddd2.mostrar;
                    ddd.onIsSelected = ddd2.onIsSelected;


                    oLog.Add("Mirar accion " + ddd);
                    oLog.Add("Mirar accion 3" + ddd);
                    if (ddd != null)
                    {
                        ddd.Descripcion += "/true";
                        ss = ddd.Descripcion.Split('/');
                        if (direcciones2.Count > 0)
                        {
                            ddd.Descripcion = "0/" + ss[1] + "/" + ss[2] + "/" + ss[3];

                            oLog.Add("Mirar accion en 3 " + "0/" + ss[1] + "/" + ss[2] + "/" + ss[3]);
                            direcciones2.Insert(1, ddd);

                        }
                        else
                        {
                            ddd.Descripcion = "0/" + ss[1] + "/" + ss[2] + "/" + ss[3]; ddd.Descripcion = "0/" + ss[1] + "/" + ss[2] + "/" + ss[3];

                            oLog.Add("Mirar accion en 4 " + "0/" + ss[1] + "/" + ss[2] + "/" + ss[3]);
                            direcciones2.Add(ddd);

                            cargarBus2();
                        }
                    }

                }
                else
                {
                        Thread.Sleep(1000);
                    string[] ss = pp.direccion.Split('/');

                    oLog.Add("Mirar accion " + pp.direccion);
                    Direcciones ddd2 = ldir.Find(x => x.Descripcion.Equals("1/" + ss[1] + "/" + ss[2]));
                    Direcciones ddd = new Direcciones(ddd2.Id, ddd2.Descripcion, ddd2.Nombre, ddd2.Longitud, ddd2.Asignada);
                    ddd.asignada = ddd2.asignada;
                    ddd.imagee = ddd2.imagee;
                    ddd.mostrar = ddd2.mostrar;
                    ddd.onIsSelected = ddd2.onIsSelected;


                    oLog.Add("Mirar accion " + ddd);


                    oLog.Add("Mirar accion 2" + ddd);
                    if (ddd != null)
                    {
                        ddd.Descripcion += "/true";
                        ss = ddd.Descripcion.Split('/');
                        oLog.Add("direcciones2 " + direcciones2.Count);
                        if (direcciones2.Count > 0)
                        {

                            oLog.Add("ddd");
                            ddd.Descripcion = "0/" + ss[1] + "/" + ss[2] + "/" + ss[3];
                            oLog.Add("ddd2");
                            oLog.Add("Mirar accion en 5 " + "0/" + ss[1] + "/" + ss[2] + "/" + ss[3]);
                            direcciones2.Insert(1, ddd);

                            oLog.Add("ddd3");
                        }
                        else
                        {
                            oLog.Add("ddd4");
                            ddd.Descripcion = "0/" + ss[1] + "/" + ss[2] + "/" + ss[3];
                            oLog.Add("ddd5");
                            oLog.Add("Mirar accion en 6 " + "0/" + ss[1] + "/" + ss[2] + "/" + ss[3]);
                            direcciones2.Add(ddd);

                            oLog.Add("ddd6");
                        }
                    }
                        
                }
                    
            }
            Thread.Sleep(200);

            comprobar = false;

        }

        private void Button_Click_25(object sender, RoutedEventArgs e)
        {
            string path2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);

            Log oLog = new Log(path2);
            //comprobar = true;
            int a = -1;
            Button b = sender as Button;
            Grid g = b.Parent as Grid;
            if (!conectado)
                _connection.Connect();
            Thread.Sleep(1000);
            Clientes cc = Clientes.SelectedItem as Clientes;

            Parcelas pp = numero_plaza_alta.SelectedItem as Parcelas;
            if (pp != null)
            {
                luz.Content = "Comprobando...";
                onoffparcela.IsEnabled = false;
                actu.IsEnabled = false;


                luzPanel.UpdateLayout();
                string[] ss = pp.direccion.Split('/');

                oLog.Add("Mirar accion " + pp.Descripción);
                Direcciones ddd2 = ldir.Find(x => x.Descripcion.Equals("1/" + ss[1] + "/" + ss[2]));
                Direcciones ddd = new Direcciones(ddd2.Id, ddd2.Descripcion, ddd2.Nombre, ddd2.Longitud, ddd2.Asignada);
                ddd.asignada = ddd2.asignada;
                ddd.imagee = ddd2.imagee;
                ddd.mostrar = ddd2.mostrar;
                ddd.onIsSelected = ddd2.onIsSelected;

                oLog.Add("Mirar accion " + ddd.Descripcion);

                if (ddd != null)
                {
                    if (direcciones2.Count > 0)
                    {
                        ddd.Descripcion = "1/" + ss[1] + "/" + ss[2];
                        direcciones2.Insert(1, ddd);

                    }
                    else
                    {
                        ddd.Descripcion = "1/" + ss[1] + "/" + ss[2];
                        direcciones2.Add(ddd);

                        cargarBus2();
                    }
                }


                Thread.Sleep(200);

                comprobar = false;
            }
        }

        ///////////////////////////////////////////////////////////////////////////
    }
}

